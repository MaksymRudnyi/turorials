{
  "version": 3,
  "names": [
    "getStatistics",
    "view",
    "line",
    "state",
    "doc",
    "lineAt",
    "selection",
    "main",
    "from",
    "lineCount",
    "lines",
    "lineBreak",
    "length",
    "readOnly",
    "tabSize",
    "selectionAsSingle",
    "asSingle",
    "ranges",
    "selectionCode",
    "sliceDoc",
    "to",
    "selections",
    "map",
    "r",
    "selectedText",
    "some",
    "empty"
  ],
  "sources": [
    "../src/utils.ts"
  ],
  "sourcesContent": [
    "import { EditorSelection, SelectionRange, Line } from '@codemirror/state';\nimport { ViewUpdate } from '@codemirror/view';\n\nexport interface Statistics {\n  /** total length of the document */\n  length: number;\n  /** Get the number of lines in the editor. */\n  lineCount: number;\n  /** Get the currently line description around the given position. */\n  line: Line;\n  /** Get the proper [line-break](https://codemirror.net/docs/ref/#state.EditorState^lineSeparator) string for this state. */\n  lineBreak: string;\n  /** Returns true when the editor is [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only. */\n  readOnly: boolean;\n  /** The size (in columns) of a tab in the document, determined by the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet. */\n  tabSize: number;\n  /** Cursor Position */\n  selection: EditorSelection;\n  /** Make sure the selection only has one range. */\n  selectionAsSingle: SelectionRange;\n  /** Retrieves a list of all current selections. */\n  ranges: readonly SelectionRange[];\n  /** Get the currently selected code. */\n  selectionCode: string;\n  /**\n   * The length of the given array should be the same as the number of active selections.\n   * Replaces the content of the selections with the strings in the array.\n   */\n  selections: string[];\n  /** Return true if any text is selected. */\n  selectedText: boolean;\n}\n\nexport const getStatistics = (view: ViewUpdate): Statistics => {\n  return {\n    line: view.state.doc.lineAt(view.state.selection.main.from),\n    lineCount: view.state.doc.lines,\n    lineBreak: view.state.lineBreak,\n    length: view.state.doc.length,\n    readOnly: view.state.readOnly,\n    tabSize: view.state.tabSize,\n    selection: view.state.selection,\n    selectionAsSingle: view.state.selection.asSingle().main,\n    ranges: view.state.selection.ranges,\n    selectionCode: view.state.sliceDoc(view.state.selection.main.from, view.state.selection.main.to),\n    selections: view.state.selection.ranges.map((r) => view.state.sliceDoc(r.from, r.to)),\n    selectedText: view.state.selection.ranges.some((r) => !r.empty),\n  };\n};\n"
  ],
  "mappings": ";;;;;;;AAiCO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAkC;EAC7D,OAAO;IACLC,IAAI,EAAED,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeC,MAAf,CAAsBJ,IAAI,CAACE,KAAL,CAAWG,SAAX,CAAqBC,IAArB,CAA0BC,IAAhD,CADD;IAELC,SAAS,EAAER,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeM,KAFrB;IAGLC,SAAS,EAAEV,IAAI,CAACE,KAAL,CAAWQ,SAHjB;IAILC,MAAM,EAAEX,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeQ,MAJlB;IAKLC,QAAQ,EAAEZ,IAAI,CAACE,KAAL,CAAWU,QALhB;IAMLC,OAAO,EAAEb,IAAI,CAACE,KAAL,CAAWW,OANf;IAOLR,SAAS,EAAEL,IAAI,CAACE,KAAL,CAAWG,SAPjB;IAQLS,iBAAiB,EAAEd,IAAI,CAACE,KAAL,CAAWG,SAAX,CAAqBU,QAArB,GAAgCT,IAR9C;IASLU,MAAM,EAAEhB,IAAI,CAACE,KAAL,CAAWG,SAAX,CAAqBW,MATxB;IAULC,aAAa,EAAEjB,IAAI,CAACE,KAAL,CAAWgB,QAAX,CAAoBlB,IAAI,CAACE,KAAL,CAAWG,SAAX,CAAqBC,IAArB,CAA0BC,IAA9C,EAAoDP,IAAI,CAACE,KAAL,CAAWG,SAAX,CAAqBC,IAArB,CAA0Ba,EAA9E,CAVV;IAWLC,UAAU,EAAEpB,IAAI,CAACE,KAAL,CAAWG,SAAX,CAAqBW,MAArB,CAA4BK,GAA5B,CAAgC,UAACC,CAAD;MAAA,OAAOtB,IAAI,CAACE,KAAL,CAAWgB,QAAX,CAAoBI,CAAC,CAACf,IAAtB,EAA4Be,CAAC,CAACH,EAA9B,CAAP;IAAA,CAAhC,CAXP;IAYLI,YAAY,EAAEvB,IAAI,CAACE,KAAL,CAAWG,SAAX,CAAqBW,MAArB,CAA4BQ,IAA5B,CAAiC,UAACF,CAAD;MAAA,OAAO,CAACA,CAAC,CAACG,KAAV;IAAA,CAAjC;EAZT,CAAP;AAcD,CAfM"
}