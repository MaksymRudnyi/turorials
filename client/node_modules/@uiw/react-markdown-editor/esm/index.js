import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["prefixCls", "className", "onChange", "toolbars", "toolbarsMode", "visible", "renderPreview", "visibleEditor", "hideToolbar", "previewProps", "extensions", "previewWidth", "reExtensions"];
import React, { useState, useRef, useImperativeHandle } from 'react';
import { markdown, markdownLanguage } from '@codemirror/lang-markdown';
import { languages } from '@codemirror/language-data';
import { EditorView } from '@codemirror/view';
import CodeMirror from '@uiw/react-codemirror';
import MarkdownPreview from '@uiw/react-markdown-preview';
import ToolBar from './components/ToolBar';
import { getCommands, getModeCommands } from './commands';
import { defaultTheme } from './theme';
import "./index.css";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export * from './theme';
export * from './commands';
export * from '@uiw/react-markdown-preview';
export var scrollerStyle = EditorView.theme({
  '&.cm-editor, & .cm-scroller': {
    borderBottomRightRadius: '3px',
    borderBottomLeftRadius: '3px'
  }
});
var MarkdownEditor = /*#__PURE__*/React.forwardRef(MarkdownEditorInternal);
MarkdownEditor.Markdown = MarkdownPreview;
export default MarkdownEditor;

function MarkdownEditorInternal(props, ref) {
  var {
    prefixCls = 'md-editor',
    className,
    onChange,
    toolbars = getCommands(),
    toolbarsMode = getModeCommands(),
    visible = true,
    renderPreview,
    visibleEditor = true,
    hideToolbar = true,
    previewProps = {},
    extensions = [],
    previewWidth = '50%',
    reExtensions
  } = props,
      codemirrorProps = _objectWithoutPropertiesLoose(props, _excluded);

  var [value, setValue] = useState(props.value || '');
  var codeMirror = useRef(null);
  var container = useRef(null);
  var containerEditor = useRef(null);
  var preview = useRef(null);
  useImperativeHandle(ref, () => ({
    editor: codeMirror,
    preview: preview
  }), [codeMirror]);
  var toolBarProps = {
    preview: preview,
    editor: codeMirror,
    container: container,
    containerEditor: containerEditor,
    editorProps: _extends({}, props, {
      previewWidth
    })
  };
  var height = typeof codemirrorProps.height === 'number' ? codemirrorProps.height + "px" : codemirrorProps.height;
  var extensionsData = reExtensions ? reExtensions : [markdown({
    base: markdownLanguage,
    codeLanguages: languages
  }), scrollerStyle, ...extensions];
  var clsPreview = prefixCls + "-preview";
  var cls = [prefixCls, 'wmde-markdown-var', className].filter(Boolean).join(' ');
  previewProps['source'] = value;

  var handleChange = (value, viewUpdate) => {
    setValue(value);
    onChange && onChange(value, viewUpdate);
  };

  return /*#__PURE__*/_jsxs("div", {
    className: cls,
    ref: container,
    children: [hideToolbar && /*#__PURE__*/_jsxs("div", {
      className: prefixCls + "-toolbar-warp",
      children: [/*#__PURE__*/_jsx(ToolBar, _extends({}, toolBarProps, {
        toolbars: toolbars
      })), /*#__PURE__*/_jsx(ToolBar, _extends({}, toolBarProps, {
        toolbars: toolbarsMode,
        mode: true
      }))]
    }), /*#__PURE__*/_jsxs("div", {
      className: prefixCls + "-content",
      style: {
        height: codemirrorProps.height
      },
      children: [/*#__PURE__*/_jsx("div", {
        className: prefixCls + "-content-editor",
        ref: containerEditor,
        children: visibleEditor && /*#__PURE__*/_jsx(CodeMirror, _extends({
          theme: defaultTheme
        }, codemirrorProps, {
          extensions: extensionsData,
          height: height,
          ref: codeMirror,
          onChange: handleChange
        }))
      }), /*#__PURE__*/_jsx("div", {
        className: clsPreview,
        ref: preview,
        children: renderPreview ? renderPreview(previewProps, !!visible) : /*#__PURE__*/_jsx(MarkdownPreview, _extends({}, previewProps, {
          "data-visible": !!visible
        }))
      })]
    })]
  });
}
//# sourceMappingURL=index.js.map