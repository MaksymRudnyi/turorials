export type Node = import('unist').Node
export type Parent = import('unist').Parent
export type Root = import('hast').Root
export type Element = import('hast').Element
export type Properties = import('hast').Properties
export type HastParent = Element | Root
export type HastNode = import('hast').Parent['children'][number] | Root
export type ElementChild = Element['children'][number]
export type PropertyValue = Properties[string]
export type Selector = import('css-selector-parser').Selector
export type Selectors = import('css-selector-parser').Selectors
export type RuleSet = import('css-selector-parser').RuleSet
export type Rule = import('css-selector-parser').Rule
export type RulePseudo = import('css-selector-parser').RulePseudo
export type AttrValueType = import('css-selector-parser').AttrValueType
/**
 * Fix for types.
 */
export type Query = Selector | Rule | RulePseudo
export type RuleAttr = {
  name: string
  operator?: string | undefined
  valueType?: import('css-selector-parser').AttrValueType | undefined
  /**
   * More specific type for registered selector pseudos.
   */
  value?: string | undefined
}
export type RulePseudoSelector = {
  name: string
  valueType: 'selector'
  /**
   * Overwrite to compile nth-checks once.
   */
  value: Selector
}
export type RulePseudoNth = {
  name: string
  valueType: 'function'
  value: (index: number) => boolean
}
export type Space = 'html' | 'svg'
export type Direction = 'auto' | 'ltr' | 'rtl'
export type Schema = typeof import('property-information').html
export type Info = Schema['property'][string]
export type SelectState = {
  scopeElements?: import('hast').Element[] | undefined
  iterator?: SelectIterator | undefined
  one?: boolean | undefined
  shallow?: boolean | undefined
  index?: boolean | undefined
  found?: boolean | undefined
  space?: Space | undefined
  schema?: import('property-information/lib/util/schema').Schema | undefined
  language?: string | undefined
  direction?: Direction | undefined
  editableOrEditingHost?: boolean | undefined
  /**
   * Track siblings
   */
  typeIndex?: number | undefined
  /**
   * Track siblings
   */
  elementIndex?: number | undefined
  /**
   * Track siblings
   */
  typeCount?: number | undefined
  /**
   * Track siblings
   */
  elementCount?: number | undefined
}
export type SelectIterator = (
  query: Rule,
  node: HastNode,
  index: number,
  parent: Parent | null,
  state: SelectState
) => any
export type Handler = (
  query: Rule,
  node: HastNode,
  index: number | null,
  parent: Parent | null,
  state: SelectState
) => void
