{"version":3,"file":"rehype-prism-plus.es.js","sources":["../src/generator.js","../src/common.js","../src/all.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { filter } from 'unist-util-filter'\nimport rangeParser from 'parse-numeric-range'\n\n/**\n * @param {Element} node\n * @return {string|null}\n */\nconst getLanguage = (node) => {\n  const className = node.properties.className\n  //@ts-ignore\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Create container AST for node lines\n *\n * @param {number} number\n * @return {Element[]}\n */\nconst createLineNodes = (number) => {\n  const a = new Array(number)\n  for (let i = 0; i < number; i++) {\n    a[i] = {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: [] },\n      children: [],\n    }\n  }\n  return a\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n * Add a node start and end line position information for each text node\n *\n * @return { (ast:Element['children']) => Element['children'] }\n *\n */\nconst addNodePositionClosure = () => {\n  let startLineNum = 1\n  /**\n   * @param {Element['children']} ast\n   * @return {Element['children']}\n   */\n  const addNodePosition = (ast) => {\n    return ast.reduce((result, node) => {\n      if (node.type === 'text') {\n        const value = /** @type {string} */ (node.value)\n        const numLines = (value.match(/\\n/g) || '').length\n        if (numLines === 0) {\n          node.position = {\n            // column: 1 is needed to avoid error with @next/mdx\n            // https://github.com/timlrx/rehype-prism-plus/issues/44\n            start: { line: startLineNum, column: 1 },\n            end: { line: startLineNum, column: 1 },\n          }\n          result.push(node)\n        } else {\n          const lines = value.split('\\n')\n          for (const [i, line] of lines.entries()) {\n            result.push({\n              type: 'text',\n              value: i === lines.length - 1 ? line : line + '\\n',\n              position: {\n                start: { line: startLineNum + i, column: 1 },\n                end: { line: startLineNum + i, column: 1 },\n              },\n            })\n          }\n        }\n        startLineNum = startLineNum + numLines\n\n        return result\n      }\n\n      if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n        const initialLineNum = startLineNum\n        // @ts-ignore\n        node.children = addNodePosition(node.children, startLineNum)\n        result.push(node)\n        node.position = {\n          start: { line: initialLineNum, column: 1 },\n          end: { line: startLineNum, column: 1 },\n        }\n        return result\n      }\n\n      result.push(node)\n      return result\n    }, [])\n  }\n  return addNodePosition\n}\n\n/**\n * Rehype prism plugin generator that highlights code blocks with refractor (prismjs)\n *\n * Pass in your own refractor object with the required languages registered:\n * https://github.com/wooorm/refractor#refractorregistersyntax\n *\n * @param {import('refractor/lib/core').Refractor} refractor\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrismGenerator = (refractor) => {\n  return (options = {}) => {\n    return (tree) => {\n      visit(tree, 'element', visitor)\n    }\n\n    /**\n     * @param {Element} node\n     * @param {number} index\n     * @param {Element} parent\n     */\n    function visitor(node, index, parent) {\n      if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n        return\n      }\n\n      let meta = node.data && node.data.meta ? /** @type {string} */ (node.data.meta) : ''\n      // Coerce className to array\n      if (node.properties.className) {\n        if (typeof node.properties.className === 'boolean') {\n          node.properties.className = []\n        } else if (!Array.isArray(node.properties.className)) {\n          node.properties.className = [node.properties.className]\n        }\n      } else {\n        node.properties.className = []\n      }\n      node.properties.className.push('code-highlight')\n      const lang = getLanguage(node)\n\n      /** @type {Element} */\n      let refractorRoot\n\n      // Syntax highlight\n      if (lang) {\n        try {\n          let rootLang\n          if (lang?.includes('diff-')){\n            rootLang=lang.split('-')[1]\n          } else{\n            rootLang=lang\n          }\n          // @ts-ignore\n          refractorRoot = refractor.highlight(toString(node), rootLang)\n          // @ts-ignore className is already an array\n          parent.properties.className = (parent.properties.className || []).concat(\n            'language-' + rootLang\n          )\n        } catch (err) {\n          if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n            refractorRoot = node\n          } else {\n            throw err\n          }\n        }\n      } else {\n        refractorRoot = node\n      }\n\n      refractorRoot.children = addNodePositionClosure()(refractorRoot.children)\n\n      // Add position info to root\n      if (refractorRoot.children.length > 0) {\n        refractorRoot.position = {\n          start: { line: refractorRoot.children[0].position.start.line, column: 0 },\n          end: {\n            line: refractorRoot.children[refractorRoot.children.length - 1].position.end.line,\n            column: 0,\n          },\n        }\n      } else {\n        refractorRoot.position = {\n          start: { line: 0, column: 0 },\n          end: { line: 0, column: 0 },\n        }\n      }\n\n      const shouldHighlightLine = calculateLinesToHighlight(meta)\n      const startingLineNumber = calculateStartingLine(meta)\n      const codeLineArray = createLineNodes(refractorRoot.position.end.line)\n\n      const falseShowLineNumbersStr = [\n        'showlinenumbers=false',\n        'showlinenumbers=\"false\"',\n        'showlinenumbers={false}',\n      ]\n      for (const [i, line] of codeLineArray.entries()) {\n        // Default class name for each line\n        line.properties.className = ['code-line']\n\n        // Syntax highlight\n        const treeExtract = filter(\n          refractorRoot,\n          (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n        )\n        line.children = treeExtract.children\n\n        // Line number\n        if (\n          (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) ||\n            options.showLineNumbers) &&\n          !falseShowLineNumbersStr.some((str) => meta.toLowerCase().includes(str))\n        ) {\n          line.properties.line = [(i + startingLineNumber).toString()]\n          line.properties.className.push('line-number')\n        }\n\n        // Line highlight\n        if (shouldHighlightLine(i)) {\n          line.properties.className.push('highlight-line')\n        }\n\n        // Diff classes\n        if ((lang === 'diff' || lang?.includes('diff-')) && toString(line).substring(0, 1) === '-') {\n          line.properties.className.push('deleted')\n        } else if ((lang === 'diff' || lang?.includes('diff-')) && toString(line).substring(0, 1) === '+') {\n          line.properties.className.push('inserted')\n        }\n      }\n\n      // Remove possible trailing line when splitting by \\n which results in empty array\n      if (\n        codeLineArray.length > 0 &&\n        toString(codeLineArray[codeLineArray.length - 1]).trim() === ''\n      ) {\n        codeLineArray.pop()\n      }\n\n      node.children = codeLineArray\n    }\n  }\n}\n\nexport default rehypePrismGenerator\n","import { refractor as refractorCommon } from 'refractor/lib/common.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * Supported languages: https://github.com/wooorm/refractor#data\n *\n * Consider using rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismCommon = rehypePrismGenerator(refractorCommon)\n\nexport default rehypePrismCommon\n","import { refractor as refractorAll } from 'refractor/lib/all.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * This supports all the languages and should be used on the server side.\n *\n * Consider using rehypePrismCommon or rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismAll = rehypePrismGenerator(refractorAll)\n\nexport default rehypePrismAll\n"],"names":["rehypePrismGenerator","refractor","options","tree","visit","visitor","node","index","parent","tagName","meta","data","properties","className","Array","isArray","push","refractorRoot","startLineNum","lang","classListItem","slice","toLowerCase","getLanguage","rootLang","includes","split","highlight","toString","concat","err","ignoreMissing","test","message","children","addNodePosition","ast","reduce","result","type","value","numLines","match","length","position","start","line","column","end","lines","entries","i","Object","prototype","hasOwnProperty","call","initialLineNum","shouldHighlightLine","RE","parsedMeta","map","str","trim","join","strlineNumbers","exec","lineNumbers","rangeParser","calculateLinesToHighlight","startingLineNumber","Number","groups","calculateStartingLine","codeLineArray","number","a","createLineNodes","falseShowLineNumbersStr","treeExtract","filter","showLineNumbers","some","substring","pop","rehypePrismCommon","refractorCommon","rehypePrismAll","refractorAll"],"mappings":"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"}