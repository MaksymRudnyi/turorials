{"ast":null,"code":"const regex = require('./regex.js');\n\nmodule.exports = BananaSlug;\nconst own = Object.hasOwnProperty;\n\nfunction BananaSlug() {\n  const self = this;\n  if (!(self instanceof BananaSlug)) return new BananaSlug();\n  self.reset();\n}\n/**\n * Generate a unique slug.\n * @param  {string} value String of text to slugify\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\n * @return {string}       A unique slug string\n */\n\n\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  const self = this;\n  let slug = slugger(value, maintainCase === true);\n  const originalSlug = slug;\n\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++;\n    slug = originalSlug + '-' + self.occurrences[originalSlug];\n  }\n\n  self.occurrences[slug] = 0;\n  return slug;\n};\n/**\n * Reset - Forget all previous slugs\n * @return void\n */\n\n\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null);\n};\n\nfunction slugger(string, maintainCase) {\n  if (typeof string !== 'string') return '';\n  if (!maintainCase) string = string.toLowerCase();\n  return string.replace(regex, '').replace(/ /g, '-');\n}\n\nBananaSlug.slug = slugger;","map":{"version":3,"names":["regex","require","module","exports","BananaSlug","own","Object","hasOwnProperty","self","reset","prototype","slug","value","maintainCase","slugger","originalSlug","call","occurrences","create","string","toLowerCase","replace"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/github-slugger/index.js"],"sourcesContent":["const regex = require('./regex.js')\n\nmodule.exports = BananaSlug\n\nconst own = Object.hasOwnProperty\n\nfunction BananaSlug () {\n  const self = this\n\n  if (!(self instanceof BananaSlug)) return new BananaSlug()\n\n  self.reset()\n}\n\n/**\n * Generate a unique slug.\n * @param  {string} value String of text to slugify\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\n * @return {string}       A unique slug string\n */\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  const self = this\n  let slug = slugger(value, maintainCase === true)\n  const originalSlug = slug\n\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++\n    slug = originalSlug + '-' + self.occurrences[originalSlug]\n  }\n\n  self.occurrences[slug] = 0\n\n  return slug\n}\n\n/**\n * Reset - Forget all previous slugs\n * @return void\n */\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null)\n}\n\nfunction slugger (string, maintainCase) {\n  if (typeof string !== 'string') return ''\n  if (!maintainCase) string = string.toLowerCase()\n  return string.replace(regex, '').replace(/ /g, '-')\n}\n\nBananaSlug.slug = slugger\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AAEA,MAAMC,GAAG,GAAGC,MAAM,CAACC,cAAnB;;AAEA,SAASH,UAAT,GAAuB;EACrB,MAAMI,IAAI,GAAG,IAAb;EAEA,IAAI,EAAEA,IAAI,YAAYJ,UAAlB,CAAJ,EAAmC,OAAO,IAAIA,UAAJ,EAAP;EAEnCI,IAAI,CAACC,KAAL;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAL,UAAU,CAACM,SAAX,CAAqBC,IAArB,GAA4B,UAAUC,KAAV,EAAiBC,YAAjB,EAA+B;EACzD,MAAML,IAAI,GAAG,IAAb;EACA,IAAIG,IAAI,GAAGG,OAAO,CAACF,KAAD,EAAQC,YAAY,KAAK,IAAzB,CAAlB;EACA,MAAME,YAAY,GAAGJ,IAArB;;EAEA,OAAON,GAAG,CAACW,IAAJ,CAASR,IAAI,CAACS,WAAd,EAA2BN,IAA3B,CAAP,EAAyC;IACvCH,IAAI,CAACS,WAAL,CAAiBF,YAAjB;IACAJ,IAAI,GAAGI,YAAY,GAAG,GAAf,GAAqBP,IAAI,CAACS,WAAL,CAAiBF,YAAjB,CAA5B;EACD;;EAEDP,IAAI,CAACS,WAAL,CAAiBN,IAAjB,IAAyB,CAAzB;EAEA,OAAOA,IAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;;;AACAP,UAAU,CAACM,SAAX,CAAqBD,KAArB,GAA6B,YAAY;EACvC,KAAKQ,WAAL,GAAmBX,MAAM,CAACY,MAAP,CAAc,IAAd,CAAnB;AACD,CAFD;;AAIA,SAASJ,OAAT,CAAkBK,MAAlB,EAA0BN,YAA1B,EAAwC;EACtC,IAAI,OAAOM,MAAP,KAAkB,QAAtB,EAAgC,OAAO,EAAP;EAChC,IAAI,CAACN,YAAL,EAAmBM,MAAM,GAAGA,MAAM,CAACC,WAAP,EAAT;EACnB,OAAOD,MAAM,CAACE,OAAP,CAAerB,KAAf,EAAsB,EAAtB,EAA0BqB,OAA1B,CAAkC,IAAlC,EAAwC,GAAxC,CAAP;AACD;;AAEDjB,UAAU,CAACO,IAAX,GAAkBG,OAAlB"},"metadata":{},"sourceType":"script"}