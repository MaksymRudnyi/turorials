{"ast":null,"code":"// @ts-nocheck\nimport refractorCss from './css.js';\ncssExtras.displayName = 'css-extras';\ncssExtras.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function cssExtras(Prism) {\n  Prism.register(refractorCss);\n\n  (function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var selectorInside;\n    Prism.languages.css.selector = {\n      pattern: Prism.languages.css.selector.pattern,\n      lookbehind: true,\n      inside: selectorInside = {\n        'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n        'pseudo-class': /:[-\\w]+/,\n        class: /\\.[-\\w]+/,\n        id: /#[-\\w]+/,\n        attribute: {\n          pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n          greedy: true,\n          inside: {\n            punctuation: /^\\[|\\]$/,\n            'case-sensitivity': {\n              pattern: /(\\s)[si]$/i,\n              lookbehind: true,\n              alias: 'keyword'\n            },\n            namespace: {\n              pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\|$/\n              }\n            },\n            'attr-name': {\n              pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n              lookbehind: true\n            },\n            'attr-value': [string, {\n              pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n              lookbehind: true\n            }],\n            operator: /[|~*^$]?=/\n          }\n        },\n        'n-th': [{\n          pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n          lookbehind: true,\n          inside: {\n            number: /[\\dn]+/,\n            operator: /[+-]/\n          }\n        }, {\n          pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n          lookbehind: true\n        }],\n        combinator: />|\\+|~|\\|\\|/,\n        // the `tag` token has been existed and removed.\n        // because we can't find a perfect tokenize to match it.\n        // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n        punctuation: /[(),]/\n      }\n    };\n    Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n    Prism.languages.insertBefore('css', 'property', {\n      variable: {\n        pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n        lookbehind: true\n      }\n    });\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n      lookbehind: true\n    }; // 123 -123 .123 -.123 12.3 -12.3\n\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    };\n    Prism.languages.insertBefore('css', 'function', {\n      operator: {\n        pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n        lookbehind: true\n      },\n      // CAREFUL!\n      // Previewers and Inline color use hexcode and color.\n      hexcode: {\n        pattern: /\\B#[\\da-f]{3,8}\\b/i,\n        alias: 'color'\n      },\n      color: [{\n        pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|RebeccaPurple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n        inside: {\n          unit: unit,\n          number: number,\n          function: /[\\w-]+(?=\\()/,\n          punctuation: /[(),]/\n        }\n      }],\n      // it's important that there is no boundary assertion after the hex digits\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      number: number\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorCss","cssExtras","displayName","aliases","Prism","register","string","selectorInside","languages","css","selector","pattern","lookbehind","inside","class","id","attribute","RegExp","source","greedy","punctuation","alias","namespace","operator","number","combinator","insertBefore","variable","unit","hexcode","color","function","entity"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/css-extras.js"],"sourcesContent":["// @ts-nocheck\nimport refractorCss from './css.js'\ncssExtras.displayName = 'css-extras'\ncssExtras.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function cssExtras(Prism) {\n  Prism.register(refractorCss)\n  ;(function (Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var selectorInside\n    Prism.languages.css.selector = {\n      pattern: Prism.languages.css.selector.pattern,\n      lookbehind: true,\n      inside: (selectorInside = {\n        'pseudo-element':\n          /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n        'pseudo-class': /:[-\\w]+/,\n        class: /\\.[-\\w]+/,\n        id: /#[-\\w]+/,\n        attribute: {\n          pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n          greedy: true,\n          inside: {\n            punctuation: /^\\[|\\]$/,\n            'case-sensitivity': {\n              pattern: /(\\s)[si]$/i,\n              lookbehind: true,\n              alias: 'keyword'\n            },\n            namespace: {\n              pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n              lookbehind: true,\n              inside: {\n                punctuation: /\\|$/\n              }\n            },\n            'attr-name': {\n              pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n              lookbehind: true\n            },\n            'attr-value': [\n              string,\n              {\n                pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n                lookbehind: true\n              }\n            ],\n            operator: /[|~*^$]?=/\n          }\n        },\n        'n-th': [\n          {\n            pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n            lookbehind: true,\n            inside: {\n              number: /[\\dn]+/,\n              operator: /[+-]/\n            }\n          },\n          {\n            pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n            lookbehind: true\n          }\n        ],\n        combinator: />|\\+|~|\\|\\|/,\n        // the `tag` token has been existed and removed.\n        // because we can't find a perfect tokenize to match it.\n        // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n        punctuation: /[(),]/\n      })\n    }\n    Prism.languages.css['atrule'].inside['selector-function-argument'].inside =\n      selectorInside\n    Prism.languages.insertBefore('css', 'property', {\n      variable: {\n        pattern:\n          /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n        lookbehind: true\n      }\n    })\n    var unit = {\n      pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n      lookbehind: true\n    } // 123 -123 .123 -.123 12.3 -12.3\n\n    var number = {\n      pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n      lookbehind: true\n    }\n    Prism.languages.insertBefore('css', 'function', {\n      operator: {\n        pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n        lookbehind: true\n      },\n      // CAREFUL!\n      // Previewers and Inline color use hexcode and color.\n      hexcode: {\n        pattern: /\\B#[\\da-f]{3,8}\\b/i,\n        alias: 'color'\n      },\n      color: [\n        {\n          pattern:\n            /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|RebeccaPurple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n          inside: {\n            unit: unit,\n            number: number,\n            function: /[\\w-]+(?=\\()/,\n            punctuation: /[(),]/\n          }\n        }\n      ],\n      // it's important that there is no boundary assertion after the hex digits\n      entity: /\\\\[\\da-f]{1,8}/i,\n      unit: unit,\n      number: number\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}