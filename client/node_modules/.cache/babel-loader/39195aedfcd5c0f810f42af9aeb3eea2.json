{"ast":null,"code":"import { insertTextAtPosition } from '../../utils/InsertTextAtPosition';\nimport { TextAreaTextApi } from '../../commands';\nimport { insertBeforeEachLine } from '../../commands/list';\n/**\n * - `13` - `Enter`\n * - `9` - `Tab`\n */\n\nfunction stopPropagation(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\nexport default function handleKeyDown(e, tabSize, defaultTabEnable) {\n  if (tabSize === void 0) {\n    tabSize = 2;\n  }\n\n  if (defaultTabEnable === void 0) {\n    defaultTabEnable = false;\n  }\n\n  var target = e.target;\n  var starVal = target.value.substr(0, target.selectionStart);\n  var valArr = starVal.split('\\n');\n  var currentLineStr = valArr[valArr.length - 1];\n  var textArea = new TextAreaTextApi(target);\n  /**\n   * `9` - `Tab`\n   */\n\n  if (!defaultTabEnable && e.code && e.code.toLowerCase() === 'tab') {\n    stopPropagation(e);\n    var space = new Array(tabSize + 1).join('  ');\n\n    if (target.selectionStart !== target.selectionEnd) {\n      var _star = target.value.substring(0, target.selectionStart).split('\\n');\n\n      var _end = target.value.substring(0, target.selectionEnd).split('\\n');\n\n      var modifiedTextLine = [];\n\n      _end.forEach((item, idx) => {\n        if (item !== _star[idx]) {\n          modifiedTextLine.push(item);\n        }\n      });\n\n      var modifiedText = modifiedTextLine.join('\\n');\n      var oldSelectText = target.value.substring(target.selectionStart, target.selectionEnd);\n      var newStarNum = target.value.substring(0, target.selectionStart).length;\n      textArea.setSelectionRange({\n        start: target.value.indexOf(modifiedText),\n        end: target.selectionEnd\n      });\n      var modifiedTextObj = insertBeforeEachLine(modifiedText, e.shiftKey ? '' : space);\n      var text = modifiedTextObj.modifiedText;\n\n      if (e.shiftKey) {\n        text = text.split('\\n').map(item => item.replace(new RegExp(\"^\" + space), '')).join('\\n');\n      }\n\n      textArea.replaceSelection(text);\n      var startTabSize = e.shiftKey ? -tabSize : tabSize;\n      var endTabSize = e.shiftKey ? -modifiedTextLine.length * tabSize : modifiedTextLine.length * tabSize;\n      textArea.setSelectionRange({\n        start: newStarNum + startTabSize,\n        end: newStarNum + oldSelectText.length + endTabSize\n      });\n    } else {\n      return insertTextAtPosition(target, space);\n    }\n  } else if (e.code && e.code.toLowerCase() === 'enter' && (/^(-|\\*)\\s/.test(currentLineStr) || /^\\d+.\\s/.test(currentLineStr))) {\n    /**\n     * `13` - `Enter`\n     */\n    stopPropagation(e);\n    var startStr = '\\n- ';\n\n    if (currentLineStr.startsWith('*')) {\n      startStr = '\\n* ';\n    }\n\n    if (currentLineStr.startsWith('- [ ]')) {\n      startStr = '\\n- [ ] ';\n    } else if (currentLineStr.startsWith('- [X]')) {\n      startStr = '\\n- [X] ';\n    }\n\n    if (/^\\d+.\\s/.test(currentLineStr)) {\n      startStr = \"\\n\" + (parseInt(currentLineStr) + 1) + \". \";\n    }\n\n    return insertTextAtPosition(target, startStr);\n  }\n}","map":{"version":3,"sources":["../../../src/components/TextArea/handleKeyDown.tsx"],"names":["e","tabSize","defaultTabEnable","target","starVal","valArr","currentLineStr","textArea","stopPropagation","space","_star","_end","modifiedTextLine","item","modifiedText","oldSelectText","newStarNum","start","end","selectionEnd","modifiedTextObj","insertBeforeEachLine","text","startTabSize","endTabSize","insertTextAtPosition","startStr","parseInt"],"mappings":"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","sourcesContent":["import { insertTextAtPosition } from '../../utils/InsertTextAtPosition';\nimport { TextAreaTextApi } from '../../commands';\nimport { insertBeforeEachLine } from '../../commands/list';\n\n/**\n * - `13` - `Enter`\n * - `9` - `Tab`\n */\nfunction stopPropagation(e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\nexport default function handleKeyDown(\n  e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>,\n  tabSize: number = 2,\n  defaultTabEnable: boolean = false,\n) {\n  const target = e.target as HTMLTextAreaElement;\n  const starVal = target.value.substr(0, target.selectionStart);\n  const valArr = starVal.split('\\n');\n  const currentLineStr = valArr[valArr.length - 1];\n  const textArea = new TextAreaTextApi(target);\n\n  /**\n   * `9` - `Tab`\n   */\n  if (!defaultTabEnable && e.code && e.code.toLowerCase() === 'tab') {\n    stopPropagation(e);\n    const space = new Array(tabSize + 1).join('  ');\n    if (target.selectionStart !== target.selectionEnd) {\n      const _star = target.value.substring(0, target.selectionStart).split('\\n');\n      const _end = target.value.substring(0, target.selectionEnd).split('\\n');\n      const modifiedTextLine: string[] = [];\n      _end.forEach((item, idx) => {\n        if (item !== _star[idx]) {\n          modifiedTextLine.push(item);\n        }\n      });\n      const modifiedText = modifiedTextLine.join('\\n');\n      const oldSelectText = target.value.substring(target.selectionStart, target.selectionEnd);\n      const newStarNum = target.value.substring(0, target.selectionStart).length;\n\n      textArea.setSelectionRange({\n        start: target.value.indexOf(modifiedText),\n        end: target.selectionEnd,\n      });\n\n      const modifiedTextObj = insertBeforeEachLine(modifiedText, e.shiftKey ? '' : space);\n\n      let text = modifiedTextObj.modifiedText;\n      if (e.shiftKey) {\n        text = text\n          .split('\\n')\n          .map((item) => item.replace(new RegExp(`^${space}`), ''))\n          .join('\\n');\n      }\n      textArea.replaceSelection(text);\n\n      let startTabSize = e.shiftKey ? -tabSize : tabSize;\n      let endTabSize = e.shiftKey ? -modifiedTextLine.length * tabSize : modifiedTextLine.length * tabSize;\n\n      textArea.setSelectionRange({\n        start: newStarNum + startTabSize,\n        end: newStarNum + oldSelectText.length + endTabSize,\n      });\n    } else {\n      return insertTextAtPosition(target, space);\n    }\n  } else if (\n    e.code &&\n    e.code.toLowerCase() === 'enter' &&\n    (/^(-|\\*)\\s/.test(currentLineStr) || /^\\d+.\\s/.test(currentLineStr))\n  ) {\n    /**\n     * `13` - `Enter`\n     */\n    stopPropagation(e);\n    let startStr = '\\n- ';\n\n    if (currentLineStr.startsWith('*')) {\n      startStr = '\\n* ';\n    }\n\n    if (currentLineStr.startsWith('- [ ]')) {\n      startStr = '\\n- [ ] ';\n    } else if (currentLineStr.startsWith('- [X]')) {\n      startStr = '\\n- [X] ';\n    }\n\n    if (/^\\d+.\\s/.test(currentLineStr)) {\n      startStr = `\\n${parseInt(currentLineStr) + 1}. `;\n    }\n    return insertTextAtPosition(target, startStr);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}