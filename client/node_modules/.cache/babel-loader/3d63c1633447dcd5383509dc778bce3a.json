{"ast":null,"code":"// @ts-nocheck\nhttp.displayName = 'http';\nhttp.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function http(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i');\n    }\n\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [{\n            pattern: headerValueOf(/Content-Security-Policy/.source),\n            lookbehind: true,\n            alias: ['csp', 'languages-csp'],\n            inside: Prism.languages.csp\n          }, {\n            pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n            lookbehind: true,\n            alias: ['hpkp', 'languages-hpkp'],\n            inside: Prism.languages.hpkp\n          }, {\n            pattern: headerValueOf(/Strict-Transport-Security/.source),\n            lookbehind: true,\n            alias: ['hsts', 'languages-hsts'],\n            inside: Prism.languages.hsts\n          }, {\n            pattern: headerValueOf(/[^:]+/.source),\n            lookbehind: true\n          }],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    }; // Declare which types can also be suffixes\n\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n\n\n    var options;\n\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp('(' + /content-type:\\s*/.source + pattern + /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source + ')' + // This is a little interesting:\n          // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n          // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n          // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n          // the body does not start with a [\\w-] character (as headers do).\n          /[^ \\t\\w-][\\s\\S]*/.source, 'i'),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        };\n      }\n    }\n\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options);\n    }\n  })(Prism);\n}","map":{"version":3,"names":["http","displayName","aliases","Prism","headerValueOf","name","RegExp","languages","pattern","inside","method","alias","lookbehind","uri","header","source","csp","hpkp","hsts","punctuation","langs","httpLanguages","javascript","json","xml","html","css","plain","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","insertBefore"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/http.js"],"sourcesContent":["// @ts-nocheck\nhttp.displayName = 'http'\nhttp.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function http(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function headerValueOf(name) {\n      return RegExp('(^(?:' + name + '):[ \\t]*(?![ \\t]))[^]+', 'i')\n    }\n\n    Prism.languages.http = {\n      'request-line': {\n        pattern:\n          /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n        inside: {\n          // HTTP Method\n          method: {\n            pattern: /^[A-Z]+\\b/,\n            alias: 'property'\n          },\n          // Request Target e.g. http://example.com, /path/to/file\n          'request-target': {\n            pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n            lookbehind: true,\n            alias: 'url',\n            inside: Prism.languages.uri\n          },\n          // HTTP Version\n          'http-version': {\n            pattern: /^(\\s)HTTP\\/[\\d.]+/,\n            lookbehind: true,\n            alias: 'property'\n          }\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n        inside: {\n          // HTTP Version\n          'http-version': {\n            pattern: /^HTTP\\/[\\d.]+/,\n            alias: 'property'\n          },\n          // Status Code\n          'status-code': {\n            pattern: /^(\\s)\\d+(?=\\s)/,\n            lookbehind: true,\n            alias: 'number'\n          },\n          // Reason Phrase\n          'reason-phrase': {\n            pattern: /^(\\s).+/,\n            lookbehind: true,\n            alias: 'string'\n          }\n        }\n      },\n      header: {\n        pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n        inside: {\n          'header-value': [\n            {\n              pattern: headerValueOf(/Content-Security-Policy/.source),\n              lookbehind: true,\n              alias: ['csp', 'languages-csp'],\n              inside: Prism.languages.csp\n            },\n            {\n              pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),\n              lookbehind: true,\n              alias: ['hpkp', 'languages-hpkp'],\n              inside: Prism.languages.hpkp\n            },\n            {\n              pattern: headerValueOf(/Strict-Transport-Security/.source),\n              lookbehind: true,\n              alias: ['hsts', 'languages-hsts'],\n              inside: Prism.languages.hsts\n            },\n            {\n              pattern: headerValueOf(/[^:]+/.source),\n              lookbehind: true\n            }\n          ],\n          'header-name': {\n            pattern: /^[^:]+/,\n            alias: 'keyword'\n          },\n          punctuation: /^:/\n        }\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css,\n      'text/plain': langs.plain\n    } // Declare which types can also be suffixes\n\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n\n    var options\n\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType.replace(/\\//g, '-')] = {\n          pattern: RegExp(\n            '(' +\n              /content-type:\\s*/.source +\n              pattern +\n              /(?:(?:\\r\\n?|\\n)[\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n)/.source +\n              ')' + // This is a little interesting:\n              // The HTTP format spec required 1 empty line before the body to make everything unambiguous.\n              // However, when writing code by hand (e.g. to display on a website) people can forget about this,\n              // so we want to be liberal here. We will allow the empty line to be omitted if the first line of\n              // the body does not start with a [\\w-] character (as headers do).\n              /[^ \\t\\w-][\\s\\S]*/.source,\n            'i'\n          ),\n          lookbehind: true,\n          inside: httpLanguages[contentType]\n        }\n      }\n    }\n\n    if (options) {\n      Prism.languages.insertBefore('http', 'header', options)\n    }\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}