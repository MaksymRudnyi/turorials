{"ast":null,"code":"import { parser } from '@lezer/cpp';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n/**\nA language provider based on the [Lezer C++\nparser](https://github.com/lezer-parser/cpp), extended with\nhighlighting and indentation information.\n*/\n\nconst cppLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch)\\b/\n      }),\n      LabeledStatement: flatIndent,\n      CaseStatement: context => context.baseIndent + context.unit,\n      BlockComment: () => -1,\n      CompoundStatement: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^{/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList\": foldInside,\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n  }\n});\n/**\nLanguage support for C++.\n*/\n\nfunction cpp() {\n  return new LanguageSupport(cppLanguage);\n}\n\nexport { cpp, cppLanguage };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","flatIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","cppLanguage","define","configure","props","add","IfStatement","except","TryStatement","LabeledStatement","CaseStatement","context","baseIndent","unit","BlockComment","CompoundStatement","closing","Statement","tree","from","to","languageData","commentTokens","line","block","open","close","indentOnInput","cpp"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/lang-cpp/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/cpp';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer C++\nparser](https://github.com/lezer-parser/cpp), extended with\nhighlighting and indentation information.\n*/\nconst cppLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch)\\b/ }),\n                LabeledStatement: flatIndent,\n                CaseStatement: context => context.baseIndent + context.unit,\n                BlockComment: () => -1,\n                CompoundStatement: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList\": foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n    }\n});\n/**\nLanguage support for C++.\n*/\nfunction cpp() {\n    return new LanguageSupport(cppLanguage);\n}\n\nexport { cpp, cppLanguage };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,eAArC,EAAsDC,UAAtD,EAAkEC,eAAlE,EAAmFC,YAAnF,EAAiGC,UAAjG,EAA6GC,eAA7G,QAAoI,sBAApI;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,aAAaR,UAAU,CAACS,MAAX,CAAkB;EAC/CV,MAAM,EAAE,aAAaA,MAAM,CAACW,SAAP,CAAiB;IAClCC,KAAK,EAAE,CACH,aAAaV,cAAc,CAACW,GAAf,CAAmB;MAC5BC,WAAW,EAAE,aAAaX,eAAe,CAAC;QAAEY,MAAM,EAAE;MAAV,CAAD,CADb;MAE5BC,YAAY,EAAE,aAAab,eAAe,CAAC;QAAEY,MAAM,EAAE;MAAV,CAAD,CAFd;MAG5BE,gBAAgB,EAAEb,UAHU;MAI5Bc,aAAa,EAAEC,OAAO,IAAIA,OAAO,CAACC,UAAR,GAAqBD,OAAO,CAACE,IAJ3B;MAK5BC,YAAY,EAAE,MAAM,CAAC,CALO;MAM5BC,iBAAiB,EAAE,aAAalB,eAAe,CAAC;QAAEmB,OAAO,EAAE;MAAX,CAAD,CANnB;MAO5BC,SAAS,EAAE,aAAatB,eAAe,CAAC;QAAEY,MAAM,EAAE;MAAV,CAAD;IAPX,CAAnB,CADV,EAUH,aAAaT,YAAY,CAACO,GAAb,CAAiB;MAC1B,yFAAyFN,UAD/D;;MAE1Be,YAAY,CAACI,IAAD,EAAO;QAAE,OAAO;UAAEC,IAAI,EAAED,IAAI,CAACC,IAAL,GAAY,CAApB;UAAuBC,EAAE,EAAEF,IAAI,CAACE,EAAL,GAAU;QAArC,CAAP;MAAkD;;IAF7C,CAAjB,CAVV;EAD2B,CAAjB,CAD0B;EAkB/CC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAR;QAAcC,KAAK,EAAE;MAArB;IAArB,CADL;IAEVC,aAAa,EAAE;EAFL;AAlBiC,CAAlB,CAAjC;AAuBA;AACA;AACA;;AACA,SAASC,GAAT,GAAe;EACX,OAAO,IAAI5B,eAAJ,CAAoBC,WAApB,CAAP;AACH;;AAED,SAAS2B,GAAT,EAAc3B,WAAd"},"metadata":{},"sourceType":"module"}