{"ast":null,"code":"function wordRegexp(words, end, pre) {\n  if (typeof pre === \"undefined\") pre = \"\";\n\n  if (typeof end === \"undefined\") {\n    end = \"\\\\b\";\n  }\n\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\n\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\nvar asciiOperatorsList = [\"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\", \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"];\nvar operators = wordRegexp([\"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\", \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\", \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\", \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\", \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\", \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\", \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\", \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\", \"bitstype\"];\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n\nfunction inArray(state) {\n  return state.nestedArrays > 0;\n}\n\nfunction inGenerator(state) {\n  return state.nestedGenerators > 0;\n}\n\nfunction currentScope(state, n) {\n  if (typeof n === \"undefined\") {\n    n = 0;\n  }\n\n  if (state.scopes.length <= n) {\n    return null;\n  }\n\n  return state.scopes[state.scopes.length - (n + 1)];\n} // tokenizers\n\n\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  } // Handle scope changes\n\n\n  var leavingExpr = state.leavingExpr;\n\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n\n  state.leavingExpr = false;\n\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek(); // Handle single line comments\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") {\n      state.scopes.pop();\n    }\n\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") {\n      state.scopes.pop();\n    }\n\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n\n  var match;\n\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  } // Handle type annotations\n\n\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  } // Handle symbols\n\n\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n    return \"builtin\";\n  } // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n  // Handle operators and Delimiters\n\n\n  if (stream.match(operators)) {\n    return \"operator\";\n  } // Handle Number Literals\n\n\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) {\n      numberLiteral = true;\n    } // Integers\n\n\n    if (stream.match(/^0x[0-9a-f_]+/i)) {\n      numberLiteral = true;\n    } // Hex\n\n\n    if (stream.match(/^0b[01_]+/i)) {\n      numberLiteral = true;\n    } // Binary\n\n\n    if (stream.match(/^0o[0-7_]+/i)) {\n      numberLiteral = true;\n    } // Octal\n    // Floats\n\n\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) {\n      numberLiteral = true;\n    }\n\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) {\n      numberLiteral = true;\n    } // Decimal\n\n\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  } // Handle Chars\n\n\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  } // Handle Strings\n\n\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.match(macro) || stream.match(macroOperators)) {\n    return \"meta\";\n  }\n\n  if (stream.match(delimiters)) {\n    return null;\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n\n      state.isDefinition = false;\n      return \"def\";\n    }\n\n    state.leavingExpr = true;\n    return \"variable\";\n  } // Handle non-detected items\n\n\n  stream.next();\n  return \"error\";\n}\n\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n\n  return \"builtin\";\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0) state.tokenize = tokenBase;\n  }\n\n  return \"comment\";\n}\n\nfunction tokenChar(stream, state) {\n  var isChar = false,\n      match;\n\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n\n    if (value <= 55295 || value >= 57344) {\n      // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n\n    if (value <= 1114111) {\n      // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n\n  if (!stream.match(/^[^']+(?=')/)) {\n    stream.skipToEnd();\n  }\n\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenBase;\n  }\n\n  return \"error\";\n}\n\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n\n  return tokenString;\n}\n\nexport const julia = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n  token: function (stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    if (current && style) {\n      state.lastToken = current;\n    }\n\n    return style;\n  },\n  indent: function (state, textAfter, cx) {\n    var delta = 0;\n\n    if (textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) || /^finally/.test(textAfter)) {\n      delta = -1;\n    }\n\n    return (state.scopes.length + delta) * cx.unit;\n  },\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {\n      line: \"#\",\n      block: {\n        open: \"#=\",\n        close: \"=#\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};","map":{"version":3,"names":["wordRegexp","words","end","pre","RegExp","join","octChar","hexChar","sChar","uChar","asciiOperatorsList","operators","delimiters","identifiers","chars","openersList","closersList","keywordsList","builtinsList","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","macroOperators","symbolOperators","inArray","state","nestedArrays","inGenerator","nestedGenerators","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","pop","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","tokenStringFactory","current","isDefinition","next","nestedParameters","nestedComments","isChar","value","parseInt","delimiter","substr","tokenString","eat","eatWhile","julia","startState","firstParenPos","token","style","indent","textAfter","cx","delta","test","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets","autocomplete","concat"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/julia.js"],"sourcesContent":["function wordRegexp(words, end, pre) {\n  if (typeof pre === \"undefined\") pre = \"\";\n  if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\n\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\nvar asciiOperatorsList = [\n  \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"\n];\nvar operators = wordRegexp([\n  \"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n  \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n  \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n  \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n  \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\n], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n                   \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n                   \"finally\", \"catch\", \"do\"];\n\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n                    \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n                    \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n                    \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n                    \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n                    \"bitstype\"];\n\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\n\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n\nfunction inArray(state) {\n  return (state.nestedArrays > 0);\n}\n\nfunction inGenerator(state) {\n  return (state.nestedGenerators > 0);\n}\n\nfunction currentScope(state, n) {\n  if (typeof(n) === \"undefined\") { n = 0; }\n  if (state.scopes.length <= n) {\n    return null;\n  }\n  return state.scopes[state.scopes.length - (n + 1)];\n}\n\n// tokenizers\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle scope changes\n  var leavingExpr = state.leavingExpr;\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n  state.leavingExpr = false;\n\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle single line comments\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n\n  var match;\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  }\n\n  // Handle type annotations\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle symbols\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n    return \"builtin\";\n  }\n\n  // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n\n  // Handle operators and Delimiters\n  if (stream.match(operators)) {\n    return \"operator\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n    // Integers\n    if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n    if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n    if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n    // Floats\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  }\n\n  // Handle Chars\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.match(macro) || stream.match(macroOperators)) {\n    return \"meta\";\n  }\n\n  if (stream.match(delimiters)) {\n    return null;\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n      state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n      state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n      state.isDefinition = false;\n      return \"def\";\n    }\n    state.leavingExpr = true;\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\n\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n  return \"builtin\";\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0)\n      state.tokenize = tokenBase;\n  }\n  return \"comment\";\n}\n\nfunction tokenChar(stream, state) {\n  var isChar = false, match;\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 1114111) { // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n  if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n  if (stream.match(\"'\")) { state.tokenize = tokenBase; }\n  return \"error\";\n}\n\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n  return tokenString;\n}\n\nexport const julia = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    if (current && style) {\n      state.lastToken = current;\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var delta = 0;\n    if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\n         /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\n         /^finally/.test(textAfter) ) {\n      delta = -1;\n    }\n    return (state.scopes.length + delta) * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {line: \"#\", block: {open: \"#=\", close: \"=#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}