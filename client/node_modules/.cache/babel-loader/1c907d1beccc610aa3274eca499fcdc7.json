{"ast":null,"code":"(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n    return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var registerImmediate;\n\n  function setImmediate(callback) {\n    // Callback can either be a function or a string\n    if (typeof callback !== \"function\") {\n      callback = new Function(\"\" + callback);\n    } // Copy function arguments\n\n\n    var args = new Array(arguments.length - 1);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 1];\n    } // Store and register the task\n\n\n    var task = {\n      callback: callback,\n      args: args\n    };\n    tasksByHandle[nextHandle] = task;\n    registerImmediate(nextHandle);\n    return nextHandle++;\n  }\n\n  function clearImmediate(handle) {\n    delete tasksByHandle[handle];\n  }\n\n  function run(task) {\n    var callback = task.callback;\n    var args = task.args;\n\n    switch (args.length) {\n      case 0:\n        callback();\n        break;\n\n      case 1:\n        callback(args[0]);\n        break;\n\n      case 2:\n        callback(args[0], args[1]);\n        break;\n\n      case 3:\n        callback(args[0], args[1], args[2]);\n        break;\n\n      default:\n        callback.apply(undefined, args);\n        break;\n    }\n  }\n\n  function runIfPresent(handle) {\n    // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // \"too much recursion\" error.\n      setTimeout(runIfPresent, 0, handle);\n    } else {\n      var task = tasksByHandle[handle];\n\n      if (task) {\n        currentlyRunningATask = true;\n\n        try {\n          run(task);\n        } finally {\n          clearImmediate(handle);\n          currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  function installNextTickImplementation() {\n    registerImmediate = function (handle) {\n      process.nextTick(function () {\n        runIfPresent(handle);\n      });\n    };\n  }\n\n  function canUsePostMessage() {\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `global.postMessage` means something completely different and can't be used for this purpose.\n    if (global.postMessage && !global.importScripts) {\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n  }\n\n  function installPostMessageImplementation() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n    var onGlobalMessage = function (event) {\n      if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n        runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    if (global.addEventListener) {\n      global.addEventListener(\"message\", onGlobalMessage, false);\n    } else {\n      global.attachEvent(\"onmessage\", onGlobalMessage);\n    }\n\n    registerImmediate = function (handle) {\n      global.postMessage(messagePrefix + handle, \"*\");\n    };\n  }\n\n  function installMessageChannelImplementation() {\n    var channel = new MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n      runIfPresent(handle);\n    };\n\n    registerImmediate = function (handle) {\n      channel.port2.postMessage(handle);\n    };\n  }\n\n  function installReadyStateChangeImplementation() {\n    var html = doc.documentElement;\n\n    registerImmediate = function (handle) {\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var script = doc.createElement(\"script\");\n\n      script.onreadystatechange = function () {\n        runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n    };\n  }\n\n  function installSetTimeoutImplementation() {\n    registerImmediate = function (handle) {\n      setTimeout(runIfPresent, 0, handle);\n    };\n  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n  if ({}.toString.call(global.process) === \"[object process]\") {\n    // For Node.js before 0.9\n    installNextTickImplementation();\n  } else if (canUsePostMessage()) {\n    // For non-IE10 modern browsers\n    installPostMessageImplementation();\n  } else if (global.MessageChannel) {\n    // For web workers, where supported\n    installMessageChannelImplementation();\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n    // For IE 6â€“8\n    installReadyStateChangeImplementation();\n  } else {\n    // For older browsers\n    installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n})(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);","map":{"version":3,"names":["global","undefined","setImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","registerImmediate","callback","Function","args","Array","arguments","length","i","task","clearImmediate","handle","run","apply","runIfPresent","setTimeout","installNextTickImplementation","process","nextTick","canUsePostMessage","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","installPostMessageImplementation","messagePrefix","Math","random","onGlobalMessage","event","source","data","indexOf","slice","addEventListener","attachEvent","installMessageChannelImplementation","channel","MessageChannel","port1","port2","installReadyStateChangeImplementation","html","documentElement","script","createElement","onreadystatechange","removeChild","appendChild","installSetTimeoutImplementation","attachTo","Object","getPrototypeOf","toString","call","self"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/setimmediate/setImmediate.js"],"sourcesContent":["(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6â€“8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}