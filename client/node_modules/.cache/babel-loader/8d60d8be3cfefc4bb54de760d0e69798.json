{"ast":null,"code":"/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = status; // status code to message map\n\nstatus.STATUS_CODES = codes; // array of status codes\n\nstatus.codes = populateStatusesMap(status, codes); // status codes for redirects\n\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}; // status codes for empty bodies\n\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}; // status codes for when you should retry the request\n\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n};\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap(statuses, codes) {\n  var arr = [];\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code); // Populate properties\n\n    statuses[status] = message;\n    statuses[message] = status;\n    statuses[message.toLowerCase()] = status; // Add to array\n\n    arr.push(status);\n  });\n  return arr;\n}\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  } // '403'\n\n\n  var n = parseInt(code, 10);\n\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n\n  n = status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}","map":{"version":3,"names":["codes","require","module","exports","status","STATUS_CODES","populateStatusesMap","redirect","empty","retry","statuses","arr","Object","keys","forEach","forEachCode","code","message","Number","toLowerCase","push","Error","TypeError","n","parseInt","isNaN"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/statuses/index.js"],"sourcesContent":["/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.STATUS_CODES = codes\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap (statuses, codes) {\n  var arr = []\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // Populate properties\n    statuses[status] = message\n    statuses[message] = status\n    statuses[message.toLowerCase()] = status\n\n    // Add to array\n    arr.push(status)\n  })\n\n  return arr\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code)\n    return code\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n)\n    return n\n  }\n\n  n = status[code.toLowerCase()]\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\n  return n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB,C,CAEA;;AACAA,MAAM,CAACC,YAAP,GAAsBL,KAAtB,C,CAEA;;AACAI,MAAM,CAACJ,KAAP,GAAeM,mBAAmB,CAACF,MAAD,EAASJ,KAAT,CAAlC,C,CAEA;;AACAI,MAAM,CAACG,QAAP,GAAkB;EAChB,KAAK,IADW;EAEhB,KAAK,IAFW;EAGhB,KAAK,IAHW;EAIhB,KAAK,IAJW;EAKhB,KAAK,IALW;EAMhB,KAAK,IANW;EAOhB,KAAK;AAPW,CAAlB,C,CAUA;;AACAH,MAAM,CAACI,KAAP,GAAe;EACb,KAAK,IADQ;EAEb,KAAK,IAFQ;EAGb,KAAK;AAHQ,CAAf,C,CAMA;;AACAJ,MAAM,CAACK,KAAP,GAAe;EACb,KAAK,IADQ;EAEb,KAAK,IAFQ;EAGb,KAAK;AAHQ,CAAf;AAMA;AACA;AACA;AACA;;AAEA,SAASH,mBAAT,CAA8BI,QAA9B,EAAwCV,KAAxC,EAA+C;EAC7C,IAAIW,GAAG,GAAG,EAAV;EAEAC,MAAM,CAACC,IAAP,CAAYb,KAAZ,EAAmBc,OAAnB,CAA2B,SAASC,WAAT,CAAsBC,IAAtB,EAA4B;IACrD,IAAIC,OAAO,GAAGjB,KAAK,CAACgB,IAAD,CAAnB;IACA,IAAIZ,MAAM,GAAGc,MAAM,CAACF,IAAD,CAAnB,CAFqD,CAIrD;;IACAN,QAAQ,CAACN,MAAD,CAAR,GAAmBa,OAAnB;IACAP,QAAQ,CAACO,OAAD,CAAR,GAAoBb,MAApB;IACAM,QAAQ,CAACO,OAAO,CAACE,WAAR,EAAD,CAAR,GAAkCf,MAAlC,CAPqD,CASrD;;IACAO,GAAG,CAACS,IAAJ,CAAShB,MAAT;EACD,CAXD;EAaA,OAAOO,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASP,MAAT,CAAiBY,IAAjB,EAAuB;EACrB,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,IAAI,CAACZ,MAAM,CAACY,IAAD,CAAX,EAAmB,MAAM,IAAIK,KAAJ,CAAU,0BAA0BL,IAApC,CAAN;IACnB,OAAOA,IAAP;EACD;;EAED,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAIM,SAAJ,CAAc,iCAAd,CAAN;EACD,CARoB,CAUrB;;;EACA,IAAIC,CAAC,GAAGC,QAAQ,CAACR,IAAD,EAAO,EAAP,CAAhB;;EACA,IAAI,CAACS,KAAK,CAACF,CAAD,CAAV,EAAe;IACb,IAAI,CAACnB,MAAM,CAACmB,CAAD,CAAX,EAAgB,MAAM,IAAIF,KAAJ,CAAU,0BAA0BE,CAApC,CAAN;IAChB,OAAOA,CAAP;EACD;;EAEDA,CAAC,GAAGnB,MAAM,CAACY,IAAI,CAACG,WAAL,EAAD,CAAV;EACA,IAAI,CAACI,CAAL,EAAQ,MAAM,IAAIF,KAAJ,CAAU,8BAA8BL,IAA9B,GAAqC,GAA/C,CAAN;EACR,OAAOO,CAAP;AACD"},"metadata":{},"sourceType":"script"}