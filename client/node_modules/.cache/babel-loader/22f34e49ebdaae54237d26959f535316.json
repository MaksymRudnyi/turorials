{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer; // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n// == UTF16-BE codec. ==========================================================\n\n\nexports.utf16be = Utf16BECodec;\n\nfunction Utf16BECodec() {}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true; // -- Encoding\n\nfunction Utf16BEEncoder() {}\n\nUtf16BEEncoder.prototype.write = function (str) {\n  var buf = Buffer.from(str, 'ucs2');\n\n  for (var i = 0; i < buf.length; i += 2) {\n    var tmp = buf[i];\n    buf[i] = buf[i + 1];\n    buf[i + 1] = tmp;\n  }\n\n  return buf;\n};\n\nUtf16BEEncoder.prototype.end = function () {}; // -- Decoding\n\n\nfunction Utf16BEDecoder() {\n  this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function (buf) {\n  if (buf.length == 0) return '';\n  var buf2 = Buffer.alloc(buf.length + 1),\n      i = 0,\n      j = 0;\n\n  if (this.overflowByte !== -1) {\n    buf2[0] = buf[0];\n    buf2[1] = this.overflowByte;\n    i = 1;\n    j = 2;\n  }\n\n  for (; i < buf.length - 1; i += 2, j += 2) {\n    buf2[j] = buf[i + 1];\n    buf2[j + 1] = buf[i];\n  }\n\n  this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;\n  return buf2.slice(0, j).toString('ucs2');\n};\n\nUtf16BEDecoder.prototype.end = function () {}; // == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\n\nexports.utf16 = Utf16Codec;\n\nfunction Utf16Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder; // -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n  options = options || {};\n  if (options.addBOM === undefined) options.addBOM = true;\n  this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function (str) {\n  return this.encoder.write(str);\n};\n\nUtf16Encoder.prototype.end = function () {\n  return this.encoder.end();\n}; // -- Decoding\n\n\nfunction Utf16Decoder(options, codec) {\n  this.decoder = null;\n  this.initialBytes = [];\n  this.initialBytesLen = 0;\n  this.options = options || {};\n  this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBytes.push(buf);\n    this.initialBytesLen += buf.length;\n    if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n      return ''; // We have enough bytes -> detect endianness.\n\n    var buf = Buffer.concat(this.initialBytes),\n        encoding = detectEncoding(buf, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    this.initialBytes.length = this.initialBytesLen = 0;\n  }\n\n  return this.decoder.write(buf);\n};\n\nUtf16Decoder.prototype.end = function () {\n  if (!this.decoder) {\n    var buf = Buffer.concat(this.initialBytes),\n        encoding = detectEncoding(buf, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var res = this.decoder.write(buf),\n        trail = this.decoder.end();\n    return trail ? res + trail : res;\n  }\n\n  return this.decoder.end();\n};\n\nfunction detectEncoding(buf, defaultEncoding) {\n  var enc = defaultEncoding || 'utf-16le';\n\n  if (buf.length >= 2) {\n    // Check BOM.\n    if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n      enc = 'utf-16be';else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n      enc = 'utf-16le';else {\n      // No BOM found. Try to deduce encoding from initial content.\n      // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n      // So, we count ASCII as if it was LE or BE, and decide from that.\n      var asciiCharsLE = 0,\n          asciiCharsBE = 0,\n          // Counts of chars in both positions\n      _len = Math.min(buf.length - buf.length % 2, 64); // Len is always even.\n\n\n      for (var i = 0; i < _len; i += 2) {\n        if (buf[i] === 0 && buf[i + 1] !== 0) asciiCharsBE++;\n        if (buf[i] !== 0 && buf[i + 1] === 0) asciiCharsLE++;\n      }\n\n      if (asciiCharsBE > asciiCharsLE) enc = 'utf-16be';else if (asciiCharsBE < asciiCharsLE) enc = 'utf-16le';\n    }\n  }\n\n  return enc;\n}","map":{"version":3,"names":["Buffer","require","exports","utf16be","Utf16BECodec","prototype","encoder","Utf16BEEncoder","decoder","Utf16BEDecoder","bomAware","write","str","buf","from","i","length","tmp","end","overflowByte","buf2","alloc","j","slice","toString","utf16","Utf16Codec","codecOptions","iconv","Utf16Encoder","Utf16Decoder","options","codec","addBOM","undefined","getEncoder","initialBytes","initialBytesLen","push","concat","encoding","detectEncoding","defaultEncoding","getDecoder","res","trail","enc","asciiCharsLE","asciiCharsBE","_len","Math","min"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/iconv-lite/encodings/utf16.js"],"sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}