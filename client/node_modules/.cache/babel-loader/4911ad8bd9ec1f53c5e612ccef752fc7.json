{"ast":null,"code":"import { visit } from 'unist-util-visit';\nimport { selectAll } from 'hast-util-select';\n/** Get the node tree source code string */\n\nexport const getCodeString = function () {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  data.forEach(node => {\n    if (node.type === 'text') {\n      code += node.value;\n    } else if (node.type === 'element' && node.children && Array.isArray(node.children)) {\n      code += getCodeString(node.children);\n    }\n  });\n  return code;\n};\n\nconst remarkRewrite = options => {\n  const {\n    selector,\n    rewrite\n  } = options || {};\n  return tree => {\n    if (!rewrite || typeof rewrite !== 'function') return;\n\n    if (selector && typeof selector === 'string') {\n      const selected = selectAll(selector, tree);\n\n      if (selected && selected.length > 0) {\n        visit(tree, selected, (node, index, parent) => {\n          rewrite(node, index, parent);\n        });\n      }\n\n      return;\n    }\n\n    visit(tree, (node, index, parent) => {\n      rewrite(node, index, parent);\n    });\n  };\n};\n\nexport default remarkRewrite;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAEA,SAAS,KAAT,QAAsB,kBAAtB;AACA,SAAS,SAAT,QAA0B,kBAA1B;AAGA;;AACA,OAAO,MAAM,aAAa,GAAG,YAAmD;EAAA,IAAlD,IAAkD,uEAAzB,EAAyB;EAAA,IAArB,IAAqB,uEAAN,EAAM;EAC9E,IAAI,CAAC,OAAL,CAAc,IAAD,IAAS;IACpB,IAAI,IAAI,CAAC,IAAL,KAAc,MAAlB,EAA0B;MACxB,IAAI,IAAI,IAAI,CAAC,KAAb;IACD,CAFD,MAEO,IAAI,IAAI,CAAC,IAAL,KAAc,SAAd,IAA2B,IAAI,CAAC,QAAhC,IAA4C,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,QAAnB,CAAhD,EAA8E;MACnF,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,QAAN,CAArB;IACD;EACF,CAND;EAOA,OAAO,IAAP;AACD,CATM;;AAqBP,MAAM,aAAa,GAA2C,OAAD,IAAY;EACvE,MAAM;IAAE,QAAF;IAAY;EAAZ,IAAwB,OAAO,IAAI,EAAzC;EACA,OAAQ,IAAD,IAAS;IACd,IAAI,CAAC,OAAD,IAAY,OAAO,OAAP,KAAmB,UAAnC,EAA+C;;IAC/C,IAAI,QAAQ,IAAI,OAAO,QAAP,KAAoB,QAApC,EAA8C;MAC5C,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAD,EAAW,IAAX,CAA1B;;MACA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAT,GAAkB,CAAlC,EAAqC;QACnC,KAAK,CAAC,IAAD,EAAO,QAAP,EAAoC,CAAC,IAAD,EAAgB,KAAhB,EAAuB,MAAvB,KAAiC;UACxE,OAAO,CAAC,IAAD,EAAO,KAAP,EAAc,MAAd,CAAP;QACD,CAFI,CAAL;MAGD;;MACD;IACD;;IAED,KAAK,CAAC,IAAD,EAAO,CAAC,IAAD,EAA2B,KAA3B,EAAkC,MAAlC,KAA4C;MACtD,OAAO,CAAC,IAAD,EAAO,KAAP,EAAc,MAAd,CAAP;IACD,CAFI,CAAL;EAGD,CAfD;AAgBD,CAlBD;;AAoBA,eAAe,aAAf","sourceRoot":"","sourcesContent":["import { visit } from 'unist-util-visit';\nimport { selectAll } from 'hast-util-select';\n/** Get the node tree source code string */\nexport const getCodeString = (data = [], code = '') => {\n    data.forEach((node) => {\n        if (node.type === 'text') {\n            code += node.value;\n        }\n        else if (node.type === 'element' && node.children && Array.isArray(node.children)) {\n            code += getCodeString(node.children);\n        }\n    });\n    return code;\n};\nconst remarkRewrite = (options) => {\n    const { selector, rewrite } = options || {};\n    return (tree) => {\n        if (!rewrite || typeof rewrite !== 'function')\n            return;\n        if (selector && typeof selector === 'string') {\n            const selected = selectAll(selector, tree);\n            if (selected && selected.length > 0) {\n                visit(tree, selected, (node, index, parent) => {\n                    rewrite(node, index, parent);\n                });\n            }\n            return;\n        }\n        visit(tree, (node, index, parent) => {\n            rewrite(node, index, parent);\n        });\n    };\n};\nexport default remarkRewrite;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}