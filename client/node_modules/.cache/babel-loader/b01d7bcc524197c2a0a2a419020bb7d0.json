{"ast":null,"code":"/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase();\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next)) ? value : value + ';';\n}","map":{"version":3,"names":["toHexadecimal","code","next","omit","value","toString","toUpperCase","test","String","fromCharCode"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/stringify-entities/lib/util/to-hexadecimal.js"],"sourcesContent":["/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;EAC9C,MAAMC,KAAK,GAAG,QAAQH,IAAI,CAACI,QAAL,CAAc,EAAd,EAAkBC,WAAlB,EAAtB;EACA,OAAOH,IAAI,IAAID,IAAR,IAAgB,CAAC,aAAaK,IAAb,CAAkBC,MAAM,CAACC,YAAP,CAAoBP,IAApB,CAAlB,CAAjB,GACHE,KADG,GAEHA,KAAK,GAAG,GAFZ;AAGD"},"metadata":{},"sourceType":"module"}