{"ast":null,"code":"/** @license React v0.20.2\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var enableSchedulerDebugging = false;\n    var enableProfiling = false;\n    var requestHostCallback;\n    var requestHostTimeout;\n    var cancelHostTimeout;\n    var requestPaint;\n    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n    if (hasPerformanceNow) {\n      var localPerformance = performance;\n\n      exports.unstable_now = function () {\n        return localPerformance.now();\n      };\n    } else {\n      var localDate = Date;\n      var initialTime = localDate.now();\n\n      exports.unstable_now = function () {\n        return localDate.now() - initialTime;\n      };\n    }\n\n    if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' || // Check if MessageChannel is supported, too.\n    typeof MessageChannel !== 'function') {\n      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n      // fallback to a naive implementation.\n      var _callback = null;\n      var _timeoutID = null;\n\n      var _flushCallback = function () {\n        if (_callback !== null) {\n          try {\n            var currentTime = exports.unstable_now();\n            var hasRemainingTime = true;\n\n            _callback(hasRemainingTime, currentTime);\n\n            _callback = null;\n          } catch (e) {\n            setTimeout(_flushCallback, 0);\n            throw e;\n          }\n        }\n      };\n\n      requestHostCallback = function (cb) {\n        if (_callback !== null) {\n          // Protect against re-entrancy.\n          setTimeout(requestHostCallback, 0, cb);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, 0);\n        }\n      };\n\n      requestHostTimeout = function (cb, ms) {\n        _timeoutID = setTimeout(cb, ms);\n      };\n\n      cancelHostTimeout = function () {\n        clearTimeout(_timeoutID);\n      };\n\n      exports.unstable_shouldYield = function () {\n        return false;\n      };\n\n      requestPaint = exports.unstable_forceFrameRate = function () {};\n    } else {\n      // Capture local references to native APIs, in case a polyfill overrides them.\n      var _setTimeout = window.setTimeout;\n      var _clearTimeout = window.clearTimeout;\n\n      if (typeof console !== 'undefined') {\n        // TODO: Scheduler no longer requires these methods to be polyfilled. But\n        // maybe we want to continue warning if they don't exist, to preserve the\n        // option to rely on it in the future?\n        var requestAnimationFrame = window.requestAnimationFrame;\n        var cancelAnimationFrame = window.cancelAnimationFrame;\n\n        if (typeof requestAnimationFrame !== 'function') {\n          // Using console['error'] to evade Babel and ESLint\n          console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n        }\n\n        if (typeof cancelAnimationFrame !== 'function') {\n          // Using console['error'] to evade Babel and ESLint\n          console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n        }\n      }\n\n      var isMessageLoopRunning = false;\n      var scheduledHostCallback = null;\n      var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n      // thread, like user events. By default, it yields multiple times per frame.\n      // It does not attempt to align with frame boundaries, since most tasks don't\n      // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n      var yieldInterval = 5;\n      var deadline = 0; // TODO: Make this configurable\n\n      {\n        // `isInputPending` is not available. Since we have no way of knowing if\n        // there's pending input, always yield at the end of the frame.\n        exports.unstable_shouldYield = function () {\n          return exports.unstable_now() >= deadline;\n        }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n        requestPaint = function () {};\n      }\n\n      exports.unstable_forceFrameRate = function (fps) {\n        if (fps < 0 || fps > 125) {\n          // Using console['error'] to evade Babel and ESLint\n          console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n          return;\n        }\n\n        if (fps > 0) {\n          yieldInterval = Math.floor(1000 / fps);\n        } else {\n          // reset the framerate\n          yieldInterval = 5;\n        }\n      };\n\n      var performWorkUntilDeadline = function () {\n        if (scheduledHostCallback !== null) {\n          var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n          // cycle. This means there's always time remaining at the beginning of\n          // the message event.\n\n          deadline = currentTime + yieldInterval;\n          var hasTimeRemaining = true;\n\n          try {\n            var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n            if (!hasMoreWork) {\n              isMessageLoopRunning = false;\n              scheduledHostCallback = null;\n            } else {\n              // If there's more work, schedule the next message event at the end\n              // of the preceding one.\n              port.postMessage(null);\n            }\n          } catch (error) {\n            // If a scheduler task throws, exit the current browser task so the\n            // error can be observed.\n            port.postMessage(null);\n            throw error;\n          }\n        } else {\n          isMessageLoopRunning = false;\n        } // Yielding to the browser will give it a chance to paint, so we can\n\n      };\n\n      var channel = new MessageChannel();\n      var port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n\n      requestHostCallback = function (callback) {\n        scheduledHostCallback = callback;\n\n        if (!isMessageLoopRunning) {\n          isMessageLoopRunning = true;\n          port.postMessage(null);\n        }\n      };\n\n      requestHostTimeout = function (callback, ms) {\n        taskTimeoutID = _setTimeout(function () {\n          callback(exports.unstable_now());\n        }, ms);\n      };\n\n      cancelHostTimeout = function () {\n        _clearTimeout(taskTimeoutID);\n\n        taskTimeoutID = -1;\n      };\n    }\n\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n\n    function peek(heap) {\n      var first = heap[0];\n      return first === undefined ? null : first;\n    }\n\n    function pop(heap) {\n      var first = heap[0];\n\n      if (first !== undefined) {\n        var last = heap.pop();\n\n        if (last !== first) {\n          heap[0] = last;\n          siftDown(heap, last, 0);\n        }\n\n        return first;\n      } else {\n        return null;\n      }\n    }\n\n    function siftUp(heap, node, i) {\n      var index = i;\n\n      while (true) {\n        var parentIndex = index - 1 >>> 1;\n        var parent = heap[parentIndex];\n\n        if (parent !== undefined && compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n\n      while (index < length) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (left !== undefined && compare(left, node) < 0) {\n          if (right !== undefined && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (right !== undefined && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    } // TODO: Use symbols?\n\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n\n    function markTaskErrored(task, ms) {}\n    /* eslint-disable no-var */\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n\n        timer = peek(timerQueue);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = exports.unstable_now();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            throw error;\n          }\n        } else {\n          // No catch in prod code path.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n      }\n    }\n\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n\n      while (currentTask !== null && !enableSchedulerDebugging) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n\n        var callback = currentTask.callback;\n\n        if (typeof callback === 'function') {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = exports.unstable_now();\n\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n          } else {\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n\n        return false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n      } else {\n        startTime = currentTime;\n      }\n\n      var timeout;\n\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n          break;\n\n        case UserBlockingPriority:\n          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n          break;\n\n        case IdlePriority:\n          timeout = IDLE_PRIORITY_TIMEOUT;\n          break;\n\n        case LowPriority:\n          timeout = LOW_PRIORITY_TIMEOUT;\n          break;\n\n        case NormalPriority:\n        default:\n          timeout = NORMAL_PRIORITY_TIMEOUT;\n          break;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask); // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function unstable_pauseExecution() {}\n\n    function unstable_continueExecution() {\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n\n    function unstable_cancelCallback(task) {\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n      task.callback = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    var unstable_requestPaint = requestPaint;\n    var unstable_Profiling = null;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_Profiling = unstable_Profiling;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_next = unstable_next;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","enableSchedulerDebugging","enableProfiling","requestHostCallback","requestHostTimeout","cancelHostTimeout","requestPaint","hasPerformanceNow","performance","now","localPerformance","exports","unstable_now","localDate","Date","initialTime","window","MessageChannel","_callback","_timeoutID","_flushCallback","currentTime","hasRemainingTime","e","setTimeout","cb","ms","clearTimeout","unstable_shouldYield","unstable_forceFrameRate","_setTimeout","_clearTimeout","console","requestAnimationFrame","cancelAnimationFrame","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","yieldInterval","deadline","fps","Math","floor","performWorkUntilDeadline","hasTimeRemaining","hasMoreWork","port","postMessage","error","channel","port2","port1","onmessage","callback","push","heap","node","index","length","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","handleTimeout","flushWork","firstTimer","previousPriorityLevel","workLoop","isQueued","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_requestPaint","unstable_Profiling","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/scheduler/cjs/scheduler.development.js"],"sourcesContent":["/** @license React v0.20.2\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = false;\n\nvar requestHostCallback;\nvar requestHostTimeout;\nvar cancelHostTimeout;\nvar requestPaint;\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n}\n\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _timeoutID = null;\n\n  var _flushCallback = function () {\n    if (_callback !== null) {\n      try {\n        var currentTime = exports.unstable_now();\n        var hasRemainingTime = true;\n\n        _callback(hasRemainingTime, currentTime);\n\n        _callback = null;\n      } catch (e) {\n        setTimeout(_flushCallback, 0);\n        throw e;\n      }\n    }\n  };\n\n  requestHostCallback = function (cb) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0);\n    }\n  };\n\n  requestHostTimeout = function (cb, ms) {\n    _timeoutID = setTimeout(cb, ms);\n  };\n\n  cancelHostTimeout = function () {\n    clearTimeout(_timeoutID);\n  };\n\n  exports.unstable_shouldYield = function () {\n    return false;\n  };\n\n  requestPaint = exports.unstable_forceFrameRate = function () {};\n} else {\n  // Capture local references to native APIs, in case a polyfill overrides them.\n  var _setTimeout = window.setTimeout;\n  var _clearTimeout = window.clearTimeout;\n\n  if (typeof console !== 'undefined') {\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\n    // maybe we want to continue warning if they don't exist, to preserve the\n    // option to rely on it in the future?\n    var requestAnimationFrame = window.requestAnimationFrame;\n    var cancelAnimationFrame = window.cancelAnimationFrame;\n\n    if (typeof requestAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n    }\n\n    if (typeof cancelAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\n    }\n  }\n\n  var isMessageLoopRunning = false;\n  var scheduledHostCallback = null;\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n  // thread, like user events. By default, it yields multiple times per frame.\n  // It does not attempt to align with frame boundaries, since most tasks don't\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n  var yieldInterval = 5;\n  var deadline = 0; // TODO: Make this configurable\n\n  {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    exports.unstable_shouldYield = function () {\n      return exports.unstable_now() >= deadline;\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n    requestPaint = function () {};\n  }\n\n  exports.unstable_forceFrameRate = function (fps) {\n    if (fps < 0 || fps > 125) {\n      // Using console['error'] to evade Babel and ESLint\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n      return;\n    }\n\n    if (fps > 0) {\n      yieldInterval = Math.floor(1000 / fps);\n    } else {\n      // reset the framerate\n      yieldInterval = 5;\n    }\n  };\n\n  var performWorkUntilDeadline = function () {\n    if (scheduledHostCallback !== null) {\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n      // cycle. This means there's always time remaining at the beginning of\n      // the message event.\n\n      deadline = currentTime + yieldInterval;\n      var hasTimeRemaining = true;\n\n      try {\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n        if (!hasMoreWork) {\n          isMessageLoopRunning = false;\n          scheduledHostCallback = null;\n        } else {\n          // If there's more work, schedule the next message event at the end\n          // of the preceding one.\n          port.postMessage(null);\n        }\n      } catch (error) {\n        // If a scheduler task throws, exit the current browser task so the\n        // error can be observed.\n        port.postMessage(null);\n        throw error;\n      }\n    } else {\n      isMessageLoopRunning = false;\n    } // Yielding to the browser will give it a chance to paint, so we can\n  };\n\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  requestHostCallback = function (callback) {\n    scheduledHostCallback = callback;\n\n    if (!isMessageLoopRunning) {\n      isMessageLoopRunning = true;\n      port.postMessage(null);\n    }\n  };\n\n  requestHostTimeout = function (callback, ms) {\n    taskTimeoutID = _setTimeout(function () {\n      callback(exports.unstable_now());\n    }, ms);\n  };\n\n  cancelHostTimeout = function () {\n    _clearTimeout(taskTimeoutID);\n\n    taskTimeoutID = -1;\n  };\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}