{"ast":null,"code":"import { bold } from './bold';\nimport { italic } from './italic';\nimport { header } from './header';\nimport { strike } from './strike';\nimport { underline } from './underline';\nimport { olist } from './olist';\nimport { ulist } from './ulist';\nimport { quote } from './quote';\nimport { link } from './link';\nimport { todo } from './todo';\nimport { image } from './image';\nimport { redo } from './redo';\nimport { undo } from './undo';\nimport { fullscreen } from './fullscreen';\nimport { preview } from './preview';\nexport var defaultCommands = {\n  undo,\n  redo,\n  bold,\n  italic,\n  header,\n  strike,\n  underline,\n  quote,\n  olist,\n  ulist,\n  todo,\n  link,\n  image,\n  fullscreen,\n  preview\n};\nexport var getCommands = () => Object.keys(defaultCommands).filter(key => !/^(fullscreen|preview)/.test(key)).map(key => defaultCommands[key]);\nexport var getModeCommands = () => [preview, fullscreen];","map":{"version":3,"sources":["../../src/commands/index.tsx"],"names":["defaultCommands","preview","getCommands","Object","key","getModeCommands"],"mappings":"AACA,SAAA,IAAA,QAAA,QAAA;AACA,SAAA,MAAA,QAAA,UAAA;AACA,SAAA,MAAA,QAAA,UAAA;AACA,SAAA,MAAA,QAAA,UAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,KAAA,QAAA,SAAA;AACA,SAAA,KAAA,QAAA,SAAA;AACA,SAAA,KAAA,QAAA,SAAA;AACA,SAAA,IAAA,QAAA,QAAA;AACA,SAAA,IAAA,QAAA,QAAA;AACA,SAAA,KAAA,QAAA,SAAA;AACA,SAAA,IAAA,QAAA,QAAA;AACA,SAAA,IAAA,QAAA,QAAA;AACA,SAAA,UAAA,QAAA,cAAA;AACA,SAAA,OAAA,QAAA,WAAA;AAaA,OAAO,IAAMA,eAAe,GAAG;EAAA,IAAA;EAAA,IAAA;EAAA,IAAA;EAAA,MAAA;EAAA,MAAA;EAAA,MAAA;EAAA,SAAA;EAAA,KAAA;EAAA,KAAA;EAAA,KAAA;EAAA,IAAA;EAAA,IAAA;EAAA,KAAA;EAAA,UAAA;EAe7BC;AAf6B,CAAxB;AAkBP,OAAO,IAAMC,WAA6B,GAAG,MAC3CC,MAAM,CAANA,IAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CACWC,GAAD,IAAS,CAAC,wBAAA,IAAA,CADpBD,GACoB,CADpBA,EAAAA,GAAAA,CAEQC,GAAD,IAASJ,eAAe,CAH1B,GAG0B,CAF/BG,CADK;AAKP,OAAO,IAAME,eAAiC,GAAG,MAAM,CAAA,OAAA,EAAhD,UAAgD,CAAhD","sourcesContent":["import { ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport { bold } from './bold';\nimport { italic } from './italic';\nimport { header } from './header';\nimport { strike } from './strike';\nimport { underline } from './underline';\nimport { olist } from './olist';\nimport { ulist } from './ulist';\nimport { quote } from './quote';\nimport { link } from './link';\nimport { todo } from './todo';\nimport { image } from './image';\nimport { redo } from './redo';\nimport { undo } from './undo';\nimport { fullscreen } from './fullscreen';\nimport { preview } from './preview';\nimport { IMarkdownEditor, ToolBarProps } from '../';\n\nexport type ButtonHandle = (command: ICommand, props: IMarkdownEditor, options: ToolBarProps) => JSX.Element;\n\nexport type ICommand = {\n  icon?: React.ReactElement;\n  name?: string;\n  keyCommand?: string;\n  button?: ButtonHandle | React.ButtonHTMLAttributes<HTMLButtonElement>;\n  execute?: (editor: ReactCodeMirrorRef) => void;\n};\n\nexport const defaultCommands = {\n  undo,\n  redo,\n  bold,\n  italic,\n  header,\n  strike,\n  underline,\n  quote,\n  olist,\n  ulist,\n  todo,\n  link,\n  image,\n  fullscreen,\n  preview,\n};\n\nexport const getCommands: () => ICommand[] = () =>\n  Object.keys(defaultCommands)\n    .filter((key) => !/^(fullscreen|preview)/.test(key))\n    .map((key) => defaultCommands[key as keyof typeof defaultCommands]);\n\nexport const getModeCommands: () => ICommand[] = () => [preview, fullscreen];\n"]},"metadata":{},"sourceType":"module"}