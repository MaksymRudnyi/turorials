{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n/*<replacement>*/\n\n\nif (!EE.listenerCount) EE.listenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n/*<replacement>*/\n\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n/*<replacement>*/\n\nvar debug = require('util');\n\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {}; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.\n\n  this.highWaterMark = ~~this.highWaterMark;\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n\n  this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this); // legacy\n\n  this.readable = true;\n  Stream.call(this);\n} // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended) onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);\n      if (!addToFront) state.reading = false; // if we want the data now, just emit it.\n\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n        if (state.needReadable) emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n} // if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\n\n\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n} // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n}; // Don't raise the hwm > 128MB\n\n\nvar MAX_HWM = 0x800000;\n\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n\n    n++;\n  }\n\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0; // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n\n  if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n); // don't have that much.  return null, unless we've ended.\n\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else return state.length;\n  }\n\n  return n;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n  if (!util.isNumber(n) || n > 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false;\n  } // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n\n\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n; // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n\n  if (state.length === 0 && !state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n  if (!util.isNull(ret)) this.emit('data', ret);\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n\n  if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true; // emit 'readable' now to make sure it gets picked up.\n\n  emitReadable(stream);\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) process.nextTick(function () {\n      emitReadable_(stream);\n    });else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function () {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata); // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n\n    if (false === ret) {\n      debug('false write response, pause', src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er);\n  } // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n\n\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error]; // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this);\n\n    return this;\n  } // try to find the right one.\n\n\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn); // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function () {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on; // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n\n    resume(this, state);\n  }\n\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function () {\n      resume_(stream, state);\n    });\n  }\n}\n\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length) return;\n    var ret = self.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  }); // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n  self._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n}; // exposed for testing purposes only.\n\n\nReadable._fromList = fromList; // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret; // nothing in the list, definitely empty.\n\n  if (list.length === 0) return null;\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n      var c = 0;\n\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n        c += cpy;\n      }\n    }\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function () {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","map":{"version":3,"names":["module","exports","Readable","isArray","require","Buffer","ReadableState","EE","EventEmitter","listenerCount","emitter","type","listeners","length","Stream","util","inherits","StringDecoder","debug","debuglog","options","stream","Duplex","hwm","highWaterMark","defaultHwm","objectMode","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","readableObjectMode","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","encoding","_readableState","readable","call","prototype","push","chunk","state","isString","readableAddChunk","unshift","addToFront","er","chunkInvalid","emit","isNullOrUndefined","onEofChunk","e","Error","write","read","emitReadable","maybeReadMore","needMoreData","setEncoding","enc","MAX_HWM","roundUpToNextPowerOf2","n","p","howMuchToRead","isNaN","isNull","nOrig","isNumber","endReadable","doRead","_read","ret","fromList","isBuffer","TypeError","end","process","nextTick","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","stdout","stderr","endFn","onend","cleanup","once","on","onunpipe","ondrain","pipeOnDrain","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","pause","unpipe","_events","error","resume","dests","i","indexOf","splice","ev","fn","res","self","addListener","resumeScheduled","resume_","wrap","paused","isFunction","isUndefined","method","apply","arguments","events","forEach","bind","_fromList","list","stringMode","shift","join","concat","buf","slice","c","l","cpy","Math","min","copy","xs","f","x"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      if (!addToFront)\n        state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (!util.isNumber(n) || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0)\n    endReadable(this);\n\n  if (!util.isNull(ret))\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync)\n      process.nextTick(function() {\n        emitReadable_(stream);\n      });\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause',\n            src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function() {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function() {\n      resume_(stream, state);\n    });\n  }\n}\n\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    debug('wrapped data');\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length)\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;AACA;;AAGA;;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAA/B;AACA;;;AAEAH,QAAQ,CAACI,aAAT,GAAyBA,aAAzB;;AAEA,IAAIC,EAAE,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBI,YAA3B;AAEA;;;AACA,IAAI,CAACD,EAAE,CAACE,aAAR,EAAuBF,EAAE,CAACE,aAAH,GAAmB,UAASC,OAAT,EAAkBC,IAAlB,EAAwB;EAChE,OAAOD,OAAO,CAACE,SAAR,CAAkBD,IAAlB,EAAwBE,MAA/B;AACD,CAFsB;AAGvB;;AAEA,IAAIC,MAAM,GAAGV,OAAO,CAAC,QAAD,CAApB;AAEA;;;AACA,IAAIW,IAAI,GAAGX,OAAO,CAAC,cAAD,CAAlB;;AACAW,IAAI,CAACC,QAAL,GAAgBZ,OAAO,CAAC,UAAD,CAAvB;AACA;;AAEA,IAAIa,aAAJ;AAGA;;AACA,IAAIC,KAAK,GAAGd,OAAO,CAAC,MAAD,CAAnB;;AACA,IAAIc,KAAK,IAAIA,KAAK,CAACC,QAAnB,EAA6B;EAC3BD,KAAK,GAAGA,KAAK,CAACC,QAAN,CAAe,QAAf,CAAR;AACD,CAFD,MAEO;EACLD,KAAK,GAAG,YAAY,CAAE,CAAtB;AACD;AACD;;;AAGAH,IAAI,CAACC,QAAL,CAAcd,QAAd,EAAwBY,MAAxB;;AAEA,SAASR,aAAT,CAAuBc,OAAvB,EAAgCC,MAAhC,EAAwC;EACtC,IAAIC,MAAM,GAAGlB,OAAO,CAAC,kBAAD,CAApB;;EAEAgB,OAAO,GAAGA,OAAO,IAAI,EAArB,CAHsC,CAKtC;EACA;;EACA,IAAIG,GAAG,GAAGH,OAAO,CAACI,aAAlB;EACA,IAAIC,UAAU,GAAGL,OAAO,CAACM,UAAR,GAAqB,EAArB,GAA0B,KAAK,IAAhD;EACA,KAAKF,aAAL,GAAsBD,GAAG,IAAIA,GAAG,KAAK,CAAhB,GAAqBA,GAArB,GAA2BE,UAAhD,CATsC,CAWtC;;EACA,KAAKD,aAAL,GAAqB,CAAC,CAAC,KAAKA,aAA5B;EAEA,KAAKG,MAAL,GAAc,EAAd;EACA,KAAKd,MAAL,GAAc,CAAd;EACA,KAAKe,KAAL,GAAa,IAAb;EACA,KAAKC,UAAL,GAAkB,CAAlB;EACA,KAAKC,OAAL,GAAe,IAAf;EACA,KAAKC,KAAL,GAAa,KAAb;EACA,KAAKC,UAAL,GAAkB,KAAlB;EACA,KAAKC,OAAL,GAAe,KAAf,CArBsC,CAuBtC;EACA;EACA;EACA;;EACA,KAAKC,IAAL,GAAY,IAAZ,CA3BsC,CA6BtC;EACA;;EACA,KAAKC,YAAL,GAAoB,KAApB;EACA,KAAKC,eAAL,GAAuB,KAAvB;EACA,KAAKC,iBAAL,GAAyB,KAAzB,CAjCsC,CAoCtC;EACA;;EACA,KAAKX,UAAL,GAAkB,CAAC,CAACN,OAAO,CAACM,UAA5B;EAEA,IAAIL,MAAM,YAAYC,MAAtB,EACE,KAAKI,UAAL,GAAkB,KAAKA,UAAL,IAAmB,CAAC,CAACN,OAAO,CAACkB,kBAA/C,CAzCoC,CA2CtC;EACA;EACA;;EACA,KAAKC,eAAL,GAAuBnB,OAAO,CAACmB,eAAR,IAA2B,MAAlD,CA9CsC,CAgDtC;EACA;;EACA,KAAKC,MAAL,GAAc,KAAd,CAlDsC,CAoDtC;;EACA,KAAKC,UAAL,GAAkB,CAAlB,CArDsC,CAuDtC;;EACA,KAAKC,WAAL,GAAmB,KAAnB;EAEA,KAAKC,OAAL,GAAe,IAAf;EACA,KAAKC,QAAL,GAAgB,IAAhB;;EACA,IAAIxB,OAAO,CAACwB,QAAZ,EAAsB;IACpB,IAAI,CAAC3B,aAAL,EACEA,aAAa,GAAGb,OAAO,CAAC,iBAAD,CAAP,CAA2Ba,aAA3C;IACF,KAAK0B,OAAL,GAAe,IAAI1B,aAAJ,CAAkBG,OAAO,CAACwB,QAA1B,CAAf;IACA,KAAKA,QAAL,GAAgBxB,OAAO,CAACwB,QAAxB;EACD;AACF;;AAED,SAAS1C,QAAT,CAAkBkB,OAAlB,EAA2B;EACzB,IAAIE,MAAM,GAAGlB,OAAO,CAAC,kBAAD,CAApB;;EAEA,IAAI,EAAE,gBAAgBF,QAAlB,CAAJ,EACE,OAAO,IAAIA,QAAJ,CAAakB,OAAb,CAAP;EAEF,KAAKyB,cAAL,GAAsB,IAAIvC,aAAJ,CAAkBc,OAAlB,EAA2B,IAA3B,CAAtB,CANyB,CAQzB;;EACA,KAAK0B,QAAL,GAAgB,IAAhB;EAEAhC,MAAM,CAACiC,IAAP,CAAY,IAAZ;AACD,C,CAED;AACA;AACA;AACA;;;AACA7C,QAAQ,CAAC8C,SAAT,CAAmBC,IAAnB,GAA0B,UAASC,KAAT,EAAgBN,QAAhB,EAA0B;EAClD,IAAIO,KAAK,GAAG,KAAKN,cAAjB;;EAEA,IAAI9B,IAAI,CAACqC,QAAL,CAAcF,KAAd,KAAwB,CAACC,KAAK,CAACzB,UAAnC,EAA+C;IAC7CkB,QAAQ,GAAGA,QAAQ,IAAIO,KAAK,CAACZ,eAA7B;;IACA,IAAIK,QAAQ,KAAKO,KAAK,CAACP,QAAvB,EAAiC;MAC/BM,KAAK,GAAG,IAAI7C,MAAJ,CAAW6C,KAAX,EAAkBN,QAAlB,CAAR;MACAA,QAAQ,GAAG,EAAX;IACD;EACF;;EAED,OAAOS,gBAAgB,CAAC,IAAD,EAAOF,KAAP,EAAcD,KAAd,EAAqBN,QAArB,EAA+B,KAA/B,CAAvB;AACD,CAZD,C,CAcA;;;AACA1C,QAAQ,CAAC8C,SAAT,CAAmBM,OAAnB,GAA6B,UAASJ,KAAT,EAAgB;EAC3C,IAAIC,KAAK,GAAG,KAAKN,cAAjB;EACA,OAAOQ,gBAAgB,CAAC,IAAD,EAAOF,KAAP,EAAcD,KAAd,EAAqB,EAArB,EAAyB,IAAzB,CAAvB;AACD,CAHD;;AAKA,SAASG,gBAAT,CAA0BhC,MAA1B,EAAkC8B,KAAlC,EAAyCD,KAAzC,EAAgDN,QAAhD,EAA0DW,UAA1D,EAAsE;EACpE,IAAIC,EAAE,GAAGC,YAAY,CAACN,KAAD,EAAQD,KAAR,CAArB;;EACA,IAAIM,EAAJ,EAAQ;IACNnC,MAAM,CAACqC,IAAP,CAAY,OAAZ,EAAqBF,EAArB;EACD,CAFD,MAEO,IAAIzC,IAAI,CAAC4C,iBAAL,CAAuBT,KAAvB,CAAJ,EAAmC;IACxCC,KAAK,CAAClB,OAAN,GAAgB,KAAhB;IACA,IAAI,CAACkB,KAAK,CAACpB,KAAX,EACE6B,UAAU,CAACvC,MAAD,EAAS8B,KAAT,CAAV;EACH,CAJM,MAIA,IAAIA,KAAK,CAACzB,UAAN,IAAoBwB,KAAK,IAAIA,KAAK,CAACrC,MAAN,GAAe,CAAhD,EAAmD;IACxD,IAAIsC,KAAK,CAACpB,KAAN,IAAe,CAACwB,UAApB,EAAgC;MAC9B,IAAIM,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAV,CAAR;MACAzC,MAAM,CAACqC,IAAP,CAAY,OAAZ,EAAqBG,CAArB;IACD,CAHD,MAGO,IAAIV,KAAK,CAACnB,UAAN,IAAoBuB,UAAxB,EAAoC;MACzC,IAAIM,CAAC,GAAG,IAAIC,KAAJ,CAAU,kCAAV,CAAR;MACAzC,MAAM,CAACqC,IAAP,CAAY,OAAZ,EAAqBG,CAArB;IACD,CAHM,MAGA;MACL,IAAIV,KAAK,CAACR,OAAN,IAAiB,CAACY,UAAlB,IAAgC,CAACX,QAArC,EACEM,KAAK,GAAGC,KAAK,CAACR,OAAN,CAAcoB,KAAd,CAAoBb,KAApB,CAAR;MAEF,IAAI,CAACK,UAAL,EACEJ,KAAK,CAAClB,OAAN,GAAgB,KAAhB,CALG,CAOL;;MACA,IAAIkB,KAAK,CAACrB,OAAN,IAAiBqB,KAAK,CAACtC,MAAN,KAAiB,CAAlC,IAAuC,CAACsC,KAAK,CAACjB,IAAlD,EAAwD;QACtDb,MAAM,CAACqC,IAAP,CAAY,MAAZ,EAAoBR,KAApB;QACA7B,MAAM,CAAC2C,IAAP,CAAY,CAAZ;MACD,CAHD,MAGO;QACL;QACAb,KAAK,CAACtC,MAAN,IAAgBsC,KAAK,CAACzB,UAAN,GAAmB,CAAnB,GAAuBwB,KAAK,CAACrC,MAA7C;QACA,IAAI0C,UAAJ,EACEJ,KAAK,CAACxB,MAAN,CAAa2B,OAAb,CAAqBJ,KAArB,EADF,KAGEC,KAAK,CAACxB,MAAN,CAAasB,IAAb,CAAkBC,KAAlB;QAEF,IAAIC,KAAK,CAAChB,YAAV,EACE8B,YAAY,CAAC5C,MAAD,CAAZ;MACH;;MAED6C,aAAa,CAAC7C,MAAD,EAAS8B,KAAT,CAAb;IACD;EACF,CAhCM,MAgCA,IAAI,CAACI,UAAL,EAAiB;IACtBJ,KAAK,CAAClB,OAAN,GAAgB,KAAhB;EACD;;EAED,OAAOkC,YAAY,CAAChB,KAAD,CAAnB;AACD,C,CAID;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,YAAT,CAAsBhB,KAAtB,EAA6B;EAC3B,OAAO,CAACA,KAAK,CAACpB,KAAP,KACCoB,KAAK,CAAChB,YAAN,IACAgB,KAAK,CAACtC,MAAN,GAAesC,KAAK,CAAC3B,aADrB,IAEA2B,KAAK,CAACtC,MAAN,KAAiB,CAHlB,CAAP;AAID,C,CAED;;;AACAX,QAAQ,CAAC8C,SAAT,CAAmBoB,WAAnB,GAAiC,UAASC,GAAT,EAAc;EAC7C,IAAI,CAACpD,aAAL,EACEA,aAAa,GAAGb,OAAO,CAAC,iBAAD,CAAP,CAA2Ba,aAA3C;EACF,KAAK4B,cAAL,CAAoBF,OAApB,GAA8B,IAAI1B,aAAJ,CAAkBoD,GAAlB,CAA9B;EACA,KAAKxB,cAAL,CAAoBD,QAApB,GAA+ByB,GAA/B;EACA,OAAO,IAAP;AACD,CAND,C,CAQA;;;AACA,IAAIC,OAAO,GAAG,QAAd;;AACA,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;EAChC,IAAIA,CAAC,IAAIF,OAAT,EAAkB;IAChBE,CAAC,GAAGF,OAAJ;EACD,CAFD,MAEO;IACL;IACAE,CAAC;;IACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,KAAK,CAA9B,EAAiCD,CAAC,IAAIA,CAAC,IAAIC,CAAV;;IACjCD,CAAC;EACF;;EACD,OAAOA,CAAP;AACD;;AAED,SAASE,aAAT,CAAuBF,CAAvB,EAA0BrB,KAA1B,EAAiC;EAC/B,IAAIA,KAAK,CAACtC,MAAN,KAAiB,CAAjB,IAAsBsC,KAAK,CAACpB,KAAhC,EACE,OAAO,CAAP;EAEF,IAAIoB,KAAK,CAACzB,UAAV,EACE,OAAO8C,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAArB;;EAEF,IAAIG,KAAK,CAACH,CAAD,CAAL,IAAYzD,IAAI,CAAC6D,MAAL,CAAYJ,CAAZ,CAAhB,EAAgC;IAC9B;IACA,IAAIrB,KAAK,CAACrB,OAAN,IAAiBqB,KAAK,CAACxB,MAAN,CAAad,MAAlC,EACE,OAAOsC,KAAK,CAACxB,MAAN,CAAa,CAAb,EAAgBd,MAAvB,CADF,KAGE,OAAOsC,KAAK,CAACtC,MAAb;EACH;;EAED,IAAI2D,CAAC,IAAI,CAAT,EACE,OAAO,CAAP,CAhB6B,CAkB/B;EACA;EACA;EACA;;EACA,IAAIA,CAAC,GAAGrB,KAAK,CAAC3B,aAAd,EACE2B,KAAK,CAAC3B,aAAN,GAAsB+C,qBAAqB,CAACC,CAAD,CAA3C,CAvB6B,CAyB/B;;EACA,IAAIA,CAAC,GAAGrB,KAAK,CAACtC,MAAd,EAAsB;IACpB,IAAI,CAACsC,KAAK,CAACpB,KAAX,EAAkB;MAChBoB,KAAK,CAAChB,YAAN,GAAqB,IAArB;MACA,OAAO,CAAP;IACD,CAHD,MAIE,OAAOgB,KAAK,CAACtC,MAAb;EACH;;EAED,OAAO2D,CAAP;AACD,C,CAED;;;AACAtE,QAAQ,CAAC8C,SAAT,CAAmBgB,IAAnB,GAA0B,UAASQ,CAAT,EAAY;EACpCtD,KAAK,CAAC,MAAD,EAASsD,CAAT,CAAL;EACA,IAAIrB,KAAK,GAAG,KAAKN,cAAjB;EACA,IAAIgC,KAAK,GAAGL,CAAZ;EAEA,IAAI,CAACzD,IAAI,CAAC+D,QAAL,CAAcN,CAAd,CAAD,IAAqBA,CAAC,GAAG,CAA7B,EACErB,KAAK,CAACf,eAAN,GAAwB,KAAxB,CANkC,CAQpC;EACA;EACA;;EACA,IAAIoC,CAAC,KAAK,CAAN,IACArB,KAAK,CAAChB,YADN,KAECgB,KAAK,CAACtC,MAAN,IAAgBsC,KAAK,CAAC3B,aAAtB,IAAuC2B,KAAK,CAACpB,KAF9C,CAAJ,EAE0D;IACxDb,KAAK,CAAC,oBAAD,EAAuBiC,KAAK,CAACtC,MAA7B,EAAqCsC,KAAK,CAACpB,KAA3C,CAAL;IACA,IAAIoB,KAAK,CAACtC,MAAN,KAAiB,CAAjB,IAAsBsC,KAAK,CAACpB,KAAhC,EACEgD,WAAW,CAAC,IAAD,CAAX,CADF,KAGEd,YAAY,CAAC,IAAD,CAAZ;IACF,OAAO,IAAP;EACD;;EAEDO,CAAC,GAAGE,aAAa,CAACF,CAAD,EAAIrB,KAAJ,CAAjB,CAtBoC,CAwBpC;;EACA,IAAIqB,CAAC,KAAK,CAAN,IAAWrB,KAAK,CAACpB,KAArB,EAA4B;IAC1B,IAAIoB,KAAK,CAACtC,MAAN,KAAiB,CAArB,EACEkE,WAAW,CAAC,IAAD,CAAX;IACF,OAAO,IAAP;EACD,CA7BmC,CA+BpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;EACA,IAAIC,MAAM,GAAG7B,KAAK,CAAChB,YAAnB;EACAjB,KAAK,CAAC,eAAD,EAAkB8D,MAAlB,CAAL,CAvDoC,CAyDpC;;EACA,IAAI7B,KAAK,CAACtC,MAAN,KAAiB,CAAjB,IAAsBsC,KAAK,CAACtC,MAAN,GAAe2D,CAAf,GAAmBrB,KAAK,CAAC3B,aAAnD,EAAkE;IAChEwD,MAAM,GAAG,IAAT;IACA9D,KAAK,CAAC,4BAAD,EAA+B8D,MAA/B,CAAL;EACD,CA7DmC,CA+DpC;EACA;;;EACA,IAAI7B,KAAK,CAACpB,KAAN,IAAeoB,KAAK,CAAClB,OAAzB,EAAkC;IAChC+C,MAAM,GAAG,KAAT;IACA9D,KAAK,CAAC,kBAAD,EAAqB8D,MAArB,CAAL;EACD;;EAED,IAAIA,MAAJ,EAAY;IACV9D,KAAK,CAAC,SAAD,CAAL;IACAiC,KAAK,CAAClB,OAAN,GAAgB,IAAhB;IACAkB,KAAK,CAACjB,IAAN,GAAa,IAAb,CAHU,CAIV;;IACA,IAAIiB,KAAK,CAACtC,MAAN,KAAiB,CAArB,EACEsC,KAAK,CAAChB,YAAN,GAAqB,IAArB,CANQ,CAOV;;IACA,KAAK8C,KAAL,CAAW9B,KAAK,CAAC3B,aAAjB;;IACA2B,KAAK,CAACjB,IAAN,GAAa,KAAb;EACD,CAhFmC,CAkFpC;EACA;;;EACA,IAAI8C,MAAM,IAAI,CAAC7B,KAAK,CAAClB,OAArB,EACEuC,CAAC,GAAGE,aAAa,CAACG,KAAD,EAAQ1B,KAAR,CAAjB;EAEF,IAAI+B,GAAJ;EACA,IAAIV,CAAC,GAAG,CAAR,EACEU,GAAG,GAAGC,QAAQ,CAACX,CAAD,EAAIrB,KAAJ,CAAd,CADF,KAGE+B,GAAG,GAAG,IAAN;;EAEF,IAAInE,IAAI,CAAC6D,MAAL,CAAYM,GAAZ,CAAJ,EAAsB;IACpB/B,KAAK,CAAChB,YAAN,GAAqB,IAArB;IACAqC,CAAC,GAAG,CAAJ;EACD;;EAEDrB,KAAK,CAACtC,MAAN,IAAgB2D,CAAhB,CAlGoC,CAoGpC;EACA;;EACA,IAAIrB,KAAK,CAACtC,MAAN,KAAiB,CAAjB,IAAsB,CAACsC,KAAK,CAACpB,KAAjC,EACEoB,KAAK,CAAChB,YAAN,GAAqB,IAArB,CAvGkC,CAyGpC;;EACA,IAAI0C,KAAK,KAAKL,CAAV,IAAerB,KAAK,CAACpB,KAArB,IAA8BoB,KAAK,CAACtC,MAAN,KAAiB,CAAnD,EACEkE,WAAW,CAAC,IAAD,CAAX;EAEF,IAAI,CAAChE,IAAI,CAAC6D,MAAL,CAAYM,GAAZ,CAAL,EACE,KAAKxB,IAAL,CAAU,MAAV,EAAkBwB,GAAlB;EAEF,OAAOA,GAAP;AACD,CAjHD;;AAmHA,SAASzB,YAAT,CAAsBN,KAAtB,EAA6BD,KAA7B,EAAoC;EAClC,IAAIM,EAAE,GAAG,IAAT;;EACA,IAAI,CAACzC,IAAI,CAACqE,QAAL,CAAclC,KAAd,CAAD,IACA,CAACnC,IAAI,CAACqC,QAAL,CAAcF,KAAd,CADD,IAEA,CAACnC,IAAI,CAAC4C,iBAAL,CAAuBT,KAAvB,CAFD,IAGA,CAACC,KAAK,CAACzB,UAHX,EAGuB;IACrB8B,EAAE,GAAG,IAAI6B,SAAJ,CAAc,iCAAd,CAAL;EACD;;EACD,OAAO7B,EAAP;AACD;;AAGD,SAASI,UAAT,CAAoBvC,MAApB,EAA4B8B,KAA5B,EAAmC;EACjC,IAAIA,KAAK,CAACR,OAAN,IAAiB,CAACQ,KAAK,CAACpB,KAA5B,EAAmC;IACjC,IAAImB,KAAK,GAAGC,KAAK,CAACR,OAAN,CAAc2C,GAAd,EAAZ;;IACA,IAAIpC,KAAK,IAAIA,KAAK,CAACrC,MAAnB,EAA2B;MACzBsC,KAAK,CAACxB,MAAN,CAAasB,IAAb,CAAkBC,KAAlB;MACAC,KAAK,CAACtC,MAAN,IAAgBsC,KAAK,CAACzB,UAAN,GAAmB,CAAnB,GAAuBwB,KAAK,CAACrC,MAA7C;IACD;EACF;;EACDsC,KAAK,CAACpB,KAAN,GAAc,IAAd,CARiC,CAUjC;;EACAkC,YAAY,CAAC5C,MAAD,CAAZ;AACD,C,CAED;AACA;AACA;;;AACA,SAAS4C,YAAT,CAAsB5C,MAAtB,EAA8B;EAC5B,IAAI8B,KAAK,GAAG9B,MAAM,CAACwB,cAAnB;EACAM,KAAK,CAAChB,YAAN,GAAqB,KAArB;;EACA,IAAI,CAACgB,KAAK,CAACf,eAAX,EAA4B;IAC1BlB,KAAK,CAAC,cAAD,EAAiBiC,KAAK,CAACrB,OAAvB,CAAL;IACAqB,KAAK,CAACf,eAAN,GAAwB,IAAxB;IACA,IAAIe,KAAK,CAACjB,IAAV,EACEqD,OAAO,CAACC,QAAR,CAAiB,YAAW;MAC1BC,aAAa,CAACpE,MAAD,CAAb;IACD,CAFD,EADF,KAKEoE,aAAa,CAACpE,MAAD,CAAb;EACH;AACF;;AAED,SAASoE,aAAT,CAAuBpE,MAAvB,EAA+B;EAC7BH,KAAK,CAAC,eAAD,CAAL;EACAG,MAAM,CAACqC,IAAP,CAAY,UAAZ;EACAgC,IAAI,CAACrE,MAAD,CAAJ;AACD,C,CAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6C,aAAT,CAAuB7C,MAAvB,EAA+B8B,KAA/B,EAAsC;EACpC,IAAI,CAACA,KAAK,CAACT,WAAX,EAAwB;IACtBS,KAAK,CAACT,WAAN,GAAoB,IAApB;IACA6C,OAAO,CAACC,QAAR,CAAiB,YAAW;MAC1BG,cAAc,CAACtE,MAAD,EAAS8B,KAAT,CAAd;IACD,CAFD;EAGD;AACF;;AAED,SAASwC,cAAT,CAAwBtE,MAAxB,EAAgC8B,KAAhC,EAAuC;EACrC,IAAIyC,GAAG,GAAGzC,KAAK,CAACtC,MAAhB;;EACA,OAAO,CAACsC,KAAK,CAAClB,OAAP,IAAkB,CAACkB,KAAK,CAACrB,OAAzB,IAAoC,CAACqB,KAAK,CAACpB,KAA3C,IACAoB,KAAK,CAACtC,MAAN,GAAesC,KAAK,CAAC3B,aAD5B,EAC2C;IACzCN,KAAK,CAAC,sBAAD,CAAL;IACAG,MAAM,CAAC2C,IAAP,CAAY,CAAZ;IACA,IAAI4B,GAAG,KAAKzC,KAAK,CAACtC,MAAlB,EACE;MACA,MAFF,KAIE+E,GAAG,GAAGzC,KAAK,CAACtC,MAAZ;EACH;;EACDsC,KAAK,CAACT,WAAN,GAAoB,KAApB;AACD,C,CAED;AACA;AACA;AACA;;;AACAxC,QAAQ,CAAC8C,SAAT,CAAmBiC,KAAnB,GAA2B,UAAST,CAAT,EAAY;EACrC,KAAKd,IAAL,CAAU,OAAV,EAAmB,IAAII,KAAJ,CAAU,iBAAV,CAAnB;AACD,CAFD;;AAIA5D,QAAQ,CAAC8C,SAAT,CAAmB6C,IAAnB,GAA0B,UAASC,IAAT,EAAeC,QAAf,EAAyB;EACjD,IAAIC,GAAG,GAAG,IAAV;EACA,IAAI7C,KAAK,GAAG,KAAKN,cAAjB;;EAEA,QAAQM,KAAK,CAACtB,UAAd;IACE,KAAK,CAAL;MACEsB,KAAK,CAACvB,KAAN,GAAckE,IAAd;MACA;;IACF,KAAK,CAAL;MACE3C,KAAK,CAACvB,KAAN,GAAc,CAACuB,KAAK,CAACvB,KAAP,EAAckE,IAAd,CAAd;MACA;;IACF;MACE3C,KAAK,CAACvB,KAAN,CAAYqB,IAAZ,CAAiB6C,IAAjB;MACA;EATJ;;EAWA3C,KAAK,CAACtB,UAAN,IAAoB,CAApB;EACAX,KAAK,CAAC,uBAAD,EAA0BiC,KAAK,CAACtB,UAAhC,EAA4CkE,QAA5C,CAAL;EAEA,IAAIE,KAAK,GAAG,CAAC,CAACF,QAAD,IAAaA,QAAQ,CAACT,GAAT,KAAiB,KAA/B,KACAQ,IAAI,KAAKP,OAAO,CAACW,MADjB,IAEAJ,IAAI,KAAKP,OAAO,CAACY,MAF7B;EAIA,IAAIC,KAAK,GAAGH,KAAK,GAAGI,KAAH,GAAWC,OAA5B;EACA,IAAInD,KAAK,CAACnB,UAAV,EACEuD,OAAO,CAACC,QAAR,CAAiBY,KAAjB,EADF,KAGEJ,GAAG,CAACO,IAAJ,CAAS,KAAT,EAAgBH,KAAhB;EAEFN,IAAI,CAACU,EAAL,CAAQ,QAAR,EAAkBC,QAAlB;;EACA,SAASA,QAAT,CAAkB3D,QAAlB,EAA4B;IAC1B5B,KAAK,CAAC,UAAD,CAAL;;IACA,IAAI4B,QAAQ,KAAKkD,GAAjB,EAAsB;MACpBM,OAAO;IACR;EACF;;EAED,SAASD,KAAT,GAAiB;IACfnF,KAAK,CAAC,OAAD,CAAL;IACA4E,IAAI,CAACR,GAAL;EACD,CAvCgD,CAyCjD;EACA;EACA;EACA;;;EACA,IAAIoB,OAAO,GAAGC,WAAW,CAACX,GAAD,CAAzB;EACAF,IAAI,CAACU,EAAL,CAAQ,OAAR,EAAiBE,OAAjB;;EAEA,SAASJ,OAAT,GAAmB;IACjBpF,KAAK,CAAC,SAAD,CAAL,CADiB,CAEjB;;IACA4E,IAAI,CAACc,cAAL,CAAoB,OAApB,EAA6BC,OAA7B;IACAf,IAAI,CAACc,cAAL,CAAoB,QAApB,EAA8BE,QAA9B;IACAhB,IAAI,CAACc,cAAL,CAAoB,OAApB,EAA6BF,OAA7B;IACAZ,IAAI,CAACc,cAAL,CAAoB,OAApB,EAA6BG,OAA7B;IACAjB,IAAI,CAACc,cAAL,CAAoB,QAApB,EAA8BH,QAA9B;IACAT,GAAG,CAACY,cAAJ,CAAmB,KAAnB,EAA0BP,KAA1B;IACAL,GAAG,CAACY,cAAJ,CAAmB,KAAnB,EAA0BN,OAA1B;IACAN,GAAG,CAACY,cAAJ,CAAmB,MAAnB,EAA2BI,MAA3B,EAViB,CAYjB;IACA;IACA;IACA;IACA;;IACA,IAAI7D,KAAK,CAACV,UAAN,KACC,CAACqD,IAAI,CAACmB,cAAN,IAAwBnB,IAAI,CAACmB,cAAL,CAAoBC,SAD7C,CAAJ,EAEER,OAAO;EACV;;EAEDV,GAAG,CAACQ,EAAJ,CAAO,MAAP,EAAeQ,MAAf;;EACA,SAASA,MAAT,CAAgB9D,KAAhB,EAAuB;IACrBhC,KAAK,CAAC,QAAD,CAAL;IACA,IAAIgE,GAAG,GAAGY,IAAI,CAAC/B,KAAL,CAAWb,KAAX,CAAV;;IACA,IAAI,UAAUgC,GAAd,EAAmB;MACjBhE,KAAK,CAAC,6BAAD,EACC8E,GAAG,CAACnD,cAAJ,CAAmBJ,UADpB,CAAL;MAEAuD,GAAG,CAACnD,cAAJ,CAAmBJ,UAAnB;MACAuD,GAAG,CAACmB,KAAJ;IACD;EACF,CAhFgD,CAkFjD;EACA;;;EACA,SAASJ,OAAT,CAAiBvD,EAAjB,EAAqB;IACnBtC,KAAK,CAAC,SAAD,EAAYsC,EAAZ,CAAL;IACA4D,MAAM;IACNtB,IAAI,CAACc,cAAL,CAAoB,OAApB,EAA6BG,OAA7B;IACA,IAAIxG,EAAE,CAACE,aAAH,CAAiBqF,IAAjB,EAAuB,OAAvB,MAAoC,CAAxC,EACEA,IAAI,CAACpC,IAAL,CAAU,OAAV,EAAmBF,EAAnB;EACH,CA1FgD,CA2FjD;EACA;;;EACA,IAAI,CAACsC,IAAI,CAACuB,OAAN,IAAiB,CAACvB,IAAI,CAACuB,OAAL,CAAaC,KAAnC,EACExB,IAAI,CAACU,EAAL,CAAQ,OAAR,EAAiBO,OAAjB,EADF,KAEK,IAAI5G,OAAO,CAAC2F,IAAI,CAACuB,OAAL,CAAaC,KAAd,CAAX,EACHxB,IAAI,CAACuB,OAAL,CAAaC,KAAb,CAAmBhE,OAAnB,CAA2ByD,OAA3B,EADG,KAGHjB,IAAI,CAACuB,OAAL,CAAaC,KAAb,GAAqB,CAACP,OAAD,EAAUjB,IAAI,CAACuB,OAAL,CAAaC,KAAvB,CAArB,CAlG+C,CAsGjD;;EACA,SAAST,OAAT,GAAmB;IACjBf,IAAI,CAACc,cAAL,CAAoB,QAApB,EAA8BE,QAA9B;IACAM,MAAM;EACP;;EACDtB,IAAI,CAACS,IAAL,CAAU,OAAV,EAAmBM,OAAnB;;EACA,SAASC,QAAT,GAAoB;IAClB5F,KAAK,CAAC,UAAD,CAAL;IACA4E,IAAI,CAACc,cAAL,CAAoB,OAApB,EAA6BC,OAA7B;IACAO,MAAM;EACP;;EACDtB,IAAI,CAACS,IAAL,CAAU,QAAV,EAAoBO,QAApB;;EAEA,SAASM,MAAT,GAAkB;IAChBlG,KAAK,CAAC,QAAD,CAAL;IACA8E,GAAG,CAACoB,MAAJ,CAAWtB,IAAX;EACD,CAtHgD,CAwHjD;;;EACAA,IAAI,CAACpC,IAAL,CAAU,MAAV,EAAkBsC,GAAlB,EAzHiD,CA2HjD;;EACA,IAAI,CAAC7C,KAAK,CAACrB,OAAX,EAAoB;IAClBZ,KAAK,CAAC,aAAD,CAAL;IACA8E,GAAG,CAACuB,MAAJ;EACD;;EAED,OAAOzB,IAAP;AACD,CAlID;;AAoIA,SAASa,WAAT,CAAqBX,GAArB,EAA0B;EACxB,OAAO,YAAW;IAChB,IAAI7C,KAAK,GAAG6C,GAAG,CAACnD,cAAhB;IACA3B,KAAK,CAAC,aAAD,EAAgBiC,KAAK,CAACV,UAAtB,CAAL;IACA,IAAIU,KAAK,CAACV,UAAV,EACEU,KAAK,CAACV,UAAN;;IACF,IAAIU,KAAK,CAACV,UAAN,KAAqB,CAArB,IAA0BlC,EAAE,CAACE,aAAH,CAAiBuF,GAAjB,EAAsB,MAAtB,CAA9B,EAA6D;MAC3D7C,KAAK,CAACrB,OAAN,GAAgB,IAAhB;MACA4D,IAAI,CAACM,GAAD,CAAJ;IACD;EACF,CATD;AAUD;;AAGD9F,QAAQ,CAAC8C,SAAT,CAAmBoE,MAAnB,GAA4B,UAAStB,IAAT,EAAe;EACzC,IAAI3C,KAAK,GAAG,KAAKN,cAAjB,CADyC,CAGzC;;EACA,IAAIM,KAAK,CAACtB,UAAN,KAAqB,CAAzB,EACE,OAAO,IAAP,CALuC,CAOzC;;EACA,IAAIsB,KAAK,CAACtB,UAAN,KAAqB,CAAzB,EAA4B;IAC1B;IACA,IAAIiE,IAAI,IAAIA,IAAI,KAAK3C,KAAK,CAACvB,KAA3B,EACE,OAAO,IAAP;IAEF,IAAI,CAACkE,IAAL,EACEA,IAAI,GAAG3C,KAAK,CAACvB,KAAb,CANwB,CAQ1B;;IACAuB,KAAK,CAACvB,KAAN,GAAc,IAAd;IACAuB,KAAK,CAACtB,UAAN,GAAmB,CAAnB;IACAsB,KAAK,CAACrB,OAAN,GAAgB,KAAhB;IACA,IAAIgE,IAAJ,EACEA,IAAI,CAACpC,IAAL,CAAU,QAAV,EAAoB,IAApB;IACF,OAAO,IAAP;EACD,CAvBwC,CAyBzC;;;EAEA,IAAI,CAACoC,IAAL,EAAW;IACT;IACA,IAAI0B,KAAK,GAAGrE,KAAK,CAACvB,KAAlB;IACA,IAAIgE,GAAG,GAAGzC,KAAK,CAACtB,UAAhB;IACAsB,KAAK,CAACvB,KAAN,GAAc,IAAd;IACAuB,KAAK,CAACtB,UAAN,GAAmB,CAAnB;IACAsB,KAAK,CAACrB,OAAN,GAAgB,KAAhB;;IAEA,KAAK,IAAI2F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,GAApB,EAAyB6B,CAAC,EAA1B,EACED,KAAK,CAACC,CAAD,CAAL,CAAS/D,IAAT,CAAc,QAAd,EAAwB,IAAxB;;IACF,OAAO,IAAP;EACD,CAtCwC,CAwCzC;;;EACA,IAAI+D,CAAC,GAAGC,OAAO,CAACvE,KAAK,CAACvB,KAAP,EAAckE,IAAd,CAAf;EACA,IAAI2B,CAAC,KAAK,CAAC,CAAX,EACE,OAAO,IAAP;EAEFtE,KAAK,CAACvB,KAAN,CAAY+F,MAAZ,CAAmBF,CAAnB,EAAsB,CAAtB;EACAtE,KAAK,CAACtB,UAAN,IAAoB,CAApB;EACA,IAAIsB,KAAK,CAACtB,UAAN,KAAqB,CAAzB,EACEsB,KAAK,CAACvB,KAAN,GAAcuB,KAAK,CAACvB,KAAN,CAAY,CAAZ,CAAd;EAEFkE,IAAI,CAACpC,IAAL,CAAU,QAAV,EAAoB,IAApB;EAEA,OAAO,IAAP;AACD,CArDD,C,CAuDA;AACA;;;AACAxD,QAAQ,CAAC8C,SAAT,CAAmBwD,EAAnB,GAAwB,UAASoB,EAAT,EAAaC,EAAb,EAAiB;EACvC,IAAIC,GAAG,GAAGhH,MAAM,CAACkC,SAAP,CAAiBwD,EAAjB,CAAoBzD,IAApB,CAAyB,IAAzB,EAA+B6E,EAA/B,EAAmCC,EAAnC,CAAV,CADuC,CAGvC;EACA;;EACA,IAAID,EAAE,KAAK,MAAP,IAAiB,UAAU,KAAK/E,cAAL,CAAoBf,OAAnD,EAA4D;IAC1D,KAAKyF,MAAL;EACD;;EAED,IAAIK,EAAE,KAAK,UAAP,IAAqB,KAAK9E,QAA9B,EAAwC;IACtC,IAAIK,KAAK,GAAG,KAAKN,cAAjB;;IACA,IAAI,CAACM,KAAK,CAACd,iBAAX,EAA8B;MAC5Bc,KAAK,CAACd,iBAAN,GAA0B,IAA1B;MACAc,KAAK,CAACf,eAAN,GAAwB,KAAxB;MACAe,KAAK,CAAChB,YAAN,GAAqB,IAArB;;MACA,IAAI,CAACgB,KAAK,CAAClB,OAAX,EAAoB;QAClB,IAAI8F,IAAI,GAAG,IAAX;QACAxC,OAAO,CAACC,QAAR,CAAiB,YAAW;UAC1BtE,KAAK,CAAC,0BAAD,CAAL;UACA6G,IAAI,CAAC/D,IAAL,CAAU,CAAV;QACD,CAHD;MAID,CAND,MAMO,IAAIb,KAAK,CAACtC,MAAV,EAAkB;QACvBoD,YAAY,CAAC,IAAD,EAAOd,KAAP,CAAZ;MACD;IACF;EACF;;EAED,OAAO2E,GAAP;AACD,CA5BD;;AA6BA5H,QAAQ,CAAC8C,SAAT,CAAmBgF,WAAnB,GAAiC9H,QAAQ,CAAC8C,SAAT,CAAmBwD,EAApD,C,CAEA;AACA;;AACAtG,QAAQ,CAAC8C,SAAT,CAAmBuE,MAAnB,GAA4B,YAAW;EACrC,IAAIpE,KAAK,GAAG,KAAKN,cAAjB;;EACA,IAAI,CAACM,KAAK,CAACrB,OAAX,EAAoB;IAClBZ,KAAK,CAAC,QAAD,CAAL;IACAiC,KAAK,CAACrB,OAAN,GAAgB,IAAhB;;IACA,IAAI,CAACqB,KAAK,CAAClB,OAAX,EAAoB;MAClBf,KAAK,CAAC,eAAD,CAAL;MACA,KAAK8C,IAAL,CAAU,CAAV;IACD;;IACDuD,MAAM,CAAC,IAAD,EAAOpE,KAAP,CAAN;EACD;;EACD,OAAO,IAAP;AACD,CAZD;;AAcA,SAASoE,MAAT,CAAgBlG,MAAhB,EAAwB8B,KAAxB,EAA+B;EAC7B,IAAI,CAACA,KAAK,CAAC8E,eAAX,EAA4B;IAC1B9E,KAAK,CAAC8E,eAAN,GAAwB,IAAxB;IACA1C,OAAO,CAACC,QAAR,CAAiB,YAAW;MAC1B0C,OAAO,CAAC7G,MAAD,EAAS8B,KAAT,CAAP;IACD,CAFD;EAGD;AACF;;AAED,SAAS+E,OAAT,CAAiB7G,MAAjB,EAAyB8B,KAAzB,EAAgC;EAC9BA,KAAK,CAAC8E,eAAN,GAAwB,KAAxB;EACA5G,MAAM,CAACqC,IAAP,CAAY,QAAZ;EACAgC,IAAI,CAACrE,MAAD,CAAJ;EACA,IAAI8B,KAAK,CAACrB,OAAN,IAAiB,CAACqB,KAAK,CAAClB,OAA5B,EACEZ,MAAM,CAAC2C,IAAP,CAAY,CAAZ;AACH;;AAED9D,QAAQ,CAAC8C,SAAT,CAAmBmE,KAAnB,GAA2B,YAAW;EACpCjG,KAAK,CAAC,uBAAD,EAA0B,KAAK2B,cAAL,CAAoBf,OAA9C,CAAL;;EACA,IAAI,UAAU,KAAKe,cAAL,CAAoBf,OAAlC,EAA2C;IACzCZ,KAAK,CAAC,OAAD,CAAL;IACA,KAAK2B,cAAL,CAAoBf,OAApB,GAA8B,KAA9B;IACA,KAAK4B,IAAL,CAAU,OAAV;EACD;;EACD,OAAO,IAAP;AACD,CARD;;AAUA,SAASgC,IAAT,CAAcrE,MAAd,EAAsB;EACpB,IAAI8B,KAAK,GAAG9B,MAAM,CAACwB,cAAnB;EACA3B,KAAK,CAAC,MAAD,EAASiC,KAAK,CAACrB,OAAf,CAAL;;EACA,IAAIqB,KAAK,CAACrB,OAAV,EAAmB;IACjB,GAAG;MACD,IAAIoB,KAAK,GAAG7B,MAAM,CAAC2C,IAAP,EAAZ;IACD,CAFD,QAES,SAASd,KAAT,IAAkBC,KAAK,CAACrB,OAFjC;EAGD;AACF,C,CAED;AACA;AACA;;;AACA5B,QAAQ,CAAC8C,SAAT,CAAmBmF,IAAnB,GAA0B,UAAS9G,MAAT,EAAiB;EACzC,IAAI8B,KAAK,GAAG,KAAKN,cAAjB;EACA,IAAIuF,MAAM,GAAG,KAAb;EAEA,IAAIL,IAAI,GAAG,IAAX;EACA1G,MAAM,CAACmF,EAAP,CAAU,KAAV,EAAiB,YAAW;IAC1BtF,KAAK,CAAC,aAAD,CAAL;;IACA,IAAIiC,KAAK,CAACR,OAAN,IAAiB,CAACQ,KAAK,CAACpB,KAA5B,EAAmC;MACjC,IAAImB,KAAK,GAAGC,KAAK,CAACR,OAAN,CAAc2C,GAAd,EAAZ;MACA,IAAIpC,KAAK,IAAIA,KAAK,CAACrC,MAAnB,EACEkH,IAAI,CAAC9E,IAAL,CAAUC,KAAV;IACH;;IAED6E,IAAI,CAAC9E,IAAL,CAAU,IAAV;EACD,CATD;EAWA5B,MAAM,CAACmF,EAAP,CAAU,MAAV,EAAkB,UAAStD,KAAT,EAAgB;IAChChC,KAAK,CAAC,cAAD,CAAL;IACA,IAAIiC,KAAK,CAACR,OAAV,EACEO,KAAK,GAAGC,KAAK,CAACR,OAAN,CAAcoB,KAAd,CAAoBb,KAApB,CAAR;IACF,IAAI,CAACA,KAAD,IAAU,CAACC,KAAK,CAACzB,UAAP,IAAqB,CAACwB,KAAK,CAACrC,MAA1C,EACE;IAEF,IAAIqE,GAAG,GAAG6C,IAAI,CAAC9E,IAAL,CAAUC,KAAV,CAAV;;IACA,IAAI,CAACgC,GAAL,EAAU;MACRkD,MAAM,GAAG,IAAT;MACA/G,MAAM,CAAC8F,KAAP;IACD;EACF,CAZD,EAhByC,CA8BzC;EACA;;EACA,KAAK,IAAIM,CAAT,IAAcpG,MAAd,EAAsB;IACpB,IAAIN,IAAI,CAACsH,UAAL,CAAgBhH,MAAM,CAACoG,CAAD,CAAtB,KAA8B1G,IAAI,CAACuH,WAAL,CAAiB,KAAKb,CAAL,CAAjB,CAAlC,EAA6D;MAC3D,KAAKA,CAAL,IAAU,UAASc,MAAT,EAAiB;QAAE,OAAO,YAAW;UAC7C,OAAOlH,MAAM,CAACkH,MAAD,CAAN,CAAeC,KAAf,CAAqBnH,MAArB,EAA6BoH,SAA7B,CAAP;QACD,CAF4B;MAE3B,CAFQ,CAEPhB,CAFO,CAAV;IAGD;EACF,CAtCwC,CAwCzC;;;EACA,IAAIiB,MAAM,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,EAA8B,OAA9B,EAAuC,QAAvC,CAAb;EACAC,OAAO,CAACD,MAAD,EAAS,UAASd,EAAT,EAAa;IAC3BvG,MAAM,CAACmF,EAAP,CAAUoB,EAAV,EAAcG,IAAI,CAACrE,IAAL,CAAUkF,IAAV,CAAeb,IAAf,EAAqBH,EAArB,CAAd;EACD,CAFM,CAAP,CA1CyC,CA8CzC;EACA;;EACAG,IAAI,CAAC9C,KAAL,GAAa,UAAST,CAAT,EAAY;IACvBtD,KAAK,CAAC,eAAD,EAAkBsD,CAAlB,CAAL;;IACA,IAAI4D,MAAJ,EAAY;MACVA,MAAM,GAAG,KAAT;MACA/G,MAAM,CAACkG,MAAP;IACD;EACF,CAND;;EAQA,OAAOQ,IAAP;AACD,CAzDD,C,CA6DA;;;AACA7H,QAAQ,CAAC2I,SAAT,GAAqB1D,QAArB,C,CAEA;AACA;;AACA,SAASA,QAAT,CAAkBX,CAAlB,EAAqBrB,KAArB,EAA4B;EAC1B,IAAI2F,IAAI,GAAG3F,KAAK,CAACxB,MAAjB;EACA,IAAId,MAAM,GAAGsC,KAAK,CAACtC,MAAnB;EACA,IAAIkI,UAAU,GAAG,CAAC,CAAC5F,KAAK,CAACR,OAAzB;EACA,IAAIjB,UAAU,GAAG,CAAC,CAACyB,KAAK,CAACzB,UAAzB;EACA,IAAIwD,GAAJ,CAL0B,CAO1B;;EACA,IAAI4D,IAAI,CAACjI,MAAL,KAAgB,CAApB,EACE,OAAO,IAAP;EAEF,IAAIA,MAAM,KAAK,CAAf,EACEqE,GAAG,GAAG,IAAN,CADF,KAEK,IAAIxD,UAAJ,EACHwD,GAAG,GAAG4D,IAAI,CAACE,KAAL,EAAN,CADG,KAEA,IAAI,CAACxE,CAAD,IAAMA,CAAC,IAAI3D,MAAf,EAAuB;IAC1B;IACA,IAAIkI,UAAJ,EACE7D,GAAG,GAAG4D,IAAI,CAACG,IAAL,CAAU,EAAV,CAAN,CADF,KAGE/D,GAAG,GAAG7E,MAAM,CAAC6I,MAAP,CAAcJ,IAAd,EAAoBjI,MAApB,CAAN;IACFiI,IAAI,CAACjI,MAAL,GAAc,CAAd;EACD,CAPI,MAOE;IACL;IACA,IAAI2D,CAAC,GAAGsE,IAAI,CAAC,CAAD,CAAJ,CAAQjI,MAAhB,EAAwB;MACtB;MACA;MACA,IAAIsI,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAd;MACA5D,GAAG,GAAGiE,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa5E,CAAb,CAAN;MACAsE,IAAI,CAAC,CAAD,CAAJ,GAAUK,GAAG,CAACC,KAAJ,CAAU5E,CAAV,CAAV;IACD,CAND,MAMO,IAAIA,CAAC,KAAKsE,IAAI,CAAC,CAAD,CAAJ,CAAQjI,MAAlB,EAA0B;MAC/B;MACAqE,GAAG,GAAG4D,IAAI,CAACE,KAAL,EAAN;IACD,CAHM,MAGA;MACL;MACA;MACA,IAAID,UAAJ,EACE7D,GAAG,GAAG,EAAN,CADF,KAGEA,GAAG,GAAG,IAAI7E,MAAJ,CAAWmE,CAAX,CAAN;MAEF,IAAI6E,CAAC,GAAG,CAAR;;MACA,KAAK,IAAI5B,CAAC,GAAG,CAAR,EAAW6B,CAAC,GAAGR,IAAI,CAACjI,MAAzB,EAAiC4G,CAAC,GAAG6B,CAAJ,IAASD,CAAC,GAAG7E,CAA9C,EAAiDiD,CAAC,EAAlD,EAAsD;QACpD,IAAI0B,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAd;QACA,IAAIS,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASjF,CAAC,GAAG6E,CAAb,EAAgBF,GAAG,CAACtI,MAApB,CAAV;QAEA,IAAIkI,UAAJ,EACE7D,GAAG,IAAIiE,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAaG,GAAb,CAAP,CADF,KAGEJ,GAAG,CAACO,IAAJ,CAASxE,GAAT,EAAcmE,CAAd,EAAiB,CAAjB,EAAoBE,GAApB;QAEF,IAAIA,GAAG,GAAGJ,GAAG,CAACtI,MAAd,EACEiI,IAAI,CAAC,CAAD,CAAJ,GAAUK,GAAG,CAACC,KAAJ,CAAUG,GAAV,CAAV,CADF,KAGET,IAAI,CAACE,KAAL;QAEFK,CAAC,IAAIE,GAAL;MACD;IACF;EACF;EAED,OAAOrE,GAAP;AACD;;AAED,SAASH,WAAT,CAAqB1D,MAArB,EAA6B;EAC3B,IAAI8B,KAAK,GAAG9B,MAAM,CAACwB,cAAnB,CAD2B,CAG3B;EACA;;EACA,IAAIM,KAAK,CAACtC,MAAN,GAAe,CAAnB,EACE,MAAM,IAAIiD,KAAJ,CAAU,wCAAV,CAAN;;EAEF,IAAI,CAACX,KAAK,CAACnB,UAAX,EAAuB;IACrBmB,KAAK,CAACpB,KAAN,GAAc,IAAd;IACAwD,OAAO,CAACC,QAAR,CAAiB,YAAW;MAC1B;MACA,IAAI,CAACrC,KAAK,CAACnB,UAAP,IAAqBmB,KAAK,CAACtC,MAAN,KAAiB,CAA1C,EAA6C;QAC3CsC,KAAK,CAACnB,UAAN,GAAmB,IAAnB;QACAX,MAAM,CAACyB,QAAP,GAAkB,KAAlB;QACAzB,MAAM,CAACqC,IAAP,CAAY,KAAZ;MACD;IACF,CAPD;EAQD;AACF;;AAED,SAASiF,OAAT,CAAkBgB,EAAlB,EAAsBC,CAAtB,EAAyB;EACvB,KAAK,IAAInC,CAAC,GAAG,CAAR,EAAW6B,CAAC,GAAGK,EAAE,CAAC9I,MAAvB,EAA+B4G,CAAC,GAAG6B,CAAnC,EAAsC7B,CAAC,EAAvC,EAA2C;IACzCmC,CAAC,CAACD,EAAE,CAAClC,CAAD,CAAH,EAAQA,CAAR,CAAD;EACD;AACF;;AAED,SAASC,OAAT,CAAkBiC,EAAlB,EAAsBE,CAAtB,EAAyB;EACvB,KAAK,IAAIpC,CAAC,GAAG,CAAR,EAAW6B,CAAC,GAAGK,EAAE,CAAC9I,MAAvB,EAA+B4G,CAAC,GAAG6B,CAAnC,EAAsC7B,CAAC,EAAvC,EAA2C;IACzC,IAAIkC,EAAE,CAAClC,CAAD,CAAF,KAAUoC,CAAd,EAAiB,OAAOpC,CAAP;EAClB;;EACD,OAAO,CAAC,CAAR;AACD"},"metadata":{},"sourceType":"script"}