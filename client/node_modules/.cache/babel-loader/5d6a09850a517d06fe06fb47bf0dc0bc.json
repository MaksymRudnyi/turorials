{"ast":null,"code":"var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\", \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\", \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\", \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\", \"closeblock\", \"openvariable\", \"closevariable\", \"openbrace\", \"closebrace\", \"opencomment\", \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\", \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\", \"endblocktrans\", \"get_available_languages\", \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase(stream, state) {\n  var ch = stream.peek(); //Comment\n\n  if (state.incomment) {\n    if (!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n\n    return \"comment\"; //Tag\n  } else if (state.intag) {\n    //After operator\n    if (state.operator) {\n      state.operator = false;\n\n      if (stream.match(atom)) {\n        return \"atom\";\n      }\n\n      if (stream.match(number)) {\n        return \"number\";\n      }\n    } //After sign\n\n\n    if (state.sign) {\n      state.sign = false;\n\n      if (stream.match(atom)) {\n        return \"atom\";\n      }\n\n      if (stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if (state.instring) {\n      if (ch == state.instring) {\n        state.instring = false;\n      }\n\n      stream.next();\n      return \"string\";\n    } else if (ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n      state.intag = false;\n      return \"tag\";\n    } else if (stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if (stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if (stream.eat(\" \") || stream.sol()) {\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n\n        if (stream.match(atom)) {\n          return \"atom\";\n        }\n\n        if (stream.match(number)) {\n          return \"number\";\n        }\n\n        if (stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n    }\n\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n\n      if (!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n\n      return \"comment\"; //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n\n      if (ch == \"{\") {\n        state.intag = \"}\";\n      }\n\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n  }\n\n  stream.next();\n}\n\n;\nexport const jinja2 = {\n  startState: function () {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function (stream, state) {\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"{#\",\n        close: \"#}\"\n      }\n    }\n  }\n};","map":{"version":3,"names":["keywords","operator","sign","atom","number","RegExp","join","tokenBase","stream","state","ch","peek","incomment","skipTo","skipToEnd","eatWhile","intag","match","instring","next","eat","sol","jinja2","startState","tokenize","token","languageData","commentTokens","block","open","close"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/jinja2.js"],"sourcesContent":["var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n                \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n                \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n                \"ifequal\", \"endifequal\", \"ifnotequal\",\n                \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n                \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n                \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n                \"closeblock\", \"openvariable\", \"closevariable\",\n                \"openbrace\", \"closebrace\", \"opencomment\",\n                \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n                \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n                \"endblocktrans\", \"get_available_languages\",\n                \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase (stream, state) {\n  var ch = stream.peek();\n\n  //Comment\n  if (state.incomment) {\n    if(!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n    return \"comment\";\n    //Tag\n  } else if (state.intag) {\n    //After operator\n    if(state.operator) {\n      state.operator = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n    //After sign\n    if(state.sign) {\n      state.sign = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if(state.instring) {\n      if(ch == state.instring) {\n        state.instring = false;\n      }\n      stream.next();\n      return \"string\";\n    } else if(ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n      state.intag = false;\n      return \"tag\";\n    } else if(stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if(stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if(stream.eat(\" \") || stream.sol()) {\n        if(stream.match(keywords)) {\n          return \"keyword\";\n        }\n        if(stream.match(atom)) {\n          return \"atom\";\n        }\n        if(stream.match(number)) {\n          return \"number\";\n        }\n        if(stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n\n    }\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n      if(!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n      return \"comment\";\n      //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n      if(ch == \"{\") {\n        state.intag = \"}\";\n      }\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n  }\n  stream.next();\n};\n\nexport const jinja2 = {\n  startState: function () {\n    return {tokenize: tokenBase};\n  },\n  token: function (stream, state) {\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {block: {open: \"{#\", close: \"#}\"}}\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}