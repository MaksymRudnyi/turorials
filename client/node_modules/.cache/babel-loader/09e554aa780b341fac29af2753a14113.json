{"ast":null,"code":"/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\n\nvar deprecate = require('depd')('express');\n\nvar isIP = require('net').isIP;\n\nvar typeis = require('type-is');\n\nvar http = require('http');\n\nvar fresh = require('fresh');\n\nvar parseRange = require('range-parser');\n\nvar parse = require('parseurl');\n\nvar proxyaddr = require('proxy-addr');\n/**\n * Request prototype.\n * @public\n */\n\n\nvar req = Object.create(http.IncomingMessage.prototype);\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = req;\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get = req.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer || this.headers.referer;\n\n    default:\n      return this.headers[lc];\n  }\n};\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\n\nreq.accepts = function () {\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\n\nreq.acceptsEncodings = function () {\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings, 'req.acceptsEncoding: Use acceptsEncodings instead');\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function () {\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets, 'req.acceptsCharset: Use acceptsCharsets instead');\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function () {\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages, 'req.acceptsLanguage: Use acceptsLanguages instead');\n/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */\n\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n  var args = arguments.length === 1 ? 'name' : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n  return defaultValue;\n};\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the give mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\n\nreq.is = function is(types) {\n  var arr = types; // support flattened arguments\n\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\n\ndefineGetter(req, 'protocol', function protocol() {\n  var proto = this.connection.encrypted ? 'https' : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  } // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n\n\n  var header = this.get('X-Forwarded-Proto') || proto;\n  var index = header.indexOf(',');\n  return index !== -1 ? header.substring(0, index).trim() : header.trim();\n});\n/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure() {\n  return this.protocol === 'https';\n});\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip() {\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust); // reverse the order (to farthest -> closest)\n  // and remove socket address\n\n  addrs.reverse().pop();\n  return addrs;\n});\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n  if (!hostname) return [];\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname) ? hostname.split('.').reverse() : [hostname];\n  return subdomains.slice(offset);\n});\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'hostname', function hostname() {\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  } else if (host.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    host = host.substring(0, host.indexOf(',')).trimRight();\n  }\n\n  if (!host) return; // IPv6 literal support\n\n  var offset = host[0] === '[' ? host.indexOf(']') + 1 : 0;\n  var index = host.indexOf(':', offset);\n  return index !== -1 ? host.substring(0, index) : host;\n}); // TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host() {\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function () {\n  var method = this.method;\n  var res = this.res;\n  var status = res.statusCode; // GET or HEAD for weak freshness validation only\n\n  if ('GET' !== method && 'HEAD' !== method) return false; // 2xx or 304 as per rfc2616 14.26\n\n  if (status >= 200 && status < 300 || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    });\n  }\n\n  return false;\n});\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale() {\n  return !this.fresh;\n});\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr() {\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\n\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}","map":{"version":3,"names":["accepts","require","deprecate","isIP","typeis","http","fresh","parseRange","parse","proxyaddr","req","Object","create","IncomingMessage","prototype","module","exports","get","header","name","TypeError","lc","toLowerCase","headers","referrer","referer","accept","types","apply","arguments","acceptsEncodings","encodings","acceptsEncoding","function","acceptsCharsets","charsets","acceptsCharset","acceptsLanguages","languages","acceptsLanguage","range","size","options","param","defaultValue","params","body","query","args","length","hasOwnProperty","is","arr","Array","isArray","i","defineGetter","protocol","proto","connection","encrypted","trust","app","remoteAddress","index","indexOf","substring","trim","secure","ip","ips","addrs","all","reverse","pop","subdomains","hostname","offset","split","slice","path","pathname","host","trimRight","method","res","status","statusCode","stale","xhr","val","obj","getter","defineProperty","configurable","enumerable"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/express/lib/request.js"],"sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\nvar deprecate = require('depd')('express');\nvar isIP = require('net').isIP;\nvar typeis = require('type-is');\nvar http = require('http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n * @public\n */\n\nvar req = Object.create(http.IncomingMessage.prototype)\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = req\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get =\nreq.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function(){\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function(){\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\n  'req.acceptsEncoding: Use acceptsEncodings instead');\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function(){\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\n  'req.acceptsCharset: Use acceptsCharsets instead');\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function(){\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\n  'req.acceptsLanguage: Use acceptsLanguages instead');\n\n/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n\n  var args = arguments.length === 1\n    ? 'name'\n    : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n\n  return defaultValue;\n};\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the give mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol(){\n  var proto = this.connection.encrypted\n    ? 'https'\n    : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  var header = this.get('X-Forwarded-Proto') || proto\n  var index = header.indexOf(',')\n\n  return index !== -1\n    ? header.substring(0, index).trim()\n    : header.trim()\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure(){\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip(){\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n\n  // reverse the order (to farthest -> closest)\n  // and remove socket address\n  addrs.reverse().pop()\n\n  return addrs\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n\n  if (!hostname) return [];\n\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname)\n    ? hostname.split('.').reverse()\n    : [hostname];\n\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'hostname', function hostname(){\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  } else if (host.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    host = host.substring(0, host.indexOf(',')).trimRight()\n  }\n\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '['\n    ? host.indexOf(']') + 1\n    : 0;\n  var index = host.indexOf(':', offset);\n\n  return index !== -1\n    ? host.substring(0, index)\n    : host;\n});\n\n// TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host(){\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function(){\n  var method = this.method;\n  var res = this.res\n  var status = res.statusCode\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' !== method && 'HEAD' !== method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((status >= 200 && status < 300) || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    })\n  }\n\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale(){\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr(){\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}