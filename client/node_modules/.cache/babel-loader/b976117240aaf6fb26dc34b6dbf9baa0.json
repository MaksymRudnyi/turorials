{"ast":null,"code":"function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\nvar builtins = wordRegexp(['error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos', 'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones', 'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov', 'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot', 'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str', 'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember']);\nvar keywords = wordRegexp(['return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction', 'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events', 'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until', 'continue', 'pkg']); // tokenizers\n\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  }\n\n  ;\n  stream.skipToEnd();\n  return 'comment';\n}\n\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null; // Handle one line Comments\n\n  if (stream.match('%{')) {\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (stream.match(/^[%#]/)) {\n    stream.skipToEnd();\n    return 'comment';\n  } // Handle Number Literals\n\n\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number';\n    }\n\n    ;\n\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n      return 'number';\n    }\n\n    ;\n\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n      return 'number';\n    }\n\n    ;\n  }\n\n  if (stream.match(wordRegexp(['nan', 'NaN', 'inf', 'Inf']))) {\n    return 'number';\n  }\n\n  ; // Handle Strings\n\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);\n\n  if (m) {\n    return m[1] ? 'string' : \"error\";\n  } // Handle words\n\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  ;\n\n  if (stream.match(builtins)) {\n    return 'builtin';\n  }\n\n  ;\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n\n  ;\n\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) {\n    return 'operator';\n  }\n\n  ;\n\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) {\n    return null;\n  }\n\n  ;\n\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  }\n\n  ; // Handle non-detected items\n\n  stream.next();\n  return 'error';\n}\n\n;\nexport const octave = {\n  startState: function () {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function (stream, state) {\n    var style = state.tokenize(stream, state);\n\n    if (style === 'number' || style === 'variable') {\n      state.tokenize = tokenTranspose;\n    }\n\n    return style;\n  },\n  languageData: {\n    commentTokens: {\n      line: \"%\"\n    }\n  }\n};","map":{"version":3,"names":["wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","expressionEnd","identifiers","builtins","keywords","tokenTranspose","stream","state","sol","peek","next","tokenize","tokenBase","tokenComment","match","skipToEnd","eatSpace","m","octave","startState","token","style","languageData","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/octave.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nvar builtins = wordRegexp([\n  'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n  'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n  'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n  'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n  'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n  'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n  'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n]);\n\nvar keywords = wordRegexp([\n  'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n  'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n  'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n  'continue', 'pkg'\n]);\n\n\n// tokenizers\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\n\n\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  };\n  stream.skipToEnd();\n  return 'comment';\n}\n\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match('%{')){\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  if (stream.match(/^[%#]/)){\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number'; };\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n  }\n  if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n  // Handle Strings\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n  if (m) { return m[1] ? 'string' : \"error\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return 'keyword'; } ;\n  if (stream.match(builtins)) { return 'builtin'; } ;\n  if (stream.match(identifiers)) { return 'variable'; } ;\n\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  };\n\n\n  // Handle non-detected items\n  stream.next();\n  return 'error';\n};\n\n\nexport const octave = {\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (style === 'number' || style === 'variable'){\n      state.tokenize = tokenTranspose;\n    }\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}