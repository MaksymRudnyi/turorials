{"ast":null,"code":"/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = rangeParser;\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */\n\nfunction rangeParser(size, str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var index = str.indexOf('=');\n\n  if (index === -1) {\n    return -2;\n  } // split the range string\n\n\n  var arr = str.slice(index + 1).split(',');\n  var ranges = []; // add ranges type\n\n  ranges.type = str.slice(0, index); // parse all ranges\n\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-');\n    var start = parseInt(range[0], 10);\n    var end = parseInt(range[1], 10); // -nnn\n\n    if (isNaN(start)) {\n      start = size - end;\n      end = size - 1; // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1;\n    } // limit last-byte-pos to current length\n\n\n    if (end > size - 1) {\n      end = size - 1;\n    } // invalid or unsatisifiable\n\n\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue;\n    } // add range\n\n\n    ranges.push({\n      start: start,\n      end: end\n    });\n  }\n\n  if (ranges.length < 1) {\n    // unsatisifiable\n    return -1;\n  }\n\n  return options && options.combine ? combineRanges(ranges) : ranges;\n}\n/**\n * Combine overlapping & adjacent ranges.\n * @private\n */\n\n\nfunction combineRanges(ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);\n\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i];\n    var current = ordered[j];\n\n    if (range.start > current.end + 1) {\n      // next range\n      ordered[++j] = range;\n    } else if (range.end > current.end) {\n      // extend range\n      current.end = range.end;\n      current.index = Math.min(current.index, range.index);\n    }\n  } // trim ordered array\n\n\n  ordered.length = j + 1; // generate combined range\n\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex); // copy ranges type\n\n  combined.type = ranges.type;\n  return combined;\n}\n/**\n * Map function to add index value to ranges.\n * @private\n */\n\n\nfunction mapWithIndex(range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  };\n}\n/**\n * Map function to remove index value from ranges.\n * @private\n */\n\n\nfunction mapWithoutIndex(range) {\n  return {\n    start: range.start,\n    end: range.end\n  };\n}\n/**\n * Sort function to sort ranges by index.\n * @private\n */\n\n\nfunction sortByRangeIndex(a, b) {\n  return a.index - b.index;\n}\n/**\n * Sort function to sort ranges by start position.\n * @private\n */\n\n\nfunction sortByRangeStart(a, b) {\n  return a.start - b.start;\n}","map":{"version":3,"names":["module","exports","rangeParser","size","str","options","TypeError","index","indexOf","arr","slice","split","ranges","type","i","length","range","start","parseInt","end","isNaN","push","combine","combineRanges","ordered","map","mapWithIndex","sort","sortByRangeStart","j","current","Math","min","combined","sortByRangeIndex","mapWithoutIndex","a","b"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/range-parser/index.js"],"sourcesContent":["/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = rangeParser\n\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */\n\nfunction rangeParser (size, str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string')\n  }\n\n  var index = str.indexOf('=')\n\n  if (index === -1) {\n    return -2\n  }\n\n  // split the range string\n  var arr = str.slice(index + 1).split(',')\n  var ranges = []\n\n  // add ranges type\n  ranges.type = str.slice(0, index)\n\n  // parse all ranges\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-')\n    var start = parseInt(range[0], 10)\n    var end = parseInt(range[1], 10)\n\n    // -nnn\n    if (isNaN(start)) {\n      start = size - end\n      end = size - 1\n    // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1\n    }\n\n    // limit last-byte-pos to current length\n    if (end > size - 1) {\n      end = size - 1\n    }\n\n    // invalid or unsatisifiable\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue\n    }\n\n    // add range\n    ranges.push({\n      start: start,\n      end: end\n    })\n  }\n\n  if (ranges.length < 1) {\n    // unsatisifiable\n    return -1\n  }\n\n  return options && options.combine\n    ? combineRanges(ranges)\n    : ranges\n}\n\n/**\n * Combine overlapping & adjacent ranges.\n * @private\n */\n\nfunction combineRanges (ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart)\n\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i]\n    var current = ordered[j]\n\n    if (range.start > current.end + 1) {\n      // next range\n      ordered[++j] = range\n    } else if (range.end > current.end) {\n      // extend range\n      current.end = range.end\n      current.index = Math.min(current.index, range.index)\n    }\n  }\n\n  // trim ordered array\n  ordered.length = j + 1\n\n  // generate combined range\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex)\n\n  // copy ranges type\n  combined.type = ranges.type\n\n  return combined\n}\n\n/**\n * Map function to add index value to ranges.\n * @private\n */\n\nfunction mapWithIndex (range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  }\n}\n\n/**\n * Map function to remove index value from ranges.\n * @private\n */\n\nfunction mapWithoutIndex (range) {\n  return {\n    start: range.start,\n    end: range.end\n  }\n}\n\n/**\n * Sort function to sort ranges by index.\n * @private\n */\n\nfunction sortByRangeIndex (a, b) {\n  return a.index - b.index\n}\n\n/**\n * Sort function to sort ranges by start position.\n * @private\n */\n\nfunction sortByRangeStart (a, b) {\n  return a.start - b.start\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}