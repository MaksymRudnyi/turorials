{"ast":null,"code":"function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nconst parserConfig = {\n  name: \"ttcn\",\n  keywords: words(\"activate address alive all alt altstep and and4b any\" + \" break case component const continue control deactivate\" + \" display do else encode enumerated except exception\" + \" execute extends extension external for from function\" + \" goto group if import in infinity inout interleave\" + \" label language length log match message mixed mod\" + \" modifies module modulepar mtc noblock not not4b nowait\" + \" of on optional or or4b out override param pattern port\" + \" procedure record recursive rem repeat return runs select\" + \" self sender set signature system template testcase to\" + \" type union value valueof var variant while with xor xor4b\"),\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" + \" decomp decvalue float2int float2str hex2bit hex2int\" + \" hex2oct hex2str int2bit int2char int2float int2hex\" + \" int2oct int2str int2unichar isbound ischosen ispresent\" + \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" + \" oct2str regexp replace rnd sizeof str2bit str2float\" + \" str2hex str2int str2oct substr unichar2int unichar2char\" + \" enum2int\"),\n  types: words(\"anytype bitstring boolean char charstring default float\" + \" hexstring integer objid octetstring universal verdicttype timer\"),\n  timerOps: words(\"read running start stop timeout\"),\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" + \" reply send trigger\"),\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\n  verdictOps: words(\"getverdict setverdict\"),\n  sutOps: words(\"action\"),\n  functionOps: words(\"apply derefers refers\"),\n  verdictConsts: words(\"error fail inconc none pass\"),\n  booleanConsts: words(\"true false\"),\n  otherConsts: words(\"null NULL omit\"),\n  visibilityModifiers: words(\"private public friend\"),\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\n  multiLineStrings: true\n};\nvar wordList = [];\n\nfunction add(obj) {\n  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop)) wordList.push(prop);\n}\n\nadd(parserConfig.keywords);\nadd(parserConfig.builtin);\nadd(parserConfig.timerOps);\nadd(parserConfig.portOps);\nvar keywords = parserConfig.keywords || {},\n    builtin = parserConfig.builtin || {},\n    timerOps = parserConfig.timerOps || {},\n    portOps = parserConfig.portOps || {},\n    configOps = parserConfig.configOps || {},\n    verdictOps = parserConfig.verdictOps || {},\n    sutOps = parserConfig.sutOps || {},\n    functionOps = parserConfig.functionOps || {},\n    verdictConsts = parserConfig.verdictConsts || {},\n    booleanConsts = parserConfig.booleanConsts || {},\n    otherConsts = parserConfig.otherConsts || {},\n    types = parserConfig.types || {},\n    visibilityModifiers = parserConfig.visibilityModifiers || {},\n    templateMatch = parserConfig.templateMatch || {},\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (ch == \"%\") {\n    stream.eatWhile(/\\b/);\n    return \"atom\";\n  }\n\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  if (isOperatorChar.test(ch)) {\n    if (ch == \"@\") {\n      if (stream.match(\"try\") || stream.match(\"catch\") || stream.match(\"lazy\")) {\n        return \"keyword\";\n      }\n    }\n\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\n  if (visibilityModifiers.propertyIsEnumerable(cur)) return \"modifier\";\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        var afterQuote = stream.peek(); //look if the character after the quote is like the B in '10100010'B\n\n        if (afterQuote) {\n          afterQuote = afterQuote.toLowerCase();\n          if (afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\") stream.next();\n        }\n\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n\n    maybeEnd = ch == \"*\";\n  }\n\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n} //Interface\n\n\nexport const ttcn = {\n  startState: function () {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function (stream, state) {\n    var ctx = state.context;\n\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n      popContext(state);\n    } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n\n      if (ctx.type == \"}\") ctx = popContext(state);\n\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n    state.startOfLine = false;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    autocomplete: wordList\n  }\n};","map":{"version":3,"names":["words","str","obj","split","i","length","parserConfig","name","keywords","builtin","types","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","visibilityModifiers","templateMatch","multiLineStrings","wordList","add","prop","hasOwnProperty","push","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","quote","escaped","end","afterQuote","peek","toLowerCase","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","ttcn","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line","block","open","close","autocomplete"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/ttcn.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst parserConfig = {\n  name: \"ttcn\",\n  keywords: words(\"activate address alive all alt altstep and and4b any\" +\n                  \" break case component const continue control deactivate\" +\n                  \" display do else encode enumerated except exception\" +\n                  \" execute extends extension external for from function\" +\n                  \" goto group if import in infinity inout interleave\" +\n                  \" label language length log match message mixed mod\" +\n                  \" modifies module modulepar mtc noblock not not4b nowait\" +\n                  \" of on optional or or4b out override param pattern port\" +\n                  \" procedure record recursive rem repeat return runs select\" +\n                  \" self sender set signature system template testcase to\" +\n                  \" type union value valueof var variant while with xor xor4b\"),\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n                 \" decomp decvalue float2int float2str hex2bit hex2int\" +\n                 \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n                 \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n                 \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n                 \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n                 \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n                 \" enum2int\"),\n  types: words(\"anytype bitstring boolean char charstring default float\" +\n               \" hexstring integer objid octetstring universal verdicttype timer\"),\n  timerOps: words(\"read running start stop timeout\"),\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n                 \" reply send trigger\"),\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\n  verdictOps: words(\"getverdict setverdict\"),\n  sutOps: words(\"action\"),\n  functionOps: words(\"apply derefers refers\"),\n\n  verdictConsts: words(\"error fail inconc none pass\"),\n  booleanConsts: words(\"true false\"),\n  otherConsts: words(\"null NULL omit\"),\n\n  visibilityModifiers: words(\"private public friend\"),\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\n  multiLineStrings: true\n}\n\nvar wordList = []\nfunction add(obj) {\n  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n    wordList.push(prop);\n}\nadd(parserConfig.keywords);\nadd(parserConfig.builtin);\nadd(parserConfig.timerOps);\nadd(parserConfig.portOps);\n\nvar keywords = parserConfig.keywords || {},\n    builtin = parserConfig.builtin || {},\n    timerOps = parserConfig.timerOps || {},\n    portOps  = parserConfig.portOps || {},\n    configOps = parserConfig.configOps || {},\n    verdictOps = parserConfig.verdictOps || {},\n    sutOps = parserConfig.sutOps || {},\n    functionOps = parserConfig.functionOps || {},\n\n    verdictConsts = parserConfig.verdictConsts || {},\n    booleanConsts = parserConfig.booleanConsts || {},\n    otherConsts   = parserConfig.otherConsts || {},\n\n    types = parserConfig.types || {},\n    visibilityModifiers = parserConfig.visibilityModifiers || {},\n    templateMatch = parserConfig.templateMatch || {},\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\"){\n    stream.skipToEnd();\n    return \"atom\";\n  }\n  if (ch == \"%\"){\n    stream.eatWhile(/\\b/);\n    return \"atom\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    if(ch == \"@\"){\n      if(stream.match(\"try\") || stream.match(\"catch\")\n         || stream.match(\"lazy\")){\n        return \"keyword\";\n      }\n    }\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\n\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\n\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\n  if (visibilityModifiers.propertyIsEnumerable(cur))\n    return \"modifier\";\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\n\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped){\n        var afterQuote = stream.peek();\n        //look if the character after the quote is like the B in '10100010'B\n        if (afterQuote){\n          afterQuote = afterQuote.toLowerCase();\n          if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n            stream.next();\n        }\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport const ttcn = {\n  startState: function() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n        && ctx.type == \"statement\"){\n      popContext(state);\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (indentStatements &&\n             (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n              (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n      pushContext(state, stream.column(), \"statement\");\n\n    state.startOfLine = false;\n\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    autocomplete: wordList\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}