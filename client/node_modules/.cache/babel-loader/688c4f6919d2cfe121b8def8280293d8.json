{"ast":null,"code":"// @ts-nocheck\nantlr4.displayName = 'antlr4';\nantlr4.aliases = ['g4'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function antlr4(Prism) {\n  Prism.languages.antlr4 = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    string: {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n      greedy: true\n    },\n    'character-class': {\n      pattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n      greedy: true,\n      alias: 'regex',\n      inside: {\n        range: {\n          pattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n          lookbehind: true,\n          alias: 'punctuation'\n        },\n        escape: /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n        punctuation: /[\\[\\]]/\n      }\n    },\n    action: {\n      pattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n      greedy: true,\n      inside: {\n        content: {\n          // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n          pattern: /(\\{)[\\s\\S]+(?=\\})/,\n          lookbehind: true\n        },\n        punctuation: /[{}]/\n      }\n    },\n    command: {\n      pattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n      lookbehind: true,\n      inside: {\n        function: /\\b\\w+(?=\\s*(?:[,(]|$))/,\n        punctuation: /[,()]/\n      }\n    },\n    annotation: {\n      pattern: /@\\w+(?:::\\w+)*/,\n      alias: 'keyword'\n    },\n    label: {\n      pattern: /#[ \\t]*\\w+/,\n      alias: 'punctuation'\n    },\n    keyword: /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n    definition: [{\n      pattern: /\\b[a-z]\\w*(?=\\s*:)/,\n      alias: ['rule', 'class-name']\n    }, {\n      pattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n      alias: ['token', 'constant']\n    }],\n    constant: /\\b[A-Z][A-Z_]*\\b/,\n    operator: /\\.\\.|->|[|~]|[*+?]\\??/,\n    punctuation: /[;:()=]/\n  };\n  Prism.languages.g4 = Prism.languages.antlr4;\n}","map":{"version":3,"names":["antlr4","displayName","aliases","Prism","languages","comment","string","pattern","greedy","alias","inside","range","lookbehind","escape","punctuation","action","content","command","function","annotation","label","keyword","definition","constant","operator","g4"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/antlr4.js"],"sourcesContent":["// @ts-nocheck\nantlr4.displayName = 'antlr4'\nantlr4.aliases = ['g4']\n\n/** @type {import('../core.js').Syntax} */\nexport default function antlr4(Prism) {\n  Prism.languages.antlr4 = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    string: {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n      greedy: true\n    },\n    'character-class': {\n      pattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n      greedy: true,\n      alias: 'regex',\n      inside: {\n        range: {\n          pattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n          lookbehind: true,\n          alias: 'punctuation'\n        },\n        escape:\n          /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n        punctuation: /[\\[\\]]/\n      }\n    },\n    action: {\n      pattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n      greedy: true,\n      inside: {\n        content: {\n          // this might be C, C++, Python, Java, C#, or any other language ANTLR4 compiles to\n          pattern: /(\\{)[\\s\\S]+(?=\\})/,\n          lookbehind: true\n        },\n        punctuation: /[{}]/\n      }\n    },\n    command: {\n      pattern:\n        /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n      lookbehind: true,\n      inside: {\n        function: /\\b\\w+(?=\\s*(?:[,(]|$))/,\n        punctuation: /[,()]/\n      }\n    },\n    annotation: {\n      pattern: /@\\w+(?:::\\w+)*/,\n      alias: 'keyword'\n    },\n    label: {\n      pattern: /#[ \\t]*\\w+/,\n      alias: 'punctuation'\n    },\n    keyword:\n      /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n    definition: [\n      {\n        pattern: /\\b[a-z]\\w*(?=\\s*:)/,\n        alias: ['rule', 'class-name']\n      },\n      {\n        pattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n        alias: ['token', 'constant']\n      }\n    ],\n    constant: /\\b[A-Z][A-Z_]*\\b/,\n    operator: /\\.\\.|->|[|~]|[*+?]\\??/,\n    punctuation: /[;:()=]/\n  }\n  Prism.languages.g4 = Prism.languages.antlr4\n}\n"],"mappings":"AAAA;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,IAAD,CAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACpCA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;IACvBK,OAAO,EAAE,+BADc;IAEvBC,MAAM,EAAE;MACNC,OAAO,EAAE,uBADH;MAENC,MAAM,EAAE;IAFF,CAFe;IAMvB,mBAAmB;MACjBD,OAAO,EAAE,0BADQ;MAEjBC,MAAM,EAAE,IAFS;MAGjBC,KAAK,EAAE,OAHU;MAIjBC,MAAM,EAAE;QACNC,KAAK,EAAE;UACLJ,OAAO,EAAE,wCADJ;UAELK,UAAU,EAAE,IAFP;UAGLH,KAAK,EAAE;QAHF,CADD;QAMNI,MAAM,EACJ,qEAPI;QAQNC,WAAW,EAAE;MARP;IAJS,CANI;IAqBvBC,MAAM,EAAE;MACNR,OAAO,EAAE,yDADH;MAENC,MAAM,EAAE,IAFF;MAGNE,MAAM,EAAE;QACNM,OAAO,EAAE;UACP;UACAT,OAAO,EAAE,mBAFF;UAGPK,UAAU,EAAE;QAHL,CADH;QAMNE,WAAW,EAAE;MANP;IAHF,CArBe;IAiCvBG,OAAO,EAAE;MACPV,OAAO,EACL,yEAFK;MAGPK,UAAU,EAAE,IAHL;MAIPF,MAAM,EAAE;QACNQ,QAAQ,EAAE,wBADJ;QAENJ,WAAW,EAAE;MAFP;IAJD,CAjCc;IA0CvBK,UAAU,EAAE;MACVZ,OAAO,EAAE,gBADC;MAEVE,KAAK,EAAE;IAFG,CA1CW;IA8CvBW,KAAK,EAAE;MACLb,OAAO,EAAE,YADJ;MAELE,KAAK,EAAE;IAFF,CA9CgB;IAkDvBY,OAAO,EACL,+GAnDqB;IAoDvBC,UAAU,EAAE,CACV;MACEf,OAAO,EAAE,oBADX;MAEEE,KAAK,EAAE,CAAC,MAAD,EAAS,YAAT;IAFT,CADU,EAKV;MACEF,OAAO,EAAE,oBADX;MAEEE,KAAK,EAAE,CAAC,OAAD,EAAU,UAAV;IAFT,CALU,CApDW;IA8DvBc,QAAQ,EAAE,kBA9Da;IA+DvBC,QAAQ,EAAE,uBA/Da;IAgEvBV,WAAW,EAAE;EAhEU,CAAzB;EAkEAX,KAAK,CAACC,SAAN,CAAgBqB,EAAhB,GAAqBtB,KAAK,CAACC,SAAN,CAAgBJ,MAArC;AACD"},"metadata":{},"sourceType":"module"}