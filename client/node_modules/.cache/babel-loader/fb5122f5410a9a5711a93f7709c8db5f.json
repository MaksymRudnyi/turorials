{"ast":null,"code":"var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\n\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  } else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n\n    if (stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if (keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if (ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n\n    var word = stream.current();\n    if (ops.test(word)) return null;else if (keywords.test(word)) return \"meta\";else return \"variable\";\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n\n      escaped = !escaped && ch == \"\\\\\";\n    }\n\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n}\n\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const turtle = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function (stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n\n      if (state.context && curPunc == state.context.type) popContext(state);\n    } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function (state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n    var closing = context && firstChar == context.type;\n    if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};","map":{"version":3,"names":["curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatWhile","peek","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","turtle","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/turtle.js"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  }\n  else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if(stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if(keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if(ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return null;\n    else if (keywords.test(word))\n      return \"meta\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const turtle = {\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"mappings":"AAAA,IAAIA,OAAJ;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EACzB,OAAO,IAAIC,MAAJ,CAAW,SAASD,KAAK,CAACE,IAAN,CAAW,GAAX,CAAT,GAA2B,IAAtC,EAA4C,GAA5C,CAAP;AACD;;AACD,IAAIC,GAAG,GAAGJ,UAAU,CAAC,EAAD,CAApB;AACA,IAAIK,QAAQ,GAAGL,UAAU,CAAC,CAAC,SAAD,EAAY,OAAZ,EAAqB,GAArB,CAAD,CAAzB;AACA,IAAIM,aAAa,GAAG,aAApB;;AAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkC;EAChC,IAAIC,EAAE,GAAGF,MAAM,CAACG,IAAP,EAAT;EACAZ,OAAO,GAAG,IAAV;;EACA,IAAIW,EAAE,IAAI,GAAN,IAAa,CAACF,MAAM,CAACI,KAAP,CAAa,cAAb,EAA6B,KAA7B,CAAlB,EAAuD;IACrDJ,MAAM,CAACI,KAAP,CAAa,kBAAb;IACA,OAAO,MAAP;EACD,CAHD,MAIK,IAAIF,EAAE,IAAI,IAAN,IAAcA,EAAE,IAAI,GAAxB,EAA6B;IAChCD,KAAK,CAACI,QAAN,GAAiBC,YAAY,CAACJ,EAAD,CAA7B;IACA,OAAOD,KAAK,CAACI,QAAN,CAAeL,MAAf,EAAuBC,KAAvB,CAAP;EACD,CAHI,MAIA,IAAI,mBAAmBM,IAAnB,CAAwBL,EAAxB,CAAJ,EAAiC;IACpCX,OAAO,GAAGW,EAAV;IACA,OAAO,IAAP;EACD,CAHI,MAIA,IAAIA,EAAE,IAAI,GAAV,EAAe;IAClBF,MAAM,CAACQ,SAAP;IACA,OAAO,SAAP;EACD,CAHI,MAIA,IAAIV,aAAa,CAACS,IAAd,CAAmBL,EAAnB,CAAJ,EAA4B;IAC/BF,MAAM,CAACS,QAAP,CAAgBX,aAAhB;IACA,OAAO,IAAP;EACD,CAHI,MAIA,IAAII,EAAE,IAAI,GAAV,EAAe;IAClB,OAAO,UAAP;EACD,CAFI,MAEE;IACLF,MAAM,CAACS,QAAP,CAAgB,SAAhB;;IACA,IAAGT,MAAM,CAACU,IAAP,MAAiB,GAApB,EAAyB;MACvB,OAAO,sBAAP;IACD,CAFD,MAEO;MACL,IAAIC,IAAI,GAAGX,MAAM,CAACY,OAAP,EAAX;;MAEA,IAAGf,QAAQ,CAACU,IAAT,CAAcI,IAAd,CAAH,EAAwB;QACtB,OAAO,MAAP;MACD;;MAED,IAAGT,EAAE,IAAI,GAAN,IAAaA,EAAE,IAAI,GAAtB,EAA2B;QACzB,OAAO,SAAP;MACD,CAFD,MAEO;QACL,OAAO,SAAP;MACD;IACF;;IACD,IAAIS,IAAI,GAAGX,MAAM,CAACY,OAAP,EAAX;IACA,IAAIhB,GAAG,CAACW,IAAJ,CAASI,IAAT,CAAJ,EACE,OAAO,IAAP,CADF,KAEK,IAAId,QAAQ,CAACU,IAAT,CAAcI,IAAd,CAAJ,EACH,OAAO,MAAP,CADG,KAGH,OAAO,UAAP;EACH;AACF;;AAED,SAASL,YAAT,CAAsBO,KAAtB,EAA6B;EAC3B,OAAO,UAASb,MAAT,EAAiBC,KAAjB,EAAwB;IAC7B,IAAIa,OAAO,GAAG,KAAd;IAAA,IAAqBZ,EAArB;;IACA,OAAO,CAACA,EAAE,GAAGF,MAAM,CAACG,IAAP,EAAN,KAAwB,IAA/B,EAAqC;MACnC,IAAID,EAAE,IAAIW,KAAN,IAAe,CAACC,OAApB,EAA6B;QAC3Bb,KAAK,CAACI,QAAN,GAAiBN,SAAjB;QACA;MACD;;MACDe,OAAO,GAAG,CAACA,OAAD,IAAYZ,EAAE,IAAI,IAA5B;IACD;;IACD,OAAO,QAAP;EACD,CAVD;AAWD;;AAED,SAASa,WAAT,CAAqBd,KAArB,EAA4Be,IAA5B,EAAkCC,GAAlC,EAAuC;EACrChB,KAAK,CAACiB,OAAN,GAAgB;IAACC,IAAI,EAAElB,KAAK,CAACiB,OAAb;IAAsBE,MAAM,EAAEnB,KAAK,CAACmB,MAApC;IAA4CH,GAAG,EAAEA,GAAjD;IAAsDD,IAAI,EAAEA;EAA5D,CAAhB;AACD;;AACD,SAASK,UAAT,CAAoBpB,KAApB,EAA2B;EACzBA,KAAK,CAACmB,MAAN,GAAenB,KAAK,CAACiB,OAAN,CAAcE,MAA7B;EACAnB,KAAK,CAACiB,OAAN,GAAgBjB,KAAK,CAACiB,OAAN,CAAcC,IAA9B;AACD;;AAED,OAAO,MAAMG,MAAM,GAAG;EACpBC,UAAU,EAAE,YAAW;IACrB,OAAO;MAAClB,QAAQ,EAAEN,SAAX;MACCmB,OAAO,EAAE,IADV;MAECE,MAAM,EAAE,CAFT;MAGCH,GAAG,EAAE;IAHN,CAAP;EAID,CANmB;EAQpBO,KAAK,EAAE,UAASxB,MAAT,EAAiBC,KAAjB,EAAwB;IAC7B,IAAID,MAAM,CAACyB,GAAP,EAAJ,EAAkB;MAChB,IAAIxB,KAAK,CAACiB,OAAN,IAAiBjB,KAAK,CAACiB,OAAN,CAAcQ,KAAd,IAAuB,IAA5C,EAAkDzB,KAAK,CAACiB,OAAN,CAAcQ,KAAd,GAAsB,KAAtB;MAClDzB,KAAK,CAACmB,MAAN,GAAepB,MAAM,CAAC2B,WAAP,EAAf;IACD;;IACD,IAAI3B,MAAM,CAAC4B,QAAP,EAAJ,EAAuB,OAAO,IAAP;IACvB,IAAIC,KAAK,GAAG5B,KAAK,CAACI,QAAN,CAAeL,MAAf,EAAuBC,KAAvB,CAAZ;;IAEA,IAAI4B,KAAK,IAAI,SAAT,IAAsB5B,KAAK,CAACiB,OAA5B,IAAuCjB,KAAK,CAACiB,OAAN,CAAcQ,KAAd,IAAuB,IAA9D,IAAsEzB,KAAK,CAACiB,OAAN,CAAcF,IAAd,IAAsB,SAAhG,EAA2G;MACzGf,KAAK,CAACiB,OAAN,CAAcQ,KAAd,GAAsB,IAAtB;IACD;;IAED,IAAInC,OAAO,IAAI,GAAf,EAAoBwB,WAAW,CAACd,KAAD,EAAQ,GAAR,EAAaD,MAAM,CAAC8B,MAAP,EAAb,CAAX,CAApB,KACK,IAAIvC,OAAO,IAAI,GAAf,EAAoBwB,WAAW,CAACd,KAAD,EAAQ,GAAR,EAAaD,MAAM,CAAC8B,MAAP,EAAb,CAAX,CAApB,KACA,IAAIvC,OAAO,IAAI,GAAf,EAAoBwB,WAAW,CAACd,KAAD,EAAQ,GAAR,EAAaD,MAAM,CAAC8B,MAAP,EAAb,CAAX,CAApB,KACA,IAAI,WAAWvB,IAAX,CAAgBhB,OAAhB,CAAJ,EAA8B;MACjC,OAAOU,KAAK,CAACiB,OAAN,IAAiBjB,KAAK,CAACiB,OAAN,CAAcF,IAAd,IAAsB,SAA9C,EAAyDK,UAAU,CAACpB,KAAD,CAAV;;MACzD,IAAIA,KAAK,CAACiB,OAAN,IAAiB3B,OAAO,IAAIU,KAAK,CAACiB,OAAN,CAAcF,IAA9C,EAAoDK,UAAU,CAACpB,KAAD,CAAV;IACrD,CAHI,MAIA,IAAIV,OAAO,IAAI,GAAX,IAAkBU,KAAK,CAACiB,OAAxB,IAAmCjB,KAAK,CAACiB,OAAN,CAAcF,IAAd,IAAsB,SAA7D,EAAwEK,UAAU,CAACpB,KAAD,CAAV,CAAxE,KACA,IAAI,uBAAuBM,IAAvB,CAA4BsB,KAA5B,KAAsC5B,KAAK,CAACiB,OAAhD,EAAyD;MAC5D,IAAI,SAASX,IAAT,CAAcN,KAAK,CAACiB,OAAN,CAAcF,IAA5B,CAAJ,EACED,WAAW,CAACd,KAAD,EAAQ,SAAR,EAAmBD,MAAM,CAAC8B,MAAP,EAAnB,CAAX,CADF,KAEK,IAAI7B,KAAK,CAACiB,OAAN,CAAcF,IAAd,IAAsB,SAAtB,IAAmC,CAACf,KAAK,CAACiB,OAAN,CAAcQ,KAAtD,EAA6D;QAChEzB,KAAK,CAACiB,OAAN,CAAcQ,KAAd,GAAsB,IAAtB;QACAzB,KAAK,CAACiB,OAAN,CAAcD,GAAd,GAAoBjB,MAAM,CAAC8B,MAAP,EAApB;MACD;IACF;IAED,OAAOD,KAAP;EACD,CAtCmB;EAwCpBT,MAAM,EAAE,UAASnB,KAAT,EAAgB8B,SAAhB,EAA2BC,EAA3B,EAA+B;IACrC,IAAIC,SAAS,GAAGF,SAAS,IAAIA,SAAS,CAACG,MAAV,CAAiB,CAAjB,CAA7B;IACA,IAAIhB,OAAO,GAAGjB,KAAK,CAACiB,OAApB;IACA,IAAI,SAASX,IAAT,CAAc0B,SAAd,CAAJ,EACE,OAAOf,OAAO,IAAIA,OAAO,CAACF,IAAR,IAAgB,SAAlC,EAA6CE,OAAO,GAAGA,OAAO,CAACC,IAAlB;IAE/C,IAAIgB,OAAO,GAAGjB,OAAO,IAAIe,SAAS,IAAIf,OAAO,CAACF,IAA9C;IACA,IAAI,CAACE,OAAL,EACE,OAAO,CAAP,CADF,KAEK,IAAIA,OAAO,CAACF,IAAR,IAAgB,SAApB,EACH,OAAOE,OAAO,CAACD,GAAf,CADG,KAEA,IAAIC,OAAO,CAACQ,KAAZ,EACH,OAAOR,OAAO,CAACD,GAAR,IAAekB,OAAO,GAAG,CAAH,GAAO,CAA7B,CAAP,CADG,KAGH,OAAOjB,OAAO,CAACE,MAAR,IAAkBe,OAAO,GAAG,CAAH,GAAOH,EAAE,CAACI,IAAnC,CAAP;EACH,CAvDmB;EAyDpBC,YAAY,EAAE;IACZC,aAAa,EAAE;MAACC,IAAI,EAAE;IAAP;EADH;AAzDM,CAAf"},"metadata":{},"sourceType":"module"}