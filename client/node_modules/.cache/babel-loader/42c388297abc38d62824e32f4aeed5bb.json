{"ast":null,"code":"'use strict';\n\nconst Preprocessor = require('./preprocessor');\n\nconst unicode = require('../common/unicode');\n\nconst neTree = require('./named-entity-data');\n\nconst ERR = require('../common/error-codes'); //Aliases\n\n\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES; //C1 Unicode control character reference replacements\n\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n  0x80: 0x20ac,\n  0x82: 0x201a,\n  0x83: 0x0192,\n  0x84: 0x201e,\n  0x85: 0x2026,\n  0x86: 0x2020,\n  0x87: 0x2021,\n  0x88: 0x02c6,\n  0x89: 0x2030,\n  0x8a: 0x0160,\n  0x8b: 0x2039,\n  0x8c: 0x0152,\n  0x8e: 0x017d,\n  0x91: 0x2018,\n  0x92: 0x2019,\n  0x93: 0x201c,\n  0x94: 0x201d,\n  0x95: 0x2022,\n  0x96: 0x2013,\n  0x97: 0x2014,\n  0x98: 0x02dc,\n  0x99: 0x2122,\n  0x9a: 0x0161,\n  0x9b: 0x203a,\n  0x9c: 0x0153,\n  0x9e: 0x017e,\n  0x9f: 0x0178\n}; // Named entity tree flags\n\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG; //States\n\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE'; //Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\n\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n  return cp + 0x0020;\n} //NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\n\n\nfunction toChar(cp) {\n  if (cp <= 0xffff) {\n    return String.fromCharCode(cp);\n  }\n\n  cp -= 0x10000;\n  return String.fromCharCode(cp >>> 10 & 0x3ff | 0xd800) + String.fromCharCode(0xdc00 | cp & 0x3ff);\n}\n\nfunction toAsciiLowerChar(cp) {\n  return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n  const branchCount = neTree[++nodeIx];\n  let lo = ++nodeIx;\n  let hi = lo + branchCount - 1;\n\n  while (lo <= hi) {\n    const mid = lo + hi >>> 1;\n    const midCp = neTree[mid];\n\n    if (midCp < cp) {\n      lo = mid + 1;\n    } else if (midCp > cp) {\n      hi = mid - 1;\n    } else {\n      return neTree[mid + branchCount];\n    }\n  }\n\n  return -1;\n} //Tokenizer\n\n\nclass Tokenizer {\n  constructor() {\n    this.preprocessor = new Preprocessor();\n    this.tokenQueue = [];\n    this.allowCDATA = false;\n    this.state = DATA_STATE;\n    this.returnState = '';\n    this.charRefCode = -1;\n    this.tempBuff = [];\n    this.lastStartTagName = '';\n    this.consumedAfterSnapshot = -1;\n    this.active = false;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = null;\n  } //Errors\n\n\n  _err() {// NOTE: err reporting is noop by default. Enabled by mixin.\n  }\n\n  _errOnNextCodePoint(err) {\n    this._consume();\n\n    this._err(err);\n\n    this._unconsume();\n  } //API\n\n\n  getNextToken() {\n    while (!this.tokenQueue.length && this.active) {\n      this.consumedAfterSnapshot = 0;\n\n      const cp = this._consume();\n\n      if (!this._ensureHibernation()) {\n        this[this.state](cp);\n      }\n    }\n\n    return this.tokenQueue.shift();\n  }\n\n  write(chunk, isLastChunk) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n  } //Hibernation\n\n\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n        this.preprocessor.retreat();\n      }\n\n      this.active = false;\n      this.tokenQueue.push({\n        type: Tokenizer.HIBERNATION_TOKEN\n      });\n      return true;\n    }\n\n    return false;\n  } //Consumption\n\n\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n\n  _unconsume() {\n    this.consumedAfterSnapshot--;\n    this.preprocessor.retreat();\n  }\n\n  _reconsumeInState(state) {\n    this.state = state;\n\n    this._unconsume();\n  }\n\n  _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n    let consumedCount = 0;\n    let isMatch = true;\n    const patternLength = pattern.length;\n    let patternPos = 0;\n    let cp = startCp;\n    let patternCp = void 0;\n\n    for (; patternPos < patternLength; patternPos++) {\n      if (patternPos > 0) {\n        cp = this._consume();\n        consumedCount++;\n      }\n\n      if (cp === $.EOF) {\n        isMatch = false;\n        break;\n      }\n\n      patternCp = pattern[patternPos];\n\n      if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n        isMatch = false;\n        break;\n      }\n    }\n\n    if (!isMatch) {\n      while (consumedCount--) {\n        this._unconsume();\n      }\n    }\n\n    return isMatch;\n  } //Temp buffer\n\n\n  _isTempBufferEqualToScriptString() {\n    if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.tempBuff.length; i++) {\n      if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  } //Token creation\n\n\n  _createStartTagToken() {\n    this.currentToken = {\n      type: Tokenizer.START_TAG_TOKEN,\n      tagName: '',\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: []\n    };\n  }\n\n  _createEndTagToken() {\n    this.currentToken = {\n      type: Tokenizer.END_TAG_TOKEN,\n      tagName: '',\n      selfClosing: false,\n      attrs: []\n    };\n  }\n\n  _createCommentToken() {\n    this.currentToken = {\n      type: Tokenizer.COMMENT_TOKEN,\n      data: ''\n    };\n  }\n\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: Tokenizer.DOCTYPE_TOKEN,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null\n    };\n  }\n\n  _createCharacterToken(type, ch) {\n    this.currentCharacterToken = {\n      type: type,\n      chars: ch\n    };\n  }\n\n  _createEOFToken() {\n    this.currentToken = {\n      type: Tokenizer.EOF_TOKEN\n    };\n  } //Tag attributes\n\n\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n  }\n\n  _leaveAttrName(toState) {\n    if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n      this.currentToken.attrs.push(this.currentAttr);\n    } else {\n      this._err(ERR.duplicateAttribute);\n    }\n\n    this.state = toState;\n  }\n\n  _leaveAttrValue(toState) {\n    this.state = toState;\n  } //Token emission\n\n\n  _emitCurrentToken() {\n    this._emitCurrentCharacterToken();\n\n    const ct = this.currentToken;\n    this.currentToken = null; //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n\n    if (ct.type === Tokenizer.START_TAG_TOKEN) {\n      this.lastStartTagName = ct.tagName;\n    } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n      if (ct.attrs.length > 0) {\n        this._err(ERR.endTagWithAttributes);\n      }\n\n      if (ct.selfClosing) {\n        this._err(ERR.endTagWithTrailingSolidus);\n      }\n    }\n\n    this.tokenQueue.push(ct);\n  }\n\n  _emitCurrentCharacterToken() {\n    if (this.currentCharacterToken) {\n      this.tokenQueue.push(this.currentCharacterToken);\n      this.currentCharacterToken = null;\n    }\n  }\n\n  _emitEOFToken() {\n    this._createEOFToken();\n\n    this._emitCurrentToken();\n  } //Characters emission\n  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n\n\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n      this._emitCurrentCharacterToken();\n    }\n\n    if (this.currentCharacterToken) {\n      this.currentCharacterToken.chars += ch;\n    } else {\n      this._createCharacterToken(type, ch);\n    }\n  }\n\n  _emitCodePoint(cp) {\n    let type = Tokenizer.CHARACTER_TOKEN;\n\n    if (isWhitespace(cp)) {\n      type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n    } else if (cp === $.NULL) {\n      type = Tokenizer.NULL_CHARACTER_TOKEN;\n    }\n\n    this._appendCharToCurrentCharacterToken(type, toChar(cp));\n  }\n\n  _emitSeveralCodePoints(codePoints) {\n    for (let i = 0; i < codePoints.length; i++) {\n      this._emitCodePoint(codePoints[i]);\n    }\n  } //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n  //So we can avoid additional checks here.\n\n\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n  } // Character reference helpers\n\n\n  _matchNamedCharacterReference(startCp) {\n    let result = null;\n    let excess = 1;\n    let i = findNamedEntityTreeBranch(0, startCp);\n    this.tempBuff.push(startCp);\n\n    while (i > -1) {\n      const current = neTree[i];\n      const inNode = current < MAX_BRANCH_MARKER_VALUE;\n      const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n      if (nodeWithData) {\n        //NOTE: we use greedy search, so we continue lookup at this point\n        result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n        excess = 0;\n      }\n\n      const cp = this._consume();\n\n      this.tempBuff.push(cp);\n      excess++;\n\n      if (cp === $.EOF) {\n        break;\n      }\n\n      if (inNode) {\n        i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n      } else {\n        i = cp === current ? ++i : -1;\n      }\n    }\n\n    while (excess--) {\n      this.tempBuff.pop();\n\n      this._unconsume();\n    }\n\n    return result;\n  }\n\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;\n  }\n\n  _isCharacterReferenceAttributeQuirk(withSemicolon) {\n    if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n      const nextCp = this._consume();\n\n      this._unconsume();\n\n      return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n    }\n\n    return false;\n  }\n\n  _flushCodePointsConsumedAsCharacterReference() {\n    if (this._isCharacterReferenceInAttribute()) {\n      for (let i = 0; i < this.tempBuff.length; i++) {\n        this.currentAttr.value += toChar(this.tempBuff[i]);\n      }\n    } else {\n      this._emitSeveralCodePoints(this.tempBuff);\n    }\n\n    this.tempBuff = [];\n  } // State machine\n  // Data state\n  //------------------------------------------------------------------\n\n\n  [DATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = TAG_OPEN_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = DATA_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitCodePoint(cp);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } //  RCDATA state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.AMPERSAND) {\n      this.returnState = RCDATA_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = RCDATA_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // RAWTEXT state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Script data state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // PLAINTEXT state\n  //------------------------------------------------------------------\n\n\n  [PLAINTEXT_STATE](cp) {\n    this.preprocessor.dropParsedChunk();\n\n    if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Tag open state\n  //------------------------------------------------------------------\n\n\n  [TAG_OPEN_STATE](cp) {\n    if (cp === $.EXCLAMATION_MARK) {\n      this.state = MARKUP_DECLARATION_OPEN_STATE;\n    } else if (cp === $.SOLIDUS) {\n      this.state = END_TAG_OPEN_STATE;\n    } else if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n\n      this._reconsumeInState(TAG_NAME_STATE);\n    } else if (cp === $.QUESTION_MARK) {\n      this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n\n      this._createCommentToken();\n\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofBeforeTagName);\n\n      this._emitChars('<');\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.invalidFirstCharacterOfTagName);\n\n      this._emitChars('<');\n\n      this._reconsumeInState(DATA_STATE);\n    }\n  } // End tag open state\n  //------------------------------------------------------------------\n\n\n  [END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(TAG_NAME_STATE);\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingEndTagName);\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofBeforeTagName);\n\n      this._emitChars('</');\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.invalidFirstCharacterOfTagName);\n\n      this._createCommentToken();\n\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    }\n  } // Tag name state\n  //------------------------------------------------------------------\n\n\n  [TAG_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n    } else if (cp === $.SOLIDUS) {\n      this.state = SELF_CLOSING_START_TAG_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.tagName += toChar(cp);\n    }\n  } // RCDATA less-than sign state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = RCDATA_END_TAG_OPEN_STATE;\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  } // RCDATA end tag open state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  } // RCDATA end tag name state\n  //------------------------------------------------------------------\n\n\n  [RCDATA_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n          this.state = DATA_STATE;\n\n          this._emitCurrentToken();\n\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(RCDATA_STATE);\n    }\n  } // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = RAWTEXT_END_TAG_OPEN_STATE;\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  } // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  } // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n\n\n  [RAWTEXT_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(RAWTEXT_STATE);\n    }\n  } // Script data less-than sign state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n    } else if (cp === $.EXCLAMATION_MARK) {\n      this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n\n      this._emitChars('<!');\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data end tag open state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data end tag name state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        } else if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data escape start state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n\n      this._emitChars('-');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data escape start dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n\n      this._emitChars('-');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_STATE);\n    }\n  } // Script data escaped state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Script data escaped dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = SCRIPT_DATA_STATE;\n\n      this._emitChars('>');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n    } else if (isAsciiLetter(cp)) {\n      this.tempBuff = [];\n\n      this._emitChars('<');\n\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n    } else {\n      this._emitChars('<');\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data escaped end tag open state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n    } else {\n      this._emitChars('</');\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data escaped end tag name state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n    if (isAsciiUpper(cp)) {\n      this.currentToken.tagName += toAsciiLowerChar(cp);\n      this.tempBuff.push(cp);\n    } else if (isAsciiLower(cp)) {\n      this.currentToken.tagName += toChar(cp);\n      this.tempBuff.push(cp);\n    } else {\n      if (this.lastStartTagName === this.currentToken.tagName) {\n        if (isWhitespace(cp)) {\n          this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n          return;\n        }\n\n        if (cp === $.SOLIDUS) {\n          this.state = SELF_CLOSING_START_TAG_STATE;\n          return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n          this._emitCurrentToken();\n\n          this.state = DATA_STATE;\n          return;\n        }\n      }\n\n      this._emitChars('</');\n\n      this._emitSeveralCodePoints(this.tempBuff);\n\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data double escape start state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiUpper(cp)) {\n      this.tempBuff.push(toAsciiLowerCodePoint(cp));\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiLower(cp)) {\n      this.tempBuff.push(cp);\n\n      this._emitCodePoint(cp);\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n    }\n  } // Script data double escaped state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n      this._emitChars('<');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Script data double escaped dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n      this._emitChars('<');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this._emitChars('-');\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n\n      this._emitChars('<');\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = SCRIPT_DATA_STATE;\n\n      this._emitChars('>');\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitChars(unicode.REPLACEMENT_CHARACTER);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n      this._emitEOFToken();\n    } else {\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    }\n  } // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.SOLIDUS) {\n      this.tempBuff = [];\n      this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n\n      this._emitChars('/');\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n    }\n  } // Script data double escape end state\n  //------------------------------------------------------------------\n\n\n  [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiUpper(cp)) {\n      this.tempBuff.push(toAsciiLowerCodePoint(cp));\n\n      this._emitCodePoint(cp);\n    } else if (isAsciiLower(cp)) {\n      this.tempBuff.push(cp);\n\n      this._emitCodePoint(cp);\n    } else {\n      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n    }\n  } // Before attribute name state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n      this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.EQUALS_SIGN) {\n      this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n\n      this._createAttr('=');\n\n      this.state = ATTRIBUTE_NAME_STATE;\n    } else {\n      this._createAttr('');\n\n      this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n    }\n  } // Attribute name state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n      this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n\n      this._unconsume();\n    } else if (cp === $.EQUALS_SIGN) {\n      this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n    } else if (isAsciiUpper(cp)) {\n      this.currentAttr.name += toAsciiLowerChar(cp);\n    } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n      this._err(ERR.unexpectedCharacterInAttributeName);\n\n      this.currentAttr.name += toChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n    } else {\n      this.currentAttr.name += toChar(cp);\n    }\n  } // After attribute name state\n  //------------------------------------------------------------------\n\n\n  [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.SOLIDUS) {\n      this.state = SELF_CLOSING_START_TAG_STATE;\n    } else if (cp === $.EQUALS_SIGN) {\n      this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this._createAttr('');\n\n      this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n    }\n  } // Before attribute value state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.QUOTATION_MARK) {\n      this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingAttributeValue);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else {\n      this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n    }\n  } // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  } // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  } // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n\n\n  [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.AMPERSAND) {\n      this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n      this.state = CHARACTER_REFERENCE_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._leaveAttrValue(DATA_STATE);\n\n      this._emitCurrentToken();\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {\n      this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n\n      this.currentAttr.value += toChar(cp);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this.currentAttr.value += toChar(cp);\n    }\n  } // After attribute value (quoted) state\n  //------------------------------------------------------------------\n\n\n  [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n    } else if (cp === $.SOLIDUS) {\n      this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._leaveAttrValue(DATA_STATE);\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingWhitespaceBetweenAttributes);\n\n      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n    }\n  } // Self-closing start tag state\n  //------------------------------------------------------------------\n\n\n  [SELF_CLOSING_START_TAG_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.currentToken.selfClosing = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInTag);\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.unexpectedSolidusInTag);\n\n      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n    }\n  } // Bogus comment state\n  //------------------------------------------------------------------\n\n\n  [BOGUS_COMMENT_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n    } else {\n      this.currentToken.data += toChar(cp);\n    }\n  } // Markup declaration open state\n  //------------------------------------------------------------------\n\n\n  [MARKUP_DECLARATION_OPEN_STATE](cp) {\n    if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n      this._createCommentToken();\n\n      this.state = COMMENT_START_STATE;\n    } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n      this.state = DOCTYPE_STATE;\n    } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n      if (this.allowCDATA) {\n        this.state = CDATA_SECTION_STATE;\n      } else {\n        this._err(ERR.cdataInHtmlContent);\n\n        this._createCommentToken();\n\n        this.currentToken.data = '[CDATA[';\n        this.state = BOGUS_COMMENT_STATE;\n      }\n    } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.incorrectlyOpenedComment);\n\n      this._createCommentToken();\n\n      this._reconsumeInState(BOGUS_COMMENT_STATE);\n    }\n  } // Comment start state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_START_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_START_DASH_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptClosingOfEmptyComment);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment start dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_START_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptClosingOfEmptyComment);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '-';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_DASH_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.currentToken.data += '<';\n      this.state = COMMENT_LESS_THAN_SIGN_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += toChar(cp);\n    }\n  } // Comment less-than sign state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n    if (cp === $.EXCLAMATION_MARK) {\n      this.currentToken.data += '!';\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n    } else if (cp === $.LESS_THAN_SIGN) {\n      this.currentToken.data += '!';\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment less-than sign bang state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n    } else {\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n    } else {\n      this._reconsumeInState(COMMENT_END_DASH_STATE);\n    }\n  } // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n    if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n      this._err(ERR.nestedComment);\n    }\n\n    this._reconsumeInState(COMMENT_END_STATE);\n  } // Comment end dash state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_END_DASH_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = COMMENT_END_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '-';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment end state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_END_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EXCLAMATION_MARK) {\n      this.state = COMMENT_END_BANG_STATE;\n    } else if (cp === $.HYPHEN_MINUS) {\n      this.currentToken.data += '-';\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '--';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // Comment end bang state\n  //------------------------------------------------------------------\n\n\n  [COMMENT_END_BANG_STATE](cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.currentToken.data += '--!';\n      this.state = COMMENT_END_DASH_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.incorrectlyClosedComment);\n\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInComment);\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.data += '--!';\n\n      this._reconsumeInState(COMMENT_STATE);\n    }\n  } // DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this._createDoctypeToken(null);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingWhitespaceBeforeDoctypeName);\n\n      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n    }\n  } // Before DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(toAsciiLowerChar(cp));\n\n      this.state = DOCTYPE_NAME_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n\n      this.state = DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeName);\n\n      this._createDoctypeToken(null);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this._createDoctypeToken(null);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._createDoctypeToken(toChar(cp));\n\n      this.state = DOCTYPE_NAME_STATE;\n    }\n  } // DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = AFTER_DOCTYPE_NAME_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (isAsciiUpper(cp)) {\n      this.currentToken.name += toAsciiLowerChar(cp);\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.name += toChar(cp);\n    }\n  } // After DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_NAME_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n      this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n    } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n      this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n    } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.QUOTATION_MARK) {\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.publicId = '';\n      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.publicId += toChar(cp);\n    }\n  } // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypePublicIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.publicId += toChar(cp);\n    }\n  } // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n\n\n  [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n    if (isWhitespace(cp)) {\n      this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.QUOTATION_MARK) {\n      this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.QUOTATION_MARK) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n    } else if (cp === $.APOSTROPHE) {\n      this.currentToken.systemId = '';\n      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.missingDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n      this.state = DATA_STATE;\n\n      this._emitCurrentToken();\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n    if (cp === $.QUOTATION_MARK) {\n      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.systemId += toChar(cp);\n    }\n  } // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n    if (cp === $.APOSTROPHE) {\n      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n\n      this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n    } else if (cp === $.GREATER_THAN_SIGN) {\n      this._err(ERR.abruptDoctypeSystemIdentifier);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this.currentToken.systemId += toChar(cp);\n    }\n  } // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n    if (isWhitespace(cp)) {\n      return;\n    }\n\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInDoctype);\n\n      this.currentToken.forceQuirks = true;\n\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    } else {\n      this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n\n      this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n    }\n  } // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  [BOGUS_DOCTYPE_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this._emitCurrentToken();\n\n      this.state = DATA_STATE;\n    } else if (cp === $.NULL) {\n      this._err(ERR.unexpectedNullCharacter);\n    } else if (cp === $.EOF) {\n      this._emitCurrentToken();\n\n      this._emitEOFToken();\n    }\n  } // CDATA section state\n  //------------------------------------------------------------------\n\n\n  [CDATA_SECTION_STATE](cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = CDATA_SECTION_BRACKET_STATE;\n    } else if (cp === $.EOF) {\n      this._err(ERR.eofInCdata);\n\n      this._emitEOFToken();\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // CDATA section bracket state\n  //------------------------------------------------------------------\n\n\n  [CDATA_SECTION_BRACKET_STATE](cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = CDATA_SECTION_END_STATE;\n    } else {\n      this._emitChars(']');\n\n      this._reconsumeInState(CDATA_SECTION_STATE);\n    }\n  } // CDATA section end state\n  //------------------------------------------------------------------\n\n\n  [CDATA_SECTION_END_STATE](cp) {\n    if (cp === $.GREATER_THAN_SIGN) {\n      this.state = DATA_STATE;\n    } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this._emitChars(']');\n    } else {\n      this._emitChars(']]');\n\n      this._reconsumeInState(CDATA_SECTION_STATE);\n    }\n  } // Character reference state\n  //------------------------------------------------------------------\n\n\n  [CHARACTER_REFERENCE_STATE](cp) {\n    this.tempBuff = [$.AMPERSAND];\n\n    if (cp === $.NUMBER_SIGN) {\n      this.tempBuff.push(cp);\n      this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n    } else if (isAsciiAlphaNumeric(cp)) {\n      this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Named character reference state\n  //------------------------------------------------------------------\n\n\n  [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n    const matchResult = this._matchNamedCharacterReference(cp); //NOTE: matching can be abrupted by hibernation. In that case match\n    //results are no longer valid and we will need to start over.\n\n\n    if (this._ensureHibernation()) {\n      this.tempBuff = [$.AMPERSAND];\n    } else if (matchResult) {\n      const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n      if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n        if (!withSemicolon) {\n          this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n        }\n\n        this.tempBuff = matchResult;\n      }\n\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this.state = this.returnState;\n    } else {\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this.state = AMBIGUOUS_AMPERSAND_STATE;\n    }\n  } // Ambiguos ampersand state\n  //------------------------------------------------------------------\n\n\n  [AMBIGUOUS_AMPERSAND_STATE](cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      if (this._isCharacterReferenceInAttribute()) {\n        this.currentAttr.value += toChar(cp);\n      } else {\n        this._emitCodePoint(cp);\n      }\n    } else {\n      if (cp === $.SEMICOLON) {\n        this._err(ERR.unknownNamedCharacterReference);\n      }\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Numeric character reference state\n  //------------------------------------------------------------------\n\n\n  [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n    this.charRefCode = 0;\n\n    if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n      this.tempBuff.push(cp);\n      this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n    } else {\n      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n    }\n  } // Hexademical character reference start state\n  //------------------------------------------------------------------\n\n\n  [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n    if (isAsciiHexDigit(cp)) {\n      this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Decimal character reference start state\n  //------------------------------------------------------------------\n\n\n  [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n    if (isAsciiDigit(cp)) {\n      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointsConsumedAsCharacterReference();\n\n      this._reconsumeInState(this.returnState);\n    }\n  } // Hexademical character reference state\n  //------------------------------------------------------------------\n\n\n  [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n    if (isAsciiUpperHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n    } else if (isAsciiLowerHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n    } else if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n\n      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n    }\n  } // Decimal character reference state\n  //------------------------------------------------------------------\n\n\n  [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n    if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n\n      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n    }\n  } // Numeric character reference end state\n  //------------------------------------------------------------------\n\n\n  [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n    if (this.charRefCode === $.NULL) {\n      this._err(ERR.nullCharacterReference);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (this.charRefCode > 0x10ffff) {\n      this._err(ERR.characterReferenceOutsideUnicodeRange);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (unicode.isSurrogate(this.charRefCode)) {\n      this._err(ERR.surrogateCharacterReference);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n      this._err(ERR.noncharacterCharacterReference);\n    } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n      this._err(ERR.controlCharacterReference);\n\n      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n      if (replacement) {\n        this.charRefCode = replacement;\n      }\n    }\n\n    this.tempBuff = [this.charRefCode];\n\n    this._flushCodePointsConsumedAsCharacterReference();\n\n    this._reconsumeInState(this.returnState);\n  }\n\n} //Token types\n\n\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN'; //Tokenizer initial states for different modes\n\nTokenizer.MODE = {\n  DATA: DATA_STATE,\n  RCDATA: RCDATA_STATE,\n  RAWTEXT: RAWTEXT_STATE,\n  SCRIPT_DATA: SCRIPT_DATA_STATE,\n  PLAINTEXT: PLAINTEXT_STATE\n}; //Static\n\nTokenizer.getTokenAttr = function (token, attrName) {\n  for (let i = token.attrs.length - 1; i >= 0; i--) {\n    if (token.attrs[i].name === attrName) {\n      return token.attrs[i].value;\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = Tokenizer;","map":{"version":3,"names":["Preprocessor","require","unicode","neTree","ERR","$","CODE_POINTS","$$","CODE_POINT_SEQUENCES","C1_CONTROLS_REFERENCE_REPLACEMENTS","HAS_DATA_FLAG","DATA_DUPLET_FLAG","HAS_BRANCHES_FLAG","MAX_BRANCH_MARKER_VALUE","DATA_STATE","RCDATA_STATE","RAWTEXT_STATE","SCRIPT_DATA_STATE","PLAINTEXT_STATE","TAG_OPEN_STATE","END_TAG_OPEN_STATE","TAG_NAME_STATE","RCDATA_LESS_THAN_SIGN_STATE","RCDATA_END_TAG_OPEN_STATE","RCDATA_END_TAG_NAME_STATE","RAWTEXT_LESS_THAN_SIGN_STATE","RAWTEXT_END_TAG_OPEN_STATE","RAWTEXT_END_TAG_NAME_STATE","SCRIPT_DATA_LESS_THAN_SIGN_STATE","SCRIPT_DATA_END_TAG_OPEN_STATE","SCRIPT_DATA_END_TAG_NAME_STATE","SCRIPT_DATA_ESCAPE_START_STATE","SCRIPT_DATA_ESCAPE_START_DASH_STATE","SCRIPT_DATA_ESCAPED_STATE","SCRIPT_DATA_ESCAPED_DASH_STATE","SCRIPT_DATA_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE","SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE","SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE","BEFORE_ATTRIBUTE_NAME_STATE","ATTRIBUTE_NAME_STATE","AFTER_ATTRIBUTE_NAME_STATE","BEFORE_ATTRIBUTE_VALUE_STATE","ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE","ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE","ATTRIBUTE_VALUE_UNQUOTED_STATE","AFTER_ATTRIBUTE_VALUE_QUOTED_STATE","SELF_CLOSING_START_TAG_STATE","BOGUS_COMMENT_STATE","MARKUP_DECLARATION_OPEN_STATE","COMMENT_START_STATE","COMMENT_START_DASH_STATE","COMMENT_STATE","COMMENT_LESS_THAN_SIGN_STATE","COMMENT_LESS_THAN_SIGN_BANG_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE","COMMENT_END_DASH_STATE","COMMENT_END_STATE","COMMENT_END_BANG_STATE","DOCTYPE_STATE","BEFORE_DOCTYPE_NAME_STATE","DOCTYPE_NAME_STATE","AFTER_DOCTYPE_NAME_STATE","AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE","AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE","AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE","BOGUS_DOCTYPE_STATE","CDATA_SECTION_STATE","CDATA_SECTION_BRACKET_STATE","CDATA_SECTION_END_STATE","CHARACTER_REFERENCE_STATE","NAMED_CHARACTER_REFERENCE_STATE","AMBIGUOUS_AMPERSAND_STATE","NUMERIC_CHARACTER_REFERENCE_STATE","HEXADEMICAL_CHARACTER_REFERENCE_START_STATE","DECIMAL_CHARACTER_REFERENCE_START_STATE","HEXADEMICAL_CHARACTER_REFERENCE_STATE","DECIMAL_CHARACTER_REFERENCE_STATE","NUMERIC_CHARACTER_REFERENCE_END_STATE","isWhitespace","cp","SPACE","LINE_FEED","TABULATION","FORM_FEED","isAsciiDigit","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLowerCodePoint","toChar","String","fromCharCode","toAsciiLowerChar","findNamedEntityTreeBranch","nodeIx","branchCount","lo","hi","mid","midCp","Tokenizer","constructor","preprocessor","tokenQueue","allowCDATA","state","returnState","charRefCode","tempBuff","lastStartTagName","consumedAfterSnapshot","active","currentCharacterToken","currentToken","currentAttr","_err","_errOnNextCodePoint","err","_consume","_unconsume","getNextToken","length","_ensureHibernation","shift","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","retreat","push","type","HIBERNATION_TOKEN","advance","_reconsumeInState","_consumeSequenceIfMatch","pattern","startCp","caseSensitive","consumedCount","isMatch","patternLength","patternPos","patternCp","EOF","_isTempBufferEqualToScriptString","SCRIPT_STRING","i","_createStartTagToken","START_TAG_TOKEN","tagName","selfClosing","ackSelfClosing","attrs","_createEndTagToken","END_TAG_TOKEN","_createCommentToken","COMMENT_TOKEN","data","_createDoctypeToken","initialName","DOCTYPE_TOKEN","name","forceQuirks","publicId","systemId","_createCharacterToken","ch","chars","_createEOFToken","EOF_TOKEN","_createAttr","attrNameFirstCh","value","_leaveAttrName","toState","getTokenAttr","duplicateAttribute","_leaveAttrValue","_emitCurrentToken","_emitCurrentCharacterToken","ct","endTagWithAttributes","endTagWithTrailingSolidus","_emitEOFToken","_appendCharToCurrentCharacterToken","_emitCodePoint","CHARACTER_TOKEN","WHITESPACE_CHARACTER_TOKEN","NULL","NULL_CHARACTER_TOKEN","_emitSeveralCodePoints","codePoints","_emitChars","_matchNamedCharacterReference","result","excess","current","inNode","nodeWithData","pop","_isCharacterReferenceInAttribute","_isCharacterReferenceAttributeQuirk","withSemicolon","nextCp","EQUALS_SIGN","_flushCodePointsConsumedAsCharacterReference","dropParsedChunk","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","SOLIDUS","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","GREATER_THAN_SIGN","missingEndTagName","eofInTag","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH_STRING","DOCTYPE_STRING","CDATA_START_STRING","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","PUBLIC_STRING","SYSTEM_STRING","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","matchResult","SEMICOLON","missingSemicolonAfterCharacterReference","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","replacement","MODE","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","token","attrName","module","exports"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/parse5/lib/tokenizer/index.js"],"sourcesContent":["'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}