{"ast":null,"code":"function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nconst defaults = {\n  keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" + \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" + \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" + \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" + \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" + \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" + \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" + \" IMPLIED EXPORTS\"),\n  cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n  compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" + \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" + \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" + \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" + \" TEXTUAL-CONVENTION\"),\n  status: words(\"current deprecated mandatory obsolete\"),\n  tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" + \" UNIVERSAL\"),\n  storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" + \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" + \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" + \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" + \" TruthValue RowStatus DisplayString GeneralString\" + \" GraphicString IA5String NumericString\" + \" PrintableString SnmpAdminString TeletexString\" + \" UTF8String VideotexString VisibleString StringStore\" + \" ISO646String T61String UniversalString Unsigned32\" + \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n  modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" + \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" + \" DEFINED\"),\n  accessTypes: words(\"not-accessible accessible-for-notify read-only\" + \" read-create read-write\"),\n  multiLineStrings: true\n};\nexport function asn1(parserConfig) {\n  var keywords = parserConfig.keywords || defaults.keywords,\n      cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,\n      compareTypes = parserConfig.compareTypes || defaults.compareTypes,\n      status = parserConfig.status || defaults.status,\n      tags = parserConfig.tags || defaults.tags,\n      storage = parserConfig.storage || defaults.storage,\n      modifier = parserConfig.modifier || defaults.modifier,\n      accessTypes = parserConfig.accessTypes || defaults.accessTypes,\n      multiLineStrings = parserConfig.multiLineStrings || defaults.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n  var isOperatorChar = /[\\|\\^]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n      curPunc = ch;\n      return \"punctuation\";\n    }\n\n    if (ch == \"-\") {\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n\n    stream.eatWhile(/[\\w\\-]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (cmipVerbs.propertyIsEnumerable(cur)) return \"variableName\";\n    if (compareTypes.propertyIsEnumerable(cur)) return \"atom\";\n    if (status.propertyIsEnumerable(cur)) return \"comment\";\n    if (tags.propertyIsEnumerable(cur)) return \"typeName\";\n    if (storage.propertyIsEnumerable(cur)) return \"modifier\";\n    if (modifier.propertyIsEnumerable(cur)) return \"modifier\";\n    if (accessTypes.propertyIsEnumerable(cur)) return \"modifier\";\n    return \"variableName\";\n  }\n\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false,\n          next,\n          end = false;\n\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          var afterNext = stream.peek(); //look if the character if the quote is like the B in '10100010'B\n\n          if (afterNext) {\n            afterNext = afterNext.toLowerCase();\n            if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n          }\n\n          end = true;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  } //Interface\n\n\n  return {\n    startState: function () {\n      return {\n        tokenize: null,\n        context: new Context(-2, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n    token: function (stream, state) {\n      var ctx = state.context;\n\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n        popContext(state);\n      } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n\n        if (ctx.type == \"}\") ctx = popContext(state);\n\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n\n      state.startOfLine = false;\n      return style;\n    },\n    languageData: {\n      indentOnInput: /^\\s*[{}]$/,\n      commentTokens: {\n        line: \"--\"\n      }\n    }\n  };\n}\n;","map":{"version":3,"names":["words","str","obj","split","i","length","defaults","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","asn1","parserConfig","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/asn1.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst defaults = {\n  keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n                  \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n                  \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n                  \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n                  \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n                  \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n                  \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n                  \" IMPLIED EXPORTS\"),\n  cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n  compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n                      \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n                      \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n                      \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n                      \" TEXTUAL-CONVENTION\"),\n  status: words(\"current deprecated mandatory obsolete\"),\n  tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n              \" UNIVERSAL\"),\n  storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n                 \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n                 \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n                 \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n                 \" TruthValue RowStatus DisplayString GeneralString\" +\n                 \" GraphicString IA5String NumericString\" +\n                 \" PrintableString SnmpAdminString TeletexString\" +\n                 \" UTF8String VideotexString VisibleString StringStore\" +\n                 \" ISO646String T61String UniversalString Unsigned32\" +\n                 \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n  modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n                  \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n                  \" DEFINED\"),\n  accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n                     \" read-create read-write\"),\n  multiLineStrings: true\n}\n\nexport function asn1(parserConfig) {\n  var keywords = parserConfig.keywords || defaults.keywords,\n      cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,\n      compareTypes = parserConfig.compareTypes || defaults.compareTypes,\n      status = parserConfig.status || defaults.status,\n      tags = parserConfig.tags || defaults.tags,\n      storage = parserConfig.storage || defaults.storage,\n      modifier = parserConfig.modifier || defaults.modifier,\n      accessTypes = parserConfig.accessTypes|| defaults.accessTypes,\n      multiLineStrings = parserConfig.multiLineStrings || defaults.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n  var isOperatorChar = /[\\|\\^]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n      curPunc = ch;\n      return \"punctuation\";\n    }\n    if (ch == \"-\"){\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n\n    stream.eatWhile(/[\\w\\-]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (cmipVerbs.propertyIsEnumerable(cur)) return \"variableName\";\n    if (compareTypes.propertyIsEnumerable(cur)) return \"atom\";\n    if (status.propertyIsEnumerable(cur)) return \"comment\";\n    if (tags.propertyIsEnumerable(cur)) return \"typeName\";\n    if (storage.propertyIsEnumerable(cur)) return \"modifier\";\n    if (modifier.propertyIsEnumerable(cur)) return \"modifier\";\n    if (accessTypes.propertyIsEnumerable(cur)) return \"modifier\";\n\n    return \"variableName\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped){\n          var afterNext = stream.peek();\n          //look if the character if the quote is like the B in '10100010'B\n          if (afterNext){\n            afterNext = afterNext.toLowerCase();\n            if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n              stream.next();\n          }\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  //Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: null,\n        context: new Context(-2, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n          && ctx.type == \"statement\"){\n        popContext(state);\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n                                     && curPunc != ';') || (ctx.type == \"statement\"\n                                                            && curPunc == \"newstatement\")))\n        pushContext(state, stream.column(), \"statement\");\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*[{}]$/,\n      commentTokens: {line: \"--\"}\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,KAAT,CAAeC,GAAf,EAAoB;EAClB,IAAIC,GAAG,GAAG,EAAV;EAAA,IAAcF,KAAK,GAAGC,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAtB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkC,EAAED,CAApC,EAAuCF,GAAG,CAACF,KAAK,CAACI,CAAD,CAAN,CAAH,GAAgB,IAAhB;;EACvC,OAAOF,GAAP;AACD;;AAED,MAAMI,QAAQ,GAAG;EACfC,QAAQ,EAAEP,KAAK,CAAC,sDACA,qDADA,GAEA,kDAFA,GAGA,kDAHA,GAIA,kDAJA,GAKA,sDALA,GAMA,0DANA,GAOA,kBAPD,CADA;EASfQ,SAAS,EAAER,KAAK,CAAC,8CAAD,CATD;EAUfS,YAAY,EAAET,KAAK,CAAC,yDACA,gDADA,GAEA,+CAFA,GAGA,6CAHA,GAIA,qBAJD,CAVJ;EAefU,MAAM,EAAEV,KAAK,CAAC,uCAAD,CAfE;EAgBfW,IAAI,EAAEX,KAAK,CAAC,yDACA,YADD,CAhBI;EAkBfY,OAAO,EAAEZ,KAAK,CAAC,uDACA,mDADA,GAEA,8CAFA,GAGA,oDAHA,GAIA,mDAJA,GAKA,wCALA,GAMA,gDANA,GAOA,sDAPA,GAQA,oDARA,GASA,sDATD,CAlBC;EA4Bfa,QAAQ,EAAEb,KAAK,CAAC,0DACA,qDADA,GAEA,UAFD,CA5BA;EA+Bfc,WAAW,EAAEd,KAAK,CAAC,mDACA,yBADD,CA/BH;EAiCfe,gBAAgB,EAAE;AAjCH,CAAjB;AAoCA,OAAO,SAASC,IAAT,CAAcC,YAAd,EAA4B;EACjC,IAAIV,QAAQ,GAAGU,YAAY,CAACV,QAAb,IAAyBD,QAAQ,CAACC,QAAjD;EAAA,IACIC,SAAS,GAAGS,YAAY,CAACT,SAAb,IAA0BF,QAAQ,CAACE,SADnD;EAAA,IAEIC,YAAY,GAAGQ,YAAY,CAACR,YAAb,IAA6BH,QAAQ,CAACG,YAFzD;EAAA,IAGIC,MAAM,GAAGO,YAAY,CAACP,MAAb,IAAuBJ,QAAQ,CAACI,MAH7C;EAAA,IAIIC,IAAI,GAAGM,YAAY,CAACN,IAAb,IAAqBL,QAAQ,CAACK,IAJzC;EAAA,IAKIC,OAAO,GAAGK,YAAY,CAACL,OAAb,IAAwBN,QAAQ,CAACM,OAL/C;EAAA,IAMIC,QAAQ,GAAGI,YAAY,CAACJ,QAAb,IAAyBP,QAAQ,CAACO,QANjD;EAAA,IAOIC,WAAW,GAAGG,YAAY,CAACH,WAAb,IAA2BR,QAAQ,CAACQ,WAPtD;EAAA,IAQIC,gBAAgB,GAAGE,YAAY,CAACF,gBAAb,IAAiCT,QAAQ,CAACS,gBARjE;EAAA,IASIG,gBAAgB,GAAGD,YAAY,CAACC,gBAAb,KAAkC,KATzD;EAUA,IAAIC,cAAc,GAAG,QAArB;EACA,IAAIC,OAAJ;;EAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkC;IAChC,IAAIC,EAAE,GAAGF,MAAM,CAACG,IAAP,EAAT;;IACA,IAAID,EAAE,IAAI,GAAN,IAAaA,EAAE,IAAI,GAAvB,EAA4B;MAC1BD,KAAK,CAACG,QAAN,GAAiBC,WAAW,CAACH,EAAD,CAA5B;MACA,OAAOD,KAAK,CAACG,QAAN,CAAeJ,MAAf,EAAuBC,KAAvB,CAAP;IACD;;IACD,IAAI,mBAAmBK,IAAnB,CAAwBJ,EAAxB,CAAJ,EAAiC;MAC/BJ,OAAO,GAAGI,EAAV;MACA,OAAO,aAAP;IACD;;IACD,IAAIA,EAAE,IAAI,GAAV,EAAc;MACZ,IAAIF,MAAM,CAACO,GAAP,CAAW,GAAX,CAAJ,EAAqB;QACnBP,MAAM,CAACQ,SAAP;QACA,OAAO,SAAP;MACD;IACF;;IACD,IAAI,KAAKF,IAAL,CAAUJ,EAAV,CAAJ,EAAmB;MACjBF,MAAM,CAACS,QAAP,CAAgB,QAAhB;MACA,OAAO,QAAP;IACD;;IACD,IAAIZ,cAAc,CAACS,IAAf,CAAoBJ,EAApB,CAAJ,EAA6B;MAC3BF,MAAM,CAACS,QAAP,CAAgBZ,cAAhB;MACA,OAAO,UAAP;IACD;;IAEDG,MAAM,CAACS,QAAP,CAAgB,QAAhB;IACA,IAAIC,GAAG,GAAGV,MAAM,CAACW,OAAP,EAAV;IACA,IAAI1B,QAAQ,CAAC2B,oBAAT,CAA8BF,GAA9B,CAAJ,EAAwC,OAAO,SAAP;IACxC,IAAIxB,SAAS,CAAC0B,oBAAV,CAA+BF,GAA/B,CAAJ,EAAyC,OAAO,cAAP;IACzC,IAAIvB,YAAY,CAACyB,oBAAb,CAAkCF,GAAlC,CAAJ,EAA4C,OAAO,MAAP;IAC5C,IAAItB,MAAM,CAACwB,oBAAP,CAA4BF,GAA5B,CAAJ,EAAsC,OAAO,SAAP;IACtC,IAAIrB,IAAI,CAACuB,oBAAL,CAA0BF,GAA1B,CAAJ,EAAoC,OAAO,UAAP;IACpC,IAAIpB,OAAO,CAACsB,oBAAR,CAA6BF,GAA7B,CAAJ,EAAuC,OAAO,UAAP;IACvC,IAAInB,QAAQ,CAACqB,oBAAT,CAA8BF,GAA9B,CAAJ,EAAwC,OAAO,UAAP;IACxC,IAAIlB,WAAW,CAACoB,oBAAZ,CAAiCF,GAAjC,CAAJ,EAA2C,OAAO,UAAP;IAE3C,OAAO,cAAP;EACD;;EAED,SAASL,WAAT,CAAqBQ,KAArB,EAA4B;IAC1B,OAAO,UAASb,MAAT,EAAiBC,KAAjB,EAAwB;MAC7B,IAAIa,OAAO,GAAG,KAAd;MAAA,IAAqBX,IAArB;MAAA,IAA2BY,GAAG,GAAG,KAAjC;;MACA,OAAO,CAACZ,IAAI,GAAGH,MAAM,CAACG,IAAP,EAAR,KAA0B,IAAjC,EAAuC;QACrC,IAAIA,IAAI,IAAIU,KAAR,IAAiB,CAACC,OAAtB,EAA8B;UAC5B,IAAIE,SAAS,GAAGhB,MAAM,CAACiB,IAAP,EAAhB,CAD4B,CAE5B;;UACA,IAAID,SAAJ,EAAc;YACZA,SAAS,GAAGA,SAAS,CAACE,WAAV,EAAZ;YACA,IAAGF,SAAS,IAAI,GAAb,IAAoBA,SAAS,IAAI,GAAjC,IAAwCA,SAAS,IAAI,GAAxD,EACEhB,MAAM,CAACG,IAAP;UACH;;UACDY,GAAG,GAAG,IAAN;UAAY;QACb;;QACDD,OAAO,GAAG,CAACA,OAAD,IAAYX,IAAI,IAAI,IAA9B;MACD;;MACD,IAAIY,GAAG,IAAI,EAAED,OAAO,IAAIrB,gBAAb,CAAX,EACEQ,KAAK,CAACG,QAAN,GAAiB,IAAjB;MACF,OAAO,QAAP;IACD,CAlBD;EAmBD;;EAED,SAASe,OAAT,CAAiBC,QAAjB,EAA2BC,MAA3B,EAAmCC,IAAnC,EAAyCC,KAAzC,EAAgDC,IAAhD,EAAsD;IACpD,KAAKJ,QAAL,GAAgBA,QAAhB;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACD;;EACD,SAASC,WAAT,CAAqBxB,KAArB,EAA4ByB,GAA5B,EAAiCJ,IAAjC,EAAuC;IACrC,IAAIK,MAAM,GAAG1B,KAAK,CAACmB,QAAnB;IACA,IAAInB,KAAK,CAAC2B,OAAN,IAAiB3B,KAAK,CAAC2B,OAAN,CAAcN,IAAd,IAAsB,WAA3C,EACEK,MAAM,GAAG1B,KAAK,CAAC2B,OAAN,CAAcR,QAAvB;IACF,OAAOnB,KAAK,CAAC2B,OAAN,GAAgB,IAAIT,OAAJ,CAAYQ,MAAZ,EAAoBD,GAApB,EAAyBJ,IAAzB,EAA+B,IAA/B,EAAqCrB,KAAK,CAAC2B,OAA3C,CAAvB;EACD;;EACD,SAASC,UAAT,CAAoB5B,KAApB,EAA2B;IACzB,IAAI6B,CAAC,GAAG7B,KAAK,CAAC2B,OAAN,CAAcN,IAAtB;IACA,IAAIQ,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAAjB,IAAwBA,CAAC,IAAI,GAAjC,EACE7B,KAAK,CAACmB,QAAN,GAAiBnB,KAAK,CAAC2B,OAAN,CAAcR,QAA/B;IACF,OAAOnB,KAAK,CAAC2B,OAAN,GAAgB3B,KAAK,CAAC2B,OAAN,CAAcJ,IAArC;EACD,CA7FgC,CA+FjC;;;EACA,OAAO;IACLO,UAAU,EAAE,YAAW;MACrB,OAAO;QACL3B,QAAQ,EAAE,IADL;QAELwB,OAAO,EAAE,IAAIT,OAAJ,CAAY,CAAC,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,KAA1B,CAFJ;QAGLC,QAAQ,EAAE,CAHL;QAILY,WAAW,EAAE;MAJR,CAAP;IAMD,CARI;IAULC,KAAK,EAAE,UAASjC,MAAT,EAAiBC,KAAjB,EAAwB;MAC7B,IAAIiC,GAAG,GAAGjC,KAAK,CAAC2B,OAAhB;;MACA,IAAI5B,MAAM,CAACmC,GAAP,EAAJ,EAAkB;QAChB,IAAID,GAAG,CAACX,KAAJ,IAAa,IAAjB,EAAuBW,GAAG,CAACX,KAAJ,GAAY,KAAZ;QACvBtB,KAAK,CAACmB,QAAN,GAAiBpB,MAAM,CAACoC,WAAP,EAAjB;QACAnC,KAAK,CAAC+B,WAAN,GAAoB,IAApB;MACD;;MACD,IAAIhC,MAAM,CAACqC,QAAP,EAAJ,EAAuB,OAAO,IAAP;MACvBvC,OAAO,GAAG,IAAV;MACA,IAAIwC,KAAK,GAAG,CAACrC,KAAK,CAACG,QAAN,IAAkBL,SAAnB,EAA8BC,MAA9B,EAAsCC,KAAtC,CAAZ;MACA,IAAIqC,KAAK,IAAI,SAAb,EAAwB,OAAOA,KAAP;MACxB,IAAIJ,GAAG,CAACX,KAAJ,IAAa,IAAjB,EAAuBW,GAAG,CAACX,KAAJ,GAAY,IAAZ;;MAEvB,IAAI,CAACzB,OAAO,IAAI,GAAX,IAAkBA,OAAO,IAAI,GAA7B,IAAoCA,OAAO,IAAI,GAAhD,KACGoC,GAAG,CAACZ,IAAJ,IAAY,WADnB,EAC+B;QAC7BO,UAAU,CAAC5B,KAAD,CAAV;MACD,CAHD,MAIK,IAAIH,OAAO,IAAI,GAAf,EAAoB2B,WAAW,CAACxB,KAAD,EAAQD,MAAM,CAACqB,MAAP,EAAR,EAAyB,GAAzB,CAAX,CAApB,KACA,IAAIvB,OAAO,IAAI,GAAf,EAAoB2B,WAAW,CAACxB,KAAD,EAAQD,MAAM,CAACqB,MAAP,EAAR,EAAyB,GAAzB,CAAX,CAApB,KACA,IAAIvB,OAAO,IAAI,GAAf,EAAoB2B,WAAW,CAACxB,KAAD,EAAQD,MAAM,CAACqB,MAAP,EAAR,EAAyB,GAAzB,CAAX,CAApB,KACA,IAAIvB,OAAO,IAAI,GAAf,EAAoB;QACvB,OAAOoC,GAAG,CAACZ,IAAJ,IAAY,WAAnB,EAAgCY,GAAG,GAAGL,UAAU,CAAC5B,KAAD,CAAhB;;QAChC,IAAIiC,GAAG,CAACZ,IAAJ,IAAY,GAAhB,EAAqBY,GAAG,GAAGL,UAAU,CAAC5B,KAAD,CAAhB;;QACrB,OAAOiC,GAAG,CAACZ,IAAJ,IAAY,WAAnB,EAAgCY,GAAG,GAAGL,UAAU,CAAC5B,KAAD,CAAhB;MACjC,CAJI,MAKA,IAAIH,OAAO,IAAIoC,GAAG,CAACZ,IAAnB,EAAyBO,UAAU,CAAC5B,KAAD,CAAV,CAAzB,KACA,IAAIL,gBAAgB,KAAM,CAACsC,GAAG,CAACZ,IAAJ,IAAY,GAAZ,IAAmBY,GAAG,CAACZ,IAAJ,IAAY,KAAhC,KACGxB,OAAO,IAAI,GADf,IACwBoC,GAAG,CAACZ,IAAJ,IAAY,WAAZ,IACGxB,OAAO,IAAI,cAF3C,CAApB,EAGH2B,WAAW,CAACxB,KAAD,EAAQD,MAAM,CAACqB,MAAP,EAAR,EAAyB,WAAzB,CAAX;;MAEFpB,KAAK,CAAC+B,WAAN,GAAoB,KAApB;MACA,OAAOM,KAAP;IACD,CA3CI;IA6CLC,YAAY,EAAE;MACZC,aAAa,EAAE,WADH;MAEZC,aAAa,EAAE;QAACC,IAAI,EAAE;MAAP;IAFH;EA7CT,CAAP;AAkDD;AAAA"},"metadata":{},"sourceType":"module"}