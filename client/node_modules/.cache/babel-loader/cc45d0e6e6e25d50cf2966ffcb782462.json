{"ast":null,"code":"/*!\n * merge-descriptors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = merge;\n/**\n * Module variables.\n * @private\n */\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Merge the property descriptors of `src` into `dest`\n *\n * @param {object} dest Object to add descriptors to\n * @param {object} src Object to clone descriptors from\n * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties\n * @returns {object} Reference to dest\n * @public\n */\n\nfunction merge(dest, src, redefine) {\n  if (!dest) {\n    throw new TypeError('argument dest is required');\n  }\n\n  if (!src) {\n    throw new TypeError('argument src is required');\n  }\n\n  if (redefine === undefined) {\n    // Default to true\n    redefine = true;\n  }\n\n  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {\n    if (!redefine && hasOwnProperty.call(dest, name)) {\n      // Skip desriptor\n      return;\n    } // Copy descriptor\n\n\n    var descriptor = Object.getOwnPropertyDescriptor(src, name);\n    Object.defineProperty(dest, name, descriptor);\n  });\n  return dest;\n}","map":{"version":3,"names":["module","exports","merge","hasOwnProperty","Object","prototype","dest","src","redefine","TypeError","undefined","getOwnPropertyNames","forEach","forEachOwnPropertyName","name","call","descriptor","getOwnPropertyDescriptor","defineProperty"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/merge-descriptors/index.js"],"sourcesContent":["/*!\n * merge-descriptors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = merge\n\n/**\n * Module variables.\n * @private\n */\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * Merge the property descriptors of `src` into `dest`\n *\n * @param {object} dest Object to add descriptors to\n * @param {object} src Object to clone descriptors from\n * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties\n * @returns {object} Reference to dest\n * @public\n */\n\nfunction merge(dest, src, redefine) {\n  if (!dest) {\n    throw new TypeError('argument dest is required')\n  }\n\n  if (!src) {\n    throw new TypeError('argument src is required')\n  }\n\n  if (redefine === undefined) {\n    // Default to true\n    redefine = true\n  }\n\n  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {\n    if (!redefine && hasOwnProperty.call(dest, name)) {\n      // Skip desriptor\n      return\n    }\n\n    // Copy descriptor\n    var descriptor = Object.getOwnPropertyDescriptor(src, name)\n    Object.defineProperty(dest, name, descriptor)\n  })\n\n  return dest\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,KAAT,CAAeI,IAAf,EAAqBC,GAArB,EAA0BC,QAA1B,EAAoC;EAClC,IAAI,CAACF,IAAL,EAAW;IACT,MAAM,IAAIG,SAAJ,CAAc,2BAAd,CAAN;EACD;;EAED,IAAI,CAACF,GAAL,EAAU;IACR,MAAM,IAAIE,SAAJ,CAAc,0BAAd,CAAN;EACD;;EAED,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1B;IACAF,QAAQ,GAAG,IAAX;EACD;;EAEDJ,MAAM,CAACO,mBAAP,CAA2BJ,GAA3B,EAAgCK,OAAhC,CAAwC,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;IAC5E,IAAI,CAACN,QAAD,IAAaL,cAAc,CAACY,IAAf,CAAoBT,IAApB,EAA0BQ,IAA1B,CAAjB,EAAkD;MAChD;MACA;IACD,CAJ2E,CAM5E;;;IACA,IAAIE,UAAU,GAAGZ,MAAM,CAACa,wBAAP,CAAgCV,GAAhC,EAAqCO,IAArC,CAAjB;IACAV,MAAM,CAACc,cAAP,CAAsBZ,IAAtB,EAA4BQ,IAA5B,EAAkCE,UAAlC;EACD,CATD;EAWA,OAAOV,IAAP;AACD"},"metadata":{},"sourceType":"script"}