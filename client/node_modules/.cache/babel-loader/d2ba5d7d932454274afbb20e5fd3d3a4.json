{"ast":null,"code":"import { parser } from '@lezer/javascript';\nimport { syntaxTree, LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { EditorSelection } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\n\nconst snippets = [/*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n  label: \"function\",\n  detail: \"definition\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n  label: \"for\",\n  detail: \"loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n  label: \"for\",\n  detail: \"of loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"do {\\n\\t${}\\n} while (${})\", {\n  label: \"do\",\n  detail: \"loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"while (${}) {\\n\\t${}\\n}\", {\n  label: \"while\",\n  detail: \"loop\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n  label: \"try\",\n  detail: \"/ catch block\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n}\", {\n  label: \"if\",\n  detail: \"block\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n} else {\\n\\t${}\\n}\", {\n  label: \"if\",\n  detail: \"/ else block\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n  label: \"class\",\n  detail: \"definition\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n  label: \"import\",\n  detail: \"named\",\n  type: \"keyword\"\n}), /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n  label: \"import\",\n  detail: \"default\",\n  type: \"keyword\"\n})];\nconst cache = /*@__PURE__*/new NodeWeakMap();\nconst ScopeNodes = /*@__PURE__*/new Set([\"Script\", \"Block\", \"FunctionExpression\", \"FunctionDeclaration\", \"ArrowFunction\", \"MethodDeclaration\", \"ForStatement\"]);\n\nfunction defID(type) {\n  return (node, def) => {\n    let id = node.node.getChild(\"VariableDefinition\");\n    if (id) def(id, type);\n    return true;\n  };\n}\n\nconst functionContext = [\"FunctionDeclaration\"];\nconst gatherCompletions = {\n  FunctionDeclaration: /*@__PURE__*/defID(\"function\"),\n  ClassDeclaration: /*@__PURE__*/defID(\"class\"),\n  ClassExpression: () => true,\n  EnumDeclaration: /*@__PURE__*/defID(\"constant\"),\n  TypeAliasDeclaration: /*@__PURE__*/defID(\"type\"),\n  NamespaceDeclaration: /*@__PURE__*/defID(\"namespace\"),\n\n  VariableDefinition(node, def) {\n    if (!node.matchContext(functionContext)) def(node, \"variable\");\n  },\n\n  TypeDefinition(node, def) {\n    def(node, \"type\");\n  },\n\n  __proto__: null\n};\n\nfunction getScope(doc, node) {\n  let cached = cache.get(node);\n  if (cached) return cached;\n  let completions = [],\n      top = true;\n\n  function def(node, type) {\n    let name = doc.sliceString(node.from, node.to);\n    completions.push({\n      label: name,\n      type\n    });\n  }\n\n  node.cursor(IterMode.IncludeAnonymous).iterate(node => {\n    if (top) {\n      top = false;\n    } else if (node.name) {\n      let gather = gatherCompletions[node.name];\n      if (gather && gather(node, def) || ScopeNodes.has(node.name)) return false;\n    } else if (node.to - node.from > 8192) {\n      // Allow caching for bigger internal nodes\n      for (let c of getScope(doc, node.node)) completions.push(c);\n\n      return false;\n    }\n  });\n  cache.set(node, completions);\n  return completions;\n}\n\nconst Identifier = /^[\\w$\\xa1-\\uffff][\\w$\\d\\xa1-\\uffff]*$/;\nconst dontComplete = [\"TemplateString\", \"String\", \"RegExp\", \"LineComment\", \"BlockComment\", \"VariableDefinition\", \"TypeDefinition\", \"Label\", \"PropertyDefinition\", \"PropertyName\", \"PrivatePropertyDefinition\", \"PrivatePropertyName\"];\n/**\nCompletion source that looks up locally defined names in\nJavaScript code.\n*/\n\nfunction localCompletionSource(context) {\n  let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n  if (dontComplete.indexOf(inner.name) > -1) return null;\n  let isWord = inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n  if (!isWord && !context.explicit) return null;\n  let options = [];\n\n  for (let pos = inner; pos; pos = pos.parent) {\n    if (ScopeNodes.has(pos.name)) options = options.concat(getScope(context.state.doc, pos));\n  }\n\n  return {\n    options,\n    from: isWord ? inner.from : context.pos,\n    validFor: Identifier\n  };\n}\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\n\n\nconst javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch\\b|finally\\b)/\n      }),\n      LabeledStatement: flatIndent,\n      SwitchBody: context => {\n        let after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      Block: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      ArrowFunction: cx => cx.baseIndent + cx.unit,\n      \"TemplateString BlockComment\": () => null,\n      \"Statement Property\": /*@__PURE__*/continuedIndent({\n        except: /^{/\n      }),\n\n      JSXElement(context) {\n        let closed = /^\\s*<\\//.test(context.textAfter);\n        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n      },\n\n      JSXEscape(context) {\n        let closed = /\\s*\\}/.test(context.textAfter);\n        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n      },\n\n      \"JSXOpenTag JSXSelfClosingTag\"(context) {\n        return context.column(context.node.from) + context.unit;\n      }\n\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression\": foldInside,\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    })]\n  }),\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]\n    },\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n    wordChars: \"$\"\n  }\n});\n/**\nA language provider for TypeScript.\n*/\n\nconst typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"ts\"\n});\n/**\nLanguage provider for JSX.\n*/\n\nconst jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"jsx\"\n});\n/**\nLanguage provider for JSX + TypeScript.\n*/\n\nconst tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n  dialect: \"jsx ts\"\n});\nconst keywords = /*@__PURE__*/\"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield\".split(\" \").map(kw => ({\n  label: kw,\n  type: \"keyword\"\n}));\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\ncompletion.\n*/\n\nfunction javascript() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;\n  return new LanguageSupport(lang, [javascriptLanguage.data.of({\n    autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))\n  }), javascriptLanguage.data.of({\n    autocomplete: localCompletionSource\n  }), config.jsx ? autoCloseTags : []]);\n}\n\nfunction elementName(doc, tree) {\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;\n  if (!tree) return \"\";\n  let name = tree.getChild(\"JSXIdentifier\");\n  return name ? doc.sliceString(name.from, Math.min(name.to, max)) : \"\";\n}\n\nconst android = typeof navigator == \"object\" && /*@__PURE__*/ /Android\\b/.test(navigator.userAgent);\n/**\nExtension that will automatically insert JSX close tags when a `>` or\n`/` is typed.\n*/\n\nconst autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {\n  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly || from != to || text != \">\" && text != \"/\" || !javascriptLanguage.isActiveAt(view.state, from, -1)) return false;\n  let {\n    state\n  } = view;\n  let changes = state.changeByRange(range => {\n    var _a, _b, _c;\n\n    let {\n      head\n    } = range,\n        around = syntaxTree(state).resolveInner(head, -1),\n        name;\n    if (around.name == \"JSXStartTag\") around = around.parent;\n\n    if (text == \">\" && around.name == \"JSXFragmentTag\") {\n      return {\n        range: EditorSelection.cursor(head + 1),\n        changes: {\n          from: head,\n          insert: `><>`\n        }\n      };\n    } else if (text == \">\" && around.name == \"JSXIdentifier\") {\n      if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != \"JSXEndTag\" && (name = elementName(state.doc, around.parent, head))) return {\n        range: EditorSelection.cursor(head + 1),\n        changes: {\n          from: head,\n          insert: `></${name}>`\n        }\n      };\n    } else if (text == \"/\" && around.name == \"JSXFragmentTag\") {\n      let empty = around.parent,\n          base = empty === null || empty === void 0 ? void 0 : empty.parent;\n\n      if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != \"JSXEndTag\" && (name = elementName(state.doc, base === null || base === void 0 ? void 0 : base.firstChild, head))) {\n        let insert = `/${name}>`;\n        return {\n          range: EditorSelection.cursor(head + insert.length),\n          changes: {\n            from: head,\n            insert\n          }\n        };\n      }\n    }\n\n    return {\n      range\n    };\n  });\n  if (changes.changes.empty) return false;\n  view.dispatch(changes, {\n    userEvent: \"input.type\",\n    scrollIntoView: true\n  });\n  return true;\n});\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The [eslint4b](https://github.com/mysticatea/eslint4b)\nand\n[eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)\npackages may help with that.\n*/\n\nfunction esLint(eslint, config) {\n  if (!config) {\n    config = {\n      parserOptions: {\n        ecmaVersion: 2019,\n        sourceType: \"module\"\n      },\n      env: {\n        browser: true,\n        node: true,\n        es6: true,\n        es2015: true,\n        es2017: true,\n        es2020: true\n      },\n      rules: {}\n    };\n    eslint.getRules().forEach((desc, name) => {\n      if (desc.meta.docs.recommended) config.rules[name] = 2;\n    });\n  }\n\n  return view => {\n    let {\n      state\n    } = view,\n        found = [];\n\n    for (let {\n      from,\n      to\n    } of javascriptLanguage.findRegions(state)) {\n      let fromLine = state.doc.lineAt(from),\n          offset = {\n        line: fromLine.number - 1,\n        col: from - fromLine.from,\n        pos: from\n      };\n\n      for (let d of eslint.verify(state.sliceDoc(from, to), config)) found.push(translateDiagnostic(d, state.doc, offset));\n    }\n\n    return found;\n  };\n}\n\nfunction mapPos(line, col, doc, offset) {\n  return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\n\nfunction translateDiagnostic(input, doc, offset) {\n  let start = mapPos(input.line, input.column, doc, offset);\n  let result = {\n    from: start,\n    to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n    message: input.message,\n    source: input.ruleId ? \"eslint:\" + input.ruleId : \"eslint\",\n    severity: input.severity == 1 ? \"warning\" : \"error\"\n  };\n\n  if (input.fix) {\n    let {\n      range,\n      text\n    } = input.fix,\n        from = range[0] + offset.pos - start,\n        to = range[1] + offset.pos - start;\n    result.actions = [{\n      name: \"fix\",\n\n      apply(view, start) {\n        view.dispatch({\n          changes: {\n            from: start + from,\n            to: start + to,\n            insert: text\n          },\n          scrollIntoView: true\n        });\n      }\n\n    }];\n  }\n\n  return result;\n}\n\nexport { autoCloseTags, esLint, javascript, javascriptLanguage, jsxLanguage, localCompletionSource, snippets, tsxLanguage, typescriptLanguage };","map":{"version":3,"names":["parser","syntaxTree","LRLanguage","indentNodeProp","continuedIndent","flatIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","EditorSelection","EditorView","snippetCompletion","ifNotIn","completeFromList","NodeWeakMap","IterMode","snippets","label","detail","type","cache","ScopeNodes","Set","defID","node","def","id","getChild","functionContext","gatherCompletions","FunctionDeclaration","ClassDeclaration","ClassExpression","EnumDeclaration","TypeAliasDeclaration","NamespaceDeclaration","VariableDefinition","matchContext","TypeDefinition","__proto__","getScope","doc","cached","get","completions","top","name","sliceString","from","to","push","cursor","IncludeAnonymous","iterate","gather","has","c","set","Identifier","dontComplete","localCompletionSource","context","inner","state","resolveInner","pos","indexOf","isWord","test","sliceDoc","explicit","options","parent","concat","validFor","javascriptLanguage","define","configure","props","add","IfStatement","except","TryStatement","LabeledStatement","SwitchBody","after","textAfter","closed","isCase","baseIndent","unit","Block","closing","ArrowFunction","cx","JSXElement","lineIndent","JSXEscape","column","BlockComment","tree","languageData","closeBrackets","brackets","commentTokens","line","block","open","close","indentOnInput","wordChars","typescriptLanguage","dialect","jsxLanguage","tsxLanguage","keywords","split","map","kw","javascript","config","lang","jsx","typescript","data","of","autocomplete","autoCloseTags","elementName","max","length","Math","min","android","navigator","userAgent","inputHandler","view","text","composing","compositionStarted","readOnly","isActiveAt","changes","changeByRange","range","_a","_b","_c","head","around","insert","lastChild","empty","base","firstChild","dispatch","userEvent","scrollIntoView","esLint","eslint","parserOptions","ecmaVersion","sourceType","env","browser","es6","es2015","es2017","es2020","rules","getRules","forEach","desc","meta","docs","recommended","found","findRegions","fromLine","lineAt","offset","number","col","d","verify","translateDiagnostic","mapPos","input","start","result","endLine","endColumn","message","source","ruleId","severity","fix","actions","apply"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/lang-javascript/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/javascript';\nimport { syntaxTree, LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { EditorSelection } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\n\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n        label: \"function\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"of loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"do {\\n\\t${}\\n} while (${})\", {\n        label: \"do\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"while (${}) {\\n\\t${}\\n}\", {\n        label: \"while\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n        label: \"try\",\n        detail: \"/ catch block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n} else {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"/ else block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n        label: \"class\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"named\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"default\",\n        type: \"keyword\"\n    })\n];\n\nconst cache = /*@__PURE__*/new NodeWeakMap();\nconst ScopeNodes = /*@__PURE__*/new Set([\n    \"Script\", \"Block\",\n    \"FunctionExpression\", \"FunctionDeclaration\", \"ArrowFunction\", \"MethodDeclaration\",\n    \"ForStatement\"\n]);\nfunction defID(type) {\n    return (node, def) => {\n        let id = node.node.getChild(\"VariableDefinition\");\n        if (id)\n            def(id, type);\n        return true;\n    };\n}\nconst functionContext = [\"FunctionDeclaration\"];\nconst gatherCompletions = {\n    FunctionDeclaration: /*@__PURE__*/defID(\"function\"),\n    ClassDeclaration: /*@__PURE__*/defID(\"class\"),\n    ClassExpression: () => true,\n    EnumDeclaration: /*@__PURE__*/defID(\"constant\"),\n    TypeAliasDeclaration: /*@__PURE__*/defID(\"type\"),\n    NamespaceDeclaration: /*@__PURE__*/defID(\"namespace\"),\n    VariableDefinition(node, def) { if (!node.matchContext(functionContext))\n        def(node, \"variable\"); },\n    TypeDefinition(node, def) { def(node, \"type\"); },\n    __proto__: null\n};\nfunction getScope(doc, node) {\n    let cached = cache.get(node);\n    if (cached)\n        return cached;\n    let completions = [], top = true;\n    function def(node, type) {\n        let name = doc.sliceString(node.from, node.to);\n        completions.push({ label: name, type });\n    }\n    node.cursor(IterMode.IncludeAnonymous).iterate(node => {\n        if (top) {\n            top = false;\n        }\n        else if (node.name) {\n            let gather = gatherCompletions[node.name];\n            if (gather && gather(node, def) || ScopeNodes.has(node.name))\n                return false;\n        }\n        else if (node.to - node.from > 8192) {\n            // Allow caching for bigger internal nodes\n            for (let c of getScope(doc, node.node))\n                completions.push(c);\n            return false;\n        }\n    });\n    cache.set(node, completions);\n    return completions;\n}\nconst Identifier = /^[\\w$\\xa1-\\uffff][\\w$\\d\\xa1-\\uffff]*$/;\nconst dontComplete = [\n    \"TemplateString\", \"String\", \"RegExp\",\n    \"LineComment\", \"BlockComment\",\n    \"VariableDefinition\", \"TypeDefinition\", \"Label\",\n    \"PropertyDefinition\", \"PropertyName\",\n    \"PrivatePropertyDefinition\", \"PrivatePropertyName\"\n];\n/**\nCompletion source that looks up locally defined names in\nJavaScript code.\n*/\nfunction localCompletionSource(context) {\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (dontComplete.indexOf(inner.name) > -1)\n        return null;\n    let isWord = inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n    if (!isWord && !context.explicit)\n        return null;\n    let options = [];\n    for (let pos = inner; pos; pos = pos.parent) {\n        if (ScopeNodes.has(pos.name))\n            options = options.concat(getScope(context.state.doc, pos));\n    }\n    return {\n        options,\n        from: isWord ? inner.from : context.pos,\n        validFor: Identifier\n    };\n}\n\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\nconst javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                LabeledStatement: flatIndent,\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"TemplateString BlockComment\": () => null,\n                \"Statement Property\": /*@__PURE__*/continuedIndent({ except: /^{/ }),\n                JSXElement(context) {\n                    let closed = /^\\s*<\\//.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                JSXEscape(context) {\n                    let closed = /\\s*\\}/.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                \"JSXOpenTag JSXSelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression\": foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] },\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n        wordChars: \"$\"\n    }\n});\n/**\nA language provider for TypeScript.\n*/\nconst typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"ts\" });\n/**\nLanguage provider for JSX.\n*/\nconst jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"jsx\" });\n/**\nLanguage provider for JSX + TypeScript.\n*/\nconst tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"jsx ts\" });\nconst keywords = /*@__PURE__*/\"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield\".split(\" \").map(kw => ({ label: kw, type: \"keyword\" }));\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\ncompletion.\n*/\nfunction javascript(config = {}) {\n    let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)\n        : config.typescript ? typescriptLanguage : javascriptLanguage;\n    return new LanguageSupport(lang, [\n        javascriptLanguage.data.of({\n            autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))\n        }),\n        javascriptLanguage.data.of({\n            autocomplete: localCompletionSource\n        }),\n        config.jsx ? autoCloseTags : [],\n    ]);\n}\nfunction elementName(doc, tree, max = doc.length) {\n    if (!tree)\n        return \"\";\n    let name = tree.getChild(\"JSXIdentifier\");\n    return name ? doc.sliceString(name.from, Math.min(name.to, max)) : \"\";\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\n/**\nExtension that will automatically insert JSX close tags when a `>` or\n`/` is typed.\n*/\nconst autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||\n        from != to || (text != \">\" && text != \"/\") ||\n        !javascriptLanguage.isActiveAt(view.state, from, -1))\n        return false;\n    let { state } = view;\n    let changes = state.changeByRange(range => {\n        var _a, _b, _c;\n        let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name;\n        if (around.name == \"JSXStartTag\")\n            around = around.parent;\n        if (text == \">\" && around.name == \"JSXFragmentTag\") {\n            return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `><>` } };\n        }\n        else if (text == \">\" && around.name == \"JSXIdentifier\") {\n            if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != \"JSXEndTag\" && (name = elementName(state.doc, around.parent, head)))\n                return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };\n        }\n        else if (text == \"/\" && around.name == \"JSXFragmentTag\") {\n            let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;\n            if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != \"JSXEndTag\" && (name = elementName(state.doc, base === null || base === void 0 ? void 0 : base.firstChild, head))) {\n                let insert = `/${name}>`;\n                return { range: EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };\n            }\n        }\n        return { range };\n    });\n    if (changes.changes.empty)\n        return false;\n    view.dispatch(changes, { userEvent: \"input.type\", scrollIntoView: true });\n    return true;\n});\n\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The [eslint4b](https://github.com/mysticatea/eslint4b)\nand\n[eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)\npackages may help with that.\n*/\nfunction esLint(eslint, config) {\n    if (!config) {\n        config = {\n            parserOptions: { ecmaVersion: 2019, sourceType: \"module\" },\n            env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },\n            rules: {}\n        };\n        eslint.getRules().forEach((desc, name) => {\n            if (desc.meta.docs.recommended)\n                config.rules[name] = 2;\n        });\n    }\n    return (view) => {\n        let { state } = view, found = [];\n        for (let { from, to } of javascriptLanguage.findRegions(state)) {\n            let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };\n            for (let d of eslint.verify(state.sliceDoc(from, to), config))\n                found.push(translateDiagnostic(d, state.doc, offset));\n        }\n        return found;\n    };\n}\nfunction mapPos(line, col, doc, offset) {\n    return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\nfunction translateDiagnostic(input, doc, offset) {\n    let start = mapPos(input.line, input.column, doc, offset);\n    let result = {\n        from: start,\n        to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n        message: input.message,\n        source: input.ruleId ? \"eslint:\" + input.ruleId : \"eslint\",\n        severity: input.severity == 1 ? \"warning\" : \"error\",\n    };\n    if (input.fix) {\n        let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;\n        result.actions = [{\n                name: \"fix\",\n                apply(view, start) {\n                    view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });\n                }\n            }];\n    }\n    return result;\n}\n\nexport { autoCloseTags, esLint, javascript, javascriptLanguage, jsxLanguage, localCompletionSource, snippets, tsxLanguage, typescriptLanguage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}