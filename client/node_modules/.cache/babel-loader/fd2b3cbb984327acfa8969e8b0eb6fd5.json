{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"onChange\", \"toolbars\", \"toolbarsMode\", \"visible\", \"renderPreview\", \"visibleEditor\", \"hideToolbar\", \"previewProps\", \"extensions\", \"previewWidth\", \"reExtensions\"];\nimport React, { useState, useRef, useImperativeHandle } from 'react';\nimport { markdown, markdownLanguage } from '@codemirror/lang-markdown';\nimport { languages } from '@codemirror/language-data';\nimport { EditorView } from '@codemirror/view';\nimport CodeMirror from '@uiw/react-codemirror';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport ToolBar from './components/ToolBar';\nimport { getCommands, getModeCommands } from './commands';\nimport { defaultTheme } from './theme';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport * from './theme';\nexport * from './commands';\nexport * from '@uiw/react-markdown-preview';\nexport var scrollerStyle = EditorView.theme({\n  '&.cm-editor, & .cm-scroller': {\n    borderBottomRightRadius: '3px',\n    borderBottomLeftRadius: '3px'\n  }\n});\nvar MarkdownEditor = /*#__PURE__*/React.forwardRef(MarkdownEditorInternal);\nMarkdownEditor.Markdown = MarkdownPreview;\nexport default MarkdownEditor;\n\nfunction MarkdownEditorInternal(props, ref) {\n  var {\n    prefixCls = 'md-editor',\n    className,\n    onChange,\n    toolbars = getCommands(),\n    toolbarsMode = getModeCommands(),\n    visible = true,\n    renderPreview,\n    visibleEditor = true,\n    hideToolbar = true,\n    previewProps = {},\n    extensions = [],\n    previewWidth = '50%',\n    reExtensions\n  } = props,\n      codemirrorProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var [value, setValue] = useState(props.value || '');\n  var codeMirror = useRef(null);\n  var container = useRef(null);\n  var containerEditor = useRef(null);\n  var preview = useRef(null);\n  useImperativeHandle(ref, () => ({\n    editor: codeMirror,\n    preview: preview\n  }), [codeMirror]);\n  var toolBarProps = {\n    preview: preview,\n    editor: codeMirror,\n    container: container,\n    containerEditor: containerEditor,\n    editorProps: _extends({}, props, {\n      previewWidth\n    })\n  };\n  var height = typeof codemirrorProps.height === 'number' ? codemirrorProps.height + \"px\" : codemirrorProps.height;\n  var extensionsData = reExtensions ? reExtensions : [markdown({\n    base: markdownLanguage,\n    codeLanguages: languages\n  }), scrollerStyle, ...extensions];\n  var clsPreview = prefixCls + \"-preview\";\n  var cls = [prefixCls, 'wmde-markdown-var', className].filter(Boolean).join(' ');\n  previewProps['source'] = value;\n\n  var handleChange = (value, viewUpdate) => {\n    setValue(value);\n    onChange && onChange(value, viewUpdate);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: cls,\n    ref: container,\n    children: [hideToolbar && /*#__PURE__*/_jsxs(\"div\", {\n      className: prefixCls + \"-toolbar-warp\",\n      children: [/*#__PURE__*/_jsx(ToolBar, _extends({}, toolBarProps, {\n        toolbars: toolbars\n      })), /*#__PURE__*/_jsx(ToolBar, _extends({}, toolBarProps, {\n        toolbars: toolbarsMode,\n        mode: true\n      }))]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: prefixCls + \"-content\",\n      style: {\n        height: codemirrorProps.height\n      },\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: prefixCls + \"-content-editor\",\n        ref: containerEditor,\n        children: visibleEditor && /*#__PURE__*/_jsx(CodeMirror, _extends({\n          theme: defaultTheme\n        }, codemirrorProps, {\n          extensions: extensionsData,\n          height: height,\n          ref: codeMirror,\n          onChange: handleChange\n        }))\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: clsPreview,\n        ref: preview,\n        children: renderPreview ? renderPreview(previewProps, !!visible) : /*#__PURE__*/_jsx(MarkdownPreview, _extends({}, previewProps, {\n          \"data-visible\": !!visible\n        }))\n      })]\n    })]\n  });\n}","map":{"version":3,"sources":["../src/index.tsx"],"names":["scrollerStyle","borderBottomRightRadius","borderBottomLeftRadius","MarkdownEditor","React","prefixCls","toolbars","getCommands","toolbarsMode","getModeCommands","visible","visibleEditor","hideToolbar","previewProps","extensions","previewWidth","reExtensions","codemirrorProps","useState","props","codeMirror","useRef","container","containerEditor","preview","useImperativeHandle","editor","toolBarProps","editorProps","height","extensionsData","markdown","base","codeLanguages","languages","clsPreview","cls","handleChange","setValue","onChange","defaultTheme","renderPreview"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useImperativeHandle } from 'react';\nimport { markdown, markdownLanguage } from '@codemirror/lang-markdown';\nimport { languages } from '@codemirror/language-data';\nimport { EditorView, ViewUpdate } from '@codemirror/view';\nimport CodeMirror, { ReactCodeMirrorProps, ReactCodeMirrorRef } from '@uiw/react-codemirror';\nimport MarkdownPreview, { MarkdownPreviewProps } from '@uiw/react-markdown-preview';\nimport ToolBar, { IToolBarProps } from './components/ToolBar';\nimport { getCommands, getModeCommands } from './commands';\nimport { defaultTheme } from './theme';\nimport './index.less';\n\nexport * from './theme';\nexport * from './commands';\nexport * from '@uiw/react-markdown-preview';\n\nexport const scrollerStyle = EditorView.theme({\n  '&.cm-editor, & .cm-scroller': {\n    borderBottomRightRadius: '3px',\n    borderBottomLeftRadius: '3px',\n  },\n});\n\nexport interface IMarkdownEditor extends ReactCodeMirrorProps {\n  className?: string;\n  prefixCls?: string;\n  /** The raw markdown that will be converted to html (**required**) */\n  value?: string;\n  /** Shows a preview that will be converted to html. */\n  visible?: boolean;\n  visibleEditor?: boolean;\n  /** Option to hide the tool bar. */\n  hideToolbar?: boolean;\n  /** Override the default preview component */\n  renderPreview?: (props: MarkdownPreviewProps, initVisible: boolean) => React.ReactNode;\n  /** Preview expanded width @default `50%` */\n  previewWidth?: string;\n  /** Tool display settings. */\n  toolbars?: IToolBarProps['toolbars'];\n  /** Tool display settings. */\n  toolbarsMode?: IToolBarProps['toolbars'];\n  /** [@uiw/react-markdown-preview](https://github.com/uiwjs/react-markdown-preview#options-props) options */\n  previewProps?: MarkdownPreviewProps;\n  /** replace the default `extensions` */\n  reExtensions?: ReactCodeMirrorProps['extensions'];\n}\n\nexport interface ToolBarProps {\n  editor: React.RefObject<ReactCodeMirrorRef>;\n  preview: React.RefObject<HTMLDivElement>;\n  container: React.RefObject<HTMLDivElement>;\n  containerEditor: React.RefObject<HTMLDivElement>;\n  editorProps: IMarkdownEditor;\n}\n\nexport interface MarkdownEditorRef {\n  editor: React.RefObject<ReactCodeMirrorRef>;\n  preview: React.RefObject<HTMLDivElement> | null;\n}\n\nconst MarkdownEditor: MarkdownEditorComponent = React.forwardRef<MarkdownEditorRef, IMarkdownEditor>(\n  MarkdownEditorInternal,\n) as unknown as MarkdownEditorComponent;\ntype MarkdownEditorComponent = React.FC<React.PropsWithRef<IMarkdownEditor>> & {\n  Markdown: typeof MarkdownPreview;\n};\n\nMarkdownEditor.Markdown = MarkdownPreview;\n\nexport default MarkdownEditor;\n\nfunction MarkdownEditorInternal(\n  props: IMarkdownEditor,\n  ref?: ((instance: MarkdownEditorRef) => void) | React.RefObject<MarkdownEditorRef> | null,\n) {\n  const {\n    prefixCls = 'md-editor',\n    className,\n    onChange,\n    toolbars = getCommands(),\n    toolbarsMode = getModeCommands(),\n    visible = true,\n    renderPreview,\n    visibleEditor = true,\n    hideToolbar = true,\n    previewProps = {},\n    extensions = [],\n    previewWidth = '50%',\n    reExtensions,\n    ...codemirrorProps\n  } = props;\n  const [value, setValue] = useState(props.value || '');\n  const codeMirror = useRef<ReactCodeMirrorRef>(null);\n  const container = useRef<HTMLDivElement>(null);\n  const containerEditor = useRef<HTMLDivElement>(null);\n  const preview = useRef<HTMLDivElement>(null);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      editor: codeMirror,\n      preview: preview,\n    }),\n    [codeMirror],\n  );\n\n  const toolBarProps: ToolBarProps = {\n    preview: preview,\n    editor: codeMirror,\n    container: container,\n    containerEditor: containerEditor,\n    editorProps: { ...props, previewWidth },\n  };\n  const height = typeof codemirrorProps.height === 'number' ? `${codemirrorProps.height}px` : codemirrorProps.height;\n  const extensionsData: IMarkdownEditor['extensions'] = reExtensions\n    ? reExtensions\n    : [markdown({ base: markdownLanguage, codeLanguages: languages }), scrollerStyle, ...extensions];\n  const clsPreview = `${prefixCls}-preview`;\n  const cls = [prefixCls, 'wmde-markdown-var', className].filter(Boolean).join(' ');\n  previewProps['source'] = value;\n  const handleChange = (value: string, viewUpdate: ViewUpdate) => {\n    setValue(value);\n    onChange && onChange(value, viewUpdate);\n  };\n  return (\n    <div className={cls} ref={container}>\n      {hideToolbar && (\n        <div className={`${prefixCls}-toolbar-warp`}>\n          <ToolBar {...toolBarProps} toolbars={toolbars} />\n          <ToolBar {...toolBarProps} toolbars={toolbarsMode} mode />\n        </div>\n      )}\n      <div className={`${prefixCls}-content`} style={{ height: codemirrorProps.height }}>\n        <div className={`${prefixCls}-content-editor`} ref={containerEditor}>\n          {visibleEditor && (\n            <CodeMirror\n              theme={defaultTheme}\n              {...codemirrorProps}\n              extensions={extensionsData}\n              height={height}\n              ref={codeMirror}\n              onChange={handleChange}\n            />\n          )}\n        </div>\n        <div className={clsPreview} ref={preview}>\n          {renderPreview ? (\n            renderPreview(previewProps, !!visible)\n          ) : (\n            <MarkdownPreview {...previewProps} data-visible={!!visible} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}