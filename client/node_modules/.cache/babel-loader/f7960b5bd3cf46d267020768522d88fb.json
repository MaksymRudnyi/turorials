{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"./utils\");\n\nfunction parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\n  var l = str.length;\n  var chr = '';\n\n  function getStr(quote, escapeTable) {\n    var result = '';\n    pos++;\n    chr = str.charAt(pos);\n\n    while (pos < l) {\n      if (chr === quote) {\n        pos++;\n        return result;\n      } else if (chr === '\\\\') {\n        pos++;\n        chr = str.charAt(pos);\n        var esc = void 0;\n\n        if (chr === quote) {\n          result += quote;\n        } else if ((esc = escapeTable[chr]) !== undefined) {\n          result += esc;\n        } else if (utils_1.isHex(chr)) {\n          var hex = chr;\n          pos++;\n          chr = str.charAt(pos);\n\n          while (utils_1.isHex(chr)) {\n            hex += chr;\n            pos++;\n            chr = str.charAt(pos);\n          }\n\n          if (chr === ' ') {\n            pos++;\n            chr = str.charAt(pos);\n          }\n\n          result += String.fromCharCode(parseInt(hex, 16));\n          continue;\n        } else {\n          result += chr;\n        }\n      } else {\n        result += chr;\n      }\n\n      pos++;\n      chr = str.charAt(pos);\n    }\n\n    return result;\n  }\n\n  function getIdent() {\n    var result = '';\n    chr = str.charAt(pos);\n\n    while (pos < l) {\n      if (utils_1.isIdent(chr)) {\n        result += chr;\n      } else if (chr === '\\\\') {\n        pos++;\n\n        if (pos >= l) {\n          throw Error('Expected symbol but end of file reached.');\n        }\n\n        chr = str.charAt(pos);\n\n        if (utils_1.identSpecialChars[chr]) {\n          result += chr;\n        } else if (utils_1.isHex(chr)) {\n          var hex = chr;\n          pos++;\n          chr = str.charAt(pos);\n\n          while (utils_1.isHex(chr)) {\n            hex += chr;\n            pos++;\n            chr = str.charAt(pos);\n          }\n\n          if (chr === ' ') {\n            pos++;\n            chr = str.charAt(pos);\n          }\n\n          result += String.fromCharCode(parseInt(hex, 16));\n          continue;\n        } else {\n          result += chr;\n        }\n      } else {\n        return result;\n      }\n\n      pos++;\n      chr = str.charAt(pos);\n    }\n\n    return result;\n  }\n\n  function skipWhitespace() {\n    chr = str.charAt(pos);\n    var result = false;\n\n    while (chr === ' ' || chr === \"\\t\" || chr === \"\\n\" || chr === \"\\r\" || chr === \"\\f\") {\n      result = true;\n      pos++;\n      chr = str.charAt(pos);\n    }\n\n    return result;\n  }\n\n  function parse() {\n    var res = parseSelector();\n\n    if (pos < l) {\n      throw Error('Rule expected but \"' + str.charAt(pos) + '\" found.');\n    }\n\n    return res;\n  }\n\n  function parseSelector() {\n    var selector = parseSingleSelector();\n\n    if (!selector) {\n      return null;\n    }\n\n    var res = selector;\n    chr = str.charAt(pos);\n\n    while (chr === ',') {\n      pos++;\n      skipWhitespace();\n\n      if (res.type !== 'selectors') {\n        res = {\n          type: 'selectors',\n          selectors: [selector]\n        };\n      }\n\n      selector = parseSingleSelector();\n\n      if (!selector) {\n        throw Error('Rule expected after \",\".');\n      }\n\n      res.selectors.push(selector);\n    }\n\n    return res;\n  }\n\n  function parseSingleSelector() {\n    skipWhitespace();\n    var selector = {\n      type: 'ruleSet'\n    };\n    var rule = parseRule();\n\n    if (!rule) {\n      return null;\n    }\n\n    var currentRule = selector;\n\n    while (rule) {\n      rule.type = 'rule';\n      currentRule.rule = rule;\n      currentRule = rule;\n      skipWhitespace();\n      chr = str.charAt(pos);\n\n      if (pos >= l || chr === ',' || chr === ')') {\n        break;\n      }\n\n      if (ruleNestingOperators[chr]) {\n        var op = chr;\n        pos++;\n        skipWhitespace();\n        rule = parseRule();\n\n        if (!rule) {\n          throw Error('Rule expected after \"' + op + '\".');\n        }\n\n        rule.nestingOperator = op;\n      } else {\n        rule = parseRule();\n\n        if (rule) {\n          rule.nestingOperator = null;\n        }\n      }\n    }\n\n    return selector;\n  } // @ts-ignore no-overlap\n\n\n  function parseRule() {\n    var rule = null;\n\n    while (pos < l) {\n      chr = str.charAt(pos);\n\n      if (chr === '*') {\n        pos++;\n        (rule = rule || {}).tagName = '*';\n      } else if (utils_1.isIdentStart(chr) || chr === '\\\\') {\n        (rule = rule || {}).tagName = getIdent();\n      } else if (chr === '.') {\n        pos++;\n        rule = rule || {};\n        (rule.classNames = rule.classNames || []).push(getIdent());\n      } else if (chr === '#') {\n        pos++;\n        (rule = rule || {}).id = getIdent();\n      } else if (chr === '[') {\n        pos++;\n        skipWhitespace();\n        var attr = {\n          name: getIdent()\n        };\n        skipWhitespace(); // @ts-ignore\n\n        if (chr === ']') {\n          pos++;\n        } else {\n          var operator = '';\n\n          if (attrEqualityMods[chr]) {\n            operator = chr;\n            pos++;\n            chr = str.charAt(pos);\n          }\n\n          if (pos >= l) {\n            throw Error('Expected \"=\" but end of file reached.');\n          }\n\n          if (chr !== '=') {\n            throw Error('Expected \"=\" but \"' + chr + '\" found.');\n          }\n\n          attr.operator = operator + '=';\n          pos++;\n          skipWhitespace();\n          var attrValue = '';\n          attr.valueType = 'string'; // @ts-ignore\n\n          if (chr === '\"') {\n            attrValue = getStr('\"', utils_1.doubleQuotesEscapeChars); // @ts-ignore\n          } else if (chr === '\\'') {\n            attrValue = getStr('\\'', utils_1.singleQuoteEscapeChars); // @ts-ignore\n          } else if (substitutesEnabled && chr === '$') {\n            pos++;\n            attrValue = getIdent();\n            attr.valueType = 'substitute';\n          } else {\n            while (pos < l) {\n              if (chr === ']') {\n                break;\n              }\n\n              attrValue += chr;\n              pos++;\n              chr = str.charAt(pos);\n            }\n\n            attrValue = attrValue.trim();\n          }\n\n          skipWhitespace();\n\n          if (pos >= l) {\n            throw Error('Expected \"]\" but end of file reached.');\n          }\n\n          if (chr !== ']') {\n            throw Error('Expected \"]\" but \"' + chr + '\" found.');\n          }\n\n          pos++;\n          attr.value = attrValue;\n        }\n\n        rule = rule || {};\n        (rule.attrs = rule.attrs || []).push(attr);\n      } else if (chr === ':') {\n        pos++;\n        var pseudoName = getIdent();\n        var pseudo = {\n          name: pseudoName\n        }; // @ts-ignore\n\n        if (chr === '(') {\n          pos++;\n          var value = '';\n          skipWhitespace();\n\n          if (pseudos[pseudoName] === 'selector') {\n            pseudo.valueType = 'selector';\n            value = parseSelector();\n          } else {\n            pseudo.valueType = pseudos[pseudoName] || 'string'; // @ts-ignore\n\n            if (chr === '\"') {\n              value = getStr('\"', utils_1.doubleQuotesEscapeChars); // @ts-ignore\n            } else if (chr === '\\'') {\n              value = getStr('\\'', utils_1.singleQuoteEscapeChars); // @ts-ignore\n            } else if (substitutesEnabled && chr === '$') {\n              pos++;\n              value = getIdent();\n              pseudo.valueType = 'substitute';\n            } else {\n              while (pos < l) {\n                if (chr === ')') {\n                  break;\n                }\n\n                value += chr;\n                pos++;\n                chr = str.charAt(pos);\n              }\n\n              value = value.trim();\n            }\n\n            skipWhitespace();\n          }\n\n          if (pos >= l) {\n            throw Error('Expected \")\" but end of file reached.');\n          }\n\n          if (chr !== ')') {\n            throw Error('Expected \")\" but \"' + chr + '\" found.');\n          }\n\n          pos++;\n          pseudo.value = value;\n        }\n\n        rule = rule || {};\n        (rule.pseudos = rule.pseudos || []).push(pseudo);\n      } else {\n        break;\n      }\n    }\n\n    return rule;\n  }\n\n  return parse();\n}\n\nexports.parseCssSelector = parseCssSelector;","map":{"version":3,"names":["Object","defineProperty","exports","value","utils_1","require","parseCssSelector","str","pos","pseudos","attrEqualityMods","ruleNestingOperators","substitutesEnabled","l","length","chr","getStr","quote","escapeTable","result","charAt","esc","undefined","isHex","hex","String","fromCharCode","parseInt","getIdent","isIdent","Error","identSpecialChars","skipWhitespace","parse","res","parseSelector","selector","parseSingleSelector","type","selectors","push","rule","parseRule","currentRule","op","nestingOperator","tagName","isIdentStart","classNames","id","attr","name","operator","attrValue","valueType","doubleQuotesEscapeChars","singleQuoteEscapeChars","trim","attrs","pseudoName","pseudo"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/css-selector-parser/lib/parser-context.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"./utils\");\nfunction parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\n    var l = str.length;\n    var chr = '';\n    function getStr(quote, escapeTable) {\n        var result = '';\n        pos++;\n        chr = str.charAt(pos);\n        while (pos < l) {\n            if (chr === quote) {\n                pos++;\n                return result;\n            }\n            else if (chr === '\\\\') {\n                pos++;\n                chr = str.charAt(pos);\n                var esc = void 0;\n                if (chr === quote) {\n                    result += quote;\n                }\n                else if ((esc = escapeTable[chr]) !== undefined) {\n                    result += esc;\n                }\n                else if (utils_1.isHex(chr)) {\n                    var hex = chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                    while (utils_1.isHex(chr)) {\n                        hex += chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (chr === ' ') {\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    result += String.fromCharCode(parseInt(hex, 16));\n                    continue;\n                }\n                else {\n                    result += chr;\n                }\n            }\n            else {\n                result += chr;\n            }\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function getIdent() {\n        var result = '';\n        chr = str.charAt(pos);\n        while (pos < l) {\n            if (utils_1.isIdent(chr)) {\n                result += chr;\n            }\n            else if (chr === '\\\\') {\n                pos++;\n                if (pos >= l) {\n                    throw Error('Expected symbol but end of file reached.');\n                }\n                chr = str.charAt(pos);\n                if (utils_1.identSpecialChars[chr]) {\n                    result += chr;\n                }\n                else if (utils_1.isHex(chr)) {\n                    var hex = chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                    while (utils_1.isHex(chr)) {\n                        hex += chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (chr === ' ') {\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    result += String.fromCharCode(parseInt(hex, 16));\n                    continue;\n                }\n                else {\n                    result += chr;\n                }\n            }\n            else {\n                return result;\n            }\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function skipWhitespace() {\n        chr = str.charAt(pos);\n        var result = false;\n        while (chr === ' ' || chr === \"\\t\" || chr === \"\\n\" || chr === \"\\r\" || chr === \"\\f\") {\n            result = true;\n            pos++;\n            chr = str.charAt(pos);\n        }\n        return result;\n    }\n    function parse() {\n        var res = parseSelector();\n        if (pos < l) {\n            throw Error('Rule expected but \"' + str.charAt(pos) + '\" found.');\n        }\n        return res;\n    }\n    function parseSelector() {\n        var selector = parseSingleSelector();\n        if (!selector) {\n            return null;\n        }\n        var res = selector;\n        chr = str.charAt(pos);\n        while (chr === ',') {\n            pos++;\n            skipWhitespace();\n            if (res.type !== 'selectors') {\n                res = {\n                    type: 'selectors',\n                    selectors: [selector]\n                };\n            }\n            selector = parseSingleSelector();\n            if (!selector) {\n                throw Error('Rule expected after \",\".');\n            }\n            res.selectors.push(selector);\n        }\n        return res;\n    }\n    function parseSingleSelector() {\n        skipWhitespace();\n        var selector = {\n            type: 'ruleSet'\n        };\n        var rule = parseRule();\n        if (!rule) {\n            return null;\n        }\n        var currentRule = selector;\n        while (rule) {\n            rule.type = 'rule';\n            currentRule.rule = rule;\n            currentRule = rule;\n            skipWhitespace();\n            chr = str.charAt(pos);\n            if (pos >= l || chr === ',' || chr === ')') {\n                break;\n            }\n            if (ruleNestingOperators[chr]) {\n                var op = chr;\n                pos++;\n                skipWhitespace();\n                rule = parseRule();\n                if (!rule) {\n                    throw Error('Rule expected after \"' + op + '\".');\n                }\n                rule.nestingOperator = op;\n            }\n            else {\n                rule = parseRule();\n                if (rule) {\n                    rule.nestingOperator = null;\n                }\n            }\n        }\n        return selector;\n    }\n    // @ts-ignore no-overlap\n    function parseRule() {\n        var rule = null;\n        while (pos < l) {\n            chr = str.charAt(pos);\n            if (chr === '*') {\n                pos++;\n                (rule = rule || {}).tagName = '*';\n            }\n            else if (utils_1.isIdentStart(chr) || chr === '\\\\') {\n                (rule = rule || {}).tagName = getIdent();\n            }\n            else if (chr === '.') {\n                pos++;\n                rule = rule || {};\n                (rule.classNames = rule.classNames || []).push(getIdent());\n            }\n            else if (chr === '#') {\n                pos++;\n                (rule = rule || {}).id = getIdent();\n            }\n            else if (chr === '[') {\n                pos++;\n                skipWhitespace();\n                var attr = {\n                    name: getIdent()\n                };\n                skipWhitespace();\n                // @ts-ignore\n                if (chr === ']') {\n                    pos++;\n                }\n                else {\n                    var operator = '';\n                    if (attrEqualityMods[chr]) {\n                        operator = chr;\n                        pos++;\n                        chr = str.charAt(pos);\n                    }\n                    if (pos >= l) {\n                        throw Error('Expected \"=\" but end of file reached.');\n                    }\n                    if (chr !== '=') {\n                        throw Error('Expected \"=\" but \"' + chr + '\" found.');\n                    }\n                    attr.operator = operator + '=';\n                    pos++;\n                    skipWhitespace();\n                    var attrValue = '';\n                    attr.valueType = 'string';\n                    // @ts-ignore\n                    if (chr === '\"') {\n                        attrValue = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                        // @ts-ignore\n                    }\n                    else if (chr === '\\'') {\n                        attrValue = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                        // @ts-ignore\n                    }\n                    else if (substitutesEnabled && chr === '$') {\n                        pos++;\n                        attrValue = getIdent();\n                        attr.valueType = 'substitute';\n                    }\n                    else {\n                        while (pos < l) {\n                            if (chr === ']') {\n                                break;\n                            }\n                            attrValue += chr;\n                            pos++;\n                            chr = str.charAt(pos);\n                        }\n                        attrValue = attrValue.trim();\n                    }\n                    skipWhitespace();\n                    if (pos >= l) {\n                        throw Error('Expected \"]\" but end of file reached.');\n                    }\n                    if (chr !== ']') {\n                        throw Error('Expected \"]\" but \"' + chr + '\" found.');\n                    }\n                    pos++;\n                    attr.value = attrValue;\n                }\n                rule = rule || {};\n                (rule.attrs = rule.attrs || []).push(attr);\n            }\n            else if (chr === ':') {\n                pos++;\n                var pseudoName = getIdent();\n                var pseudo = {\n                    name: pseudoName\n                };\n                // @ts-ignore\n                if (chr === '(') {\n                    pos++;\n                    var value = '';\n                    skipWhitespace();\n                    if (pseudos[pseudoName] === 'selector') {\n                        pseudo.valueType = 'selector';\n                        value = parseSelector();\n                    }\n                    else {\n                        pseudo.valueType = pseudos[pseudoName] || 'string';\n                        // @ts-ignore\n                        if (chr === '\"') {\n                            value = getStr('\"', utils_1.doubleQuotesEscapeChars);\n                            // @ts-ignore\n                        }\n                        else if (chr === '\\'') {\n                            value = getStr('\\'', utils_1.singleQuoteEscapeChars);\n                            // @ts-ignore\n                        }\n                        else if (substitutesEnabled && chr === '$') {\n                            pos++;\n                            value = getIdent();\n                            pseudo.valueType = 'substitute';\n                        }\n                        else {\n                            while (pos < l) {\n                                if (chr === ')') {\n                                    break;\n                                }\n                                value += chr;\n                                pos++;\n                                chr = str.charAt(pos);\n                            }\n                            value = value.trim();\n                        }\n                        skipWhitespace();\n                    }\n                    if (pos >= l) {\n                        throw Error('Expected \")\" but end of file reached.');\n                    }\n                    if (chr !== ')') {\n                        throw Error('Expected \")\" but \"' + chr + '\" found.');\n                    }\n                    pos++;\n                    pseudo.value = value;\n                }\n                rule = rule || {};\n                (rule.pseudos = rule.pseudos || []).push(pseudo);\n            }\n            else {\n                break;\n            }\n        }\n        return rule;\n    }\n    return parse();\n}\nexports.parseCssSelector = parseCssSelector;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,OAApC,EAA6CC,gBAA7C,EAA+DC,oBAA/D,EAAqFC,kBAArF,EAAyG;EACrG,IAAIC,CAAC,GAAGN,GAAG,CAACO,MAAZ;EACA,IAAIC,GAAG,GAAG,EAAV;;EACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,WAAvB,EAAoC;IAChC,IAAIC,MAAM,GAAG,EAAb;IACAX,GAAG;IACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;IACA,OAAOA,GAAG,GAAGK,CAAb,EAAgB;MACZ,IAAIE,GAAG,KAAKE,KAAZ,EAAmB;QACfT,GAAG;QACH,OAAOW,MAAP;MACH,CAHD,MAIK,IAAIJ,GAAG,KAAK,IAAZ,EAAkB;QACnBP,GAAG;QACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;QACA,IAAIa,GAAG,GAAG,KAAK,CAAf;;QACA,IAAIN,GAAG,KAAKE,KAAZ,EAAmB;UACfE,MAAM,IAAIF,KAAV;QACH,CAFD,MAGK,IAAI,CAACI,GAAG,GAAGH,WAAW,CAACH,GAAD,CAAlB,MAA6BO,SAAjC,EAA4C;UAC7CH,MAAM,IAAIE,GAAV;QACH,CAFI,MAGA,IAAIjB,OAAO,CAACmB,KAAR,CAAcR,GAAd,CAAJ,EAAwB;UACzB,IAAIS,GAAG,GAAGT,GAAV;UACAP,GAAG;UACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;UACA,OAAOJ,OAAO,CAACmB,KAAR,CAAcR,GAAd,CAAP,EAA2B;YACvBS,GAAG,IAAIT,GAAP;YACAP,GAAG;YACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;UACH;;UACD,IAAIO,GAAG,KAAK,GAAZ,EAAiB;YACbP,GAAG;YACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;UACH;;UACDW,MAAM,IAAIM,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAA5B,CAAV;UACA;QACH,CAfI,MAgBA;UACDL,MAAM,IAAIJ,GAAV;QACH;MACJ,CA7BI,MA8BA;QACDI,MAAM,IAAIJ,GAAV;MACH;;MACDP,GAAG;MACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;IACH;;IACD,OAAOW,MAAP;EACH;;EACD,SAASS,QAAT,GAAoB;IAChB,IAAIT,MAAM,GAAG,EAAb;IACAJ,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;IACA,OAAOA,GAAG,GAAGK,CAAb,EAAgB;MACZ,IAAIT,OAAO,CAACyB,OAAR,CAAgBd,GAAhB,CAAJ,EAA0B;QACtBI,MAAM,IAAIJ,GAAV;MACH,CAFD,MAGK,IAAIA,GAAG,KAAK,IAAZ,EAAkB;QACnBP,GAAG;;QACH,IAAIA,GAAG,IAAIK,CAAX,EAAc;UACV,MAAMiB,KAAK,CAAC,0CAAD,CAAX;QACH;;QACDf,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;QACA,IAAIJ,OAAO,CAAC2B,iBAAR,CAA0BhB,GAA1B,CAAJ,EAAoC;UAChCI,MAAM,IAAIJ,GAAV;QACH,CAFD,MAGK,IAAIX,OAAO,CAACmB,KAAR,CAAcR,GAAd,CAAJ,EAAwB;UACzB,IAAIS,GAAG,GAAGT,GAAV;UACAP,GAAG;UACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;UACA,OAAOJ,OAAO,CAACmB,KAAR,CAAcR,GAAd,CAAP,EAA2B;YACvBS,GAAG,IAAIT,GAAP;YACAP,GAAG;YACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;UACH;;UACD,IAAIO,GAAG,KAAK,GAAZ,EAAiB;YACbP,GAAG;YACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;UACH;;UACDW,MAAM,IAAIM,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAA5B,CAAV;UACA;QACH,CAfI,MAgBA;UACDL,MAAM,IAAIJ,GAAV;QACH;MACJ,CA5BI,MA6BA;QACD,OAAOI,MAAP;MACH;;MACDX,GAAG;MACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;IACH;;IACD,OAAOW,MAAP;EACH;;EACD,SAASa,cAAT,GAA0B;IACtBjB,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;IACA,IAAIW,MAAM,GAAG,KAAb;;IACA,OAAOJ,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,IAAvB,IAA+BA,GAAG,KAAK,IAAvC,IAA+CA,GAAG,KAAK,IAAvD,IAA+DA,GAAG,KAAK,IAA9E,EAAoF;MAChFI,MAAM,GAAG,IAAT;MACAX,GAAG;MACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;IACH;;IACD,OAAOW,MAAP;EACH;;EACD,SAASc,KAAT,GAAiB;IACb,IAAIC,GAAG,GAAGC,aAAa,EAAvB;;IACA,IAAI3B,GAAG,GAAGK,CAAV,EAAa;MACT,MAAMiB,KAAK,CAAC,wBAAwBvB,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAxB,GAA0C,UAA3C,CAAX;IACH;;IACD,OAAO0B,GAAP;EACH;;EACD,SAASC,aAAT,GAAyB;IACrB,IAAIC,QAAQ,GAAGC,mBAAmB,EAAlC;;IACA,IAAI,CAACD,QAAL,EAAe;MACX,OAAO,IAAP;IACH;;IACD,IAAIF,GAAG,GAAGE,QAAV;IACArB,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;IACA,OAAOO,GAAG,KAAK,GAAf,EAAoB;MAChBP,GAAG;MACHwB,cAAc;;MACd,IAAIE,GAAG,CAACI,IAAJ,KAAa,WAAjB,EAA8B;QAC1BJ,GAAG,GAAG;UACFI,IAAI,EAAE,WADJ;UAEFC,SAAS,EAAE,CAACH,QAAD;QAFT,CAAN;MAIH;;MACDA,QAAQ,GAAGC,mBAAmB,EAA9B;;MACA,IAAI,CAACD,QAAL,EAAe;QACX,MAAMN,KAAK,CAAC,0BAAD,CAAX;MACH;;MACDI,GAAG,CAACK,SAAJ,CAAcC,IAAd,CAAmBJ,QAAnB;IACH;;IACD,OAAOF,GAAP;EACH;;EACD,SAASG,mBAAT,GAA+B;IAC3BL,cAAc;IACd,IAAII,QAAQ,GAAG;MACXE,IAAI,EAAE;IADK,CAAf;IAGA,IAAIG,IAAI,GAAGC,SAAS,EAApB;;IACA,IAAI,CAACD,IAAL,EAAW;MACP,OAAO,IAAP;IACH;;IACD,IAAIE,WAAW,GAAGP,QAAlB;;IACA,OAAOK,IAAP,EAAa;MACTA,IAAI,CAACH,IAAL,GAAY,MAAZ;MACAK,WAAW,CAACF,IAAZ,GAAmBA,IAAnB;MACAE,WAAW,GAAGF,IAAd;MACAT,cAAc;MACdjB,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;MACA,IAAIA,GAAG,IAAIK,CAAP,IAAYE,GAAG,KAAK,GAApB,IAA2BA,GAAG,KAAK,GAAvC,EAA4C;QACxC;MACH;;MACD,IAAIJ,oBAAoB,CAACI,GAAD,CAAxB,EAA+B;QAC3B,IAAI6B,EAAE,GAAG7B,GAAT;QACAP,GAAG;QACHwB,cAAc;QACdS,IAAI,GAAGC,SAAS,EAAhB;;QACA,IAAI,CAACD,IAAL,EAAW;UACP,MAAMX,KAAK,CAAC,0BAA0Bc,EAA1B,GAA+B,IAAhC,CAAX;QACH;;QACDH,IAAI,CAACI,eAAL,GAAuBD,EAAvB;MACH,CATD,MAUK;QACDH,IAAI,GAAGC,SAAS,EAAhB;;QACA,IAAID,IAAJ,EAAU;UACNA,IAAI,CAACI,eAAL,GAAuB,IAAvB;QACH;MACJ;IACJ;;IACD,OAAOT,QAAP;EACH,CA5KoG,CA6KrG;;;EACA,SAASM,SAAT,GAAqB;IACjB,IAAID,IAAI,GAAG,IAAX;;IACA,OAAOjC,GAAG,GAAGK,CAAb,EAAgB;MACZE,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;;MACA,IAAIO,GAAG,KAAK,GAAZ,EAAiB;QACbP,GAAG;QACH,CAACiC,IAAI,GAAGA,IAAI,IAAI,EAAhB,EAAoBK,OAApB,GAA8B,GAA9B;MACH,CAHD,MAIK,IAAI1C,OAAO,CAAC2C,YAAR,CAAqBhC,GAArB,KAA6BA,GAAG,KAAK,IAAzC,EAA+C;QAChD,CAAC0B,IAAI,GAAGA,IAAI,IAAI,EAAhB,EAAoBK,OAApB,GAA8BlB,QAAQ,EAAtC;MACH,CAFI,MAGA,IAAIb,GAAG,KAAK,GAAZ,EAAiB;QAClBP,GAAG;QACHiC,IAAI,GAAGA,IAAI,IAAI,EAAf;QACA,CAACA,IAAI,CAACO,UAAL,GAAkBP,IAAI,CAACO,UAAL,IAAmB,EAAtC,EAA0CR,IAA1C,CAA+CZ,QAAQ,EAAvD;MACH,CAJI,MAKA,IAAIb,GAAG,KAAK,GAAZ,EAAiB;QAClBP,GAAG;QACH,CAACiC,IAAI,GAAGA,IAAI,IAAI,EAAhB,EAAoBQ,EAApB,GAAyBrB,QAAQ,EAAjC;MACH,CAHI,MAIA,IAAIb,GAAG,KAAK,GAAZ,EAAiB;QAClBP,GAAG;QACHwB,cAAc;QACd,IAAIkB,IAAI,GAAG;UACPC,IAAI,EAAEvB,QAAQ;QADP,CAAX;QAGAI,cAAc,GANI,CAOlB;;QACA,IAAIjB,GAAG,KAAK,GAAZ,EAAiB;UACbP,GAAG;QACN,CAFD,MAGK;UACD,IAAI4C,QAAQ,GAAG,EAAf;;UACA,IAAI1C,gBAAgB,CAACK,GAAD,CAApB,EAA2B;YACvBqC,QAAQ,GAAGrC,GAAX;YACAP,GAAG;YACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;UACH;;UACD,IAAIA,GAAG,IAAIK,CAAX,EAAc;YACV,MAAMiB,KAAK,CAAC,uCAAD,CAAX;UACH;;UACD,IAAIf,GAAG,KAAK,GAAZ,EAAiB;YACb,MAAMe,KAAK,CAAC,uBAAuBf,GAAvB,GAA6B,UAA9B,CAAX;UACH;;UACDmC,IAAI,CAACE,QAAL,GAAgBA,QAAQ,GAAG,GAA3B;UACA5C,GAAG;UACHwB,cAAc;UACd,IAAIqB,SAAS,GAAG,EAAhB;UACAH,IAAI,CAACI,SAAL,GAAiB,QAAjB,CAjBC,CAkBD;;UACA,IAAIvC,GAAG,KAAK,GAAZ,EAAiB;YACbsC,SAAS,GAAGrC,MAAM,CAAC,GAAD,EAAMZ,OAAO,CAACmD,uBAAd,CAAlB,CADa,CAEb;UACH,CAHD,MAIK,IAAIxC,GAAG,KAAK,IAAZ,EAAkB;YACnBsC,SAAS,GAAGrC,MAAM,CAAC,IAAD,EAAOZ,OAAO,CAACoD,sBAAf,CAAlB,CADmB,CAEnB;UACH,CAHI,MAIA,IAAI5C,kBAAkB,IAAIG,GAAG,KAAK,GAAlC,EAAuC;YACxCP,GAAG;YACH6C,SAAS,GAAGzB,QAAQ,EAApB;YACAsB,IAAI,CAACI,SAAL,GAAiB,YAAjB;UACH,CAJI,MAKA;YACD,OAAO9C,GAAG,GAAGK,CAAb,EAAgB;cACZ,IAAIE,GAAG,KAAK,GAAZ,EAAiB;gBACb;cACH;;cACDsC,SAAS,IAAItC,GAAb;cACAP,GAAG;cACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;YACH;;YACD6C,SAAS,GAAGA,SAAS,CAACI,IAAV,EAAZ;UACH;;UACDzB,cAAc;;UACd,IAAIxB,GAAG,IAAIK,CAAX,EAAc;YACV,MAAMiB,KAAK,CAAC,uCAAD,CAAX;UACH;;UACD,IAAIf,GAAG,KAAK,GAAZ,EAAiB;YACb,MAAMe,KAAK,CAAC,uBAAuBf,GAAvB,GAA6B,UAA9B,CAAX;UACH;;UACDP,GAAG;UACH0C,IAAI,CAAC/C,KAAL,GAAakD,SAAb;QACH;;QACDZ,IAAI,GAAGA,IAAI,IAAI,EAAf;QACA,CAACA,IAAI,CAACiB,KAAL,GAAajB,IAAI,CAACiB,KAAL,IAAc,EAA5B,EAAgClB,IAAhC,CAAqCU,IAArC;MACH,CAlEI,MAmEA,IAAInC,GAAG,KAAK,GAAZ,EAAiB;QAClBP,GAAG;QACH,IAAImD,UAAU,GAAG/B,QAAQ,EAAzB;QACA,IAAIgC,MAAM,GAAG;UACTT,IAAI,EAAEQ;QADG,CAAb,CAHkB,CAMlB;;QACA,IAAI5C,GAAG,KAAK,GAAZ,EAAiB;UACbP,GAAG;UACH,IAAIL,KAAK,GAAG,EAAZ;UACA6B,cAAc;;UACd,IAAIvB,OAAO,CAACkD,UAAD,CAAP,KAAwB,UAA5B,EAAwC;YACpCC,MAAM,CAACN,SAAP,GAAmB,UAAnB;YACAnD,KAAK,GAAGgC,aAAa,EAArB;UACH,CAHD,MAIK;YACDyB,MAAM,CAACN,SAAP,GAAmB7C,OAAO,CAACkD,UAAD,CAAP,IAAuB,QAA1C,CADC,CAED;;YACA,IAAI5C,GAAG,KAAK,GAAZ,EAAiB;cACbZ,KAAK,GAAGa,MAAM,CAAC,GAAD,EAAMZ,OAAO,CAACmD,uBAAd,CAAd,CADa,CAEb;YACH,CAHD,MAIK,IAAIxC,GAAG,KAAK,IAAZ,EAAkB;cACnBZ,KAAK,GAAGa,MAAM,CAAC,IAAD,EAAOZ,OAAO,CAACoD,sBAAf,CAAd,CADmB,CAEnB;YACH,CAHI,MAIA,IAAI5C,kBAAkB,IAAIG,GAAG,KAAK,GAAlC,EAAuC;cACxCP,GAAG;cACHL,KAAK,GAAGyB,QAAQ,EAAhB;cACAgC,MAAM,CAACN,SAAP,GAAmB,YAAnB;YACH,CAJI,MAKA;cACD,OAAO9C,GAAG,GAAGK,CAAb,EAAgB;gBACZ,IAAIE,GAAG,KAAK,GAAZ,EAAiB;kBACb;gBACH;;gBACDZ,KAAK,IAAIY,GAAT;gBACAP,GAAG;gBACHO,GAAG,GAAGR,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAN;cACH;;cACDL,KAAK,GAAGA,KAAK,CAACsD,IAAN,EAAR;YACH;;YACDzB,cAAc;UACjB;;UACD,IAAIxB,GAAG,IAAIK,CAAX,EAAc;YACV,MAAMiB,KAAK,CAAC,uCAAD,CAAX;UACH;;UACD,IAAIf,GAAG,KAAK,GAAZ,EAAiB;YACb,MAAMe,KAAK,CAAC,uBAAuBf,GAAvB,GAA6B,UAA9B,CAAX;UACH;;UACDP,GAAG;UACHoD,MAAM,CAACzD,KAAP,GAAeA,KAAf;QACH;;QACDsC,IAAI,GAAGA,IAAI,IAAI,EAAf;QACA,CAACA,IAAI,CAAChC,OAAL,GAAegC,IAAI,CAAChC,OAAL,IAAgB,EAAhC,EAAoC+B,IAApC,CAAyCoB,MAAzC;MACH,CAvDI,MAwDA;QACD;MACH;IACJ;;IACD,OAAOnB,IAAP;EACH;;EACD,OAAOR,KAAK,EAAZ;AACH;;AACD/B,OAAO,CAACI,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}