{"ast":null,"code":"/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\nimport { wrap } from '../wrap.js';\nimport { all } from '../traverse.js';\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\n\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {};\n  const name = node.ordered ? 'ol' : 'ul';\n  const items = all(h, node);\n  let index = -1;\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start;\n  } // Like GitHub, add a class for custom styling.\n\n\n  while (++index < items.length) {\n    const item = items[index];\n\n    if (item.type === 'element' && item.tagName === 'li' && item.properties && Array.isArray(item.properties.className) && item.properties.className.includes('task-list-item')) {\n      props.className = ['contains-task-list'];\n      break;\n    }\n  }\n\n  return h(node, name, props, wrap(items, true));\n}","map":{"version":3,"names":["wrap","all","list","h","node","props","name","ordered","items","index","start","length","item","type","tagName","properties","Array","isArray","className","includes"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/mdast-util-to-hast/lib/handlers/list.js"],"sourcesContent":["/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,IAAR,QAAmB,YAAnB;AACA,SAAQC,GAAR,QAAkB,gBAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcC,CAAd,EAAiBC,IAAjB,EAAuB;EAC5B;EACA,MAAMC,KAAK,GAAG,EAAd;EACA,MAAMC,IAAI,GAAGF,IAAI,CAACG,OAAL,GAAe,IAAf,GAAsB,IAAnC;EACA,MAAMC,KAAK,GAAGP,GAAG,CAACE,CAAD,EAAIC,IAAJ,CAAjB;EACA,IAAIK,KAAK,GAAG,CAAC,CAAb;;EAEA,IAAI,OAAOL,IAAI,CAACM,KAAZ,KAAsB,QAAtB,IAAkCN,IAAI,CAACM,KAAL,KAAe,CAArD,EAAwD;IACtDL,KAAK,CAACK,KAAN,GAAcN,IAAI,CAACM,KAAnB;EACD,CAT2B,CAW5B;;;EACA,OAAO,EAAED,KAAF,GAAUD,KAAK,CAACG,MAAvB,EAA+B;IAC7B,MAAMC,IAAI,GAAGJ,KAAK,CAACC,KAAD,CAAlB;;IAEA,IACEG,IAAI,CAACC,IAAL,KAAc,SAAd,IACAD,IAAI,CAACE,OAAL,KAAiB,IADjB,IAEAF,IAAI,CAACG,UAFL,IAGAC,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACG,UAAL,CAAgBG,SAA9B,CAHA,IAIAN,IAAI,CAACG,UAAL,CAAgBG,SAAhB,CAA0BC,QAA1B,CAAmC,gBAAnC,CALF,EAME;MACAd,KAAK,CAACa,SAAN,GAAkB,CAAC,oBAAD,CAAlB;MACA;IACD;EACF;;EAED,OAAOf,CAAC,CAACC,IAAD,EAAOE,IAAP,EAAaD,KAAb,EAAoBL,IAAI,CAACQ,KAAD,EAAQ,IAAR,CAAxB,CAAR;AACD"},"metadata":{},"sourceType":"module"}