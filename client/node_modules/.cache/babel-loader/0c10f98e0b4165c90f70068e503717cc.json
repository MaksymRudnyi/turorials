{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\n\nexport const flow = {\n  tokenize: initializeFlow\n};\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt( // Try to parse a blank line.\n  blankLine, atBlankEnding, // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), 'linePrefix')));\n  return initial;\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n  /** @type {State} */\n\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","map":{"version":3,"names":["blankLine","content","factorySpace","markdownLineEnding","flow","tokenize","initializeFlow","effects","self","initial","attempt","atBlankEnding","parser","constructs","flowInitial","afterConstruct","code","consume","enter","exit","currentConstruct","undefined"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark/lib/initialize/flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,SAAR,EAAmBC,OAAnB,QAAiC,2BAAjC;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AAEA;;AACA,OAAO,MAAMC,IAAI,GAAG;EAClBC,QAAQ,EAAEC;AADQ,CAAb;AAGP;;AAEA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;EAC/B,MAAMC,IAAI,GAAG,IAAb;EACA,MAAMC,OAAO,GAAGF,OAAO,CAACG,OAAR,EACd;EACAV,SAFc,EAGdW,aAHc,EAGC;EACfJ,OAAO,CAACG,OAAR,CACE,KAAKE,MAAL,CAAYC,UAAZ,CAAuBC,WADzB,EAEEC,cAFF,EAGEb,YAAY,CACVK,OADU,EAEVA,OAAO,CAACG,OAAR,CACE,KAAKE,MAAL,CAAYC,UAAZ,CAAuBT,IADzB,EAEEW,cAFF,EAGER,OAAO,CAACG,OAAR,CAAgBT,OAAhB,EAAyBc,cAAzB,CAHF,CAFU,EAOV,YAPU,CAHd,CAJc,CAAhB;EAkBA,OAAON,OAAP;EACA;;EAEA,SAASE,aAAT,CAAuBK,IAAvB,EAA6B;IAC3B,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjBT,OAAO,CAACU,OAAR,CAAgBD,IAAhB;MACA;IACD;;IAEDT,OAAO,CAACW,KAAR,CAAc,iBAAd;IACAX,OAAO,CAACU,OAAR,CAAgBD,IAAhB;IACAT,OAAO,CAACY,IAAR,CAAa,iBAAb;IACAX,IAAI,CAACY,gBAAL,GAAwBC,SAAxB;IACA,OAAOZ,OAAP;EACD;EACD;;;EAEA,SAASM,cAAT,CAAwBC,IAAxB,EAA8B;IAC5B,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjBT,OAAO,CAACU,OAAR,CAAgBD,IAAhB;MACA;IACD;;IAEDT,OAAO,CAACW,KAAR,CAAc,YAAd;IACAX,OAAO,CAACU,OAAR,CAAgBD,IAAhB;IACAT,OAAO,CAACY,IAAR,CAAa,YAAb;IACAX,IAAI,CAACY,gBAAL,GAAwBC,SAAxB;IACA,OAAOZ,OAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}