{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\n\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n\n  const columnStart = {};\n  /** @type {Construct[]} */\n\n  const resolveAllConstructs = [];\n  /** @type {Chunk[]} */\n\n  let chunks = [];\n  /** @type {Token[]} */\n\n  let stack = [];\n  /** @type {boolean|undefined} */\n\n  let consumed = true;\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  };\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects);\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode;\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n\n  return context;\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main(); // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n\n    addResult(initialize, 0); // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n  /** @type {TokenizeContext['now']} */\n\n\n  function now() {\n    return Object.assign({}, point);\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n  /** @type {Effects['consume']} */\n\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    } // Not in a string chunk.\n\n\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++; // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    } // Expose the previous character.\n\n\n    context.previous = code; // Mark as consumed.\n\n    consumed = true;\n  }\n  /** @type {Effects['enter']} */\n\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n  /** @type {Effects['exit']} */\n\n\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n\n  function constructFactory(onreturn, fields) {\n    return hook;\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs;\n      /** @type {number} */\n\n      let constructIndex;\n      /** @type {Construct} */\n\n      let currentConstruct;\n      /** @type {Info} */\n\n      let info;\n      return Array.isArray(constructs) ?\n      /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n      ? handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [// To do: add more extension tests.\n\n          /* c8 ignore next 2 */\n          ...(Array.isArray(def) ? def : def ? [def] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n\n        if (list.length === 0) {\n          return bogusState;\n        }\n\n        return handleConstruct(list[constructIndex]);\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n\n      function handleConstruct(construct) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n\n          return construct.tokenize.call( // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n      /** @type {State} */\n\n\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n      /** @type {State} */\n\n\n      function nok(code) {\n        consumed = true;\n        info.restore();\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n\n        return bogusState;\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      restore,\n      from: startEventsIndex\n    };\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Chunk[]} */\n\n  let view;\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex);\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n\n  return view;\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {string[]} */\n\n  const result = [];\n  /** @type {boolean|undefined} */\n\n  let atTab;\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n\n    let value;\n\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = '\\r';\n          break;\n        }\n\n      case -4:\n        {\n          value = '\\n';\n          break;\n        }\n\n      case -3:\n        {\n          value = '\\r' + '\\n';\n          break;\n        }\n\n      case -2:\n        {\n          value = expandTabs ? ' ' : '\\t';\n          break;\n        }\n\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = ' ';\n          break;\n        }\n\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n\n    atTab = chunk === -2;\n    result.push(value);\n  }\n\n  return result.join('');\n}","map":{"version":3,"names":["markdownLineEnding","push","splice","resolveAll","createTokenizer","parser","initialize","from","point","Object","assign","line","column","offset","_index","_bufferIndex","columnStart","resolveAllConstructs","chunks","stack","consumed","effects","consume","enter","exit","attempt","constructFactory","onsuccessfulconstruct","check","onsuccessfulcheck","interrupt","context","previous","code","containerState","events","sliceStream","sliceSerialize","now","defineSkip","write","state","tokenize","call","expectedCode","slice","main","length","addResult","token","expandTabs","serializeChunks","sliceChunks","value","accountForPotentialSkip","chunkIndex","chunk","go","charCodeAt","undefined","type","fields","start","pop","end","construct","info","_","restore","onreturn","hook","constructs","returnState","bogusState","listOfConstructs","constructIndex","currentConstruct","Array","isArray","handleListOfConstructs","handleMapOfConstructs","map","def","all","null","list","handleConstruct","store","partial","name","disable","includes","nok","create","ok","resolve","resolveTo","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","startIndex","startBufferIndex","endIndex","endBufferIndex","view","index","result","atTab","String","fromCharCode","join"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark/lib/create-tokenizer.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Construct[]} */\n\n  const resolveAllConstructs = []\n  /** @type {Chunk[]} */\n\n  let chunks = []\n  /** @type {Token[]} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Chunk[]} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {string[]} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}