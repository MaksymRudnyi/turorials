{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n};\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n  /** @type {State} */\n\n  function open(code) {\n    if ( // Exit if there’s stuff before.\n    self.previous !== null || // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n  /** @type {State} */\n\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok);\n    }\n\n    return nok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, after, 'whitespace');\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1];\n    return (// We either found spaces…\n      (tail && tail[1].type === 'whitespace' || // …or it was followed by a line ending, in which case, there has to be\n      // non-whitespace after that line ending, because otherwise we’d get an\n      // EOF as the content is closed with blank lines.\n      markdownLineEnding(code)) && code !== null ? ok(code) : nok(code)\n    );\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEndingOrSpace","markdownLineEnding","tasklistCheck","tokenize","tokenizeTasklistCheck","gfmTaskListItem","text","effects","ok","nok","self","open","code","previous","_gfmTasklistFirstContentOfListItem","enter","consume","exit","inside","close","check","spaceThenNonSpace","after","tail","events","length","type"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SACEC,yBADF,EAEEC,kBAFF,QAGO,0BAHP;AAIA,MAAMC,aAAa,GAAG;EACpBC,QAAQ,EAAEC;AADU,CAAtB;AAGA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE;IACJ,CAAC,EAAD,GAAMJ;EADF;AADuB,CAAxB;AAKP;;AAEA,SAASE,qBAAT,CAA+BG,OAA/B,EAAwCC,EAAxC,EAA4CC,GAA5C,EAAiD;EAC/C,MAAMC,IAAI,GAAG,IAAb;EACA,OAAOC,IAAP;EACA;;EAEA,SAASA,IAAT,CAAcC,IAAd,EAAoB;IAClB,KACE;IACAF,IAAI,CAACG,QAAL,KAAkB,IAAlB,IAA0B;IAC1B;IACA,CAACH,IAAI,CAACI,kCAJR,EAKE;MACA,OAAOL,GAAG,CAACG,IAAD,CAAV;IACD;;IAEDL,OAAO,CAACQ,KAAR,CAAc,eAAd;IACAR,OAAO,CAACQ,KAAR,CAAc,qBAAd;IACAR,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;IACAL,OAAO,CAACU,IAAR,CAAa,qBAAb;IACA,OAAOC,MAAP;EACD;EACD;;;EAEA,SAASA,MAAT,CAAgBN,IAAhB,EAAsB;IACpB;IACA;IACA,IAAIZ,yBAAyB,CAACY,IAAD,CAA7B,EAAqC;MACnCL,OAAO,CAACQ,KAAR,CAAc,6BAAd;MACAR,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;MACAL,OAAO,CAACU,IAAR,CAAa,6BAAb;MACA,OAAOE,KAAP;IACD;;IAED,IAAIP,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAA5B,EAAiC;MAC/BL,OAAO,CAACQ,KAAR,CAAc,2BAAd;MACAR,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;MACAL,OAAO,CAACU,IAAR,CAAa,2BAAb;MACA,OAAOE,KAAP;IACD;;IAED,OAAOV,GAAG,CAACG,IAAD,CAAV;EACD;EACD;;;EAEA,SAASO,KAAT,CAAeP,IAAf,EAAqB;IACnB,IAAIA,IAAI,KAAK,EAAb,EAAiB;MACfL,OAAO,CAACQ,KAAR,CAAc,qBAAd;MACAR,OAAO,CAACS,OAAR,CAAgBJ,IAAhB;MACAL,OAAO,CAACU,IAAR,CAAa,qBAAb;MACAV,OAAO,CAACU,IAAR,CAAa,eAAb;MACA,OAAOV,OAAO,CAACa,KAAR,CACL;QACEjB,QAAQ,EAAEkB;MADZ,CADK,EAILb,EAJK,EAKLC,GALK,CAAP;IAOD;;IAED,OAAOA,GAAG,CAACG,IAAD,CAAV;EACD;AACF;AACD;;;AAEA,SAASS,iBAAT,CAA2Bd,OAA3B,EAAoCC,EAApC,EAAwCC,GAAxC,EAA6C;EAC3C,MAAMC,IAAI,GAAG,IAAb;EACA,OAAOX,YAAY,CAACQ,OAAD,EAAUe,KAAV,EAAiB,YAAjB,CAAnB;EACA;;EAEA,SAASA,KAAT,CAAeV,IAAf,EAAqB;IACnB,MAAMW,IAAI,GAAGb,IAAI,CAACc,MAAL,CAAYd,IAAI,CAACc,MAAL,CAAYC,MAAZ,GAAqB,CAAjC,CAAb;IACA,OACE;MACA,CAAEF,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQG,IAAR,KAAiB,YAA1B,IAA2C;MAC1C;MACA;MACAzB,kBAAkB,CAACW,IAAD,CAHpB,KAIEA,IAAI,KAAK,IAJX,GAKIJ,EAAE,CAACI,IAAD,CALN,GAMIH,GAAG,CAACG,IAAD;IART;EAUD;AACF"},"metadata":{},"sourceType":"module"}