{"ast":null,"code":"// @ts-nocheck\nimport refractorClike from './clike.js';\nfsharp.displayName = 'fsharp';\nfsharp.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function fsharp(Prism) {\n  Prism.register(refractorClike);\n  Prism.languages.fsharp = Prism.languages.extend('clike', {\n    comment: [{\n      pattern: /(^|[^\\\\])\\(\\*(?!\\))[\\s\\S]*?\\*\\)/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    string: {\n      pattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,\n      lookbehind: true,\n      inside: {\n        operator: /->|\\*/,\n        punctuation: /\\./\n      }\n    },\n    keyword: /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(?:abstract|and|as|asr|assert|atomic|base|begin|break|checked|class|component|const|constraint|constructor|continue|default|delegate|do|done|downcast|downto|eager|elif|else|end|event|exception|extern|external|false|finally|fixed|for|fun|function|functor|global|if|in|include|inherit|inline|interface|internal|land|lazy|lor|lsl|lsr|lxor|match|member|method|mixin|mod|module|mutable|namespace|new|not|null|object|of|open|or|override|parallel|private|process|protected|public|pure|rec|sealed|select|sig|static|struct|tailcall|then|to|trait|true|try|type|upcast|val|virtual|void|volatile|when|while|with)\\b/,\n    number: [/\\b0x[\\da-fA-F]+(?:LF|lf|un)?\\b/, /\\b0b[01]+(?:uy|y)?\\b/, /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i, /\\b\\d+(?:[IlLsy]|UL|u[lsy]?)?\\b/],\n    operator: /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/\n  });\n  Prism.languages.insertBefore('fsharp', 'keyword', {\n    preprocessor: {\n      pattern: /(^[\\t ]*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        directive: {\n          pattern: /(^#)\\b(?:else|endif|if|light|line|nowarn)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('fsharp', 'punctuation', {\n    'computation-expression': {\n      pattern: /\\b[_a-z]\\w*(?=\\s*\\{)/i,\n      alias: 'keyword'\n    }\n  });\n  Prism.languages.insertBefore('fsharp', 'string', {\n    annotation: {\n      pattern: /\\[<.+?>\\]/,\n      greedy: true,\n      inside: {\n        punctuation: /^\\[<|>\\]$/,\n        'class-name': {\n          pattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,\n          lookbehind: true\n        },\n        'annotation-content': {\n          pattern: /[\\s\\S]+/,\n          inside: Prism.languages.fsharp\n        }\n      }\n    },\n    char: {\n      pattern: /'(?:[^\\\\']|\\\\(?:.|\\d{3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|U[a-fA-F\\d]{8}))'B?/,\n      greedy: true\n    }\n  });\n}","map":{"version":3,"names":["refractorClike","fsharp","displayName","aliases","Prism","register","languages","extend","comment","pattern","lookbehind","greedy","string","inside","operator","punctuation","keyword","number","insertBefore","preprocessor","alias","directive","annotation","char"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/fsharp.js"],"sourcesContent":["// @ts-nocheck\nimport refractorClike from './clike.js'\nfsharp.displayName = 'fsharp'\nfsharp.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function fsharp(Prism) {\n  Prism.register(refractorClike)\n  Prism.languages.fsharp = Prism.languages.extend('clike', {\n    comment: [\n      {\n        pattern: /(^|[^\\\\])\\(\\*(?!\\))[\\s\\S]*?\\*\\)/,\n        lookbehind: true,\n        greedy: true\n      },\n      {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: {\n      pattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,\n      lookbehind: true,\n      inside: {\n        operator: /->|\\*/,\n        punctuation: /\\./\n      }\n    },\n    keyword:\n      /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(?:abstract|and|as|asr|assert|atomic|base|begin|break|checked|class|component|const|constraint|constructor|continue|default|delegate|do|done|downcast|downto|eager|elif|else|end|event|exception|extern|external|false|finally|fixed|for|fun|function|functor|global|if|in|include|inherit|inline|interface|internal|land|lazy|lor|lsl|lsr|lxor|match|member|method|mixin|mod|module|mutable|namespace|new|not|null|object|of|open|or|override|parallel|private|process|protected|public|pure|rec|sealed|select|sig|static|struct|tailcall|then|to|trait|true|try|type|upcast|val|virtual|void|volatile|when|while|with)\\b/,\n    number: [\n      /\\b0x[\\da-fA-F]+(?:LF|lf|un)?\\b/,\n      /\\b0b[01]+(?:uy|y)?\\b/,\n      /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,\n      /\\b\\d+(?:[IlLsy]|UL|u[lsy]?)?\\b/\n    ],\n    operator:\n      /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/\n  })\n  Prism.languages.insertBefore('fsharp', 'keyword', {\n    preprocessor: {\n      pattern: /(^[\\t ]*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        directive: {\n          pattern: /(^#)\\b(?:else|endif|if|light|line|nowarn)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  })\n  Prism.languages.insertBefore('fsharp', 'punctuation', {\n    'computation-expression': {\n      pattern: /\\b[_a-z]\\w*(?=\\s*\\{)/i,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.insertBefore('fsharp', 'string', {\n    annotation: {\n      pattern: /\\[<.+?>\\]/,\n      greedy: true,\n      inside: {\n        punctuation: /^\\[<|>\\]$/,\n        'class-name': {\n          pattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,\n          lookbehind: true\n        },\n        'annotation-content': {\n          pattern: /[\\s\\S]+/,\n          inside: Prism.languages.fsharp\n        }\n      }\n    },\n    char: {\n      pattern:\n        /'(?:[^\\\\']|\\\\(?:.|\\d{3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|U[a-fA-F\\d]{8}))'B?/,\n      greedy: true\n    }\n  })\n}\n"],"mappings":"AAAA;AACA,OAAOA,cAAP,MAA2B,YAA3B;AACAC,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACpCA,KAAK,CAACC,QAAN,CAAeL,cAAf;EACAI,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;IACvDC,OAAO,EAAE,CACP;MACEC,OAAO,EAAE,iCADX;MAEEC,UAAU,EAAE,IAFd;MAGEC,MAAM,EAAE;IAHV,CADO,EAMP;MACEF,OAAO,EAAE,kBADX;MAEEC,UAAU,EAAE,IAFd;MAGEC,MAAM,EAAE;IAHV,CANO,CAD8C;IAavDC,MAAM,EAAE;MACNH,OAAO,EAAE,6DADH;MAENE,MAAM,EAAE;IAFF,CAb+C;IAiBvD,cAAc;MACZF,OAAO,EACL,wHAFU;MAGZC,UAAU,EAAE,IAHA;MAIZG,MAAM,EAAE;QACNC,QAAQ,EAAE,OADJ;QAENC,WAAW,EAAE;MAFP;IAJI,CAjByC;IA0BvDC,OAAO,EACL,moBA3BqD;IA4BvDC,MAAM,EAAE,CACN,gCADM,EAEN,sBAFM,EAGN,mDAHM,EAIN,gCAJM,CA5B+C;IAkCvDH,QAAQ,EACN;EAnCqD,CAAhC,CAAzB;EAqCAV,KAAK,CAACE,SAAN,CAAgBY,YAAhB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD;IAChDC,YAAY,EAAE;MACZV,OAAO,EAAE,eADG;MAEZC,UAAU,EAAE,IAFA;MAGZU,KAAK,EAAE,UAHK;MAIZP,MAAM,EAAE;QACNQ,SAAS,EAAE;UACTZ,OAAO,EAAE,6CADA;UAETC,UAAU,EAAE,IAFH;UAGTU,KAAK,EAAE;QAHE;MADL;IAJI;EADkC,CAAlD;EAcAhB,KAAK,CAACE,SAAN,CAAgBY,YAAhB,CAA6B,QAA7B,EAAuC,aAAvC,EAAsD;IACpD,0BAA0B;MACxBT,OAAO,EAAE,uBADe;MAExBW,KAAK,EAAE;IAFiB;EAD0B,CAAtD;EAMAhB,KAAK,CAACE,SAAN,CAAgBY,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;IAC/CI,UAAU,EAAE;MACVb,OAAO,EAAE,WADC;MAEVE,MAAM,EAAE,IAFE;MAGVE,MAAM,EAAE;QACNE,WAAW,EAAE,WADP;QAEN,cAAc;UACZN,OAAO,EAAE,8BADG;UAEZC,UAAU,EAAE;QAFA,CAFR;QAMN,sBAAsB;UACpBD,OAAO,EAAE,SADW;UAEpBI,MAAM,EAAET,KAAK,CAACE,SAAN,CAAgBL;QAFJ;MANhB;IAHE,CADmC;IAgB/CsB,IAAI,EAAE;MACJd,OAAO,EACL,2EAFE;MAGJE,MAAM,EAAE;IAHJ;EAhByC,CAAjD;AAsBD"},"metadata":{},"sourceType":"module"}