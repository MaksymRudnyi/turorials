{"ast":null,"code":"// @ts-nocheck\nrust.displayName = 'rust';\nrust.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function rust(Prism) {\n  ;\n\n  (function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment;\n      });\n    }\n\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source;\n    });\n    Prism.languages.rust = {\n      comment: [{\n        pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n        lookbehind: true,\n        greedy: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [{\n        pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n        lookbehind: true,\n        alias: 'namespace'\n      }, {\n        pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n        lookbehind: true,\n        alias: 'namespace',\n        inside: {\n          punctuation: /::/\n        }\n      }],\n      keyword: [// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n      /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n      // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n      /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    };\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n    Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n  })(Prism);\n}","map":{"version":3,"names":["rust","displayName","aliases","Prism","multilineComment","source","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","string","char","attribute","alias","inside","rest","variable","punctuation","keyword","function","macro","constant","namespace","number","boolean","operator"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/rust.js"],"sourcesContent":["// @ts-nocheck\nrust.displayName = 'rust'\nrust.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function rust(Prism) {\n  ;(function (Prism) {\n    var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source\n\n    for (var i = 0; i < 2; i++) {\n      // support 4 levels of nested comments\n      multilineComment = multilineComment.replace(/<self>/g, function () {\n        return multilineComment\n      })\n    }\n\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return /[^\\s\\S]/.source\n    })\n    Prism.languages.rust = {\n      comment: [\n        {\n          pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n          lookbehind: true,\n          greedy: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      string: {\n        pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n        greedy: true\n      },\n      char: {\n        pattern:\n          /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n        greedy: true\n      },\n      attribute: {\n        pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n        greedy: true,\n        alias: 'attr-name',\n        inside: {\n          string: null // see below\n        }\n      },\n      // Closure params should not be confused with bitwise OR |\n      'closure-params': {\n        pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'closure-punctuation': {\n            pattern: /^\\||\\|$/,\n            alias: 'punctuation'\n          },\n          rest: null // see below\n        }\n      },\n      'lifetime-annotation': {\n        pattern: /'\\w+/,\n        alias: 'symbol'\n      },\n      'fragment-specifier': {\n        pattern: /(\\$\\w+:)[a-z]+/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      variable: /\\$\\w+/,\n      'function-definition': {\n        pattern: /(\\bfn\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      'type-definition': {\n        pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'module-declaration': [\n        {\n          pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n          lookbehind: true,\n          alias: 'namespace'\n        },\n        {\n          pattern:\n            /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n          lookbehind: true,\n          alias: 'namespace',\n          inside: {\n            punctuation: /::/\n          }\n        }\n      ],\n      keyword: [\n        // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n        /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n        // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n        /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n      ],\n      // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n      // and Rust's naming conventions recommend snake_case anyway.\n      // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n      function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n      macro: {\n        pattern: /\\b\\w+!/,\n        alias: 'property'\n      },\n      constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n      'class-name': /\\b[A-Z]\\w*\\b/,\n      namespace: {\n        pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      // Hex, oct, bin, dec numbers with visual separators and type suffix\n      number:\n        /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n      operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    }\n    Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust\n    Prism.languages.rust['attribute'].inside['string'] =\n      Prism.languages.rust['string']\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;AAEA;;AACA,eAAe,SAASF,IAAT,CAAcG,KAAd,EAAqB;EAClC;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB,IAAIC,gBAAgB,GAAG,8CAA8CC,MAArE;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1B;MACAF,gBAAgB,GAAGA,gBAAgB,CAACG,OAAjB,CAAyB,SAAzB,EAAoC,YAAY;QACjE,OAAOH,gBAAP;MACD,CAFkB,CAAnB;IAGD;;IAEDA,gBAAgB,GAAGA,gBAAgB,CAACG,OAAjB,CAAyB,SAAzB,EAAoC,YAAY;MACjE,OAAO,UAAUF,MAAjB;IACD,CAFkB,CAAnB;IAGAF,KAAK,CAACK,SAAN,CAAgBR,IAAhB,GAAuB;MACrBS,OAAO,EAAE,CACP;QACEC,OAAO,EAAEC,MAAM,CAAC,YAAYN,MAAZ,GAAqBD,gBAAtB,CADjB;QAEEQ,UAAU,EAAE,IAFd;QAGEC,MAAM,EAAE;MAHV,CADO,EAMP;QACEH,OAAO,EAAE,kBADX;QAEEE,UAAU,EAAE,IAFd;QAGEC,MAAM,EAAE;MAHV,CANO,CADY;MAarBC,MAAM,EAAE;QACNJ,OAAO,EAAE,uDADH;QAENG,MAAM,EAAE;MAFF,CAba;MAiBrBE,IAAI,EAAE;QACJL,OAAO,EACL,0EAFE;QAGJG,MAAM,EAAE;MAHJ,CAjBe;MAsBrBG,SAAS,EAAE;QACTN,OAAO,EAAE,6CADA;QAETG,MAAM,EAAE,IAFC;QAGTI,KAAK,EAAE,WAHE;QAITC,MAAM,EAAE;UACNJ,MAAM,EAAE,IADF,CACO;;QADP;MAJC,CAtBU;MA8BrB;MACA,kBAAkB;QAChBJ,OAAO,EAAE,0DADO;QAEhBE,UAAU,EAAE,IAFI;QAGhBC,MAAM,EAAE,IAHQ;QAIhBK,MAAM,EAAE;UACN,uBAAuB;YACrBR,OAAO,EAAE,SADY;YAErBO,KAAK,EAAE;UAFc,CADjB;UAKNE,IAAI,EAAE,IALA,CAKK;;QALL;MAJQ,CA/BG;MA2CrB,uBAAuB;QACrBT,OAAO,EAAE,MADY;QAErBO,KAAK,EAAE;MAFc,CA3CF;MA+CrB,sBAAsB;QACpBP,OAAO,EAAE,gBADW;QAEpBE,UAAU,EAAE,IAFQ;QAGpBK,KAAK,EAAE;MAHa,CA/CD;MAoDrBG,QAAQ,EAAE,OApDW;MAqDrB,uBAAuB;QACrBV,OAAO,EAAE,cADY;QAErBE,UAAU,EAAE,IAFS;QAGrBK,KAAK,EAAE;MAHc,CArDF;MA0DrB,mBAAmB;QACjBP,OAAO,EAAE,4CADQ;QAEjBE,UAAU,EAAE,IAFK;QAGjBK,KAAK,EAAE;MAHU,CA1DE;MA+DrB,sBAAsB,CACpB;QACEP,OAAO,EAAE,oCADX;QAEEE,UAAU,EAAE,IAFd;QAGEK,KAAK,EAAE;MAHT,CADoB,EAMpB;QACEP,OAAO,EACL,uFAFJ;QAGEE,UAAU,EAAE,IAHd;QAIEK,KAAK,EAAE,WAJT;QAKEC,MAAM,EAAE;UACNG,WAAW,EAAE;QADP;MALV,CANoB,CA/DD;MA+ErBC,OAAO,EAAE,CACP;MACA,6RAFO,EAEwR;MAC/R;MACA,8DAJO,CA/EY;MAqFrB;MACA;MACA;MACAC,QAAQ,EAAE,iCAxFW;MAyFrBC,KAAK,EAAE;QACLd,OAAO,EAAE,QADJ;QAELO,KAAK,EAAE;MAFF,CAzFc;MA6FrBQ,QAAQ,EAAE,qBA7FW;MA8FrB,cAAc,cA9FO;MA+FrBC,SAAS,EAAE;QACThB,OAAO,EAAE,4DADA;QAETQ,MAAM,EAAE;UACNG,WAAW,EAAE;QADP;MAFC,CA/FU;MAqGrB;MACAM,MAAM,EACJ,4KAvGmB;MAwGrBC,OAAO,EAAE,oBAxGY;MAyGrBP,WAAW,EAAE,kCAzGQ;MA0GrBQ,QAAQ,EAAE;IA1GW,CAAvB;IA4GA1B,KAAK,CAACK,SAAN,CAAgBR,IAAhB,CAAqB,gBAArB,EAAuCkB,MAAvC,CAA8CC,IAA9C,GAAqDhB,KAAK,CAACK,SAAN,CAAgBR,IAArE;IACAG,KAAK,CAACK,SAAN,CAAgBR,IAAhB,CAAqB,WAArB,EAAkCkB,MAAlC,CAAyC,QAAzC,IACEf,KAAK,CAACK,SAAN,CAAgBR,IAAhB,CAAqB,QAArB,CADF;EAED,CA5HA,EA4HEG,KA5HF;AA6HF"},"metadata":{},"sourceType":"module"}