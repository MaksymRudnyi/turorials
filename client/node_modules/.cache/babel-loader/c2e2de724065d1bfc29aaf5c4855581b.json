{"ast":null,"code":"/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\nimport { ccount } from 'ccount';\nimport { findAndReplace } from 'mdast-util-find-and-replace';\nimport { unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst inConstruct = 'phrasing';\nconst notInConstruct = ['autolink', 'link', 'image', 'label'];\n/** @type {FromMarkdownExtension} */\n\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n};\n/** @type {ToMarkdownExtension} */\n\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [{\n    character: '@',\n    before: '[+\\\\-.\\\\w]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct,\n    notInConstruct\n  }, {\n    character: '.',\n    before: '[Ww]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct,\n    notInConstruct\n  }, {\n    character: ':',\n    before: '[ps]',\n    after: '\\\\/',\n    inConstruct,\n    notInConstruct\n  }]\n};\n/** @type {FromMarkdownHandle} */\n\nfunction enterLiteralAutolink(token) {\n  this.enter({\n    type: 'link',\n    title: null,\n    url: '',\n    children: []\n  }, token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token);\n  const node =\n  /** @type {Link} */\n  this.stack[this.stack.length - 1];\n  node.url = 'http://' + this.sliceSerialize(token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token);\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitLiteralAutolink(token) {\n  this.exit(token);\n}\n/** @type {FromMarkdownTransform} */\n\n\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(tree, [[/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl], [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]], {\n    ignore: ['link', 'linkReference']\n  });\n}\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\n\n\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''; // Not an expected previous character.\n\n  if (!previous(match)) {\n    return false;\n  } // Treat `www` as part of the domain.\n\n\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain;\n    protocol = '';\n    prefix = 'http://';\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false;\n  }\n\n  const parts = splitUrl(domain + path);\n  if (!parts[0]) return false;\n  /** @type {PhrasingContent} */\n\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{\n      type: 'text',\n      value: protocol + parts[0]\n    }]\n  };\n\n  if (parts[1]) {\n    return [result, {\n      type: 'text',\n      value: parts[1]\n    }];\n  }\n\n  return result;\n}\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\n\n\nfunction findEmail(_, atext, label, match) {\n  if ( // Not an expected previous character.\n  !previous(match, true) || // Label ends in not allowed character.\n  /[_-\\d]$/.test(label)) {\n    return false;\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{\n      type: 'text',\n      value: atext + '@' + label\n    }]\n  };\n}\n/**\n * @param {string} domain\n * @returns {boolean}\n */\n\n\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.');\n\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\n\n\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n  /** @type {number} */\n\n  let closingParenIndex;\n  /** @type {number} */\n\n  let openingParens;\n  /** @type {number} */\n\n  let closingParens;\n  /** @type {string|undefined} */\n\n  let trail;\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index);\n    trail = trailExec[0];\n    closingParenIndex = trail.indexOf(')');\n    openingParens = ccount(url, '(');\n    closingParens = ccount(url, ')');\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1);\n      trail = trail.slice(closingParenIndex + 1);\n      closingParenIndex = trail.indexOf(')');\n      closingParens++;\n    }\n  }\n\n  return [url, trail];\n}\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\n\n\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1);\n  return (match.index === 0 || unicodeWhitespace(code) || unicodePunctuation(code)) && (!email || code !== 47);\n}","map":{"version":3,"names":["ccount","findAndReplace","unicodePunctuation","unicodeWhitespace","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","transformGfmAutolinkLiterals","enter","literalAutolink","enterLiteralAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","exit","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","character","before","after","token","type","title","url","children","config","autolinkProtocol","call","data","node","stack","length","sliceSerialize","autolinkEmail","tree","findUrl","findEmail","ignore","_","protocol","domain","path","match","prefix","previous","test","isCorrectDomain","parts","splitUrl","result","value","atext","label","split","trailExec","exec","closingParenIndex","openingParens","closingParens","trail","slice","index","indexOf","email","code","input","charCodeAt"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/mdast-util-gfm-autolink-literal/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\nconst inConstruct = 'phrasing'\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/** @type {FromMarkdownExtension} */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {PhrasingContent} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[_-\\d]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  /** @type {number} */\n  let closingParenIndex\n  /** @type {number} */\n  let openingParens\n  /** @type {number} */\n  let closingParens\n  /** @type {string|undefined} */\n  let trail\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index)\n    trail = trailExec[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}