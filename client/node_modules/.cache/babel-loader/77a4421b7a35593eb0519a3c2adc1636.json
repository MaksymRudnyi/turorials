{"ast":null,"code":"/*!\n * on-finished\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = onFinished;\nmodule.exports.isFinished = isFinished;\n/**\n * Module dependencies.\n * @private\n */\n\nvar first = require('ee-first');\n/**\n * Variables.\n * @private\n */\n\n/* istanbul ignore next */\n\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n/**\n * Invoke callback when the response has finished, useful for\n * cleaning up resources afterwards.\n *\n * @param {object} msg\n * @param {function} listener\n * @return {object}\n * @public\n */\n\nfunction onFinished(msg, listener) {\n  if (isFinished(msg) !== false) {\n    defer(listener, null, msg);\n    return msg;\n  } // attach the listener to the message\n\n\n  attachListener(msg, listener);\n  return msg;\n}\n/**\n * Determine if message is already finished.\n *\n * @param {object} msg\n * @return {boolean}\n * @public\n */\n\n\nfunction isFinished(msg) {\n  var socket = msg.socket;\n\n  if (typeof msg.finished === 'boolean') {\n    // OutgoingMessage\n    return Boolean(msg.finished || socket && !socket.writable);\n  }\n\n  if (typeof msg.complete === 'boolean') {\n    // IncomingMessage\n    return Boolean(msg.upgrade || !socket || !socket.readable || msg.complete && !msg.readable);\n  } // don't know\n\n\n  return undefined;\n}\n/**\n * Attach a finished listener to the message.\n *\n * @param {object} msg\n * @param {function} callback\n * @private\n */\n\n\nfunction attachFinishedListener(msg, callback) {\n  var eeMsg;\n  var eeSocket;\n  var finished = false;\n\n  function onFinish(error) {\n    eeMsg.cancel();\n    eeSocket.cancel();\n    finished = true;\n    callback(error);\n  } // finished on first message event\n\n\n  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish);\n\n  function onSocket(socket) {\n    // remove listener\n    msg.removeListener('socket', onSocket);\n    if (finished) return;\n    if (eeMsg !== eeSocket) return; // finished on first socket event\n\n    eeSocket = first([[socket, 'error', 'close']], onFinish);\n  }\n\n  if (msg.socket) {\n    // socket already assigned\n    onSocket(msg.socket);\n    return;\n  } // wait for socket to be assigned\n\n\n  msg.on('socket', onSocket);\n\n  if (msg.socket === undefined) {\n    // node.js 0.8 patch\n    patchAssignSocket(msg, onSocket);\n  }\n}\n/**\n * Attach the listener to the message.\n *\n * @param {object} msg\n * @return {function}\n * @private\n */\n\n\nfunction attachListener(msg, listener) {\n  var attached = msg.__onFinished; // create a private single listener with queue\n\n  if (!attached || !attached.queue) {\n    attached = msg.__onFinished = createListener(msg);\n    attachFinishedListener(msg, attached);\n  }\n\n  attached.queue.push(listener);\n}\n/**\n * Create listener on message.\n *\n * @param {object} msg\n * @return {function}\n * @private\n */\n\n\nfunction createListener(msg) {\n  function listener(err) {\n    if (msg.__onFinished === listener) msg.__onFinished = null;\n    if (!listener.queue) return;\n    var queue = listener.queue;\n    listener.queue = null;\n\n    for (var i = 0; i < queue.length; i++) {\n      queue[i](err, msg);\n    }\n  }\n\n  listener.queue = [];\n  return listener;\n}\n/**\n * Patch ServerResponse.prototype.assignSocket for node.js 0.8.\n *\n * @param {ServerResponse} res\n * @param {function} callback\n * @private\n */\n\n\nfunction patchAssignSocket(res, callback) {\n  var assignSocket = res.assignSocket;\n  if (typeof assignSocket !== 'function') return; // res.on('socket', callback) is broken in 0.8\n\n  res.assignSocket = function _assignSocket(socket) {\n    assignSocket.call(this, socket);\n    callback(socket);\n  };\n}","map":{"version":3,"names":["module","exports","onFinished","isFinished","first","require","defer","setImmediate","fn","process","nextTick","bind","apply","arguments","msg","listener","attachListener","socket","finished","Boolean","writable","complete","upgrade","readable","undefined","attachFinishedListener","callback","eeMsg","eeSocket","onFinish","error","cancel","onSocket","removeListener","on","patchAssignSocket","attached","__onFinished","queue","createListener","push","err","i","length","res","assignSocket","_assignSocket","call"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/on-finished/index.js"],"sourcesContent":["/*!\n * on-finished\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = onFinished\nmodule.exports.isFinished = isFinished\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar first = require('ee-first')\n\n/**\n * Variables.\n * @private\n */\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\n\n/**\n * Invoke callback when the response has finished, useful for\n * cleaning up resources afterwards.\n *\n * @param {object} msg\n * @param {function} listener\n * @return {object}\n * @public\n */\n\nfunction onFinished(msg, listener) {\n  if (isFinished(msg) !== false) {\n    defer(listener, null, msg)\n    return msg\n  }\n\n  // attach the listener to the message\n  attachListener(msg, listener)\n\n  return msg\n}\n\n/**\n * Determine if message is already finished.\n *\n * @param {object} msg\n * @return {boolean}\n * @public\n */\n\nfunction isFinished(msg) {\n  var socket = msg.socket\n\n  if (typeof msg.finished === 'boolean') {\n    // OutgoingMessage\n    return Boolean(msg.finished || (socket && !socket.writable))\n  }\n\n  if (typeof msg.complete === 'boolean') {\n    // IncomingMessage\n    return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))\n  }\n\n  // don't know\n  return undefined\n}\n\n/**\n * Attach a finished listener to the message.\n *\n * @param {object} msg\n * @param {function} callback\n * @private\n */\n\nfunction attachFinishedListener(msg, callback) {\n  var eeMsg\n  var eeSocket\n  var finished = false\n\n  function onFinish(error) {\n    eeMsg.cancel()\n    eeSocket.cancel()\n\n    finished = true\n    callback(error)\n  }\n\n  // finished on first message event\n  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish)\n\n  function onSocket(socket) {\n    // remove listener\n    msg.removeListener('socket', onSocket)\n\n    if (finished) return\n    if (eeMsg !== eeSocket) return\n\n    // finished on first socket event\n    eeSocket = first([[socket, 'error', 'close']], onFinish)\n  }\n\n  if (msg.socket) {\n    // socket already assigned\n    onSocket(msg.socket)\n    return\n  }\n\n  // wait for socket to be assigned\n  msg.on('socket', onSocket)\n\n  if (msg.socket === undefined) {\n    // node.js 0.8 patch\n    patchAssignSocket(msg, onSocket)\n  }\n}\n\n/**\n * Attach the listener to the message.\n *\n * @param {object} msg\n * @return {function}\n * @private\n */\n\nfunction attachListener(msg, listener) {\n  var attached = msg.__onFinished\n\n  // create a private single listener with queue\n  if (!attached || !attached.queue) {\n    attached = msg.__onFinished = createListener(msg)\n    attachFinishedListener(msg, attached)\n  }\n\n  attached.queue.push(listener)\n}\n\n/**\n * Create listener on message.\n *\n * @param {object} msg\n * @return {function}\n * @private\n */\n\nfunction createListener(msg) {\n  function listener(err) {\n    if (msg.__onFinished === listener) msg.__onFinished = null\n    if (!listener.queue) return\n\n    var queue = listener.queue\n    listener.queue = null\n\n    for (var i = 0; i < queue.length; i++) {\n      queue[i](err, msg)\n    }\n  }\n\n  listener.queue = []\n\n  return listener\n}\n\n/**\n * Patch ServerResponse.prototype.assignSocket for node.js 0.8.\n *\n * @param {ServerResponse} res\n * @param {function} callback\n * @private\n */\n\nfunction patchAssignSocket(res, callback) {\n  var assignSocket = res.assignSocket\n\n  if (typeof assignSocket !== 'function') return\n\n  // res.on('socket', callback) is broken in 0.8\n  res.assignSocket = function _assignSocket(socket) {\n    assignSocket.call(this, socket)\n    callback(socket)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}