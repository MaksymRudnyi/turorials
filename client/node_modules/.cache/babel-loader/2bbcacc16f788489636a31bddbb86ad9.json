{"ast":null,"code":"export var getStatistics = view => {\n  return {\n    line: view.state.doc.lineAt(view.state.selection.main.from),\n    lineCount: view.state.doc.lines,\n    lineBreak: view.state.lineBreak,\n    length: view.state.doc.length,\n    readOnly: view.state.readOnly,\n    tabSize: view.state.tabSize,\n    selection: view.state.selection,\n    selectionAsSingle: view.state.selection.asSingle().main,\n    ranges: view.state.selection.ranges,\n    selectionCode: view.state.sliceDoc(view.state.selection.main.from, view.state.selection.main.to),\n    selections: view.state.selection.ranges.map(r => view.state.sliceDoc(r.from, r.to)),\n    selectedText: view.state.selection.ranges.some(r => !r.empty)\n  };\n};","map":{"version":3,"sources":["../src/utils.ts"],"names":["getStatistics","view","line","lineCount","lineBreak","length","readOnly","tabSize","selection","selectionAsSingle","ranges","selectionCode","selections","r","selectedText"],"mappings":"AAiCA,OAAO,IAAMA,aAAa,GAAIC,IAAD,IAAkC;EAC7D,OAAO;IACLC,IAAI,EAAED,IAAI,CAAJA,KAAAA,CAAAA,GAAAA,CAAAA,MAAAA,CAAsBA,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CADvB,IACCA,CADD;IAELE,SAAS,EAAEF,IAAI,CAAJA,KAAAA,CAAAA,GAAAA,CAFN,KAAA;IAGLG,SAAS,EAAEH,IAAI,CAAJA,KAAAA,CAHN,SAAA;IAILI,MAAM,EAAEJ,IAAI,CAAJA,KAAAA,CAAAA,GAAAA,CAJH,MAAA;IAKLK,QAAQ,EAAEL,IAAI,CAAJA,KAAAA,CALL,QAAA;IAMLM,OAAO,EAAEN,IAAI,CAAJA,KAAAA,CANJ,OAAA;IAOLO,SAAS,EAAEP,IAAI,CAAJA,KAAAA,CAPN,SAAA;IAQLQ,iBAAiB,EAAER,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAAAA,QAAAA,GARd,IAAA;IASLS,MAAM,EAAET,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CATH,MAAA;IAULU,aAAa,EAAEV,IAAI,CAAJA,KAAAA,CAAAA,QAAAA,CAAoBA,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAApBA,IAAAA,EAAoDA,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAV9D,EAUUA,CAVV;IAWLW,UAAU,EAAEX,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAAA,GAAAA,CAAiCY,CAAD,IAAOZ,IAAI,CAAJA,KAAAA,CAAAA,QAAAA,CAAoBY,CAAC,CAArBZ,IAAAA,EAA4BY,CAAC,CAX3E,EAW8CZ,CAAvCA,CAXP;IAYLa,YAAY,EAAEb,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAkCY,CAAD,IAAO,CAACA,CAAC,CAA1CZ,KAAAA;EAZT,CAAP;AADK,CAAA","sourcesContent":["import { EditorSelection, SelectionRange, Line } from '@codemirror/state';\nimport { ViewUpdate } from '@codemirror/view';\n\nexport interface Statistics {\n  /** total length of the document */\n  length: number;\n  /** Get the number of lines in the editor. */\n  lineCount: number;\n  /** Get the currently line description around the given position. */\n  line: Line;\n  /** Get the proper [line-break](https://codemirror.net/docs/ref/#state.EditorState^lineSeparator) string for this state. */\n  lineBreak: string;\n  /** Returns true when the editor is [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only. */\n  readOnly: boolean;\n  /** The size (in columns) of a tab in the document, determined by the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet. */\n  tabSize: number;\n  /** Cursor Position */\n  selection: EditorSelection;\n  /** Make sure the selection only has one range. */\n  selectionAsSingle: SelectionRange;\n  /** Retrieves a list of all current selections. */\n  ranges: readonly SelectionRange[];\n  /** Get the currently selected code. */\n  selectionCode: string;\n  /**\n   * The length of the given array should be the same as the number of active selections.\n   * Replaces the content of the selections with the strings in the array.\n   */\n  selections: string[];\n  /** Return true if any text is selected. */\n  selectedText: boolean;\n}\n\nexport const getStatistics = (view: ViewUpdate): Statistics => {\n  return {\n    line: view.state.doc.lineAt(view.state.selection.main.from),\n    lineCount: view.state.doc.lines,\n    lineBreak: view.state.lineBreak,\n    length: view.state.doc.length,\n    readOnly: view.state.readOnly,\n    tabSize: view.state.tabSize,\n    selection: view.state.selection,\n    selectionAsSingle: view.state.selection.asSingle().main,\n    ranges: view.state.selection.ranges,\n    selectionCode: view.state.sliceDoc(view.state.selection.main.from, view.state.selection.main.to),\n    selections: view.state.selection.ranges.map((r) => view.state.sliceDoc(r.from, r.to)),\n    selectedText: view.state.selection.ranges.some((r) => !r.empty),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}