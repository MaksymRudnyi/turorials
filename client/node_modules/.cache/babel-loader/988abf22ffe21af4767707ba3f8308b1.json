{"ast":null,"code":"// @ts-nocheck\nimport refractorCss from './css.js';\nsass.displayName = 'sass';\nsass.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function sass(Prism) {\n  Prism.register(refractorCss);\n\n  (function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: true\n    }];\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [/[^:\\s]+(?=\\s*:)/, {\n            pattern: /(:)[^:\\s]+/,\n            lookbehind: true\n          }],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorCss","sass","displayName","aliases","Prism","register","languages","extend","comment","pattern","lookbehind","greedy","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/sass.js"],"sourcesContent":["// @ts-nocheck\nimport refractorCss from './css.js'\nsass.displayName = 'sass'\nsass.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function sass(Prism) {\n  Prism.register(refractorCss)\n  ;(function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        greedy: true,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n      {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        greedy: true,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        greedy: true,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern:\n          /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n        lookbehind: true,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;AACA,OAAOA,YAAP,MAAyB,UAAzB;AACAC,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;AAEA;;AACA,eAAe,SAASF,IAAT,CAAcG,KAAd,EAAqB;EAClCA,KAAK,CAACC,QAAN,CAAeL,YAAf;;EACC,CAAC,UAAUI,KAAV,EAAiB;IACjBA,KAAK,CAACE,SAAN,CAAgBL,IAAhB,GAAuBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,EAA8B;MACnD;MACAC,OAAO,EAAE;QACPC,OAAO,EAAE,+CADF;QAEPC,UAAU,EAAE,IAFL;QAGPC,MAAM,EAAE;MAHD;IAF0C,CAA9B,CAAvB;IAQAP,KAAK,CAACE,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;MAC7C;MACA,eAAe;QACb;QACAH,OAAO,EAAE,qBAFI;QAGbE,MAAM,EAAE,IAHK;QAIbE,MAAM,EAAE;UACNC,MAAM,EAAE;QADF;MAJK;IAF8B,CAA/C;IAWA,OAAOV,KAAK,CAACE,SAAN,CAAgBL,IAAhB,CAAqBa,MAA5B;IACA,IAAIC,QAAQ,GAAG,wBAAf;IACA,IAAIC,QAAQ,GAAG,CACb,0CADa,EAEb;MACEP,OAAO,EAAE,aADX;MAEEC,UAAU,EAAE;IAFd,CAFa,CAAf;IAOAN,KAAK,CAACE,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;MAC/C;MACA,iBAAiB;QACfH,OAAO,EAAE,cADM;QAEfE,MAAM,EAAE,IAFO;QAGfE,MAAM,EAAE;UACNI,WAAW,EAAE,GADP;UAENF,QAAQ,EAAEA,QAFJ;UAGNC,QAAQ,EAAEA;QAHJ;MAHO,CAF8B;MAW/C;MACA,iBAAiB;QACfP,OAAO,EAAE,oCADM;QAEfE,MAAM,EAAE,IAFO;QAGfE,MAAM,EAAE;UACNK,QAAQ,EAAE,CACR,iBADQ,EAER;YACET,OAAO,EAAE,YADX;YAEEC,UAAU,EAAE;UAFd,CAFQ,CADJ;UAQNO,WAAW,EAAE,GARP;UASNF,QAAQ,EAAEA,QATJ;UAUNC,QAAQ,EAAEA,QAVJ;UAWNG,SAAS,EAAEf,KAAK,CAACE,SAAN,CAAgBL,IAAhB,CAAqBkB;QAX1B;MAHO;IAZ8B,CAAjD;IA8BA,OAAOf,KAAK,CAACE,SAAN,CAAgBL,IAAhB,CAAqBiB,QAA5B;IACA,OAAOd,KAAK,CAACE,SAAN,CAAgBL,IAAhB,CAAqBkB,SAA5B,CA5DiB,CA4DqB;IACtC;;IAEAf,KAAK,CAACE,SAAN,CAAgBM,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoD;MAClDQ,QAAQ,EAAE;QACRX,OAAO,EACL,wHAFM;QAGRC,UAAU,EAAE,IAHJ;QAIRC,MAAM,EAAE;MAJA;IADwC,CAApD;EAQD,CAvEA,EAuEEP,KAvEF;AAwEF"},"metadata":{},"sourceType":"module"}