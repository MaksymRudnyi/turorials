{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink');\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.enter('autolinkProtocol');\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);\n  }\n  /** @type {State} */\n\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      return urlInside;\n    }\n\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n\n    return emailAtext(code);\n  }\n  /** @type {State} */\n\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol');\n      return end(code);\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n\n    effects.consume(code);\n    return urlInside;\n  }\n  /** @type {State} */\n\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\n      return end(code);\n    }\n\n    return emailValue(code);\n  }\n  /** @type {State} */\n\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code);\n      return code === 45 ? emailValue : emailLabel;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function end(code) {\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.exit('autolink');\n    return ok;\n  }\n}","map":{"version":3,"names":["asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","autolink","name","tokenize","tokenizeAutolink","effects","ok","nok","size","start","code","enter","consume","exit","open","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","end","emailAtSignOrDot","emailLabel","type","emailValue"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-core-commonmark/lib/autolink.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}