{"ast":null,"code":"import { parser } from '@lezer/rust';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n/**\nA syntax provider based on the [Lezer Rust\nparser](https://github.com/lezer-parser/rust), extended with\nhighlighting and indentation information.\n*/\n\nconst rustLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfExpression: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      \"String BlockComment\": () => null,\n      \"AttributeItem\": cx => cx.continue(),\n      \"Statement MatchArm\": /*@__PURE__*/continuedIndent()\n    }), /*@__PURE__*/foldNodeProp.add(type => {\n      if (/(Block|edTokens|List)$/.test(type.name)) return foldInside;\n      if (type.name == \"BlockComment\") return tree => ({\n        from: tree.from + 2,\n        to: tree.to - 2\n      });\n      return undefined;\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:\\{|\\})$/\n  }\n});\n/**\nRust language support\n*/\n\nfunction rust() {\n  return new LanguageSupport(rustLanguage);\n}\n\nexport { rust, rustLanguage };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","foldNodeProp","foldInside","LanguageSupport","rustLanguage","define","configure","props","add","IfExpression","except","cx","continue","type","test","name","tree","from","to","undefined","languageData","commentTokens","line","block","open","close","indentOnInput","rust"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/lang-rust/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/rust';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA syntax provider based on the [Lezer Rust\nparser](https://github.com/lezer-parser/rust), extended with\nhighlighting and indentation information.\n*/\nconst rustLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfExpression: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                \"String BlockComment\": () => null,\n                \"AttributeItem\": cx => cx.continue(),\n                \"Statement MatchArm\": /*@__PURE__*/continuedIndent()\n            }),\n            /*@__PURE__*/foldNodeProp.add(type => {\n                if (/(Block|edTokens|List)$/.test(type.name))\n                    return foldInside;\n                if (type.name == \"BlockComment\")\n                    return tree => ({ from: tree.from + 2, to: tree.to - 2 });\n                return undefined;\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:\\{|\\})$/\n    }\n});\n/**\nRust language support\n*/\nfunction rust() {\n    return new LanguageSupport(rustLanguage);\n}\n\nexport { rust, rustLanguage };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,eAArC,EAAsDC,YAAtD,EAAoEC,UAApE,EAAgFC,eAAhF,QAAuG,sBAAvG;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,aAAaN,UAAU,CAACO,MAAX,CAAkB;EAChDR,MAAM,EAAE,aAAaA,MAAM,CAACS,SAAP,CAAiB;IAClCC,KAAK,EAAE,CACH,aAAaR,cAAc,CAACS,GAAf,CAAmB;MAC5BC,YAAY,EAAE,aAAaT,eAAe,CAAC;QAAEU,MAAM,EAAE;MAAV,CAAD,CADd;MAE5B,uBAAuB,MAAM,IAFD;MAG5B,iBAAiBC,EAAE,IAAIA,EAAE,CAACC,QAAH,EAHK;MAI5B,sBAAsB,aAAaZ,eAAe;IAJtB,CAAnB,CADV,EAOH,aAAaC,YAAY,CAACO,GAAb,CAAiBK,IAAI,IAAI;MAClC,IAAI,yBAAyBC,IAAzB,CAA8BD,IAAI,CAACE,IAAnC,CAAJ,EACI,OAAOb,UAAP;MACJ,IAAIW,IAAI,CAACE,IAAL,IAAa,cAAjB,EACI,OAAOC,IAAI,KAAK;QAAEC,IAAI,EAAED,IAAI,CAACC,IAAL,GAAY,CAApB;QAAuBC,EAAE,EAAEF,IAAI,CAACE,EAAL,GAAU;MAArC,CAAL,CAAX;MACJ,OAAOC,SAAP;IACH,CANY,CAPV;EAD2B,CAAjB,CAD2B;EAkBhDC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAR;QAAcC,KAAK,EAAE;MAArB;IAArB,CADL;IAEVC,aAAa,EAAE;EAFL;AAlBkC,CAAlB,CAAlC;AAuBA;AACA;AACA;;AACA,SAASC,IAAT,GAAgB;EACZ,OAAO,IAAIxB,eAAJ,CAAoBC,YAApB,CAAP;AACH;;AAED,SAASuB,IAAT,EAAevB,YAAf"},"metadata":{},"sourceType":"module"}