{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\nimport { bail } from 'bail';\nimport isBuffer from 'is-buffer';\nimport extend from 'extend';\nimport isPlainObj from 'is-plain-obj';\nimport { trough } from 'trough';\nimport { VFile } from 'vfile'; // Expose a frozen processor.\n\nexport const unified = base().freeze();\nconst own = {}.hasOwnProperty; // Function to create the first processor.\n\n/**\n * @returns {Processor}\n */\n\nfunction base() {\n  const transformers = trough();\n  /** @type {Processor['attachers']} */\n\n  const attachers = [];\n  /** @type {Record<string, unknown>} */\n\n  let namespace = {};\n  /** @type {boolean|undefined} */\n\n  let frozen;\n  let freezeIndex = -1; // Data management.\n  // @ts-expect-error: overloads are handled.\n\n  processor.data = data;\n  processor.Parser = undefined;\n  processor.Compiler = undefined; // Lock.\n\n  processor.freeze = freeze; // Plugins.\n\n  processor.attachers = attachers; // @ts-expect-error: overloads are handled.\n\n  processor.use = use; // API.\n\n  processor.parse = parse;\n  processor.stringify = stringify; // @ts-expect-error: overloads are handled.\n\n  processor.run = run;\n  processor.runSync = runSync; // @ts-expect-error: overloads are handled.\n\n  processor.process = process;\n  processor.processSync = processSync; // Expose.\n\n  return processor; // Create a new processor based on the processor in the current scope.\n\n  /** @type {Processor} */\n\n  function processor() {\n    const destination = base();\n    let index = -1;\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index]);\n    }\n\n    destination.data(extend(true, {}, namespace));\n    return destination;\n  }\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n\n\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n        namespace[key] = value;\n        return processor;\n      } // Get `key`.\n\n\n      return own.call(namespace, key) && namespace[key] || null;\n    } // Set space.\n\n\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    } // Get space.\n\n\n    return namespace;\n  }\n  /** @type {Processor['freeze']} */\n\n\n  function freeze() {\n    if (frozen) {\n      return processor;\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex];\n\n      if (options[0] === false) {\n        continue;\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined;\n      }\n      /** @type {Transformer|void} */\n\n\n      const transformer = attacher.call(processor, ...options);\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer);\n      }\n    }\n\n    frozen = true;\n    freezeIndex = Number.POSITIVE_INFINITY;\n    return processor;\n  }\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n\n\n  function use(value) {\n    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      options[_key - 1] = arguments[_key];\n    }\n\n    /** @type {Record<string, unknown>|undefined} */\n    let settings;\n    assertUnfrozen('use', frozen);\n\n    if (value === null || value === undefined) {// Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options);\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`');\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings);\n    }\n\n    return processor;\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value;\n          addPlugin(plugin, ...options);\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`');\n      }\n    }\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n\n\n    function addPreset(result) {\n      addList(result.plugins);\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings);\n      }\n    }\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n\n\n    function addList(plugins) {\n      let index = -1;\n\n      if (plugins === null || plugins === undefined) {// Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index];\n          add(thing);\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n\n\n    function addPlugin(plugin, value) {\n      let index = -1;\n      /** @type {Processor['attachers'][number]|undefined} */\n\n      let entry;\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index];\n          break;\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value);\n        }\n\n        entry[1] = value;\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments]);\n      }\n    }\n  }\n  /** @type {Processor['parse']} */\n\n\n  function parse(doc) {\n    processor.freeze();\n    const file = vfile(doc);\n    const Parser = processor.Parser;\n    assertParser('parse', Parser);\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse();\n    } // @ts-expect-error: `newable` checks this.\n\n\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n  /** @type {Processor['stringify']} */\n\n\n  function stringify(node, doc) {\n    processor.freeze();\n    const file = vfile(doc);\n    const Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile();\n    } // @ts-expect-error: `newable` checks this.\n\n\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n\n\n  function run(node, doc, callback) {\n    assertNode(node);\n    processor.freeze();\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc;\n      doc = undefined;\n    }\n\n    if (!callback) {\n      return new Promise(executor);\n    }\n\n    executor(null, callback);\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` canâ€™t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done);\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n\n      function done(error, tree, file) {\n        tree = tree || node;\n\n        if (error) {\n          reject(error);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file);\n        }\n      }\n    }\n  }\n  /** @type {Processor['runSync']} */\n\n\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result;\n    /** @type {boolean|undefined} */\n\n    let complete;\n    processor.run(node, file, done);\n    assertDone('runSync', 'run', complete); // @ts-expect-error: we either bailed on an error or have a tree.\n\n    return result;\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n\n    function done(error, tree) {\n      bail(error);\n      result = tree;\n      complete = true;\n    }\n  }\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n\n\n  function process(doc, callback) {\n    processor.freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n\n    if (!callback) {\n      return new Promise(executor);\n    }\n\n    executor(null, callback);\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n\n    function executor(resolve, reject) {\n      const file = vfile(doc);\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error);\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file);\n\n          if (result === undefined || result === null) {// Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result;\n          } else {\n            file.result = result;\n          }\n\n          done(error, file);\n        }\n      });\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n\n      function done(error, file) {\n        if (error || !file) {\n          reject(error);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file);\n        }\n      }\n    }\n  }\n  /** @type {Processor['processSync']} */\n\n\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete;\n    processor.freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    const file = vfile(doc);\n    processor.process(file, done);\n    assertDone('processSync', 'process', complete);\n    return file;\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n\n    function done(error) {\n      complete = true;\n      bail(error);\n    }\n  }\n}\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\n\n\nfunction newable(value, name) {\n  return typeof value === 'function' && // Prototypes do exist.\n  // type-coverage:ignore-next-line\n  value.prototype && ( // A function with keys in its prototype is probably a constructor.\n  // Classesâ€™ prototype methods are not enumerable, so we check if some value\n  // exists in the prototype.\n  // type-coverage:ignore-next-line\n  keys(value.prototype) || name in value.prototype);\n}\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\n\n\nfunction keys(value) {\n  /** @type {string} */\n  let key;\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\n\n\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`');\n  }\n}\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\n\n\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`');\n  }\n}\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\n\n\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error('Cannot call `' + name + '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');\n  }\n}\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\n\n\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`'); // Fine.\n  }\n}\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\n\n\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\n\n\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value);\n}\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\n\n\nfunction looksLikeAVFile(value) {\n  return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);\n}\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\n\n\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value);\n}","map":{"version":3,"names":["bail","isBuffer","extend","isPlainObj","trough","VFile","unified","base","freeze","own","hasOwnProperty","transformers","attachers","namespace","frozen","freezeIndex","processor","data","Parser","undefined","Compiler","use","parse","stringify","run","runSync","process","processSync","destination","index","length","key","value","arguments","assertUnfrozen","call","attacher","options","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","Array","isArray","addList","addPreset","TypeError","Object","assign","add","plugin","result","plugins","thing","entry","push","doc","file","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","callback","Promise","executor","resolve","reject","done","error","tree","complete","assertDone","looksLikeAVFileValue","name","prototype","keys","Error","type","asyncName","looksLikeAVFile","Boolean"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/unified/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` canâ€™t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classesâ€™ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}