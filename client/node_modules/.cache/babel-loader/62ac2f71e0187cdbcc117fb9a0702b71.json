{"ast":null,"code":"/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\nimport { toHexadecimal } from './to-hexadecimal.js';\nimport { toDecimal } from './to-decimal.js';\nimport { toNamed } from './to-named.js';\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\n\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);\n  /** @type {string|undefined} */\n\n  let named;\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(code, next, options.omitOptionalSemicolons, options.attribute);\n  } // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n\n\n  if ((options.useShortestReferences || !named) && options.useShortestReferences) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons);\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal;\n    }\n  }\n\n  return named && (!options.useShortestReferences || named.length < numeric.length) ? named : numeric;\n}","map":{"version":3,"names":["toHexadecimal","toDecimal","toNamed","formatSmart","code","next","options","numeric","omitOptionalSemicolons","named","useNamedReferences","useShortestReferences","attribute","decimal","length"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/stringify-entities/lib/util/format-smart.js"],"sourcesContent":["/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,qBAA5B;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;EAC/C,IAAIC,OAAO,GAAGP,aAAa,CAACI,IAAD,EAAOC,IAAP,EAAaC,OAAO,CAACE,sBAArB,CAA3B;EACA;;EACA,IAAIC,KAAJ;;EAEA,IAAIH,OAAO,CAACI,kBAAR,IAA8BJ,OAAO,CAACK,qBAA1C,EAAiE;IAC/DF,KAAK,GAAGP,OAAO,CACbE,IADa,EAEbC,IAFa,EAGbC,OAAO,CAACE,sBAHK,EAIbF,OAAO,CAACM,SAJK,CAAf;EAMD,CAZ8C,CAc/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,IACE,CAACN,OAAO,CAACK,qBAAR,IAAiC,CAACF,KAAnC,KACAH,OAAO,CAACK,qBAFV,EAGE;IACA,MAAME,OAAO,GAAGZ,SAAS,CAACG,IAAD,EAAOC,IAAP,EAAaC,OAAO,CAACE,sBAArB,CAAzB;;IAEA,IAAIK,OAAO,CAACC,MAAR,GAAiBP,OAAO,CAACO,MAA7B,EAAqC;MACnCP,OAAO,GAAGM,OAAV;IACD;EACF;;EAED,OAAOJ,KAAK,KACT,CAACH,OAAO,CAACK,qBAAT,IAAkCF,KAAK,CAACK,MAAN,GAAeP,OAAO,CAACO,MADhD,CAAL,GAEHL,KAFG,GAGHF,OAHJ;AAID"},"metadata":{},"sourceType":"module"}