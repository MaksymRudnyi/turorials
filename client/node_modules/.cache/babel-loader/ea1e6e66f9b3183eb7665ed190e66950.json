{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar crypto = require('crypto');\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\n\nexports.sign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto.createHmac('sha256', secret).update(val).digest('base64').replace(/\\=+$/, '');\n};\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\n\nexports.unsign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.')),\n      mac = exports.sign(str, secret);\n  return sha1(mac) == sha1(val) ? str : false;\n};\n/**\n * Private\n */\n\n\nfunction sha1(str) {\n  return crypto.createHash('sha1').update(str).digest('hex');\n}","map":{"version":3,"names":["crypto","require","exports","sign","val","secret","TypeError","createHmac","update","digest","replace","unsign","str","slice","lastIndexOf","mac","sha1","createHash"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/cookie-signature/index.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto\n    .createHmac('sha256', secret)\n    .update(val)\n    .digest('base64')\n    .replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.'))\n    , mac = exports.sign(str, secret);\n  \n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str){\n  return crypto.createHash('sha1').update(str).digest('hex');\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,OAAO,CAACC,IAAR,GAAe,UAASC,GAAT,EAAcC,MAAd,EAAqB;EAClC,IAAI,YAAY,OAAOD,GAAvB,EAA4B,MAAM,IAAIE,SAAJ,CAAc,4CAAd,CAAN;EAC5B,IAAI,YAAY,OAAOD,MAAvB,EAA+B,MAAM,IAAIC,SAAJ,CAAc,iCAAd,CAAN;EAC/B,OAAOF,GAAG,GAAG,GAAN,GAAYJ,MAAM,CACtBO,UADgB,CACL,QADK,EACKF,MADL,EAEhBG,MAFgB,CAETJ,GAFS,EAGhBK,MAHgB,CAGT,QAHS,EAIhBC,OAJgB,CAIR,MAJQ,EAIA,EAJA,CAAnB;AAKD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAR,OAAO,CAACS,MAAR,GAAiB,UAASP,GAAT,EAAcC,MAAd,EAAqB;EACpC,IAAI,YAAY,OAAOD,GAAvB,EAA4B,MAAM,IAAIE,SAAJ,CAAc,wCAAd,CAAN;EAC5B,IAAI,YAAY,OAAOD,MAAvB,EAA+B,MAAM,IAAIC,SAAJ,CAAc,iCAAd,CAAN;EAC/B,IAAIM,GAAG,GAAGR,GAAG,CAACS,KAAJ,CAAU,CAAV,EAAaT,GAAG,CAACU,WAAJ,CAAgB,GAAhB,CAAb,CAAV;EAAA,IACIC,GAAG,GAAGb,OAAO,CAACC,IAAR,CAAaS,GAAb,EAAkBP,MAAlB,CADV;EAGA,OAAOW,IAAI,CAACD,GAAD,CAAJ,IAAaC,IAAI,CAACZ,GAAD,CAAjB,GAAyBQ,GAAzB,GAA+B,KAAtC;AACD,CAPD;AASA;AACA;AACA;;;AAEA,SAASI,IAAT,CAAcJ,GAAd,EAAkB;EAChB,OAAOZ,MAAM,CAACiB,UAAP,CAAkB,MAAlB,EAA0BT,MAA1B,CAAiCI,GAAjC,EAAsCH,MAAtC,CAA6C,KAA7C,CAAP;AACD"},"metadata":{},"sourceType":"script"}