{"ast":null,"code":"// @ts-nocheck\nimport refractorRuby from './ruby.js';\nhaml.displayName = 'haml';\nhaml.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\n  Handle multiline code after tag\n  %foo= some |\n  multiline |\n  code |\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n            lookbehind: true,\n            inside: Prism.languages.ruby\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: Prism.languages.ruby\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', function () {\n            return filter.filter;\n          })),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}","map":{"version":3,"names":["refractorRuby","haml","displayName","aliases","Prism","register","languages","pattern","lookbehind","alias","inside","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filter_pattern","filters","language","all_filters","i","l","length","RegExp","replace","text","insertBefore"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/haml.js"],"sourcesContent":["// @ts-nocheck\nimport refractorRuby from './ruby.js'\nhaml.displayName = 'haml'\nhaml.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern:\n          /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n              lookbehind: true,\n              inside: Prism.languages.ruby\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: Prism.languages.ruby\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', function () {\n              return filter.filter\n            })\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}