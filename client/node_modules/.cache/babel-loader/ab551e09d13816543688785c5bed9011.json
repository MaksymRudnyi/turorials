{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\n\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    marker = code === 40 ? 41 : code;\n    return atFirstTitleBreak;\n  }\n  /** @type {State} */\n\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    effects.enter(stringType);\n    return atTitleBreak(code);\n  }\n  /** @type {State} */\n\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return atFirstTitleBreak(marker);\n    }\n\n    if (code === null) {\n      return nok(code);\n    } // Note: blank lines can’t exist in content.\n\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return factorySpace(effects, atTitleBreak, 'linePrefix');\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return title(code);\n  }\n  /** @type {State} */\n\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      return atTitleBreak(code);\n    }\n\n    effects.consume(code);\n    return code === 92 ? titleEscape : title;\n  }\n  /** @type {State} */\n\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return title;\n    }\n\n    return title(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","factoryTitle","effects","ok","nok","type","markerType","stringType","marker","start","code","enter","consume","exit","atFirstTitleBreak","atTitleBreak","contentType","title","titleEscape"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-factory-title/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,EAA/B,EAAmCC,GAAnC,EAAwCC,IAAxC,EAA8CC,UAA9C,EAA0DC,UAA1D,EAAsE;EAC3E;EACA,IAAIC,MAAJ;EACA,OAAOC,KAAP;EACA;;EAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnBR,OAAO,CAACS,KAAR,CAAcN,IAAd;IACAH,OAAO,CAACS,KAAR,CAAcL,UAAd;IACAJ,OAAO,CAACU,OAAR,CAAgBF,IAAhB;IACAR,OAAO,CAACW,IAAR,CAAaP,UAAb;IACAE,MAAM,GAAGE,IAAI,KAAK,EAAT,GAAc,EAAd,GAAmBA,IAA5B;IACA,OAAOI,iBAAP;EACD;EACD;;;EAEA,SAASA,iBAAT,CAA2BJ,IAA3B,EAAiC;IAC/B,IAAIA,IAAI,KAAKF,MAAb,EAAqB;MACnBN,OAAO,CAACS,KAAR,CAAcL,UAAd;MACAJ,OAAO,CAACU,OAAR,CAAgBF,IAAhB;MACAR,OAAO,CAACW,IAAR,CAAaP,UAAb;MACAJ,OAAO,CAACW,IAAR,CAAaR,IAAb;MACA,OAAOF,EAAP;IACD;;IAEDD,OAAO,CAACS,KAAR,CAAcJ,UAAd;IACA,OAAOQ,YAAY,CAACL,IAAD,CAAnB;EACD;EACD;;;EAEA,SAASK,YAAT,CAAsBL,IAAtB,EAA4B;IAC1B,IAAIA,IAAI,KAAKF,MAAb,EAAqB;MACnBN,OAAO,CAACW,IAAR,CAAaN,UAAb;MACA,OAAOO,iBAAiB,CAACN,MAAD,CAAxB;IACD;;IAED,IAAIE,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAON,GAAG,CAACM,IAAD,CAAV;IACD,CARyB,CAQxB;;;IAEF,IAAIV,kBAAkB,CAACU,IAAD,CAAtB,EAA8B;MAC5BR,OAAO,CAACS,KAAR,CAAc,YAAd;MACAT,OAAO,CAACU,OAAR,CAAgBF,IAAhB;MACAR,OAAO,CAACW,IAAR,CAAa,YAAb;MACA,OAAOd,YAAY,CAACG,OAAD,EAAUa,YAAV,EAAwB,YAAxB,CAAnB;IACD;;IAEDb,OAAO,CAACS,KAAR,CAAc,aAAd,EAA6B;MAC3BK,WAAW,EAAE;IADc,CAA7B;IAGA,OAAOC,KAAK,CAACP,IAAD,CAAZ;EACD;EACD;;;EAEA,SAASO,KAAT,CAAeP,IAAf,EAAqB;IACnB,IAAIA,IAAI,KAAKF,MAAT,IAAmBE,IAAI,KAAK,IAA5B,IAAoCV,kBAAkB,CAACU,IAAD,CAA1D,EAAkE;MAChER,OAAO,CAACW,IAAR,CAAa,aAAb;MACA,OAAOE,YAAY,CAACL,IAAD,CAAnB;IACD;;IAEDR,OAAO,CAACU,OAAR,CAAgBF,IAAhB;IACA,OAAOA,IAAI,KAAK,EAAT,GAAcQ,WAAd,GAA4BD,KAAnC;EACD;EACD;;;EAEA,SAASC,WAAT,CAAqBR,IAArB,EAA2B;IACzB,IAAIA,IAAI,KAAKF,MAAT,IAAmBE,IAAI,KAAK,EAAhC,EAAoC;MAClCR,OAAO,CAACU,OAAR,CAAgBF,IAAhB;MACA,OAAOO,KAAP;IACD;;IAED,OAAOA,KAAK,CAACP,IAAD,CAAZ;EACD;AACF"},"metadata":{},"sourceType":"module"}