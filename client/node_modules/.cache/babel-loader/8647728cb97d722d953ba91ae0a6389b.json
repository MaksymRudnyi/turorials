{"ast":null,"code":"function forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i);\n}\n\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true;\n\n  return false;\n} // Words\n\n\nvar words = {\n  // Words that introduce unnamed definitions like \"define interface\"\n  unnamedDefinition: [\"interface\"],\n  // Words that introduce simple named definitions like \"define library\"\n  namedDefinition: [\"module\", \"library\", \"macro\", \"C-struct\", \"C-union\", \"C-function\", \"C-callable-wrapper\"],\n  // Words that introduce type definitions like \"define class\".\n  // These are also parameterized like \"define method\" and are\n  // appended to otherParameterizedDefinitionWords\n  typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n  // Words that introduce trickier definitions like \"define method\".\n  // These require special definitions to be added to startExpressions\n  otherParameterizedDefinition: [\"method\", \"function\", \"C-variable\", \"C-address\"],\n  // Words that introduce module constant definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  constantSimpleDefinition: [\"constant\"],\n  // Words that introduce module variable definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  variableSimpleDefinition: [\"variable\"],\n  // Other words that introduce simple definitions\n  // (without implicit bodies).\n  otherSimpleDefinition: [\"generic\", \"domain\", \"C-pointer-type\", \"table\"],\n  // Words that begin statements with implicit bodies.\n  statement: [\"if\", \"block\", \"begin\", \"method\", \"case\", \"for\", \"select\", \"when\", \"unless\", \"until\", \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"],\n  // Patterns that act as separators in compound statements.\n  // This may include any general pattern that must be indented\n  // specially.\n  separator: [\"finally\", \"exception\", \"cleanup\", \"else\", \"elseif\", \"afterwards\"],\n  // Keywords that do not require special indentation handling,\n  // but which should be highlighted\n  other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\", \"instance\", \"let\", \"local\", \"otherwise\", \"slot\", \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"],\n  // Condition signaling function calls\n  signalingCalls: [\"signal\", \"error\", \"cerror\", \"break\", \"check-type\", \"abort\"]\n};\nwords[\"otherDefinition\"] = words[\"unnamedDefinition\"].concat(words[\"namedDefinition\"]).concat(words[\"otherParameterizedDefinition\"]);\nwords[\"definition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherDefinition\"]);\nwords[\"parameterizedDefinition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherParameterizedDefinition\"]);\nwords[\"simpleDefinition\"] = words[\"constantSimpleDefinition\"].concat(words[\"variableSimpleDefinition\"]).concat(words[\"otherSimpleDefinition\"]);\nwords[\"keyword\"] = words[\"statement\"].concat(words[\"separator\"]).concat(words[\"other\"]); // Patterns\n\nvar symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\nvar symbol = new RegExp(\"^\" + symbolPattern);\nvar patterns = {\n  // Symbols with special syntax\n  symbolKeyword: symbolPattern + \":\",\n  symbolClass: \"<\" + symbolPattern + \">\",\n  symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n  symbolConstant: \"\\\\$\" + symbolPattern\n};\nvar patternStyles = {\n  symbolKeyword: \"atom\",\n  symbolClass: \"tag\",\n  symbolGlobal: \"variableName.standard\",\n  symbolConstant: \"variableName.constant\"\n}; // Compile all patterns to regular expressions\n\nfor (var patternName in patterns) if (patterns.hasOwnProperty(patternName)) patterns[patternName] = new RegExp(\"^\" + patterns[patternName]); // Names beginning \"with-\" and \"without-\" are commonly\n// used as statement macro\n\n\npatterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\nvar styles = {};\nstyles[\"keyword\"] = \"keyword\";\nstyles[\"definition\"] = \"def\";\nstyles[\"simpleDefinition\"] = \"def\";\nstyles[\"signalingCalls\"] = \"builtin\"; // protected words lookup table\n\nvar wordLookup = {};\nvar styleLookup = {};\nforEach([\"keyword\", \"definition\", \"simpleDefinition\", \"signalingCalls\"], function (type) {\n  forEach(words[type], function (word) {\n    wordLookup[word] = type;\n    styleLookup[word] = styles[type];\n  });\n});\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  // String\n  var ch = stream.peek();\n\n  if (ch == \"'\" || ch == '\"') {\n    stream.next();\n    return chain(stream, state, tokenString(ch, \"string\"));\n  } // Comment\n  else if (ch == \"/\") {\n    stream.next();\n\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.backUp(1);\n  } // Decimal\n  else if (/[+\\-\\d\\.]/.test(ch)) {\n    if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\\d+/)) {\n      return \"number\";\n    }\n  } // Hash\n  else if (ch == \"#\") {\n    stream.next(); // Symbol with string syntax\n\n    ch = stream.peek();\n\n    if (ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString('\"', \"string\"));\n    } // Binary number\n    else if (ch == \"b\") {\n      stream.next();\n      stream.eatWhile(/[01]/);\n      return \"number\";\n    } // Hex number\n    else if (ch == \"x\") {\n      stream.next();\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    } // Octal number\n    else if (ch == \"o\") {\n      stream.next();\n      stream.eatWhile(/[0-7]/);\n      return \"number\";\n    } // Token concatenation in macros\n    else if (ch == '#') {\n      stream.next();\n      return \"punctuation\";\n    } // Sequence literals\n    else if (ch == '[' || ch == '(') {\n      stream.next();\n      return \"bracket\"; // Hash symbol\n    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n      return \"atom\";\n    } else {\n      stream.eatWhile(/[-a-zA-Z]/);\n      return \"error\";\n    }\n  } else if (ch == \"~\") {\n    stream.next();\n    ch = stream.peek();\n\n    if (ch == \"=\") {\n      stream.next();\n      ch = stream.peek();\n\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      }\n\n      return \"operator\";\n    }\n\n    return \"operator\";\n  } else if (ch == \":\") {\n    stream.next();\n    ch = stream.peek();\n\n    if (ch == \"=\") {\n      stream.next();\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      return \"punctuation\";\n    }\n  } else if (\"[](){}\".indexOf(ch) != -1) {\n    stream.next();\n    return \"bracket\";\n  } else if (\".,\".indexOf(ch) != -1) {\n    stream.next();\n    return \"punctuation\";\n  } else if (stream.match(\"end\")) {\n    return \"keyword\";\n  }\n\n  for (var name in patterns) {\n    if (patterns.hasOwnProperty(name)) {\n      var pattern = patterns[name];\n      if (pattern instanceof Array && some(pattern, function (p) {\n        return stream.match(p);\n      }) || stream.match(pattern)) return patternStyles[name];\n    }\n  }\n\n  if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n    stream.next();\n    return \"operator\";\n  }\n\n  if (stream.match(\"define\")) {\n    return \"def\";\n  } else {\n    stream.eatWhile(/[\\w\\-]/); // Keyword\n\n    if (wordLookup.hasOwnProperty(stream.current())) {\n      return styleLookup[stream.current()];\n    } else if (stream.current().match(symbol)) {\n      return \"variable\";\n    } else {\n      stream.next();\n      return \"variableName.standard\";\n    }\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n      maybeNested = false,\n      nestedCount = 0,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      if (nestedCount > 0) {\n        nestedCount--;\n      } else {\n        state.tokenize = tokenBase;\n        break;\n      }\n    } else if (ch == \"*\" && maybeNested) {\n      nestedCount++;\n    }\n\n    maybeEnd = ch == \"*\";\n    maybeNested = ch == \"/\";\n  }\n\n  return \"comment\";\n}\n\nfunction tokenString(quote, style) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end || !escaped) {\n      state.tokenize = tokenBase;\n    }\n\n    return style;\n  };\n} // Interface\n\n\nexport const dylan = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    }\n  }\n};","map":{"version":3,"names":["forEach","arr","f","i","length","some","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","RegExp","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","wordLookup","styleLookup","type","word","chain","stream","state","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","dylan","startState","currentIndent","token","eatSpace","languageData","commentTokens","block","open","close"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/dylan.js"],"sourcesContent":["function forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\n  return false\n}\n\n// Words\nvar words = {\n  // Words that introduce unnamed definitions like \"define interface\"\n  unnamedDefinition: [\"interface\"],\n\n  // Words that introduce simple named definitions like \"define library\"\n  namedDefinition: [\"module\", \"library\", \"macro\",\n                    \"C-struct\", \"C-union\",\n                    \"C-function\", \"C-callable-wrapper\"\n                   ],\n\n  // Words that introduce type definitions like \"define class\".\n  // These are also parameterized like \"define method\" and are\n  // appended to otherParameterizedDefinitionWords\n  typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n  // Words that introduce trickier definitions like \"define method\".\n  // These require special definitions to be added to startExpressions\n  otherParameterizedDefinition: [\"method\", \"function\",\n                                 \"C-variable\", \"C-address\"\n                                ],\n\n  // Words that introduce module constant definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  constantSimpleDefinition: [\"constant\"],\n\n  // Words that introduce module variable definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  variableSimpleDefinition: [\"variable\"],\n\n  // Other words that introduce simple definitions\n  // (without implicit bodies).\n  otherSimpleDefinition: [\"generic\", \"domain\",\n                          \"C-pointer-type\",\n                          \"table\"\n                         ],\n\n  // Words that begin statements with implicit bodies.\n  statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n              \"for\", \"select\", \"when\", \"unless\", \"until\",\n              \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n             ],\n\n  // Patterns that act as separators in compound statements.\n  // This may include any general pattern that must be indented\n  // specially.\n  separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n              \"elseif\", \"afterwards\"\n             ],\n\n  // Keywords that do not require special indentation handling,\n  // but which should be highlighted\n  other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n          \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n          \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n         ],\n\n  // Condition signaling function calls\n  signalingCalls: [\"signal\", \"error\", \"cerror\",\n                   \"break\", \"check-type\", \"abort\"\n                  ]\n};\n\nwords[\"otherDefinition\"] =\n  words[\"unnamedDefinition\"]\n  .concat(words[\"namedDefinition\"])\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"definition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherDefinition\"]);\n\nwords[\"parameterizedDefinition\"] =\n  words[\"typeParameterizedDefinition\"]\n  .concat(words[\"otherParameterizedDefinition\"]);\n\nwords[\"simpleDefinition\"] =\n  words[\"constantSimpleDefinition\"]\n  .concat(words[\"variableSimpleDefinition\"])\n  .concat(words[\"otherSimpleDefinition\"]);\n\nwords[\"keyword\"] =\n  words[\"statement\"]\n  .concat(words[\"separator\"])\n  .concat(words[\"other\"]);\n\n// Patterns\nvar symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\nvar symbol = new RegExp(\"^\" + symbolPattern);\nvar patterns = {\n  // Symbols with special syntax\n  symbolKeyword: symbolPattern + \":\",\n  symbolClass: \"<\" + symbolPattern + \">\",\n  symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n  symbolConstant: \"\\\\$\" + symbolPattern\n};\nvar patternStyles = {\n  symbolKeyword: \"atom\",\n  symbolClass: \"tag\",\n  symbolGlobal: \"variableName.standard\",\n  symbolConstant: \"variableName.constant\"\n};\n\n// Compile all patterns to regular expressions\nfor (var patternName in patterns)\n  if (patterns.hasOwnProperty(patternName))\n    patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n// Names beginning \"with-\" and \"without-\" are commonly\n// used as statement macro\npatterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\nvar styles = {};\nstyles[\"keyword\"] = \"keyword\";\nstyles[\"definition\"] = \"def\";\nstyles[\"simpleDefinition\"] = \"def\";\nstyles[\"signalingCalls\"] = \"builtin\";\n\n// protected words lookup table\nvar wordLookup = {};\nvar styleLookup = {};\n\nforEach([\n  \"keyword\",\n  \"definition\",\n  \"simpleDefinition\",\n  \"signalingCalls\"\n], function(type) {\n  forEach(words[type], function(word) {\n    wordLookup[word] = type;\n    styleLookup[word] = styles[type];\n  });\n});\n\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  // String\n  var ch = stream.peek();\n  if (ch == \"'\" || ch == '\"') {\n    stream.next();\n    return chain(stream, state, tokenString(ch, \"string\"));\n  }\n  // Comment\n  else if (ch == \"/\") {\n    stream.next();\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    stream.backUp(1);\n  }\n  // Decimal\n  else if (/[+\\-\\d\\.]/.test(ch)) {\n    if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n        stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n        stream.match(/^[+-]?\\d+/)) {\n      return \"number\";\n    }\n  }\n  // Hash\n  else if (ch == \"#\") {\n    stream.next();\n    // Symbol with string syntax\n    ch = stream.peek();\n    if (ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString('\"', \"string\"));\n    }\n    // Binary number\n    else if (ch == \"b\") {\n      stream.next();\n      stream.eatWhile(/[01]/);\n      return \"number\";\n    }\n    // Hex number\n    else if (ch == \"x\") {\n      stream.next();\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    }\n    // Octal number\n    else if (ch == \"o\") {\n      stream.next();\n      stream.eatWhile(/[0-7]/);\n      return \"number\";\n    }\n    // Token concatenation in macros\n    else if (ch == '#') {\n      stream.next();\n      return \"punctuation\";\n    }\n    // Sequence literals\n    else if ((ch == '[') || (ch == '(')) {\n      stream.next();\n      return \"bracket\";\n      // Hash symbol\n    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n      return \"atom\";\n    } else {\n      stream.eatWhile(/[-a-zA-Z]/);\n      return \"error\";\n    }\n  } else if (ch == \"~\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      }\n      return \"operator\";\n    }\n    return \"operator\";\n  } else if (ch == \":\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      return \"punctuation\";\n    }\n  } else if (\"[](){}\".indexOf(ch) != -1) {\n    stream.next();\n    return \"bracket\";\n  } else if (\".,\".indexOf(ch) != -1) {\n    stream.next();\n    return \"punctuation\";\n  } else if (stream.match(\"end\")) {\n    return \"keyword\";\n  }\n  for (var name in patterns) {\n    if (patterns.hasOwnProperty(name)) {\n      var pattern = patterns[name];\n      if ((pattern instanceof Array && some(pattern, function(p) {\n        return stream.match(p);\n      })) || stream.match(pattern))\n        return patternStyles[name];\n    }\n  }\n  if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n    stream.next();\n    return \"operator\";\n  }\n  if (stream.match(\"define\")) {\n    return \"def\";\n  } else {\n    stream.eatWhile(/[\\w\\-]/);\n    // Keyword\n    if (wordLookup.hasOwnProperty(stream.current())) {\n      return styleLookup[stream.current()];\n    } else if (stream.current().match(symbol)) {\n      return \"variable\";\n    } else {\n      stream.next();\n      return \"variableName.standard\";\n    }\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n  while ((ch = stream.next())) {\n    if (ch == \"/\" && maybeEnd) {\n      if (nestedCount > 0) {\n        nestedCount--;\n      } else {\n        state.tokenize = tokenBase;\n        break;\n      }\n    } else if (ch == \"*\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = (ch == \"*\");\n    maybeNested = (ch == \"/\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote, style) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return style;\n  };\n}\n\n// Interface\nexport const dylan = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    commentTokens: {block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}