{"ast":null,"code":"function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\n;\nvar builtinArray = [\"Clamp\", \"Constructor\", \"EnforceRange\", \"Exposed\", \"ImplicitThis\", \"Global\", \"PrimaryGlobal\", \"LegacyArrayClass\", \"LegacyUnenumerableNamedProperties\", \"LenientThis\", \"NamedConstructor\", \"NewObject\", \"NoInterfaceObject\", \"OverrideBuiltins\", \"PutForwards\", \"Replaceable\", \"SameObject\", \"TreatNonObjectAsNull\", \"TreatNullAs\", \"EmptyString\", \"Unforgeable\", \"Unscopeable\"];\nvar builtins = wordRegexp(builtinArray);\nvar typeArray = [\"unsigned\", \"short\", \"long\", // UnsignedIntegerType\n\"unrestricted\", \"float\", \"double\", // UnrestrictedFloatType\n\"boolean\", \"byte\", \"octet\", // Rest of PrimitiveType\n\"Promise\", // PromiseType\n\"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\", \"Float32Array\", \"Float64Array\", // BufferRelatedType\n\"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\", \"Error\", \"DOMException\", \"FrozenArray\", // Rest of NonAnyType\n\"any\", // Rest of SingleType\n\"void\" // Rest of ReturnType\n];\nvar types = wordRegexp(typeArray);\nvar keywordArray = [\"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\", \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\", \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\", \"stringifier\", \"typedef\", // ArgumentNameKeyword except\n// \"unrestricted\"\n\"optional\", \"readonly\", \"or\"];\nvar keywords = wordRegexp(keywordArray);\nvar atomArray = [\"true\", \"false\", // BooleanLiteral\n\"Infinity\", \"NaN\", // FloatLiteral\n\"null\" // Rest of ConstValue\n];\nvar atoms = wordRegexp(atomArray);\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\nvar startDefs = wordRegexp(startDefArray);\nvar endDefArray = [\"typedef\"];\nvar endDefs = wordRegexp(endDefArray);\nvar singleOperators = /^[:<=>?]/;\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\nvar strings = /^\"[^\"]*\"/;\nvar multilineComments = /^\\/\\*.*?\\*\\//;\nvar multilineCommentsStart = /^\\/\\*.*/;\nvar multilineCommentsEnd = /^.*?\\*\\//;\n\nfunction readToken(stream, state) {\n  // whitespace\n  if (stream.eatSpace()) return null; // comment\n\n  if (state.inComment) {\n    if (stream.match(multilineCommentsEnd)) {\n      state.inComment = false;\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (stream.match(multilineComments)) return \"comment\";\n\n  if (stream.match(multilineCommentsStart)) {\n    state.inComment = true;\n    return \"comment\";\n  } // integer and float\n\n\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\n  } // string\n\n\n  if (stream.match(strings)) return \"string\"; // identifier\n\n  if (state.startDef && stream.match(identifiers)) return \"def\";\n\n  if (state.endDef && stream.match(identifiersEnd)) {\n    state.endDef = false;\n    return \"def\";\n  }\n\n  if (stream.match(keywords)) return \"keyword\";\n\n  if (stream.match(types)) {\n    var lastToken = state.lastToken;\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n    if (lastToken === \":\" || lastToken === \"implements\" || nextToken === \"implements\" || nextToken === \"=\") {\n      // Used as identifier\n      return \"builtin\";\n    } else {\n      // Used as type\n      return \"type\";\n    }\n  }\n\n  if (stream.match(builtins)) return \"builtin\";\n  if (stream.match(atoms)) return \"atom\";\n  if (stream.match(identifiers)) return \"variable\"; // other\n\n  if (stream.match(singleOperators)) return \"operator\"; // unrecognized\n\n  stream.next();\n  return null;\n}\n\n;\nexport const webIDL = {\n  startState: function () {\n    return {\n      // Is in multiline comment\n      inComment: false,\n      // Last non-whitespace, matched token\n      lastToken: \"\",\n      // Next token is a definition\n      startDef: false,\n      // Last token of the statement is a definition\n      endDef: false\n    };\n  },\n  token: function (stream, state) {\n    var style = readToken(stream, state);\n\n    if (style) {\n      var cur = stream.current();\n      state.lastToken = cur;\n\n      if (style === \"keyword\") {\n        state.startDef = startDefs.test(cur);\n        state.endDef = state.endDef || endDefs.test(cur);\n      } else {\n        state.startDef = false;\n      }\n    }\n\n    return style;\n  },\n  languageData: {\n    autocomplete: builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)\n  }\n};","map":{"version":3,"names":["wordRegexp","words","RegExp","join","builtinArray","builtins","typeArray","types","keywordArray","keywords","atomArray","atoms","startDefArray","startDefs","endDefArray","endDefs","singleOperators","integers","floats","identifiers","identifiersEnd","strings","multilineComments","multilineCommentsStart","multilineCommentsEnd","readToken","stream","state","eatSpace","inComment","match","skipToEnd","startDef","endDef","lastToken","nextToken","next","webIDL","startState","token","style","cur","current","test","languageData","autocomplete","concat"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/webidl.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n};\n\nvar builtinArray = [\n  \"Clamp\",\n  \"Constructor\",\n  \"EnforceRange\",\n  \"Exposed\",\n  \"ImplicitThis\",\n  \"Global\", \"PrimaryGlobal\",\n  \"LegacyArrayClass\",\n  \"LegacyUnenumerableNamedProperties\",\n  \"LenientThis\",\n  \"NamedConstructor\",\n  \"NewObject\",\n  \"NoInterfaceObject\",\n  \"OverrideBuiltins\",\n  \"PutForwards\",\n  \"Replaceable\",\n  \"SameObject\",\n  \"TreatNonObjectAsNull\",\n  \"TreatNullAs\",\n    \"EmptyString\",\n  \"Unforgeable\",\n  \"Unscopeable\"\n];\nvar builtins = wordRegexp(builtinArray);\n\nvar typeArray = [\n  \"unsigned\", \"short\", \"long\",                  // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\",            // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\",                   // Rest of PrimitiveType\n  \"Promise\",                                    // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\",\n  \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\",\n  \"Float32Array\", \"Float64Array\",               // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\",\n  \"Error\", \"DOMException\", \"FrozenArray\",       // Rest of NonAnyType\n  \"any\",                                        // Rest of SingleType\n  \"void\"                                        // Rest of ReturnType\n];\nvar types = wordRegexp(typeArray);\n\nvar keywordArray = [\n  \"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\",\n  \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\",\n  \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\",\n  \"stringifier\", \"typedef\",                     // ArgumentNameKeyword except\n                                                // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar atomArray = [\n  \"true\", \"false\",                              // BooleanLiteral\n  \"Infinity\", \"NaN\",                            // FloatLiteral\n  \"null\"                                        // Rest of ConstValue\n];\nvar atoms = wordRegexp(atomArray);\n\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\nvar startDefs = wordRegexp(startDefArray);\n\nvar endDefArray = [\"typedef\"];\nvar endDefs = wordRegexp(endDefArray);\n\nvar singleOperators = /^[:<=>?]/;\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\nvar strings = /^\"[^\"]*\"/;\nvar multilineComments = /^\\/\\*.*?\\*\\//;\nvar multilineCommentsStart = /^\\/\\*.*/;\nvar multilineCommentsEnd = /^.*?\\*\\//;\n\nfunction readToken(stream, state) {\n  // whitespace\n  if (stream.eatSpace()) return null;\n\n  // comment\n  if (state.inComment) {\n    if (stream.match(multilineCommentsEnd)) {\n      state.inComment = false;\n      return \"comment\";\n    }\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(multilineComments)) return \"comment\";\n  if (stream.match(multilineCommentsStart)) {\n    state.inComment = true;\n    return \"comment\";\n  }\n\n  // integer and float\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\n  }\n\n  // string\n  if (stream.match(strings)) return \"string\";\n\n  // identifier\n  if (state.startDef && stream.match(identifiers)) return \"def\";\n\n  if (state.endDef && stream.match(identifiersEnd)) {\n    state.endDef = false;\n    return \"def\";\n  }\n\n  if (stream.match(keywords)) return \"keyword\";\n\n  if (stream.match(types)) {\n    var lastToken = state.lastToken;\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n    if (lastToken === \":\" || lastToken === \"implements\" ||\n        nextToken === \"implements\" || nextToken === \"=\") {\n      // Used as identifier\n      return \"builtin\";\n    } else {\n      // Used as type\n      return \"type\";\n    }\n  }\n\n  if (stream.match(builtins)) return \"builtin\";\n  if (stream.match(atoms)) return \"atom\";\n  if (stream.match(identifiers)) return \"variable\";\n\n  // other\n  if (stream.match(singleOperators)) return \"operator\";\n\n  // unrecognized\n  stream.next();\n  return null;\n};\n\nexport const webIDL = {\n  startState: function() {\n    return {\n      // Is in multiline comment\n      inComment: false,\n      // Last non-whitespace, matched token\n      lastToken: \"\",\n      // Next token is a definition\n      startDef: false,\n      // Last token of the statement is a definition\n      endDef: false\n    };\n  },\n  token: function(stream, state) {\n    var style = readToken(stream, state);\n\n    if (style) {\n      var cur = stream.current();\n      state.lastToken = cur;\n      if (style === \"keyword\") {\n        state.startDef = startDefs.test(cur);\n        state.endDef = state.endDef || endDefs.test(cur);\n      } else {\n        state.startDef = false;\n      }\n    }\n\n    return style;\n  },\n\n  languageData: {\n    autocomplete: builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}