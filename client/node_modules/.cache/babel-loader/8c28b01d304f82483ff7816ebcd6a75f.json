{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Token} Token\n */\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n/** @type {HtmlExtension} */\n\nexport const gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n};\n/** @type {Handle} */\n\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n/** @type {Handle} */\n\n\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n/** @type {Handle} */\n\n\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string} [protocol]\n * @returns {void}\n */\n\n\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}","map":{"version":3,"names":["sanitizeUri","gfmAutolinkLiteralHtml","exit","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","token","anchorFromToken","call","protocol","url","sliceSerialize","tag","raw","encode"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-extension-gfm-autolink-literal/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Token} Token\n */\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n/** @type {HtmlExtension} */\n\nexport const gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n}\n/** @type {Handle} */\n\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token)\n}\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string} [protocol]\n * @returns {void}\n */\n\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token)\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\n  this.raw(this.encode(url))\n  this.tag('</a>')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,WAAR,QAA0B,6BAA1B;AACA;;AAEA,OAAO,MAAMC,sBAAsB,GAAG;EACpCC,IAAI,EAAE;IACJC,oBADI;IAEJC,mBAFI;IAGJC;EAHI;AAD8B,CAA/B;AAOP;;AAEA,SAASA,kBAAT,CAA4BC,KAA5B,EAAmC;EACjCC,eAAe,CAACC,IAAhB,CAAqB,IAArB,EAA2BF,KAA3B,EAAkC,SAAlC;AACD;AACD;;;AAEA,SAASH,oBAAT,CAA8BG,KAA9B,EAAqC;EACnCC,eAAe,CAACC,IAAhB,CAAqB,IAArB,EAA2BF,KAA3B,EAAkC,SAAlC;AACD;AACD;;;AAEA,SAASF,mBAAT,CAA6BE,KAA7B,EAAoC;EAClCC,eAAe,CAACC,IAAhB,CAAqB,IAArB,EAA2BF,KAA3B;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,eAAT,CAAyBD,KAAzB,EAAgCG,QAAhC,EAA0C;EACxC,MAAMC,GAAG,GAAG,KAAKC,cAAL,CAAoBL,KAApB,CAAZ;EACA,KAAKM,GAAL,CAAS,cAAcZ,WAAW,CAAC,CAACS,QAAQ,IAAI,EAAb,IAAmBC,GAApB,CAAzB,GAAoD,IAA7D;EACA,KAAKG,GAAL,CAAS,KAAKC,MAAL,CAAYJ,GAAZ,CAAT;EACA,KAAKE,GAAL,CAAS,MAAT;AACD"},"metadata":{},"sourceType":"module"}