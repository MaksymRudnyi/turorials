{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { text, string } from './initialize/text.js';\nimport { createTokenizer } from './create-tokenizer.js';\nimport * as defaultConstructs from './constructs.js';\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions( // @ts-expect-error Same as above.\n  [defaultConstructs].concat(options.extensions || []));\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","map":{"version":3,"names":["combineExtensions","content","document","flow","text","string","createTokenizer","defaultConstructs","parse","options","constructs","concat","extensions","parser","defined","lazy","create","initial","creator","from"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark/lib/parse.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,iBAAR,QAAgC,mCAAhC;AACA,SAAQC,OAAR,QAAsB,yBAAtB;AACA,SAAQC,QAAR,QAAuB,0BAAvB;AACA,SAAQC,IAAR,QAAmB,sBAAnB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,sBAA3B;AACA,SAAQC,eAAR,QAA8B,uBAA9B;AACA,OAAO,KAAKC,iBAAZ,MAAmC,iBAAnC;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,KAAT,GAA6B;EAAA,IAAdC,OAAc,uEAAJ,EAAI;;EAClC;EACA;EACA,MAAMC,UAAU,GAAGV,iBAAiB,EAClC;EACA,CAACO,iBAAD,EAAoBI,MAApB,CAA2BF,OAAO,CAACG,UAAR,IAAsB,EAAjD,CAFkC,CAApC;EAIA;;EAEA,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE,EADI;IAEbC,IAAI,EAAE,EAFO;IAGbL,UAHa;IAIbT,OAAO,EAAEe,MAAM,CAACf,OAAD,CAJF;IAKbC,QAAQ,EAAEc,MAAM,CAACd,QAAD,CALH;IAMbC,IAAI,EAAEa,MAAM,CAACb,IAAD,CANC;IAObE,MAAM,EAAEW,MAAM,CAACX,MAAD,CAPD;IAQbD,IAAI,EAAEY,MAAM,CAACZ,IAAD;EARC,CAAf;EAUA,OAAOS,MAAP;EACA;AACF;AACA;;EAEE,SAASG,MAAT,CAAgBC,OAAhB,EAAyB;IACvB,OAAOC,OAAP;IACA;;IAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;MACrB,OAAOb,eAAe,CAACO,MAAD,EAASI,OAAT,EAAkBE,IAAlB,CAAtB;IACD;EACF;AACF"},"metadata":{},"sourceType":"module"}