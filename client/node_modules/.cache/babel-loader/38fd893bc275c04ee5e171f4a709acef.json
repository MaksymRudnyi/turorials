{"ast":null,"code":"function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n} // builtin funcs taken from trunk revision 1303237\n\n\nvar pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \" + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \" + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \" + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \" + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \" + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \" + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \" + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \" + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \" + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \"; // taken from QueryLexer.g\n\nvar pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \" + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \" + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \" + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \" + \"NEQ MATCHES TRUE FALSE DUMP\"; // data types\n\nvar pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\nvar builtins = words(pBuiltins),\n    keywords = words(pKeywords),\n    types = words(pTypes);\nvar isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenComment(stream, state) {\n  var isEnd = false;\n  var ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"/\" && isEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    isEnd = ch == \"*\";\n  }\n\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end || !escaped) state.tokenize = tokenBase;\n    return \"error\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next(); // is a start of string?\n\n  if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch)); // is it one of the special chars\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) return null; // is it a number?\n  else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } // multi line comment or operator\n  else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  } // single line comment or operator\n  else if (ch == \"-\") {\n    if (stream.eat(\"-\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  } // is it an operator\n  else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  } else {\n    // get the while word\n    stream.eatWhile(/[\\w\\$_]/); // is it one of the listed keywords?\n\n    if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n      //keywords can be used as variables like flatten(group), group.$0 etc..\n      if (!stream.eat(\")\") && !stream.eat(\".\")) return \"keyword\";\n    } // is it one of the builtin functions?\n\n\n    if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) return \"builtin\"; // is it one of the listed types?\n\n    if (types && types.propertyIsEnumerable(stream.current().toUpperCase())) return \"type\"; // default is a 'variable'\n\n    return \"variable\";\n  }\n} // Interface\n\n\nexport const pig = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      startOfLine: true\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    autocomplete: (pBuiltins + pTypes + pKeywords).split(\" \")\n  }\n};","map":{"version":3,"names":["words","str","obj","split","i","length","pBuiltins","pKeywords","pTypes","builtins","keywords","types","isOperatorChar","chain","stream","state","f","tokenize","tokenComment","isEnd","ch","next","tokenBase","tokenString","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","pig","startState","startOfLine","token","eatSpace","style","languageData","autocomplete"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/pig.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\n// builtin funcs taken from trunk revision 1303237\nvar pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n// taken from QueryLexer.g\nvar pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n// data types\nvar pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\nvar builtins = words(pBuiltins), keywords = words(pKeywords), types = words(pTypes)\n\nvar isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenComment(stream, state) {\n  var isEnd = false;\n  var ch;\n  while(ch = stream.next()) {\n    if(ch == \"/\" && isEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    isEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped)\n      state.tokenize = tokenBase;\n    return \"error\";\n  };\n}\n\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  // is a start of string?\n  if (ch == '\"' || ch == \"'\")\n    return chain(stream, state, tokenString(ch));\n  // is it one of the special chars\n  else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n    return null;\n  // is it a number?\n  else if(/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment or operator\n  else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    }\n    else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  }\n  // single line comment or operator\n  else if (ch==\"-\") {\n    if(stream.eat(\"-\")){\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  }\n  // is it an operator\n  else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  else {\n    // get the while word\n    stream.eatWhile(/[\\w\\$_]/);\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n      //keywords can be used as variables like flatten(group), group.$0 etc..\n      if (!stream.eat(\")\") && !stream.eat(\".\"))\n        return \"keyword\";\n    }\n    // is it one of the builtin functions?\n    if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n      return \"builtin\";\n    // is it one of the listed types?\n    if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n      return \"type\";\n    // default is a 'variable'\n    return \"variable\";\n  }\n}\n\n// Interface\nexport const pig = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    if(stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n\n  languageData: {\n    autocomplete: (pBuiltins + pTypes + pKeywords).split(\" \")\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}