{"ast":null,"code":"/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {\n    includeImageAlt = true\n  } = options || {};\n  return one(node, includeImageAlt);\n}\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\n\nfunction one(node, includeImageAlt) {\n  return node && typeof node === 'object' && ( // @ts-ignore looks like a literal.\n  node.value || ( // @ts-ignore looks like an image.\n  includeImageAlt ? node.alt : '') || // @ts-ignore looks like a parent.\n  'children' in node && all(node.children, includeImageAlt) || Array.isArray(node) && all(node, includeImageAlt)) || '';\n}\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\n\n\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = [];\n  var index = -1;\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n\n  return result.join('');\n}","map":{"version":3,"names":["toString","node","options","includeImageAlt","one","value","alt","all","children","Array","isArray","values","result","index","length","join"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/mdast-util-to-string/index.js"],"sourcesContent":["/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiC;EACtC,IAAI;IAACC,eAAe,GAAG;EAAnB,IAA2BD,OAAO,IAAI,EAA1C;EACA,OAAOE,GAAG,CAACH,IAAD,EAAOE,eAAP,CAAV;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,SAASC,GAAT,CAAaH,IAAb,EAAmBE,eAAnB,EAAoC;EAClC,OACGF,IAAI,IACH,OAAOA,IAAP,KAAgB,QADjB,MAEC;EACCA,IAAI,CAACI,KAAL,MACC;EACCF,eAAe,GAAGF,IAAI,CAACK,GAAR,GAAc,EAF/B,KAGC;EACC,cAAcL,IAAd,IAAsBM,GAAG,CAACN,IAAI,CAACO,QAAN,EAAgBL,eAAhB,CAJ3B,IAKEM,KAAK,CAACC,OAAN,CAAcT,IAAd,KAAuBM,GAAG,CAACN,IAAD,EAAOE,eAAP,CAR9B,CAAD,IASA,EAVF;AAYD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASI,GAAT,CAAaI,MAAb,EAAqBR,eAArB,EAAsC;EACpC;EACA,IAAIS,MAAM,GAAG,EAAb;EACA,IAAIC,KAAK,GAAG,CAAC,CAAb;;EAEA,OAAO,EAAEA,KAAF,GAAUF,MAAM,CAACG,MAAxB,EAAgC;IAC9BF,MAAM,CAACC,KAAD,CAAN,GAAgBT,GAAG,CAACO,MAAM,CAACE,KAAD,CAAP,EAAgBV,eAAhB,CAAnB;EACD;;EAED,OAAOS,MAAM,CAACG,IAAP,CAAY,EAAZ,CAAP;AACD"},"metadata":{},"sourceType":"module"}