{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nexport function reducer(state, action) {\n  return _extends({}, state, action);\n}\nexport var EditorContext = /*#__PURE__*/React.createContext({\n  markdown: ''\n});","map":{"version":3,"sources":["../src/Context.tsx"],"names":["EditorContext","markdown"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AA+BA,OAAO,SAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EAA4D;EACjE,OAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,MAAA,CAAA;AACD;AAED,OAAO,IAAMA,aAAa,GAAA,aAAG,KAAK,CAAL,aAAA,CAAkC;EAAEC,QAAQ,EAAE;AAAZ,CAAlC,CAAtB","sourcesContent":["import React from 'react';\nimport { ICommand, TextAreaCommandOrchestrator } from './commands';\nimport { MDEditorProps } from './Editor';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport type ContextStore = {\n  components?: MDEditorProps['components'];\n  commands?: ICommand<string>[];\n  extraCommands?: ICommand<string>[];\n  markdown?: string;\n  preview?: PreviewType;\n  height?: React.CSSProperties['height'];\n  fullscreen?: boolean;\n  highlightEnable?: boolean;\n  autoFocus?: boolean;\n  textarea?: HTMLTextAreaElement;\n  commandOrchestrator?: TextAreaCommandOrchestrator;\n  textareaWarp?: HTMLDivElement;\n  textareaPre?: HTMLPreElement;\n  container?: HTMLDivElement | null;\n  dispatch?: React.Dispatch<ContextStore>;\n  barPopup?: Record<string, boolean>;\n  scrollTop?: number;\n  scrollTopPreview?: number;\n  tabSize?: number;\n  defaultTabEnable?: boolean;\n};\n\nexport type ExecuteCommandState = Pick<ContextStore, 'fullscreen' | 'preview' | 'highlightEnable'>;\n\nexport function reducer(state: ContextStore, action: ContextStore) {\n  return { ...state, ...action };\n}\n\nexport const EditorContext = React.createContext<ContextStore>({ markdown: '' });\n"]},"metadata":{},"sourceType":"module"}