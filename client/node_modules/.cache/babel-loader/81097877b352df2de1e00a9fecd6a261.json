{"ast":null,"code":"function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nvar keywords = words(\"absolute and array asm begin case const constructor destructor div do \" + \"downto else end file for function goto if implementation in inherited \" + \"inline interface label mod nil not object of operator or packed procedure \" + \"program record reintroduce repeat self set shl shr string then to type \" + \"unit until uses var while with xor as class dispinterface except exports \" + \"finalization finally initialization inline is library on out packed \" + \"property raise resourcestring threadvar try absolute abstract alias \" + \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" + \"dynamic enumerator experimental export external far far16 forward generic \" + \"helper implements index interrupt iocheck local message name near \" + \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" + \"pascal platform private protected public published read register \" + \"reintroduce result safecall saveregisters softfloat specialize static \" + \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\n  \"null\": true\n};\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n\n    maybeEnd = ch == \"*\";\n  }\n\n  return \"comment\";\n}\n\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n\n  return \"comment\";\n} // Interface\n\n\nexport const pascal = {\n  startState: function () {\n    return {\n      tokenize: null\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      block: {\n        open: \"(*\",\n        close: \"*)\"\n      }\n    }\n  }\n};","map":{"version":3,"names":["words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","pascal","startState","token","eatSpace","style","languageData","indentOnInput","commentTokens","block","open","close"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/pascal.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\"null\": true};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport const pascal = {\n  startState: function() {\n    return {tokenize: null};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}