{"ast":null,"code":"// @ts-nocheck\nimport refractorJavascript from './javascript.js';\ncoffeescript.displayName = 'coffeescript';\ncoffeescript.aliases = ['coffee'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function coffeescript(Prism) {\n  Prism.register(refractorJavascript);\n\n  (function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/;\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    };\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [// Strings are multiline\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true\n      }, {\n        // Strings are multiline\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }],\n      keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    });\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    });\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [{\n        pattern: /'''[\\s\\S]*?'''/,\n        greedy: true,\n        alias: 'string'\n      }, {\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: interpolation\n        }\n      }]\n    });\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    });\n    delete Prism.languages.coffeescript['template-string'];\n    Prism.languages.coffee = Prism.languages.coffeescript;\n  })(Prism);\n}","map":{"version":3,"names":["refractorJavascript","coffeescript","displayName","aliases","Prism","register","comment","interpolation","pattern","alias","languages","extend","string","greedy","inside","keyword","insertBefore","delimiter","script","javascript","property","coffee"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/coffeescript.js"],"sourcesContent":["// @ts-nocheck\nimport refractorJavascript from './javascript.js'\ncoffeescript.displayName = 'coffeescript'\ncoffeescript.aliases = ['coffee']\n\n/** @type {import('../core.js').Syntax} */\nexport default function coffeescript(Prism) {\n  Prism.register(refractorJavascript)\n  ;(function (Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      alias: 'variable'\n    }\n    Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n      comment: comment,\n      string: [\n        // Strings are multiline\n        {\n          pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n          greedy: true\n        },\n        {\n          // Strings are multiline\n          pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ],\n      keyword:\n        /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n      'class-member': {\n        pattern: /@(?!\\d)\\w+/,\n        alias: 'variable'\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'comment', {\n      'multiline-comment': {\n        pattern: /###[\\s\\S]+?###/,\n        alias: 'comment'\n      },\n      // Block regexp can contain comments and interpolation\n      'block-regex': {\n        pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n        alias: 'regex',\n        inside: {\n          comment: comment,\n          interpolation: interpolation\n        }\n      }\n    })\n    Prism.languages.insertBefore('coffeescript', 'string', {\n      'inline-javascript': {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        inside: {\n          delimiter: {\n            pattern: /^`|`$/,\n            alias: 'punctuation'\n          },\n          script: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-javascript',\n            inside: Prism.languages.javascript\n          }\n        }\n      },\n      // Block strings\n      'multiline-string': [\n        {\n          pattern: /'''[\\s\\S]*?'''/,\n          greedy: true,\n          alias: 'string'\n        },\n        {\n          pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            interpolation: interpolation\n          }\n        }\n      ]\n    })\n    Prism.languages.insertBefore('coffeescript', 'keyword', {\n      // Object property\n      property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    })\n    delete Prism.languages.coffeescript['template-string']\n    Prism.languages.coffee = Prism.languages.coffeescript\n  })(Prism)\n}\n"],"mappings":"AAAA;AACA,OAAOA,mBAAP,MAAgC,iBAAhC;AACAC,YAAY,CAACC,WAAb,GAA2B,cAA3B;AACAD,YAAY,CAACE,OAAb,GAAuB,CAAC,QAAD,CAAvB;AAEA;;AACA,eAAe,SAASF,YAAT,CAAsBG,KAAtB,EAA6B;EAC1CA,KAAK,CAACC,QAAN,CAAeL,mBAAf;;EACC,CAAC,UAAUI,KAAV,EAAiB;IACjB;IACA,IAAIE,OAAO,GAAG,WAAd;IACA,IAAIC,aAAa,GAAG;MAClBC,OAAO,EAAE,YADS;MAElBC,KAAK,EAAE;IAFW,CAApB;IAIAL,KAAK,CAACM,SAAN,CAAgBT,YAAhB,GAA+BG,KAAK,CAACM,SAAN,CAAgBC,MAAhB,CAAuB,YAAvB,EAAqC;MAClEL,OAAO,EAAEA,OADyD;MAElEM,MAAM,EAAE,CACN;MACA;QACEJ,OAAO,EAAE,wBADX;QAEEK,MAAM,EAAE;MAFV,CAFM,EAMN;QACE;QACAL,OAAO,EAAE,wBAFX;QAGEK,MAAM,EAAE,IAHV;QAIEC,MAAM,EAAE;UACNP,aAAa,EAAEA;QADT;MAJV,CANM,CAF0D;MAiBlEQ,OAAO,EACL,kSAlBgE;MAmBlE,gBAAgB;QACdP,OAAO,EAAE,YADK;QAEdC,KAAK,EAAE;MAFO;IAnBkD,CAArC,CAA/B;IAwBAL,KAAK,CAACM,SAAN,CAAgBM,YAAhB,CAA6B,cAA7B,EAA6C,SAA7C,EAAwD;MACtD,qBAAqB;QACnBR,OAAO,EAAE,gBADU;QAEnBC,KAAK,EAAE;MAFY,CADiC;MAKtD;MACA,eAAe;QACbD,OAAO,EAAE,oBADI;QAEbC,KAAK,EAAE,OAFM;QAGbK,MAAM,EAAE;UACNR,OAAO,EAAEA,OADH;UAENC,aAAa,EAAEA;QAFT;MAHK;IANuC,CAAxD;IAeAH,KAAK,CAACM,SAAN,CAAgBM,YAAhB,CAA6B,cAA7B,EAA6C,QAA7C,EAAuD;MACrD,qBAAqB;QACnBR,OAAO,EAAE,wBADU;QAEnBM,MAAM,EAAE;UACNG,SAAS,EAAE;YACTT,OAAO,EAAE,OADA;YAETC,KAAK,EAAE;UAFE,CADL;UAKNS,MAAM,EAAE;YACNV,OAAO,EAAE,SADH;YAENC,KAAK,EAAE,qBAFD;YAGNK,MAAM,EAAEV,KAAK,CAACM,SAAN,CAAgBS;UAHlB;QALF;MAFW,CADgC;MAerD;MACA,oBAAoB,CAClB;QACEX,OAAO,EAAE,gBADX;QAEEK,MAAM,EAAE,IAFV;QAGEJ,KAAK,EAAE;MAHT,CADkB,EAMlB;QACED,OAAO,EAAE,gBADX;QAEEK,MAAM,EAAE,IAFV;QAGEJ,KAAK,EAAE,QAHT;QAIEK,MAAM,EAAE;UACNP,aAAa,EAAEA;QADT;MAJV,CANkB;IAhBiC,CAAvD;IAgCAH,KAAK,CAACM,SAAN,CAAgBM,YAAhB,CAA6B,cAA7B,EAA6C,SAA7C,EAAwD;MACtD;MACAI,QAAQ,EAAE;IAF4C,CAAxD;IAIA,OAAOhB,KAAK,CAACM,SAAN,CAAgBT,YAAhB,CAA6B,iBAA7B,CAAP;IACAG,KAAK,CAACM,SAAN,CAAgBW,MAAhB,GAAyBjB,KAAK,CAACM,SAAN,CAAgBT,YAAzC;EACD,CApFA,EAoFEG,KApFF;AAqFF"},"metadata":{},"sourceType":"module"}