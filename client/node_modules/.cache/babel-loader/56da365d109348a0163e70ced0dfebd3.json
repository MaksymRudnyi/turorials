{"ast":null,"code":"/*\n  Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n  by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n*/\nvar EventEmitter = require('events').EventEmitter,\n    inherits = require('util').inherits;\n\nfunction jsmemcmp(buf1, pos1, buf2, pos2, num) {\n  for (var i = 0; i < num; ++i, ++pos1, ++pos2) if (buf1[pos1] !== buf2[pos2]) return false;\n\n  return true;\n}\n\nfunction SBMH(needle) {\n  if (typeof needle === 'string') needle = new Buffer(needle);\n  var i,\n      j,\n      needle_len = needle.length;\n  this.maxMatches = Infinity;\n  this.matches = 0;\n  this._occ = new Array(256);\n  this._lookbehind_size = 0;\n  this._needle = needle;\n  this._bufpos = 0;\n  this._lookbehind = new Buffer(needle_len); // Initialize occurrence table.\n\n  for (j = 0; j < 256; ++j) this._occ[j] = needle_len; // Populate occurrence table with analysis of the needle,\n  // ignoring last letter.\n\n\n  if (needle_len >= 1) {\n    for (i = 0; i < needle_len - 1; ++i) this._occ[needle[i]] = needle_len - 1 - i;\n  }\n}\n\ninherits(SBMH, EventEmitter);\n\nSBMH.prototype.reset = function () {\n  this._lookbehind_size = 0;\n  this.matches = 0;\n  this._bufpos = 0;\n};\n\nSBMH.prototype.push = function (chunk, pos) {\n  var r, chlen;\n  if (!Buffer.isBuffer(chunk)) chunk = new Buffer(chunk, 'binary');\n  chlen = chunk.length;\n  this._bufpos = pos || 0;\n\n  while (r !== chlen && this.matches < this.maxMatches) r = this._sbmh_feed(chunk);\n\n  return r;\n};\n\nSBMH.prototype._sbmh_feed = function (data) {\n  var len = data.length,\n      needle = this._needle,\n      needle_len = needle.length; // Positive: points to a position in `data`\n  //           pos == 3 points to data[3]\n  // Negative: points to a position in the lookbehind buffer\n  //           pos == -2 points to lookbehind[lookbehind_size - 2]\n\n  var pos = -this._lookbehind_size,\n      last_needle_char = needle[needle_len - 1],\n      occ = this._occ,\n      lookbehind = this._lookbehind;\n\n  if (pos < 0) {\n    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool\n    // search with character lookup code that considers both the\n    // lookbehind buffer and the current round's haystack data.\n    //\n    // Loop until\n    //   there is a match.\n    // or until\n    //   we've moved past the position that requires the\n    //   lookbehind buffer. In this case we switch to the\n    //   optimized loop.\n    // or until\n    //   the character to look at lies outside the haystack.\n    while (pos < 0 && pos <= len - needle_len) {\n      var ch = this._sbmh_lookup_char(data, pos + needle_len - 1);\n\n      if (ch === last_needle_char && this._sbmh_memcmp(data, pos, needle_len - 1)) {\n        this._lookbehind_size = 0;\n        ++this.matches;\n        if (pos > -this._lookbehind_size) this.emit('info', true, lookbehind, 0, this._lookbehind_size + pos);else this.emit('info', true);\n        this._bufpos = pos + needle_len;\n        return pos + needle_len;\n      } else pos += occ[ch];\n    } // No match.\n\n\n    if (pos < 0) {\n      // There's too few data for Boyer-Moore-Horspool to run,\n      // so let's use a different algorithm to skip as much as\n      // we can.\n      // Forward pos until\n      //   the trailing part of lookbehind + data\n      //   looks like the beginning of the needle\n      // or until\n      //   pos == 0\n      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) pos++;\n    }\n\n    if (pos >= 0) {\n      // Discard lookbehind buffer.\n      this.emit('info', false, lookbehind, 0, this._lookbehind_size);\n      this._lookbehind_size = 0;\n    } else {\n      // Cut off part of the lookbehind buffer that has\n      // been processed and append the entire haystack\n      // into it.\n      var bytesToCutOff = this._lookbehind_size + pos;\n\n      if (bytesToCutOff > 0) {\n        // The cut off data is guaranteed not to contain the needle.\n        this.emit('info', false, lookbehind, 0, bytesToCutOff);\n      }\n\n      lookbehind.copy(lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);\n      this._lookbehind_size -= bytesToCutOff;\n      data.copy(lookbehind, this._lookbehind_size);\n      this._lookbehind_size += len;\n      this._bufpos = len;\n      return len;\n    }\n  }\n\n  if (pos >= 0) pos += this._bufpos; // Lookbehind buffer is now empty. Perform Boyer-Moore-Horspool\n  // search with optimized character lookup code that only considers\n  // the current round's haystack data.\n\n  while (pos <= len - needle_len) {\n    var ch = data[pos + needle_len - 1];\n\n    if (ch === last_needle_char && data[pos] === needle[0] && jsmemcmp(needle, 0, data, pos, needle_len - 1)) {\n      ++this.matches;\n      if (pos > 0) this.emit('info', true, data, this._bufpos, pos);else this.emit('info', true);\n      this._bufpos = pos + needle_len;\n      return pos + needle_len;\n    } else pos += occ[ch];\n  } // There was no match. If there's trailing haystack data that we cannot\n  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing\n  // data is less than the needle size) then match using a modified\n  // algorithm that starts matching from the beginning instead of the end.\n  // Whatever trailing data is left after running this algorithm is added to\n  // the lookbehind buffer.\n\n\n  if (pos < len) {\n    while (pos < len && (data[pos] !== needle[0] || !jsmemcmp(data, pos, needle, 0, len - pos))) {\n      ++pos;\n    }\n\n    if (pos < len) {\n      data.copy(lookbehind, 0, pos, pos + (len - pos));\n      this._lookbehind_size = len - pos;\n    }\n  } // Everything until pos is guaranteed not to contain needle data.\n\n\n  if (pos > 0) this.emit('info', false, data, this._bufpos, pos < len ? pos : len);\n  this._bufpos = len;\n  return len;\n};\n\nSBMH.prototype._sbmh_lookup_char = function (data, pos) {\n  if (pos < 0) return this._lookbehind[this._lookbehind_size + pos];else return data[pos];\n};\n\nSBMH.prototype._sbmh_memcmp = function (data, pos, len) {\n  var i = 0;\n\n  while (i < len) {\n    if (this._sbmh_lookup_char(data, pos + i) === this._needle[i]) ++i;else return false;\n  }\n\n  return true;\n};\n\nmodule.exports = SBMH;","map":{"version":3,"names":["EventEmitter","require","inherits","jsmemcmp","buf1","pos1","buf2","pos2","num","i","SBMH","needle","Buffer","j","needle_len","length","maxMatches","Infinity","matches","_occ","Array","_lookbehind_size","_needle","_bufpos","_lookbehind","prototype","reset","push","chunk","pos","r","chlen","isBuffer","_sbmh_feed","data","len","last_needle_char","occ","lookbehind","ch","_sbmh_lookup_char","_sbmh_memcmp","emit","bytesToCutOff","copy","module","exports"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/streamsearch/lib/sbmh.js"],"sourcesContent":["/*\n  Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n  by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n*/\nvar EventEmitter = require('events').EventEmitter,\n    inherits = require('util').inherits;\n\nfunction jsmemcmp(buf1, pos1, buf2, pos2, num) {\n  for (var i = 0; i < num; ++i, ++pos1, ++pos2)\n    if (buf1[pos1] !== buf2[pos2])\n      return false;\n  return true;\n}\n\nfunction SBMH(needle) {\n  if (typeof needle === 'string')\n    needle = new Buffer(needle);\n  var i, j, needle_len = needle.length;\n\n  this.maxMatches = Infinity;\n  this.matches = 0;\n\n  this._occ = new Array(256);\n  this._lookbehind_size = 0;\n  this._needle = needle;\n  this._bufpos = 0;\n\n  this._lookbehind = new Buffer(needle_len);\n\n  // Initialize occurrence table.\n  for (j = 0; j < 256; ++j)\n    this._occ[j] = needle_len;\n\n  // Populate occurrence table with analysis of the needle,\n  // ignoring last letter.\n  if (needle_len >= 1) {\n    for (i = 0; i < needle_len - 1; ++i)\n      this._occ[needle[i]] = needle_len - 1 - i;\n  }\n}\ninherits(SBMH, EventEmitter);\n\nSBMH.prototype.reset = function() {\n  this._lookbehind_size = 0;\n  this.matches = 0;\n  this._bufpos = 0;\n};\n\nSBMH.prototype.push = function(chunk, pos) {\n  var r, chlen;\n  if (!Buffer.isBuffer(chunk))\n    chunk = new Buffer(chunk, 'binary');\n  chlen = chunk.length;\n  this._bufpos = pos || 0;\n  while (r !== chlen && this.matches < this.maxMatches)\n    r = this._sbmh_feed(chunk);\n  return r;\n};\n\nSBMH.prototype._sbmh_feed = function(data) {\n  var len = data.length, needle = this._needle, needle_len = needle.length;\n\n  // Positive: points to a position in `data`\n  //           pos == 3 points to data[3]\n  // Negative: points to a position in the lookbehind buffer\n  //           pos == -2 points to lookbehind[lookbehind_size - 2]\n  var pos = -this._lookbehind_size,\n      last_needle_char = needle[needle_len - 1],\n      occ = this._occ,\n      lookbehind = this._lookbehind;\n\n  if (pos < 0) {\n    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool\n    // search with character lookup code that considers both the\n    // lookbehind buffer and the current round's haystack data.\n    //\n    // Loop until\n    //   there is a match.\n    // or until\n    //   we've moved past the position that requires the\n    //   lookbehind buffer. In this case we switch to the\n    //   optimized loop.\n    // or until\n    //   the character to look at lies outside the haystack.\n    while (pos < 0 && pos <= len - needle_len) {\n       var ch = this._sbmh_lookup_char(data, pos + needle_len - 1);\n\n      if (ch === last_needle_char\n          && this._sbmh_memcmp(data, pos, needle_len - 1)) {\n        this._lookbehind_size = 0;\n        ++this.matches;\n        if (pos > -this._lookbehind_size)\n          this.emit('info', true, lookbehind, 0, this._lookbehind_size + pos);\n        else\n          this.emit('info', true);\n\n        this._bufpos = pos + needle_len;\n        return pos + needle_len;\n      } else\n        pos += occ[ch];\n    }\n\n    // No match.\n\n    if (pos < 0) {\n      // There's too few data for Boyer-Moore-Horspool to run,\n      // so let's use a different algorithm to skip as much as\n      // we can.\n      // Forward pos until\n      //   the trailing part of lookbehind + data\n      //   looks like the beginning of the needle\n      // or until\n      //   pos == 0\n      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos))\n        pos++;\n    }\n\n    if (pos >= 0) {\n      // Discard lookbehind buffer.\n      this.emit('info', false, lookbehind, 0, this._lookbehind_size);\n      this._lookbehind_size = 0;\n    } else {\n      // Cut off part of the lookbehind buffer that has\n      // been processed and append the entire haystack\n      // into it.\n      var bytesToCutOff = this._lookbehind_size + pos;\n\n      if (bytesToCutOff > 0) {\n        // The cut off data is guaranteed not to contain the needle.\n        this.emit('info', false, lookbehind, 0, bytesToCutOff);\n      }\n\n      lookbehind.copy(lookbehind, 0, bytesToCutOff,\n                      this._lookbehind_size - bytesToCutOff);\n      this._lookbehind_size -= bytesToCutOff;\n\n      data.copy(lookbehind, this._lookbehind_size);\n      this._lookbehind_size += len;\n\n      this._bufpos = len;\n      return len;\n    }\n  }\n\n  if (pos >= 0)\n    pos += this._bufpos;\n\n  // Lookbehind buffer is now empty. Perform Boyer-Moore-Horspool\n  // search with optimized character lookup code that only considers\n  // the current round's haystack data.\n  while (pos <= len - needle_len) {\n    var ch = data[pos + needle_len - 1];\n\n    if (ch === last_needle_char\n        && data[pos] === needle[0]\n        && jsmemcmp(needle, 0, data, pos, needle_len - 1)) {\n      ++this.matches;\n      if (pos > 0)\n        this.emit('info', true, data, this._bufpos, pos);\n      else\n        this.emit('info', true);\n\n      this._bufpos = pos + needle_len;\n      return pos + needle_len;\n    } else\n      pos += occ[ch];\n  }\n\n  // There was no match. If there's trailing haystack data that we cannot\n  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing\n  // data is less than the needle size) then match using a modified\n  // algorithm that starts matching from the beginning instead of the end.\n  // Whatever trailing data is left after running this algorithm is added to\n  // the lookbehind buffer.\n  if (pos < len) {\n    while (pos < len && (data[pos] !== needle[0]\n                         || !jsmemcmp(data, pos, needle, 0, len - pos))) {\n      ++pos;\n    }\n    if (pos < len) {\n      data.copy(lookbehind, 0, pos, pos + (len - pos));\n      this._lookbehind_size = len - pos;\n    }\n  }\n\n  // Everything until pos is guaranteed not to contain needle data.\n  if (pos > 0)\n    this.emit('info', false, data, this._bufpos, pos < len ? pos : len);\n\n  this._bufpos = len;\n  return len;\n};\n\nSBMH.prototype._sbmh_lookup_char = function(data, pos) {\n  if (pos < 0)\n    return this._lookbehind[this._lookbehind_size + pos];\n  else\n    return data[pos];\n}\n\nSBMH.prototype._sbmh_memcmp = function(data, pos, len) {\n  var i = 0;\n\n  while (i < len) {\n    if (this._sbmh_lookup_char(data, pos + i) === this._needle[i])\n      ++i;\n    else\n      return false;\n  }\n  return true;\n}\n\nmodule.exports = SBMH;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}