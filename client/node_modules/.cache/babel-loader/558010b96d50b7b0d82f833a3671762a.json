{"ast":null,"code":"// Stores the words from the define method\nvar words = {}; // Taken, mostly, from the Puppet official variable standards regex\n\nvar variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/; // Takes a string of words separated by spaces and adds them as\n// keys with the value of the first argument 'style'\n\nfunction define(style, string) {\n  var split = string.split(' ');\n\n  for (var i = 0; i < split.length; i++) {\n    words[split[i]] = style;\n  }\n} // Takes commonly known puppet types/words and classifies them to a style\n\n\ndefine('keyword', 'class define site node include import inherits');\ndefine('keyword', 'case if else in and elsif default or');\ndefine('atom', 'false true running present absent file directory undef');\ndefine('builtin', 'action augeas burst chain computer cron destination dport exec ' + 'file filebucket group host icmp iniface interface jump k5login limit log_level ' + 'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' + 'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' + 'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' + 'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' + 'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' + 'resources router schedule scheduled_task selboolean selmodule service source ' + 'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' + 'user vlan yumrepo zfs zone zpool'); // After finding a start of a string ('|\") this function attempts to find the end;\n// If a variable is encountered along the way, we display it differently when it\n// is encapsulated in a double-quoted string.\n\nfunction tokenString(stream, state) {\n  var current,\n      prev,\n      found_var = false;\n\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n\n    prev = current;\n  }\n\n  if (found_var) {\n    stream.backUp(1);\n  }\n\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n\n  return \"string\";\n} // Main function\n\n\nfunction tokenize(stream, state) {\n  // Matches one whole word\n  var word = stream.match(/[\\w]+/, false); // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n\n  var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false); // Matches non-builtin resource declarations\n  // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n\n  var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false); // Matches virtual and exported resources (i.e. @@user { ; and the like)\n\n  var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false); // Finally advance the stream\n\n  var ch = stream.next(); // Have we found a variable?\n\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      // If so, and its in a string, assign it a different color\n      return state.continueString ? 'variableName.special' : 'variable';\n    } // Otherwise return an invalid variable\n\n\n    return \"error\";\n  } // Should we still be looking for the end of a string?\n\n\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  } // Are we in a definition (class, node, define)?\n\n\n  if (state.inDefinition) {\n    // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n    if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n      return 'def';\n    } // Match the rest it the next time around\n\n\n    stream.match(/\\s+{/);\n    state.inDefinition = false;\n  } // Are we in an 'include' statement?\n\n\n  if (state.inInclude) {\n    // Match and return the included class\n    stream.match(/(\\s+)?\\S+(\\s+)?/);\n    state.inInclude = false;\n    return 'def';\n  } // Do we just have a function on our hands?\n  // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n\n\n  if (stream.match(/(\\s+)?\\w+\\(/)) {\n    stream.backUp(1);\n    return 'def';\n  } // Have we matched the prior attribute regex?\n\n\n  if (attribute) {\n    stream.match(/(\\s+)?\\w+/);\n    return 'tag';\n  } // Do we have Puppet specific words?\n\n\n  if (word && words.hasOwnProperty(word)) {\n    // Negates the initial next()\n    stream.backUp(1); // rs move the stream\n\n    stream.match(/[\\w]+/); // We want to process these words differently\n    // do to the importance they have in Puppet\n\n    if (stream.match(/\\s+\\S+\\s+{/, false)) {\n      state.inDefinition = true;\n    }\n\n    if (word == 'include') {\n      state.inInclude = true;\n    } // Returns their value as state in the prior define methods\n\n\n    return words[word];\n  } // Is there a match on a reference?\n\n\n  if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n    // Negate the next()\n    stream.backUp(1); // Match the full reference\n\n    stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n    return 'def';\n  } // Have we matched the prior resource regex?\n\n\n  if (resource) {\n    stream.match(/(\\s+)?[\\w:_]+/);\n    return 'def';\n  } // Have we matched the prior special_resource regex?\n\n\n  if (special_resource) {\n    stream.match(/(\\s+)?[@]{1,2}/);\n    return 'atom';\n  } // Match all the comments. All of them.\n\n\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } // Have we found a string?\n\n\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch; // Perform the looping function to find the end\n\n    return tokenString(stream, state);\n  } // Match all the brackets\n\n\n  if (ch == '{' || ch == '}') {\n    return 'bracket';\n  } // Match characters that we are going to assume\n  // are trying to be regex\n\n\n  if (ch == '/') {\n    stream.match(/^[^\\/]*\\//);\n    return 'string.special';\n  } // Match all the numbers\n\n\n  if (ch.match(/[0-9]/)) {\n    stream.eatWhile(/[0-9]+/);\n    return 'number';\n  } // Match the '=' and '=>' operators\n\n\n  if (ch == '=') {\n    if (stream.peek() == '>') {\n      stream.next();\n    }\n\n    return \"operator\";\n  } // Keep advancing through all the rest\n\n\n  stream.eatWhile(/[\\w-]/); // Return a blank line for everything else\n\n  return null;\n} // Start it all\n\n\nexport const puppet = {\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    // Strip the spaces, but regex will account for them eitherway\n    if (stream.eatSpace()) return null; // Go through the main process\n\n    return tokenize(stream, state);\n  }\n};","map":{"version":3,"names":["words","variable_regex","define","style","string","split","i","length","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","word","match","attribute","resource","special_resource","ch","inDefinition","inInclude","hasOwnProperty","test","skipToEnd","eatWhile","peek","puppet","startState","token","eatSpace"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/puppet.js"],"sourcesContent":["// Stores the words from the define method\nvar words = {};\n// Taken, mostly, from the Puppet official variable standards regex\nvar variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;\n\n// Takes a string of words separated by spaces and adds them as\n// keys with the value of the first argument 'style'\nfunction define(style, string) {\n  var split = string.split(' ');\n  for (var i = 0; i < split.length; i++) {\n    words[split[i]] = style;\n  }\n}\n\n// Takes commonly known puppet types/words and classifies them to a style\ndefine('keyword', 'class define site node include import inherits');\ndefine('keyword', 'case if else in and elsif default or');\ndefine('atom', 'false true running present absent file directory undef');\ndefine('builtin', 'action augeas burst chain computer cron destination dport exec ' +\n       'file filebucket group host icmp iniface interface jump k5login limit log_level ' +\n       'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +\n       'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +\n       'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +\n       'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +\n       'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +\n       'resources router schedule scheduled_task selboolean selmodule service source ' +\n       'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +\n       'user vlan yumrepo zfs zone zpool');\n\n// After finding a start of a string ('|\") this function attempts to find the end;\n// If a variable is encountered along the way, we display it differently when it\n// is encapsulated in a double-quoted string.\nfunction tokenString(stream, state) {\n  var current, prev, found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\n\n// Main function\nfunction tokenize(stream, state) {\n  // Matches one whole word\n  var word = stream.match(/[\\w]+/, false);\n  // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n  var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false);\n  // Matches non-builtin resource declarations\n  // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n  var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false);\n  // Matches virtual and exported resources (i.e. @@user { ; and the like)\n  var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false);\n\n  // Finally advance the stream\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      // If so, and its in a string, assign it a different color\n      return state.continueString ? 'variableName.special' : 'variable';\n    }\n    // Otherwise return an invalid variable\n    return \"error\";\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Are we in a definition (class, node, define)?\n  if (state.inDefinition) {\n    // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n    if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n      return 'def';\n    }\n    // Match the rest it the next time around\n    stream.match(/\\s+{/);\n    state.inDefinition = false;\n  }\n  // Are we in an 'include' statement?\n  if (state.inInclude) {\n    // Match and return the included class\n    stream.match(/(\\s+)?\\S+(\\s+)?/);\n    state.inInclude = false;\n    return 'def';\n  }\n  // Do we just have a function on our hands?\n  // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  // Have we matched the prior attribute regex?\n  if (attribute) {\n    stream.match(/(\\s+)?\\w+/);\n    return 'tag';\n  }\n  // Do we have Puppet specific words?\n  if (word && words.hasOwnProperty(word)) {\n    // Negates the initial next()\n    stream.backUp(1);\n    // rs move the stream\n    stream.match(/[\\w]+/);\n    // We want to process these words differently\n    // do to the importance they have in Puppet\n    if (stream.match(/\\s+\\S+\\s+{/, false)) {\n      state.inDefinition = true;\n    }\n    if (word == 'include') {\n      state.inInclude = true;\n    }\n    // Returns their value as state in the prior define methods\n    return words[word];\n  }\n  // Is there a match on a reference?\n  if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n    // Negate the next()\n    stream.backUp(1);\n    // Match the full reference\n    stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n    return 'def';\n  }\n  // Have we matched the prior resource regex?\n  if (resource) {\n    stream.match(/(\\s+)?[\\w:_]+/);\n    return 'def';\n  }\n  // Have we matched the prior special_resource regex?\n  if (special_resource) {\n    stream.match(/(\\s+)?[@]{1,2}/);\n    return 'atom';\n  }\n  // Match all the comments. All of them.\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  // Match all the brackets\n  if (ch == '{' || ch == '}') {\n    return 'bracket';\n  }\n  // Match characters that we are going to assume\n  // are trying to be regex\n  if (ch == '/') {\n    stream.match(/^[^\\/]*\\//);\n    return 'string.special';\n  }\n  // Match all the numbers\n  if (ch.match(/[0-9]/)) {\n    stream.eatWhile(/[0-9]+/);\n    return 'number';\n  }\n  // Match the '=' and '=>' operators\n  if (ch == '=') {\n    if (stream.peek() == '>') {\n      stream.next();\n    }\n    return \"operator\";\n  }\n  // Keep advancing through all the rest\n  stream.eatWhile(/[\\w-]/);\n  // Return a blank line for everything else\n  return null;\n}\n// Start it all\nexport const puppet = {\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    // Strip the spaces, but regex will account for them eitherway\n    if (stream.eatSpace()) return null;\n    // Go through the main process\n    return tokenize(stream, state);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}