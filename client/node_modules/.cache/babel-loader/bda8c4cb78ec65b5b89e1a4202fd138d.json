{"ast":null,"code":"var ERRORCLASS = 'error';\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\nvar openingKeywords = ['class', 'module', 'sub', 'enum', 'select', 'while', 'if', 'function', 'get', 'set', 'property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else', 'elseif', 'case', 'catch', 'finally'];\nvar endKeywords = ['next', 'loop'];\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\nvar indentInfo = null;\n\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\n\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n} // tokenizers\n\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek(); // Handle Comments\n\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  } // Handle Number Literals\n\n\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false; // Floats\n\n    if (stream.match(/^\\d*\\.\\d+F?/i)) {\n      floatLiteral = true;\n    } else if (stream.match(/^\\d+\\.\\d*F?/)) {\n      floatLiteral = true;\n    } else if (stream.match(/^\\.\\d+F?/)) {\n      floatLiteral = true;\n    }\n\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    } // Integers\n\n\n    var intLiteral = false; // Hex\n\n    if (stream.match(/^&H[0-9a-f]+/i)) {\n      intLiteral = true;\n    } // Octal\n    else if (stream.match(/^&O[0-7]+/i)) {\n      intLiteral = true;\n    } // Decimal\n    else if (stream.match(/^[1-9]\\d*F?/)) {\n      // Decimal literals may be \"imaginary\"\n      stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n      intLiteral = true;\n    } // Zero by itself with no other piece of number.\n    else if (stream.match(/^0(?![\\dx])/i)) {\n      intLiteral = true;\n    }\n\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  } // Handle Strings\n\n\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  } // Handle operators and Delimiters\n\n\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n\n  if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {\n    return 'operator';\n  }\n\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n\n  if (stream.match(doOpening)) {\n    indent(stream, state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n\n  if (stream.match(opening)) {\n    if (!state.doInCurrentLine) indent(stream, state);else state.doInCurrentLine = false;\n    return 'keyword';\n  }\n\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n\n  if (stream.match(doubleClosing)) {\n    dedent(stream, state);\n    dedent(stream, state);\n    return 'keyword';\n  }\n\n  if (stream.match(closing)) {\n    dedent(stream, state);\n    return 'keyword';\n  }\n\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  } // Handle non-detected items\n\n\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n  return function (stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n\n    return OUTCLASS;\n  };\n}\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current(); // Handle '.' connected identifiers\n\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n\n  var delimiter_index = '[({'.indexOf(current);\n\n  if (delimiter_index !== -1) {\n    indent(stream, state);\n  }\n\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  delimiter_index = '])}'.indexOf(current);\n\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  return style;\n}\n\nexport const vb = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n    };\n  },\n  token: function (stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n\n    var style = tokenLexer(stream, state);\n    state.lastToken = {\n      style: style,\n      content: stream.current()\n    };\n    return style;\n  },\n  indent: function (state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit * (state.currentIndent - 1);\n    if (state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    commentTokens: {\n      line: \"'\"\n    },\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords).concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};","map":{"version":3,"names":["ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","stringPrefixes","opening","middle","closing","doubleClosing","doOpening","indentInfo","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","ch","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","tokenStringFactory","current","doInCurrentLine","next","delimiter","singleline","length","OUTCLASS","eol","eatWhile","tokenLexer","style","delimiter_index","indexOf","vb","startState","lastToken","nextLineIndent","token","sol","content","textAfter","cx","trueText","replace","unit","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/vb.js"],"sourcesContent":["var ERRORCLASS = 'error';\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\nvar openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else','elseif','case', 'catch', 'finally'];\nvar endKeywords = ['next','loop'];\n\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\n\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\n\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\n\nvar indentInfo = null;\n\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\n\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n}\n// tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle Comments\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n\n  // Handle Number Literals\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n    else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n    else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n    // Octal\n    else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n    // Decimal\n    else if (stream.match(/^[1-9]\\d*F?/)) {\n      // Decimal literals may be \"imaginary\"\n      stream.eat(/J/i);\n      // TODO - Can you have imaginary longs?\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doubleOperators)\n      || stream.match(singleOperators)\n      || stream.match(wordOperators)) {\n    return 'operator';\n  }\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doOpening)) {\n    indent(stream,state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n  if (stream.match(opening)) {\n    if (! state.doInCurrentLine)\n      indent(stream,state);\n    else\n      state.doInCurrentLine = false;\n    return 'keyword';\n  }\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n\n  if (stream.match(doubleClosing)) {\n    dedent(stream,state);\n    dedent(stream,state);\n    return 'keyword';\n  }\n  if (stream.match(closing)) {\n    dedent(stream,state);\n    return 'keyword';\n  }\n\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n\n  return function(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return OUTCLASS;\n  };\n}\n\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle '.' connected identifiers\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n\n\n  var delimiter_index = '[({'.indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state );\n  }\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = '])}'.indexOf(current);\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  return style;\n}\n\nexport const vb = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n\n\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n    var style = tokenLexer(stream, state);\n\n    state.lastToken = {style:style, content: stream.current()};\n\n\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);\n    if(state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \"'\"},\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)\n      .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}