{"ast":null,"code":"// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Nodeâ€™s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nexport const path = {\n  basename,\n  dirname,\n  extname,\n  join,\n  sep: '/'\n};\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\n\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n\n  assertPath(path);\n  let start = 0;\n  let end = -1;\n  let index = path.length;\n  /** @type {boolean|undefined} */\n\n  let seenNonSlash;\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47\n      /* `/` */\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1;\n          break;\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true;\n        end = index + 1;\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end);\n  }\n\n  if (ext === path) {\n    return '';\n  }\n\n  let firstNonSlashEnd = -1;\n  let extIndex = ext.length - 1;\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1;\n        break;\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true;\n        firstNonSlashEnd = index + 1;\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index;\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1;\n          end = firstNonSlashEnd;\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd;\n  } else if (end < 0) {\n    end = path.length;\n  }\n\n  return path.slice(start, end);\n}\n/**\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction dirname(path) {\n  assertPath(path);\n\n  if (path.length === 0) {\n    return '.';\n  }\n\n  let end = -1;\n  let index = path.length;\n  /** @type {boolean|undefined} */\n\n  let unmatchedSlash; // Prefix `--` is important to not run on `0`.\n\n  while (--index) {\n    if (path.charCodeAt(index) === 47\n    /* `/` */\n    ) {\n      if (unmatchedSlash) {\n        end = index;\n        break;\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true;\n    }\n  }\n\n  return end < 0 ? path.charCodeAt(0) === 47\n  /* `/` */\n  ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47\n  /* `/` */\n  ? '//' : path.slice(0, end);\n}\n/**\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction extname(path) {\n  assertPath(path);\n  let index = path.length;\n  let end = -1;\n  let startPart = 0;\n  let startDot = -1; // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n\n  let preDotState = 0;\n  /** @type {boolean|undefined} */\n\n  let unmatchedSlash;\n\n  while (index--) {\n    const code = path.charCodeAt(index);\n\n    if (code === 47\n    /* `/` */\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1;\n        break;\n      }\n\n      continue;\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true;\n      end = index + 1;\n    }\n\n    if (code === 46\n    /* `.` */\n    ) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index;\n      } else if (preDotState !== 1) {\n        preDotState = 1;\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1;\n    }\n  }\n\n  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.\n  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n\n  return path.slice(startDot, end);\n}\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\n\n\nfunction join() {\n  let index = -1;\n  /** @type {string|undefined} */\n\n  let joined;\n\n  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n    segments[_key] = arguments[_key];\n  }\n\n  while (++index < segments.length) {\n    assertPath(segments[index]);\n\n    if (segments[index]) {\n      joined = joined === undefined ? segments[index] : joined + '/' + segments[index];\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined);\n}\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\n\n\nfunction normalize(path) {\n  assertPath(path);\n  const absolute = path.charCodeAt(0) === 47;\n  /* `/` */\n  // Normalize the path according to POSIX rules.\n\n  let value = normalizeString(path, !absolute);\n\n  if (value.length === 0 && !absolute) {\n    value = '.';\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47\n  /* / */\n  ) {\n    value += '/';\n  }\n\n  return absolute ? '/' + value : value;\n}\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\n\n\nfunction normalizeString(path, allowAboveRoot) {\n  let result = '';\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let index = -1;\n  /** @type {number|undefined} */\n\n  let code;\n  /** @type {number} */\n\n  let lastSlashIndex;\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index);\n    } else if (code === 47\n    /* `/` */\n    ) {\n      break;\n    } else {\n      code = 47;\n      /* `/` */\n    }\n\n    if (code === 47\n    /* `/` */\n    ) {\n      if (lastSlash === index - 1 || dots === 1) {// Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46\n        /* `.` */\n        || result.charCodeAt(result.length - 2) !== 46\n        /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/');\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = '';\n                lastSegmentLength = 0;\n              } else {\n                result = result.slice(0, lastSlashIndex);\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');\n              }\n\n              lastSlash = index;\n              dots = 0;\n              continue;\n            }\n          } else if (result.length > 0) {\n            result = '';\n            lastSegmentLength = 0;\n            lastSlash = index;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index);\n        } else {\n          result = path.slice(lastSlash + 1, index);\n        }\n\n        lastSegmentLength = index - lastSlash - 1;\n      }\n\n      lastSlash = index;\n      dots = 0;\n    } else if (code === 46\n    /* `.` */\n    && dots > -1) {\n      dots++;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return result;\n}\n/**\n * @param {string} path\n */\n\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n/* eslint-enable max-depth, complexity */","map":{"version":3,"names":["path","basename","dirname","extname","join","sep","ext","undefined","TypeError","assertPath","start","end","index","length","seenNonSlash","charCodeAt","slice","firstNonSlashEnd","extIndex","unmatchedSlash","startPart","startDot","preDotState","code","joined","segments","normalize","absolute","value","normalizeString","allowAboveRoot","result","lastSegmentLength","lastSlash","dots","lastSlashIndex","lastIndexOf","JSON","stringify"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/vfile/lib/minpath.browser.js"],"sourcesContent":["// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Nodeâ€™s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}