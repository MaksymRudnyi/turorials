{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n\n  let labelStart; // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1];\n\n    if (token.type === 'labelImage') {\n      labelStart = token;\n      break;\n    } // Exit if we’ve walked far enough.\n\n\n    if (token.type === 'gfmFootnoteCall' || token.type === 'labelLink' || token.type === 'label' || token.type === 'image' || token.type === 'link') {\n      break;\n    }\n  }\n\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n/** @type {Resolver} */\n\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token|undefined} */\n\n  let labelStart; // Find an opening.\n\n  while (index--) {\n    if (events[index][1].type === 'labelImage' && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  } // Change the `labelImageMarker` to a `data`.\n\n\n  events[index + 1][1].type = 'data';\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'; // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }; // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }; // Increment the end 1 character.\n\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n  /** @type {Array<Event>} */\n\n  const replacement = [// Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context], // The `[`\n  events[index + 3], events[index + 4], // The `^`.\n  ['enter', marker, context], ['exit', marker, context], // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n\n  let data;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n  /** @type {State} */\n\n\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n  /** @type {State} */\n\n\n  function callData(code) {\n    /** @type {Token} */\n    let token;\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code);\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code);\n      }\n\n      effects.exit('chunkString');\n      token = effects.exit('gfmFootnoteCallString');\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token))) ? end(code) : nok(code);\n    }\n\n    effects.consume(code);\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n\n    return code === 92 ? callEscape : callData;\n  }\n  /** @type {State} */\n\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n\n    return callData(code);\n  }\n  /** @type {State} */\n\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    effects.exit('gfmFootnoteCall');\n    return ok;\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n\n  let identifier;\n  let size = 0;\n  /** @type {boolean|undefined} */\n\n  let data;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelStart;\n  }\n  /** @type {State} */\n\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      return atBreak;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token;\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code);\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code);\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      size++;\n      return atBreak;\n    }\n\n    effects.enter('chunkString').contentType = 'string';\n    return label(code);\n  }\n  /** @type {State} */\n\n\n  function label(code) {\n    if (code === null || markdownLineEnding(code) || code === 91 || code === 93 || size > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : label;\n  }\n  /** @type {State} */\n\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return label;\n    }\n\n    return label(code);\n  }\n  /** @type {State} */\n\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker'); // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace');\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier);\n    }\n\n    return ok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n/** @type {Exiter} */\n\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"names":["blankLine","factorySpace","markdownLineEnding","markdownLineEndingOrSpace","normalizeIdentifier","indent","tokenize","tokenizeIndent","partial","gfmFootnote","document","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","exit","gfmFootnoteDefinitionEnd","text","tokenizeGfmFootnoteCall","add","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","effects","ok","nok","self","index","events","length","defined","parser","gfmFootnotes","labelStart","token","type","start","code","_balanced","id","sliceSerialize","end","now","charCodeAt","includes","slice","enter","consume","context","call","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","size","data","callStart","callData","callEscape","identifier","_container","atBreak","labelAfter","label","labelEscape","done","push","check","attempt","afterPrefix","tail"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-extension-gfm-footnote/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    } // Exit if we’ve walked far enough.\n\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n/** @type {Resolver} */\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker' // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  } // Increment the end 1 character.\n\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n  /** @type {Array<Event>} */\n\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context], // The `[`\n    events[index + 3],\n    events[index + 4], // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context], // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n  /** @type {State} */\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n  /** @type {State} */\n\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n  /** @type {State} */\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n  /** @type {State} */\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      markdownLineEnding(code) ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n/** @type {Exiter} */\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}