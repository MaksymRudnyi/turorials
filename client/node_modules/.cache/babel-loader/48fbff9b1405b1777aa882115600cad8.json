{"ast":null,"code":"var rfc2822 = [\"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\", \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\", \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"];\nvar rfc2822NoEmail = [\"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"];\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\n\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\n\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n\n    if ((match = stream.match(rfc2822HeaderNoEmail)) || (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    } // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n\n\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n}\n\n;\nexport const mbox = {\n  startState: function () {\n    return {\n      // Is in a mbox separator\n      inSeparator: false,\n      // Is in a mail header\n      inHeader: false,\n      // If bracketed email is permitted. Only applicable when inHeader\n      emailPermitted: false,\n      // Name of current header\n      header: null,\n      // Is in a region of mail headers\n      inHeaders: false\n    };\n  },\n  token: readToken,\n  blankLine: function (state) {\n    state.inHeaders = state.inSeparator = state.inHeader = false;\n  },\n  languageData: {\n    autocomplete: rfc2822.concat(rfc2822NoEmail)\n  }\n};","map":{"version":3,"names":["rfc2822","rfc2822NoEmail","whitespace","separator","rfc2822Header","RegExp","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","styleForHeader","readToken","stream","state","sol","inSeparator","inHeader","match","inHeaders","emailPermitted","skipToEnd","style","mbox","startState","token","blankLine","languageData","autocomplete","concat"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/mbox.js"],"sourcesContent":["var rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nexport const mbox = {\n  startState: function() {\n    return {\n      // Is in a mbox separator\n      inSeparator: false,\n      // Is in a mail header\n      inHeader: false,\n      // If bracketed email is permitted. Only applicable when inHeader\n      emailPermitted: false,\n      // Name of current header\n      header: null,\n      // Is in a region of mail headers\n      inHeaders: false\n    };\n  },\n  token: readToken,\n  blankLine: function(state) {\n    state.inHeaders = state.inSeparator = state.inHeader = false;\n  },\n  languageData: {\n    autocomplete: rfc2822.concat(rfc2822NoEmail)\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}