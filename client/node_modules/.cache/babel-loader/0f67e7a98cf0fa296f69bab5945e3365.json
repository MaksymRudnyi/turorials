{"ast":null,"code":"var wordRegexp = function (words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n};\n\nvar tokenBase = function (stream\n/*, state*/\n) {\n  curPunc = null;\n  var ch = stream.next();\n\n  if (ch === '\"') {\n    stream.match(/^.*?\"/);\n    return \"string\";\n  }\n\n  if (ch === \"'\") {\n    stream.match(/^.*?'/);\n    return \"string\";\n  }\n\n  if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  } else if (ch === \"/\" && stream.eat(\"/\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n\n    if (stream.eat(\":\")) {\n      stream.eatWhile(/[\\w\\d_\\-]/);\n      return \"atom\";\n    }\n\n    var word = stream.current();\n    if (funcs.test(word)) return \"builtin\";\n    if (preds.test(word)) return \"def\";\n    if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n    return \"variable\";\n  }\n};\n\nvar pushContext = function (state, type, col) {\n  return state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n};\n\nvar popContext = function (state) {\n  state.indent = state.context.indent;\n  return state.context = state.context.prev;\n};\n\nvar curPunc;\nvar funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\nvar preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\nvar keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\nvar systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\nvar operatorChars = /[*+\\-<>=&|~%^]/;\nexport const cypher = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function (stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) {\n        state.context.align = false;\n      }\n\n      state.indent = stream.indentation();\n    }\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var style = state.tokenize(stream, state);\n\n    if (style !== \"comment\" && state.context && state.context.align == null && state.context.type !== \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc === \"(\") {\n      pushContext(state, \")\", stream.column());\n    } else if (curPunc === \"[\") {\n      pushContext(state, \"]\", stream.column());\n    } else if (curPunc === \"{\") {\n      pushContext(state, \"}\", stream.column());\n    } else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type === \"pattern\") {\n        popContext(state);\n      }\n\n      if (state.context && curPunc === state.context.type) {\n        popContext(state);\n      }\n    } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n      popContext(state);\n    } else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) {\n        pushContext(state, \"pattern\", stream.column());\n      } else if (state.context.type === \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n  indent: function (state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n\n    if (/[\\]\\}]/.test(firstChar)) {\n      while (context && context.type === \"pattern\") {\n        context = context.prev;\n      }\n    }\n\n    var closing = context && firstChar === context.type;\n    if (!context) return 0;\n    if (context.type === \"keywords\") return null;\n    if (context.align) return context.col + (closing ? 0 : 1);\n    return context.indent + (closing ? 0 : cx.unit);\n  }\n};","map":{"version":3,"names":["wordRegexp","words","RegExp","join","tokenBase","stream","curPunc","ch","next","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","systemKeywords","pushContext","state","type","col","context","prev","indent","popContext","cypher","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/cypher.js"],"sourcesContent":["var wordRegexp = function(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n};\n\nvar tokenBase = function(stream/*, state*/) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch ==='\"') {\n    stream.match(/^.*?\"/);\n    return \"string\";\n  }\n  if (ch === \"'\") {\n    stream.match(/^.*?'/);\n    return \"string\";\n  }\n  if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  } else if (ch === \"/\" && stream.eat(\"/\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      stream.eatWhile(/[\\w\\d_\\-]/);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (funcs.test(word)) return \"builtin\";\n    if (preds.test(word)) return \"def\";\n    if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n    return \"variable\";\n  }\n};\nvar pushContext = function(state, type, col) {\n  return state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n};\nvar popContext = function(state) {\n  state.indent = state.context.indent;\n  return state.context = state.context.prev;\n};\nvar curPunc;\nvar funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\nvar preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\nvar keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\nvar systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\nvar operatorChars = /[*+\\-<>=&|~%^]/;\n\nexport const cypher = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && (state.context.align == null)) {\n        state.context.align = false;\n      }\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var style = state.tokenize(stream, state);\n    if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc === \"(\") {\n      pushContext(state, \")\", stream.column());\n    } else if (curPunc === \"[\") {\n      pushContext(state, \"]\", stream.column());\n    } else if (curPunc === \"{\") {\n      pushContext(state, \"}\", stream.column());\n    } else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type === \"pattern\") {\n        popContext(state);\n      }\n      if (state.context && curPunc === state.context.type) {\n        popContext(state);\n      }\n    } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n      popContext(state);\n    } else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) {\n        pushContext(state, \"pattern\", stream.column());\n      } else if (state.context.type === \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) {\n      while (context && context.type === \"pattern\") {\n        context = context.prev;\n      }\n    }\n    var closing = context && firstChar === context.type;\n    if (!context) return 0;\n    if (context.type === \"keywords\") return null\n    if (context.align) return context.col + (closing ? 0 : 1);\n    return context.indent + (closing ? 0 : cx.unit);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}