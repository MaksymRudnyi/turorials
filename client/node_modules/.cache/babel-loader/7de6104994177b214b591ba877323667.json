{"ast":null,"code":"function words(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\") {\n    state._indent.push(\"(\"); // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n\n\n    state._indent.push(\"{\");\n\n    return null;\n  }\n\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n\n    return null;\n  }\n\n  if (ch == \")\") {\n    state._indent.pop();\n\n    state._indent.pop();\n  }\n\n  if (ch === \"}\") {\n    state._indent.pop();\n\n    return null;\n  }\n\n  if (ch == \",\") return null;\n  if (ch == \";\") return null;\n  if (/[{}\\(\\),;]/.test(ch)) return null; // 1*DIGIT \"K\" / \"M\" / \"G\"\n\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  } // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n\n\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n    return \"operator\";\n  }\n\n  stream.eatWhile(/\\w/);\n  var cur = stream.current(); // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n\n  if (cur == \"text\" && stream.eat(\":\")) {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return null;\n}\n\nfunction tokenMultiLineString(stream, state) {\n  state._multiLineString = true; // the first line is special it may contain a comment\n\n  if (!stream.sol()) {\n    stream.eatSpace();\n\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"string\";\n  }\n\n  if (stream.next() == \".\" && stream.eol()) {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n\n  return \"string\";\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    maybeEnd = ch == \"*\";\n  }\n\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nexport const sieve = {\n  startState: function (base) {\n    return {\n      tokenize: tokenBase,\n      baseIndent: base || 0,\n      _indent: []\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n  indent: function (state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && _textAfter[0] == \"}\") length--;\n    if (length < 0) length = 0;\n    return length * cx.unit;\n  },\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};","map":{"version":3,"names":["words","str","obj","split","i","length","keywords","atoms","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eatSpace","peek","eol","maybeEnd","quote","escaped","sieve","startState","base","baseIndent","token","indent","_textAfter","cx","unit","languageData","indentOnInput"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/sieve.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\n\nfunction tokenBase(stream, state) {\n\n  var ch = stream.next();\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\") {\n    state._indent.push(\"(\");\n    // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch == \")\")  {\n    state._indent.pop();\n    state._indent.pop();\n  }\n\n  if (ch === \"}\") {\n    state._indent.pop();\n    return null;\n  }\n\n  if (ch == \",\")\n    return null;\n\n  if (ch == \";\")\n    return null;\n\n\n  if (/[{}\\(\\),;]/.test(ch))\n    return null;\n\n  // 1*DIGIT \"K\" / \"M\" / \"G\"\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  }\n\n  // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n\n    return \"operator\";\n  }\n\n  stream.eatWhile(/\\w/);\n  var cur = stream.current();\n\n  // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n  if ((cur == \"text\") && stream.eat(\":\"))\n  {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n\n  if (keywords.propertyIsEnumerable(cur))\n    return \"keyword\";\n\n  if (atoms.propertyIsEnumerable(cur))\n    return \"atom\";\n\n  return null;\n}\n\nfunction tokenMultiLineString(stream, state)\n{\n  state._multiLineString = true;\n  // the first line is special it may contain a comment\n  if (!stream.sol()) {\n    stream.eatSpace();\n\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"string\";\n  }\n\n  if ((stream.next() == \".\")  && (stream.eol()))\n  {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n\n  return \"string\";\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped)\n        break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nexport const sieve = {\n  startState: function(base) {\n    return {tokenize: tokenBase,\n            baseIndent: base || 0,\n            _indent: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n\n  indent: function(state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && (_textAfter[0] == \"}\"))\n      length--;\n\n    if (length <0)\n      length = 0;\n\n    return length * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}