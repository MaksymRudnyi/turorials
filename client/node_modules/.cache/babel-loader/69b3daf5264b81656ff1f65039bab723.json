{"ast":null,"code":"(function () {\n  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;\n  ipaddr = {};\n  root = this;\n\n  if (typeof module !== \"undefined\" && module !== null && module.exports) {\n    module.exports = ipaddr;\n  } else {\n    root['ipaddr'] = ipaddr;\n  }\n\n  matchCIDR = function (first, second, partSize, cidrBits) {\n    var part, shift;\n\n    if (first.length !== second.length) {\n      throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\n    }\n\n    part = 0;\n\n    while (cidrBits > 0) {\n      shift = partSize - cidrBits;\n\n      if (shift < 0) {\n        shift = 0;\n      }\n\n      if (first[part] >> shift !== second[part] >> shift) {\n        return false;\n      }\n\n      cidrBits -= partSize;\n      part += 1;\n    }\n\n    return true;\n  };\n\n  ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n    var k, len, rangeName, rangeSubnets, subnet;\n\n    if (defaultName == null) {\n      defaultName = 'unicast';\n    }\n\n    for (rangeName in rangeList) {\n      rangeSubnets = rangeList[rangeName];\n\n      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n        rangeSubnets = [rangeSubnets];\n      }\n\n      for (k = 0, len = rangeSubnets.length; k < len; k++) {\n        subnet = rangeSubnets[k];\n\n        if (address.kind() === subnet[0].kind()) {\n          if (address.match.apply(address, subnet)) {\n            return rangeName;\n          }\n        }\n      }\n    }\n\n    return defaultName;\n  };\n\n  ipaddr.IPv4 = function () {\n    function IPv4(octets) {\n      var k, len, octet;\n\n      if (octets.length !== 4) {\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\n      }\n\n      for (k = 0, len = octets.length; k < len; k++) {\n        octet = octets[k];\n\n        if (!(0 <= octet && octet <= 255)) {\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\n        }\n      }\n\n      this.octets = octets;\n    }\n\n    IPv4.prototype.kind = function () {\n      return 'ipv4';\n    };\n\n    IPv4.prototype.toString = function () {\n      return this.octets.join(\".\");\n    };\n\n    IPv4.prototype.toNormalizedString = function () {\n      return this.toString();\n    };\n\n    IPv4.prototype.toByteArray = function () {\n      return this.octets.slice(0);\n    };\n\n    IPv4.prototype.match = function (other, cidrRange) {\n      var ref;\n\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n\n      if (other.kind() !== 'ipv4') {\n        throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\n      }\n\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\n    };\n\n    IPv4.prototype.SpecialRanges = {\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n      \"private\": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\n    };\n\n    IPv4.prototype.range = function () {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv4.prototype.toIPv4MappedAddress = function () {\n      return ipaddr.IPv6.parse(\"::ffff:\" + this.toString());\n    };\n\n    IPv4.prototype.prefixLengthFromSubnetMask = function () {\n      var cidr, i, k, octet, stop, zeros, zerotable;\n      zerotable = {\n        0: 8,\n        128: 7,\n        192: 6,\n        224: 5,\n        240: 4,\n        248: 3,\n        252: 2,\n        254: 1,\n        255: 0\n      };\n      cidr = 0;\n      stop = false;\n\n      for (i = k = 3; k >= 0; i = k += -1) {\n        octet = this.octets[i];\n\n        if (octet in zerotable) {\n          zeros = zerotable[octet];\n\n          if (stop && zeros !== 0) {\n            return null;\n          }\n\n          if (zeros !== 8) {\n            stop = true;\n          }\n\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n\n      return 32 - cidr;\n    };\n\n    return IPv4;\n  }();\n\n  ipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\n  ipv4Regexes = {\n    fourOctet: new RegExp(\"^\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"$\", 'i'),\n    longValue: new RegExp(\"^\" + ipv4Part + \"$\", 'i')\n  };\n\n  ipaddr.IPv4.parser = function (string) {\n    var match, parseIntAuto, part, shift, value;\n\n    parseIntAuto = function (string) {\n      if (string[0] === \"0\" && string[1] !== \"x\") {\n        return parseInt(string, 8);\n      } else {\n        return parseInt(string);\n      }\n    };\n\n    if (match = string.match(ipv4Regexes.fourOctet)) {\n      return function () {\n        var k, len, ref, results;\n        ref = match.slice(1, 6);\n        results = [];\n\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(parseIntAuto(part));\n        }\n\n        return results;\n      }();\n    } else if (match = string.match(ipv4Regexes.longValue)) {\n      value = parseIntAuto(match[1]);\n\n      if (value > 0xffffffff || value < 0) {\n        throw new Error(\"ipaddr: address outside defined range\");\n      }\n\n      return function () {\n        var k, results;\n        results = [];\n\n        for (shift = k = 0; k <= 24; shift = k += 8) {\n          results.push(value >> shift & 0xff);\n        }\n\n        return results;\n      }().reverse();\n    } else {\n      return null;\n    }\n  };\n\n  ipaddr.IPv6 = function () {\n    function IPv6(parts, zoneId) {\n      var i, k, l, len, part, ref;\n\n      if (parts.length === 16) {\n        this.parts = [];\n\n        for (i = k = 0; k <= 14; i = k += 2) {\n          this.parts.push(parts[i] << 8 | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\n      }\n\n      ref = this.parts;\n\n      for (l = 0, len = ref.length; l < len; l++) {\n        part = ref[l];\n\n        if (!(0 <= part && part <= 0xffff)) {\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\n        }\n      }\n\n      if (zoneId) {\n        this.zoneId = zoneId;\n      }\n    }\n\n    IPv6.prototype.kind = function () {\n      return 'ipv6';\n    };\n\n    IPv6.prototype.toString = function () {\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n    };\n\n    IPv6.prototype.toRFC5952String = function () {\n      var bestMatchIndex, bestMatchLength, match, regex, string;\n      regex = /((^|:)(0(:|$)){2,})/g;\n      string = this.toNormalizedString();\n      bestMatchIndex = 0;\n      bestMatchLength = -1;\n\n      while (match = regex.exec(string)) {\n        if (match[0].length > bestMatchLength) {\n          bestMatchIndex = match.index;\n          bestMatchLength = match[0].length;\n        }\n      }\n\n      if (bestMatchLength < 0) {\n        return string;\n      }\n\n      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);\n    };\n\n    IPv6.prototype.toByteArray = function () {\n      var bytes, k, len, part, ref;\n      bytes = [];\n      ref = this.parts;\n\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        bytes.push(part >> 8);\n        bytes.push(part & 0xff);\n      }\n\n      return bytes;\n    };\n\n    IPv6.prototype.toNormalizedString = function () {\n      var addr, part, suffix;\n\n      addr = function () {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16));\n        }\n\n        return results;\n      }.call(this).join(\":\");\n\n      suffix = '';\n\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n\n      return addr + suffix;\n    };\n\n    IPv6.prototype.toFixedLengthString = function () {\n      var addr, part, suffix;\n\n      addr = function () {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16).padStart(4, '0'));\n        }\n\n        return results;\n      }.call(this).join(\":\");\n\n      suffix = '';\n\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n\n      return addr + suffix;\n    };\n\n    IPv6.prototype.match = function (other, cidrRange) {\n      var ref;\n\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n\n      if (other.kind() !== 'ipv6') {\n        throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\n      }\n\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\n    };\n\n    IPv6.prototype.SpecialRanges = {\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n\n    IPv6.prototype.range = function () {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv6.prototype.isIPv4MappedAddress = function () {\n      return this.range() === 'ipv4Mapped';\n    };\n\n    IPv6.prototype.toIPv4Address = function () {\n      var high, low, ref;\n\n      if (!this.isIPv4MappedAddress()) {\n        throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\n      }\n\n      ref = this.parts.slice(-2), high = ref[0], low = ref[1];\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n    };\n\n    IPv6.prototype.prefixLengthFromSubnetMask = function () {\n      var cidr, i, k, part, stop, zeros, zerotable;\n      zerotable = {\n        0: 16,\n        32768: 15,\n        49152: 14,\n        57344: 13,\n        61440: 12,\n        63488: 11,\n        64512: 10,\n        65024: 9,\n        65280: 8,\n        65408: 7,\n        65472: 6,\n        65504: 5,\n        65520: 4,\n        65528: 3,\n        65532: 2,\n        65534: 1,\n        65535: 0\n      };\n      cidr = 0;\n      stop = false;\n\n      for (i = k = 7; k >= 0; i = k += -1) {\n        part = this.parts[i];\n\n        if (part in zerotable) {\n          zeros = zerotable[part];\n\n          if (stop && zeros !== 0) {\n            return null;\n          }\n\n          if (zeros !== 16) {\n            stop = true;\n          }\n\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n\n      return 128 - cidr;\n    };\n\n    return IPv6;\n  }();\n\n  ipv6Part = \"(?:[0-9a-f]+::?)+\";\n  zoneIndex = \"%[0-9a-z]{1,}\";\n  ipv6Regexes = {\n    zoneIndex: new RegExp(zoneIndex, 'i'),\n    \"native\": new RegExp(\"^(::)?(\" + ipv6Part + \")?([0-9a-f]+)?(::)?(\" + zoneIndex + \")?$\", 'i'),\n    transitional: new RegExp(\"^((?:\" + ipv6Part + \")|(?:::)(?:\" + ipv6Part + \")?)\" + (ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part) + (\"(\" + zoneIndex + \")?$\"), 'i')\n  };\n\n  expandIPv6 = function (string, parts) {\n    var colonCount, lastColon, part, replacement, replacementCount, zoneId;\n\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\n      return null;\n    }\n\n    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];\n\n    if (zoneId) {\n      zoneId = zoneId.substring(1);\n      string = string.replace(/%.+$/, '');\n    }\n\n    colonCount = 0;\n    lastColon = -1;\n\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n      colonCount++;\n    }\n\n    if (string.substr(0, 2) === '::') {\n      colonCount--;\n    }\n\n    if (string.substr(-2, 2) === '::') {\n      colonCount--;\n    }\n\n    if (colonCount > parts) {\n      return null;\n    }\n\n    replacementCount = parts - colonCount;\n    replacement = ':';\n\n    while (replacementCount--) {\n      replacement += '0:';\n    }\n\n    string = string.replace('::', replacement);\n\n    if (string[0] === ':') {\n      string = string.slice(1);\n    }\n\n    if (string[string.length - 1] === ':') {\n      string = string.slice(0, -1);\n    }\n\n    parts = function () {\n      var k, len, ref, results;\n      ref = string.split(\":\");\n      results = [];\n\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        results.push(parseInt(part, 16));\n      }\n\n      return results;\n    }();\n\n    return {\n      parts: parts,\n      zoneId: zoneId\n    };\n  };\n\n  ipaddr.IPv6.parser = function (string) {\n    var addr, k, len, match, octet, octets, zoneId;\n\n    if (ipv6Regexes['native'].test(string)) {\n      return expandIPv6(string, 8);\n    } else if (match = string.match(ipv6Regexes['transitional'])) {\n      zoneId = match[6] || '';\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n\n      if (addr.parts) {\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n\n        for (k = 0, len = octets.length; k < len; k++) {\n          octet = octets[k];\n\n          if (!(0 <= octet && octet <= 255)) {\n            return null;\n          }\n        }\n\n        addr.parts.push(octets[0] << 8 | octets[1]);\n        addr.parts.push(octets[2] << 8 | octets[3]);\n        return {\n          parts: addr.parts,\n          zoneId: addr.zoneId\n        };\n      }\n    }\n\n    return null;\n  };\n\n  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function (string) {\n    return this.parser(string) !== null;\n  };\n\n  ipaddr.IPv4.isValid = function (string) {\n    var e;\n\n    try {\n      new this(this.parser(string));\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ipaddr.IPv6.isValid = function (string) {\n    var addr, e;\n\n    if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\n      return false;\n    }\n\n    try {\n      addr = this.parser(string);\n      new this(addr.parts, addr.zoneId);\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.parse = function (string) {\n    var parts;\n    parts = this.parser(string);\n\n    if (parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n\n    return new this(parts);\n  };\n\n  ipaddr.IPv6.parse = function (string) {\n    var addr;\n    addr = this.parser(string);\n\n    if (addr.parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n\n    return new this(addr.parts, addr.zoneId);\n  };\n\n  ipaddr.IPv4.parseCIDR = function (string) {\n    var maskLength, match, parsed;\n\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n\n      if (maskLength >= 0 && maskLength <= 32) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function () {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n\n    throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\n  };\n\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n    var filledOctetCount, j, octets;\n    prefix = parseInt(prefix);\n\n    if (prefix < 0 || prefix > 32) {\n      throw new Error('ipaddr: invalid IPv4 prefix length');\n    }\n\n    octets = [0, 0, 0, 0];\n    j = 0;\n    filledOctetCount = Math.floor(prefix / 8);\n\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n\n    if (filledOctetCount < 4) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;\n    }\n\n    return new this(octets);\n  };\n\n  ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv6.parseCIDR = function (string) {\n    var maskLength, match, parsed;\n\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n\n      if (maskLength >= 0 && maskLength <= 128) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function () {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n\n    throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\n  };\n\n  ipaddr.isValid = function (string) {\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n  };\n\n  ipaddr.parse = function (string) {\n    if (ipaddr.IPv6.isValid(string)) {\n      return ipaddr.IPv6.parse(string);\n    } else if (ipaddr.IPv4.isValid(string)) {\n      return ipaddr.IPv4.parse(string);\n    } else {\n      throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\n    }\n  };\n\n  ipaddr.parseCIDR = function (string) {\n    var e;\n\n    try {\n      return ipaddr.IPv6.parseCIDR(string);\n    } catch (error1) {\n      e = error1;\n\n      try {\n        return ipaddr.IPv4.parseCIDR(string);\n      } catch (error1) {\n        e = error1;\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\n      }\n    }\n  };\n\n  ipaddr.fromByteArray = function (bytes) {\n    var length;\n    length = bytes.length;\n\n    if (length === 4) {\n      return new ipaddr.IPv4(bytes);\n    } else if (length === 16) {\n      return new ipaddr.IPv6(bytes);\n    } else {\n      throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\n    }\n  };\n\n  ipaddr.process = function (string) {\n    var addr;\n    addr = this.parse(string);\n\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n      return addr.toIPv4Address();\n    } else {\n      return addr;\n    }\n  };\n}).call(this);","map":{"version":3,"names":["expandIPv6","ipaddr","ipv4Part","ipv4Regexes","ipv6Part","ipv6Regexes","matchCIDR","root","zoneIndex","module","exports","first","second","partSize","cidrBits","part","shift","length","Error","subnetMatch","address","rangeList","defaultName","k","len","rangeName","rangeSubnets","subnet","Array","kind","match","apply","IPv4","octets","octet","prototype","toString","join","toNormalizedString","toByteArray","slice","other","cidrRange","ref","SpecialRanges","unspecified","broadcast","multicast","linkLocal","loopback","carrierGradeNat","reserved","range","toIPv4MappedAddress","IPv6","parse","prefixLengthFromSubnetMask","cidr","i","stop","zeros","zerotable","fourOctet","RegExp","longValue","parser","string","parseIntAuto","value","parseInt","results","push","reverse","parts","zoneId","l","replace","toRFC5952String","bestMatchIndex","bestMatchLength","regex","exec","index","substring","bytes","addr","suffix","call","toFixedLengthString","padStart","uniqueLocal","ipv4Mapped","rfc6145","rfc6052","teredo","isIPv4MappedAddress","toIPv4Address","high","low","transitional","colonCount","lastColon","replacement","replacementCount","indexOf","lastIndexOf","substr","split","test","isIPv4","isIPv6","isValid","e","error1","isValidFourPartDecimal","parseCIDR","maskLength","parsed","Object","defineProperty","subnetMaskFromPrefixLength","prefix","filledOctetCount","j","Math","floor","pow","broadcastAddressFromCIDR","error","ipInterfaceOctets","subnetMaskOctets","networkAddressFromCIDR","fromByteArray","process"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/ipaddr.js/lib/ipaddr.js"],"sourcesContent":["(function() {\n  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;\n\n  ipaddr = {};\n\n  root = this;\n\n  if ((typeof module !== \"undefined\" && module !== null) && module.exports) {\n    module.exports = ipaddr;\n  } else {\n    root['ipaddr'] = ipaddr;\n  }\n\n  matchCIDR = function(first, second, partSize, cidrBits) {\n    var part, shift;\n    if (first.length !== second.length) {\n      throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\n    }\n    part = 0;\n    while (cidrBits > 0) {\n      shift = partSize - cidrBits;\n      if (shift < 0) {\n        shift = 0;\n      }\n      if (first[part] >> shift !== second[part] >> shift) {\n        return false;\n      }\n      cidrBits -= partSize;\n      part += 1;\n    }\n    return true;\n  };\n\n  ipaddr.subnetMatch = function(address, rangeList, defaultName) {\n    var k, len, rangeName, rangeSubnets, subnet;\n    if (defaultName == null) {\n      defaultName = 'unicast';\n    }\n    for (rangeName in rangeList) {\n      rangeSubnets = rangeList[rangeName];\n      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n        rangeSubnets = [rangeSubnets];\n      }\n      for (k = 0, len = rangeSubnets.length; k < len; k++) {\n        subnet = rangeSubnets[k];\n        if (address.kind() === subnet[0].kind()) {\n          if (address.match.apply(address, subnet)) {\n            return rangeName;\n          }\n        }\n      }\n    }\n    return defaultName;\n  };\n\n  ipaddr.IPv4 = (function() {\n    function IPv4(octets) {\n      var k, len, octet;\n      if (octets.length !== 4) {\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\n      }\n      for (k = 0, len = octets.length; k < len; k++) {\n        octet = octets[k];\n        if (!((0 <= octet && octet <= 255))) {\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\n        }\n      }\n      this.octets = octets;\n    }\n\n    IPv4.prototype.kind = function() {\n      return 'ipv4';\n    };\n\n    IPv4.prototype.toString = function() {\n      return this.octets.join(\".\");\n    };\n\n    IPv4.prototype.toNormalizedString = function() {\n      return this.toString();\n    };\n\n    IPv4.prototype.toByteArray = function() {\n      return this.octets.slice(0);\n    };\n\n    IPv4.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv4') {\n        throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\n      }\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\n    };\n\n    IPv4.prototype.SpecialRanges = {\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n      \"private\": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\n    };\n\n    IPv4.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv4.prototype.toIPv4MappedAddress = function() {\n      return ipaddr.IPv6.parse(\"::ffff:\" + (this.toString()));\n    };\n\n    IPv4.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, octet, stop, zeros, zerotable;\n      zerotable = {\n        0: 8,\n        128: 7,\n        192: 6,\n        224: 5,\n        240: 4,\n        248: 3,\n        252: 2,\n        254: 1,\n        255: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 3; k >= 0; i = k += -1) {\n        octet = this.octets[i];\n        if (octet in zerotable) {\n          zeros = zerotable[octet];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 8) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 32 - cidr;\n    };\n\n    return IPv4;\n\n  })();\n\n  ipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\n\n  ipv4Regexes = {\n    fourOctet: new RegExp(\"^\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"$\", 'i'),\n    longValue: new RegExp(\"^\" + ipv4Part + \"$\", 'i')\n  };\n\n  ipaddr.IPv4.parser = function(string) {\n    var match, parseIntAuto, part, shift, value;\n    parseIntAuto = function(string) {\n      if (string[0] === \"0\" && string[1] !== \"x\") {\n        return parseInt(string, 8);\n      } else {\n        return parseInt(string);\n      }\n    };\n    if (match = string.match(ipv4Regexes.fourOctet)) {\n      return (function() {\n        var k, len, ref, results;\n        ref = match.slice(1, 6);\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(parseIntAuto(part));\n        }\n        return results;\n      })();\n    } else if (match = string.match(ipv4Regexes.longValue)) {\n      value = parseIntAuto(match[1]);\n      if (value > 0xffffffff || value < 0) {\n        throw new Error(\"ipaddr: address outside defined range\");\n      }\n      return ((function() {\n        var k, results;\n        results = [];\n        for (shift = k = 0; k <= 24; shift = k += 8) {\n          results.push((value >> shift) & 0xff);\n        }\n        return results;\n      })()).reverse();\n    } else {\n      return null;\n    }\n  };\n\n  ipaddr.IPv6 = (function() {\n    function IPv6(parts, zoneId) {\n      var i, k, l, len, part, ref;\n      if (parts.length === 16) {\n        this.parts = [];\n        for (i = k = 0; k <= 14; i = k += 2) {\n          this.parts.push((parts[i] << 8) | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\n      }\n      ref = this.parts;\n      for (l = 0, len = ref.length; l < len; l++) {\n        part = ref[l];\n        if (!((0 <= part && part <= 0xffff))) {\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\n        }\n      }\n      if (zoneId) {\n        this.zoneId = zoneId;\n      }\n    }\n\n    IPv6.prototype.kind = function() {\n      return 'ipv6';\n    };\n\n    IPv6.prototype.toString = function() {\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n    };\n\n    IPv6.prototype.toRFC5952String = function() {\n      var bestMatchIndex, bestMatchLength, match, regex, string;\n      regex = /((^|:)(0(:|$)){2,})/g;\n      string = this.toNormalizedString();\n      bestMatchIndex = 0;\n      bestMatchLength = -1;\n      while ((match = regex.exec(string))) {\n        if (match[0].length > bestMatchLength) {\n          bestMatchIndex = match.index;\n          bestMatchLength = match[0].length;\n        }\n      }\n      if (bestMatchLength < 0) {\n        return string;\n      }\n      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);\n    };\n\n    IPv6.prototype.toByteArray = function() {\n      var bytes, k, len, part, ref;\n      bytes = [];\n      ref = this.parts;\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        bytes.push(part >> 8);\n        bytes.push(part & 0xff);\n      }\n      return bytes;\n    };\n\n    IPv6.prototype.toNormalizedString = function() {\n      var addr, part, suffix;\n      addr = ((function() {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16));\n        }\n        return results;\n      }).call(this)).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n\n    IPv6.prototype.toFixedLengthString = function() {\n      var addr, part, suffix;\n      addr = ((function() {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16).padStart(4, '0'));\n        }\n        return results;\n      }).call(this)).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n\n    IPv6.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv6') {\n        throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\n      }\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\n    };\n\n    IPv6.prototype.SpecialRanges = {\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n\n    IPv6.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv6.prototype.isIPv4MappedAddress = function() {\n      return this.range() === 'ipv4Mapped';\n    };\n\n    IPv6.prototype.toIPv4Address = function() {\n      var high, low, ref;\n      if (!this.isIPv4MappedAddress()) {\n        throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\n      }\n      ref = this.parts.slice(-2), high = ref[0], low = ref[1];\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n    };\n\n    IPv6.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, part, stop, zeros, zerotable;\n      zerotable = {\n        0: 16,\n        32768: 15,\n        49152: 14,\n        57344: 13,\n        61440: 12,\n        63488: 11,\n        64512: 10,\n        65024: 9,\n        65280: 8,\n        65408: 7,\n        65472: 6,\n        65504: 5,\n        65520: 4,\n        65528: 3,\n        65532: 2,\n        65534: 1,\n        65535: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 7; k >= 0; i = k += -1) {\n        part = this.parts[i];\n        if (part in zerotable) {\n          zeros = zerotable[part];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 16) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 128 - cidr;\n    };\n\n    return IPv6;\n\n  })();\n\n  ipv6Part = \"(?:[0-9a-f]+::?)+\";\n\n  zoneIndex = \"%[0-9a-z]{1,}\";\n\n  ipv6Regexes = {\n    zoneIndex: new RegExp(zoneIndex, 'i'),\n    \"native\": new RegExp(\"^(::)?(\" + ipv6Part + \")?([0-9a-f]+)?(::)?(\" + zoneIndex + \")?$\", 'i'),\n    transitional: new RegExp((\"^((?:\" + ipv6Part + \")|(?:::)(?:\" + ipv6Part + \")?)\") + (ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part) + (\"(\" + zoneIndex + \")?$\"), 'i')\n  };\n\n  expandIPv6 = function(string, parts) {\n    var colonCount, lastColon, part, replacement, replacementCount, zoneId;\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\n      return null;\n    }\n    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];\n    if (zoneId) {\n      zoneId = zoneId.substring(1);\n      string = string.replace(/%.+$/, '');\n    }\n    colonCount = 0;\n    lastColon = -1;\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n      colonCount++;\n    }\n    if (string.substr(0, 2) === '::') {\n      colonCount--;\n    }\n    if (string.substr(-2, 2) === '::') {\n      colonCount--;\n    }\n    if (colonCount > parts) {\n      return null;\n    }\n    replacementCount = parts - colonCount;\n    replacement = ':';\n    while (replacementCount--) {\n      replacement += '0:';\n    }\n    string = string.replace('::', replacement);\n    if (string[0] === ':') {\n      string = string.slice(1);\n    }\n    if (string[string.length - 1] === ':') {\n      string = string.slice(0, -1);\n    }\n    parts = (function() {\n      var k, len, ref, results;\n      ref = string.split(\":\");\n      results = [];\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        results.push(parseInt(part, 16));\n      }\n      return results;\n    })();\n    return {\n      parts: parts,\n      zoneId: zoneId\n    };\n  };\n\n  ipaddr.IPv6.parser = function(string) {\n    var addr, k, len, match, octet, octets, zoneId;\n    if (ipv6Regexes['native'].test(string)) {\n      return expandIPv6(string, 8);\n    } else if (match = string.match(ipv6Regexes['transitional'])) {\n      zoneId = match[6] || '';\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n      if (addr.parts) {\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n        for (k = 0, len = octets.length; k < len; k++) {\n          octet = octets[k];\n          if (!((0 <= octet && octet <= 255))) {\n            return null;\n          }\n        }\n        addr.parts.push(octets[0] << 8 | octets[1]);\n        addr.parts.push(octets[2] << 8 | octets[3]);\n        return {\n          parts: addr.parts,\n          zoneId: addr.zoneId\n        };\n      }\n    }\n    return null;\n  };\n\n  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {\n    return this.parser(string) !== null;\n  };\n\n  ipaddr.IPv4.isValid = function(string) {\n    var e;\n    try {\n      new this(this.parser(string));\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.isValidFourPartDecimal = function(string) {\n    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ipaddr.IPv6.isValid = function(string) {\n    var addr, e;\n    if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\n      return false;\n    }\n    try {\n      addr = this.parser(string);\n      new this(addr.parts, addr.zoneId);\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.parse = function(string) {\n    var parts;\n    parts = this.parser(string);\n    if (parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(parts);\n  };\n\n  ipaddr.IPv6.parse = function(string) {\n    var addr;\n    addr = this.parser(string);\n    if (addr.parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(addr.parts, addr.zoneId);\n  };\n\n  ipaddr.IPv4.parseCIDR = function(string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 32) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function() {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\n  };\n\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {\n    var filledOctetCount, j, octets;\n    prefix = parseInt(prefix);\n    if (prefix < 0 || prefix > 32) {\n      throw new Error('ipaddr: invalid IPv4 prefix length');\n    }\n    octets = [0, 0, 0, 0];\n    j = 0;\n    filledOctetCount = Math.floor(prefix / 8);\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n    if (filledOctetCount < 4) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n    }\n    return new this(octets);\n  };\n\n  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv4.networkAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv6.parseCIDR = function(string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 128) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function() {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\n  };\n\n  ipaddr.isValid = function(string) {\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n  };\n\n  ipaddr.parse = function(string) {\n    if (ipaddr.IPv6.isValid(string)) {\n      return ipaddr.IPv6.parse(string);\n    } else if (ipaddr.IPv4.isValid(string)) {\n      return ipaddr.IPv4.parse(string);\n    } else {\n      throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\n    }\n  };\n\n  ipaddr.parseCIDR = function(string) {\n    var e;\n    try {\n      return ipaddr.IPv6.parseCIDR(string);\n    } catch (error1) {\n      e = error1;\n      try {\n        return ipaddr.IPv4.parseCIDR(string);\n      } catch (error1) {\n        e = error1;\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\n      }\n    }\n  };\n\n  ipaddr.fromByteArray = function(bytes) {\n    var length;\n    length = bytes.length;\n    if (length === 4) {\n      return new ipaddr.IPv4(bytes);\n    } else if (length === 16) {\n      return new ipaddr.IPv6(bytes);\n    } else {\n      throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\n    }\n  };\n\n  ipaddr.process = function(string) {\n    var addr;\n    addr = this.parse(string);\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n      return addr.toIPv4Address();\n    } else {\n      return addr;\n    }\n  };\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}