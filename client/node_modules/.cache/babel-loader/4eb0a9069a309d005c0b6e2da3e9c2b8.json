{"ast":null,"code":"function mkParser(lang) {\n  return {\n    startState: startStateFn,\n    copyState: copyStateFn,\n    token: produceTokenFunction(lang),\n    languageData: {\n      commentTokens: {\n        line: \"#\",\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      }\n    }\n  };\n}\n\nexport const mscgen = mkParser({\n  \"keywords\": [\"msc\"],\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\"],\n  \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\nexport const msgenny = mkParser({\n  \"keywords\": null,\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\": null,\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\nexport const xu = mkParser({\n  \"keywords\": [\"msc\", \"xu\"],\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\n\nfunction wordRegexpBoundary(pWords) {\n  return new RegExp(\"^\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n}\n\nfunction wordRegexp(pWords) {\n  return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n}\n\nfunction startStateFn() {\n  return {\n    inComment: false,\n    inString: false,\n    inAttributeList: false,\n    inScript: false\n  };\n}\n\nfunction copyStateFn(pState) {\n  return {\n    inComment: pState.inComment,\n    inString: pState.inString,\n    inAttributeList: pState.inAttributeList,\n    inScript: pState.inScript\n  };\n}\n\nfunction produceTokenFunction(pConfig) {\n  return function (pStream, pState) {\n    if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n      return \"bracket\";\n    }\n    /* comments */\n\n\n    if (!pState.inComment) {\n      if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n        pState.inComment = true;\n        return \"comment\";\n      }\n\n      if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n        pStream.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    if (pState.inComment) {\n      if (pStream.match(/[^\\*\\/]*\\*\\//, true, true)) pState.inComment = false;else pStream.skipToEnd();\n      return \"comment\";\n    }\n    /* strings */\n\n\n    if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n      pState.inString = true;\n      return \"string\";\n    }\n\n    if (pState.inString) {\n      if (pStream.match(/[^\\\"]*\\\"/, true, true)) pState.inString = false;else pStream.skipToEnd();\n      return \"string\";\n    }\n    /* keywords & operators */\n\n\n    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true)) return \"keyword\";\n    if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true)) return \"operator\";\n    if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true)) return \"variable\";\n    /* attribute lists */\n\n    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n      pConfig.inAttributeList = true;\n      return \"bracket\";\n    }\n\n    if (pConfig.inAttributeList) {\n      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n        return \"attribute\";\n      }\n\n      if (pStream.match(']', true, true)) {\n        pConfig.inAttributeList = false;\n        return \"bracket\";\n      }\n    }\n\n    pStream.next();\n    return null;\n  };\n}","map":{"version":3,"names":["mkParser","lang","startState","startStateFn","copyState","copyStateFn","token","produceTokenFunction","languageData","commentTokens","line","block","open","close","mscgen","msgenny","xu","wordRegexpBoundary","pWords","RegExp","join","wordRegexp","inComment","inString","inAttributeList","inScript","pState","pConfig","pStream","match","brackets","singlecomment","skipToEnd","keywords","options","arcsWords","arcsOthers","operators","constants","attributes","next"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/mscgen.js"],"sourcesContent":["function mkParser(lang) {\n  return {\n    startState: startStateFn,\n    copyState: copyStateFn,\n    token: produceTokenFunction(lang),\n    languageData: {\n      commentTokens: {line: \"#\", block: {open: \"/*\", close: \"*/\"}}\n    }\n  }\n}\n\nexport const mscgen = mkParser({\n  \"keywords\" : [\"msc\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"], // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const msgenny = mkParser({\n  \"keywords\" : null,\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : null,\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nexport const xu = mkParser({\n  \"keywords\" : [\"msc\", \"xu\"],\n  \"options\" : [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\" : [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\" : [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n  \"brackets\" : [\"\\\\{\", \"\\\\}\"],  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\" : [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\" : [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\" : [\"//\", \"#\"],\n  \"operators\" : [\"=\"]\n})\n\nfunction wordRegexpBoundary(pWords) {\n  return new RegExp(\"^\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n}\n\nfunction wordRegexp(pWords) {\n  return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n}\n\nfunction startStateFn() {\n  return {\n    inComment : false,\n    inString : false,\n    inAttributeList : false,\n    inScript : false\n  };\n}\n\nfunction copyStateFn(pState) {\n  return {\n    inComment : pState.inComment,\n    inString : pState.inString,\n    inAttributeList : pState.inAttributeList,\n    inScript : pState.inScript\n  };\n}\n\nfunction produceTokenFunction(pConfig) {\n  return function(pStream, pState) {\n    if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n      return \"bracket\";\n    }\n    /* comments */\n    if (!pState.inComment) {\n      if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n        pState.inComment = true;\n        return \"comment\";\n      }\n      if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n        pStream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (pState.inComment) {\n      if (pStream.match(/[^\\*\\/]*\\*\\//, true, true))\n        pState.inComment = false;\n      else\n        pStream.skipToEnd();\n      return \"comment\";\n    }\n    /* strings */\n    if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n      pState.inString = true;\n      return \"string\";\n    }\n    if (pState.inString) {\n      if (pStream.match(/[^\\\"]*\\\"/, true, true))\n        pState.inString = false;\n      else\n        pStream.skipToEnd();\n      return \"string\";\n    }\n    /* keywords & operators */\n    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))\n      return \"keyword\";\n\n    if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))\n      return \"keyword\";\n\n    if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))\n      return \"operator\";\n\n    if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))\n      return \"variable\";\n\n    /* attribute lists */\n    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n      pConfig.inAttributeList = true;\n      return \"bracket\";\n    }\n    if (pConfig.inAttributeList) {\n      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n        return \"attribute\";\n      }\n      if (pStream.match(']', true, true)) {\n        pConfig.inAttributeList = false;\n        return \"bracket\";\n      }\n    }\n\n    pStream.next();\n    return null\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}