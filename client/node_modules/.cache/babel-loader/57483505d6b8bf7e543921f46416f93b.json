{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\n\nexport function gfmFootnoteHtml() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const label = options.label || 'Footnotes';\n  const backLabel = options.backLabel || 'Back to content';\n  const clobberPrefix = options.clobberPrefix === undefined || options.clobberPrefix === null ? 'user-content-' : options.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        stack.push(false);\n      },\n\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions');\n        const footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        const tightStack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true); // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n\n        this.setData('lastWasTag');\n      },\n\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n\n        this.buffer(); // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n        /** @type {Array<string>|undefined} */\n        this.getData('gfmFootnoteCallOrder');\n        let counts =\n        /** @type {Record<string, number>|undefined} */\n        this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n\n      null() {\n        const calls =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteCallOrder') || [];\n        const counts =\n        /** @type {Record<string, number>} */\n        this.getData('gfmFootnoteCallCounts') || {};\n        const definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">');\n          this.raw(this.encode(label));\n          this.tag('</h2>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n\n          const references = [];\n\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' + this.encode(backLabel) + '\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, (\n          /** @type {string} */\n          $0) => {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n\n    }\n  };\n}","map":{"version":3,"names":["normalizeIdentifier","sanitizeUri","own","hasOwnProperty","gfmFootnoteHtml","options","label","backLabel","clobberPrefix","undefined","enter","gfmFootnoteDefinition","stack","getData","push","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCallString","exit","definitions","footnoteStack","tightStack","current","pop","value","resume","setData","call","token","sliceSerialize","calls","counts","id","counter","index","indexOf","safeId","toLowerCase","length","reuseCounter","tag","String","null","lineEndingIfNeeded","raw","encode","referenceIndex","references","reference","join","injected","replace","$0"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-extension-gfm-footnote/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst own = {}.hasOwnProperty\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\n\nexport function gfmFootnoteHtml(options = {}) {\n  const label = options.label || 'Footnotes'\n  const backLabel = options.backLabel || 'Back to content'\n  const clobberPrefix =\n    options.clobberPrefix === undefined || options.clobberPrefix === null\n      ? 'user-content-'\n      : options.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        stack.push(false)\n      },\n\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions')\n        const footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        const tightStack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        const current = footnoteStack.pop()\n        const value = this.resume()\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true) // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n\n        this.setData('lastWasTag')\n      },\n\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n\n        this.buffer() // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n          /** @type {Array<string>|undefined} */\n          this.getData('gfmFootnoteCallOrder')\n        let counts =\n          /** @type {Record<string, number>|undefined} */\n          this.getData('gfmFootnoteCallCounts')\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n\n        let counter\n        this.resume()\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n\n        const reuseCounter = counts[id]\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n\n      null() {\n        const calls =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteCallOrder') || []\n        const counts =\n          /** @type {Record<string, number>} */\n          this.getData('gfmFootnoteCallCounts') || {}\n        const definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions') || {}\n        let index = -1\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">'\n          )\n          this.raw(this.encode(label))\n          this.tag('</h2>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n\n          const references = []\n\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' +\n                this.encode(backLabel) +\n                '\">↩' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n\n          const reference = references.join(' ')\n          let injected = false\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (\n                /** @type {string} */\n                $0\n              ) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}