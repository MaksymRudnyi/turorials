{"ast":null,"code":"// @ts-nocheck\nimport refractorCsharp from './csharp.js';\nimport refractorMarkup from './markup.js';\naspnet.displayName = 'aspnet';\naspnet.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function aspnet(Prism) {\n  Prism.register(refractorCsharp);\n  Prism.register(refractorMarkup);\n  Prism.languages.aspnet = Prism.languages.extend('markup', {\n    'page-directive': {\n      pattern: /<%\\s*@.*%>/,\n      alias: 'tag',\n      inside: {\n        'page-directive': {\n          pattern: /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.markup.tag.inside\n      }\n    },\n    directive: {\n      pattern: /<%.*%>/,\n      alias: 'tag',\n      inside: {\n        directive: {\n          pattern: /<%\\s*?[$=%#:]{0,2}|%>/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.csharp\n      }\n    }\n  }); // Regexp copied from prism-markup, with a negative look-ahead added\n\n  Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/; // match directives of attribute value foo=\"<% Bar %>\"\n\n  Prism.languages.insertBefore('inside', 'punctuation', {\n    directive: Prism.languages.aspnet['directive']\n  }, Prism.languages.aspnet.tag.inside['attr-value']);\n  Prism.languages.insertBefore('aspnet', 'comment', {\n    'asp-comment': {\n      pattern: /<%--[\\s\\S]*?--%>/,\n      alias: ['asp', 'comment']\n    }\n  }); // script runat=\"server\" contains csharp, not javascript\n\n  Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {\n    'asp-script': {\n      pattern: /(<script(?=.*runat=['\"]?server\\b)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,\n      lookbehind: true,\n      alias: ['asp', 'script'],\n      inside: Prism.languages.csharp || {}\n    }\n  });\n}","map":{"version":3,"names":["refractorCsharp","refractorMarkup","aspnet","displayName","aliases","Prism","register","languages","extend","pattern","alias","inside","rest","markup","tag","directive","csharp","insertBefore","javascript","lookbehind"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/aspnet.js"],"sourcesContent":["// @ts-nocheck\nimport refractorCsharp from './csharp.js'\nimport refractorMarkup from './markup.js'\naspnet.displayName = 'aspnet'\naspnet.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function aspnet(Prism) {\n  Prism.register(refractorCsharp)\n  Prism.register(refractorMarkup)\n  Prism.languages.aspnet = Prism.languages.extend('markup', {\n    'page-directive': {\n      pattern: /<%\\s*@.*%>/,\n      alias: 'tag',\n      inside: {\n        'page-directive': {\n          pattern:\n            /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.markup.tag.inside\n      }\n    },\n    directive: {\n      pattern: /<%.*%>/,\n      alias: 'tag',\n      inside: {\n        directive: {\n          pattern: /<%\\s*?[$=%#:]{0,2}|%>/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.csharp\n      }\n    }\n  }) // Regexp copied from prism-markup, with a negative look-ahead added\n\n  Prism.languages.aspnet.tag.pattern =\n    /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/ // match directives of attribute value foo=\"<% Bar %>\"\n\n  Prism.languages.insertBefore(\n    'inside',\n    'punctuation',\n    {\n      directive: Prism.languages.aspnet['directive']\n    },\n    Prism.languages.aspnet.tag.inside['attr-value']\n  )\n  Prism.languages.insertBefore('aspnet', 'comment', {\n    'asp-comment': {\n      pattern: /<%--[\\s\\S]*?--%>/,\n      alias: ['asp', 'comment']\n    }\n  }) // script runat=\"server\" contains csharp, not javascript\n\n  Prism.languages.insertBefore(\n    'aspnet',\n    Prism.languages.javascript ? 'script' : 'tag',\n    {\n      'asp-script': {\n        pattern:\n          /(<script(?=.*runat=['\"]?server\\b)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,\n        lookbehind: true,\n        alias: ['asp', 'script'],\n        inside: Prism.languages.csharp || {}\n      }\n    }\n  )\n}\n"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,aAA5B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACAC,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACpCA,KAAK,CAACC,QAAN,CAAeN,eAAf;EACAK,KAAK,CAACC,QAAN,CAAeL,eAAf;EACAI,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,QAAvB,EAAiC;IACxD,kBAAkB;MAChBC,OAAO,EAAE,YADO;MAEhBC,KAAK,EAAE,KAFS;MAGhBC,MAAM,EAAE;QACN,kBAAkB;UAChBF,OAAO,EACL,2HAFc;UAGhBC,KAAK,EAAE;QAHS,CADZ;QAMNE,IAAI,EAAEP,KAAK,CAACE,SAAN,CAAgBM,MAAhB,CAAuBC,GAAvB,CAA2BH;MAN3B;IAHQ,CADsC;IAaxDI,SAAS,EAAE;MACTN,OAAO,EAAE,QADA;MAETC,KAAK,EAAE,KAFE;MAGTC,MAAM,EAAE;QACNI,SAAS,EAAE;UACTN,OAAO,EAAE,uBADA;UAETC,KAAK,EAAE;QAFE,CADL;QAKNE,IAAI,EAAEP,KAAK,CAACE,SAAN,CAAgBS;MALhB;IAHC;EAb6C,CAAjC,CAAzB,CAHoC,CA2BjC;;EAEHX,KAAK,CAACE,SAAN,CAAgBL,MAAhB,CAAuBY,GAAvB,CAA2BL,OAA3B,GACE,kGADF,CA7BoC,CA8BiE;;EAErGJ,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CACE,QADF,EAEE,aAFF,EAGE;IACEF,SAAS,EAAEV,KAAK,CAACE,SAAN,CAAgBL,MAAhB,CAAuB,WAAvB;EADb,CAHF,EAMEG,KAAK,CAACE,SAAN,CAAgBL,MAAhB,CAAuBY,GAAvB,CAA2BH,MAA3B,CAAkC,YAAlC,CANF;EAQAN,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD;IAChD,eAAe;MACbR,OAAO,EAAE,kBADI;MAEbC,KAAK,EAAE,CAAC,KAAD,EAAQ,SAAR;IAFM;EADiC,CAAlD,EAxCoC,CA6CjC;;EAEHL,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CACE,QADF,EAEEZ,KAAK,CAACE,SAAN,CAAgBW,UAAhB,GAA6B,QAA7B,GAAwC,KAF1C,EAGE;IACE,cAAc;MACZT,OAAO,EACL,iEAFU;MAGZU,UAAU,EAAE,IAHA;MAIZT,KAAK,EAAE,CAAC,KAAD,EAAQ,QAAR,CAJK;MAKZC,MAAM,EAAEN,KAAK,CAACE,SAAN,CAAgBS,MAAhB,IAA0B;IALtB;EADhB,CAHF;AAaD"},"metadata":{},"sourceType":"module"}