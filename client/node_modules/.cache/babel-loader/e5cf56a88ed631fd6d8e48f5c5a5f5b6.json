{"ast":null,"code":"function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\n;\nvar keywordArray = [\"package\", \"message\", \"import\", \"syntax\", \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\", \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"option\", \"service\", \"rpc\", \"returns\"];\nvar keywords = wordRegexp(keywordArray);\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nfunction tokenBase(stream) {\n  // whitespaces\n  if (stream.eatSpace()) return null; // Handle one line Comments\n\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } // Handle Number Literals\n\n\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return \"number\";\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n  } // Handle Strings\n\n\n  if (stream.match(/^\"([^\"]|(\"\"))*\"/)) {\n    return \"string\";\n  }\n\n  if (stream.match(/^'([^']|(''))*'/)) {\n    return \"string\";\n  } // Handle words\n\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(identifiers)) {\n    return \"variable\";\n  }\n\n  ; // Handle non-detected items\n\n  stream.next();\n  return null;\n}\n\n;\nexport const protobuf = {\n  token: tokenBase,\n  languageData: {\n    autocomplete: keywordArray\n  }\n};","map":{"version":3,"names":["wordRegexp","words","RegExp","join","keywordArray","keywords","identifiers","tokenBase","stream","eatSpace","match","skipToEnd","next","protobuf","token","languageData","autocomplete"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/protobuf.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n};\n\nvar keywordArray = [\n  \"package\", \"message\", \"import\", \"syntax\",\n  \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n  \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n  \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\",\n  \"option\", \"service\", \"rpc\", \"returns\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\nfunction tokenBase(stream) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n      return \"number\";\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n      return \"number\";\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n      return \"number\";\n  }\n\n  // Handle Strings\n  if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n  if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n  // Handle words\n  if (stream.match(keywords)) { return \"keyword\"; }\n  if (stream.match(identifiers)) { return \"variable\"; } ;\n\n  // Handle non-detected items\n  stream.next();\n  return null;\n};\n\nexport const protobuf = {\n  token: tokenBase,\n  languageData: {\n    autocomplete: keywordArray\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,KAApB,EAA2B;EACzB,OAAO,IAAIC,MAAJ,CAAW,QAAQD,KAAK,CAACE,IAAN,CAAW,KAAX,CAAR,GAA4B,OAAvC,EAAgD,GAAhD,CAAP;AACD;;AAAA;AAED,IAAIC,YAAY,GAAG,CACjB,SADiB,EACN,SADM,EACK,QADL,EACe,QADf,EAEjB,UAFiB,EAEL,UAFK,EAEO,UAFP,EAEmB,UAFnB,EAE+B,SAF/B,EAE0C,YAF1C,EAEwD,QAFxD,EAGjB,MAHiB,EAGT,OAHS,EAGA,QAHA,EAGU,MAHV,EAGkB,OAHlB,EAG2B,QAH3B,EAIjB,OAJiB,EAIR,OAJQ,EAIC,QAJD,EAIW,QAJX,EAIqB,QAJrB,EAI+B,QAJ/B,EAIyC,SAJzC,EAIoD,SAJpD,EAI+D,UAJ/D,EAI2E,UAJ3E,EAKjB,QALiB,EAKP,SALO,EAKI,KALJ,EAKW,SALX,CAAnB;AAOA,IAAIC,QAAQ,GAAGL,UAAU,CAACI,YAAD,CAAzB;AAEA,IAAIE,WAAW,GAAG,IAAIJ,MAAJ,CAAW,+CAAX,CAAlB;;AAEA,SAASK,SAAT,CAAmBC,MAAnB,EAA2B;EACzB;EACA,IAAIA,MAAM,CAACC,QAAP,EAAJ,EAAuB,OAAO,IAAP,CAFE,CAIzB;;EACA,IAAID,MAAM,CAACE,KAAP,CAAa,IAAb,CAAJ,EAAwB;IACtBF,MAAM,CAACG,SAAP;IACA,OAAO,SAAP;EACD,CARwB,CAUzB;;;EACA,IAAIH,MAAM,CAACE,KAAP,CAAa,YAAb,EAA2B,KAA3B,CAAJ,EAAuC;IACrC,IAAIF,MAAM,CAACE,KAAP,CAAa,sBAAb,CAAJ,EACE,OAAO,QAAP;IACF,IAAIF,MAAM,CAACE,KAAP,CAAa,iCAAb,CAAJ,EACE,OAAO,QAAP;IACF,IAAIF,MAAM,CAACE,KAAP,CAAa,4BAAb,CAAJ,EACE,OAAO,QAAP;EACH,CAlBwB,CAoBzB;;;EACA,IAAIF,MAAM,CAACE,KAAP,CAAa,iBAAb,CAAJ,EAAqC;IAAE,OAAO,QAAP;EAAkB;;EACzD,IAAIF,MAAM,CAACE,KAAP,CAAa,iBAAb,CAAJ,EAAqC;IAAE,OAAO,QAAP;EAAkB,CAtBhC,CAwBzB;;;EACA,IAAIF,MAAM,CAACE,KAAP,CAAaL,QAAb,CAAJ,EAA4B;IAAE,OAAO,SAAP;EAAmB;;EACjD,IAAIG,MAAM,CAACE,KAAP,CAAaJ,WAAb,CAAJ,EAA+B;IAAE,OAAO,UAAP;EAAoB;;EAAC,CA1B7B,CA4BzB;;EACAE,MAAM,CAACI,IAAP;EACA,OAAO,IAAP;AACD;;AAAA;AAED,OAAO,MAAMC,QAAQ,GAAG;EACtBC,KAAK,EAAEP,SADe;EAEtBQ,YAAY,EAAE;IACZC,YAAY,EAAEZ;EADF;AAFQ,CAAjB"},"metadata":{},"sourceType":"module"}