{"ast":null,"code":"// @ts-nocheck\nimport refractorMarkup from './markup.js';\nparser.displayName = 'parser';\nparser.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function parser(Prism) {\n  Prism.register(refractorMarkup);\n\n  (function (Prism) {\n    var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    });\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:false|true)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    });\n    Prism.languages.insertBefore('inside', 'punctuation', {\n      expression: parser.expression,\n      keyword: parser.keyword,\n      variable: parser.variable,\n      function: parser.function,\n      escape: parser.escape,\n      'parser-punctuation': {\n        pattern: parser.punctuation,\n        alias: 'punctuation'\n      }\n    }, parser['tag'].inside['attr-value']);\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkup","parser","displayName","aliases","Prism","register","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/parser.js"],"sourcesContent":["// @ts-nocheck\nimport refractorMarkup from './markup.js'\nparser.displayName = 'parser'\nparser.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function parser(Prism) {\n  Prism.register(refractorMarkup)\n  ;(function (Prism) {\n    var parser = (Prism.languages.parser = Prism.languages.extend('markup', {\n      keyword: {\n        pattern:\n          /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n        lookbehind: true\n      },\n      variable: {\n        pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\.|:+/\n        }\n      },\n      function: {\n        pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /(^@)(?:GET_|SET_)/,\n            lookbehind: true\n          },\n          punctuation: /\\.|:+/\n        }\n      },\n      escape: {\n        pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n        alias: 'builtin'\n      },\n      punctuation: /[\\[\\](){};]/\n    }))\n    parser = Prism.languages.insertBefore('parser', 'keyword', {\n      'parser-comment': {\n        pattern: /(\\s)#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      expression: {\n        // Allow for 3 levels of depth\n        pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          string: {\n            pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n            lookbehind: true\n          },\n          keyword: parser.keyword,\n          variable: parser.variable,\n          function: parser.function,\n          boolean: /\\b(?:false|true)\\b/,\n          number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n          escape: parser.escape,\n          operator:\n            /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n          punctuation: parser.punctuation\n        }\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'punctuation',\n      {\n        expression: parser.expression,\n        keyword: parser.keyword,\n        variable: parser.variable,\n        function: parser.function,\n        escape: parser.escape,\n        'parser-punctuation': {\n          pattern: parser.punctuation,\n          alias: 'punctuation'\n        }\n      },\n      parser['tag'].inside['attr-value']\n    )\n  })(Prism)\n}\n"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,aAA5B;AACAC,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACpCA,KAAK,CAACC,QAAN,CAAeL,eAAf;;EACC,CAAC,UAAUI,KAAV,EAAiB;IACjB,IAAIH,MAAM,GAAIG,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,QAAvB,EAAiC;MACtEC,OAAO,EAAE;QACPC,OAAO,EACL,8GAFK;QAGPC,UAAU,EAAE;MAHL,CAD6D;MAMtEC,QAAQ,EAAE;QACRF,OAAO,EAAE,2DADD;QAERC,UAAU,EAAE,IAFJ;QAGRE,MAAM,EAAE;UACNC,WAAW,EAAE;QADP;MAHA,CAN4D;MAatEC,QAAQ,EAAE;QACRL,OAAO,EAAE,gDADD;QAERC,UAAU,EAAE,IAFJ;QAGRE,MAAM,EAAE;UACNJ,OAAO,EAAE;YACPC,OAAO,EAAE,mBADF;YAEPC,UAAU,EAAE;UAFL,CADH;UAKNG,WAAW,EAAE;QALP;MAHA,CAb4D;MAwBtEE,MAAM,EAAE;QACNN,OAAO,EAAE,oCADH;QAENO,KAAK,EAAE;MAFD,CAxB8D;MA4BtEH,WAAW,EAAE;IA5ByD,CAAjC,CAAvC;IA8BAZ,MAAM,GAAGG,KAAK,CAACE,SAAN,CAAgBW,YAAhB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD;MACzD,kBAAkB;QAChBR,OAAO,EAAE,SADO;QAEhBC,UAAU,EAAE,IAFI;QAGhBM,KAAK,EAAE;MAHS,CADuC;MAMzDE,UAAU,EAAE;QACV;QACAT,OAAO,EAAE,sDAFC;QAGVU,MAAM,EAAE,IAHE;QAIVT,UAAU,EAAE,IAJF;QAKVE,MAAM,EAAE;UACNQ,MAAM,EAAE;YACNX,OAAO,EAAE,0CADH;YAENC,UAAU,EAAE;UAFN,CADF;UAKNF,OAAO,EAAEP,MAAM,CAACO,OALV;UAMNG,QAAQ,EAAEV,MAAM,CAACU,QANX;UAONG,QAAQ,EAAEb,MAAM,CAACa,QAPX;UAQNO,OAAO,EAAE,oBARH;UASNC,MAAM,EAAE,iDATF;UAUNP,MAAM,EAAEd,MAAM,CAACc,MAVT;UAWNQ,QAAQ,EACN,gGAZI;UAaNV,WAAW,EAAEZ,MAAM,CAACY;QAbd;MALE;IAN6C,CAAlD,CAAT;IA4BAT,KAAK,CAACE,SAAN,CAAgBW,YAAhB,CACE,QADF,EAEE,aAFF,EAGE;MACEC,UAAU,EAAEjB,MAAM,CAACiB,UADrB;MAEEV,OAAO,EAAEP,MAAM,CAACO,OAFlB;MAGEG,QAAQ,EAAEV,MAAM,CAACU,QAHnB;MAIEG,QAAQ,EAAEb,MAAM,CAACa,QAJnB;MAKEC,MAAM,EAAEd,MAAM,CAACc,MALjB;MAME,sBAAsB;QACpBN,OAAO,EAAER,MAAM,CAACY,WADI;QAEpBG,KAAK,EAAE;MAFa;IANxB,CAHF,EAcEf,MAAM,CAAC,KAAD,CAAN,CAAcW,MAAd,CAAqB,YAArB,CAdF;EAgBD,CA3EA,EA2EER,KA3EF;AA4EF"},"metadata":{},"sourceType":"module"}