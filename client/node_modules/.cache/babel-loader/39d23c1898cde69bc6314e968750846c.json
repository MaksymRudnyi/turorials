{"ast":null,"code":"/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\n\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/;\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\n\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g;\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\n\nvar QUOTE_REGEXP = /([\\\\\"])/g;\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\n\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format;\nexports.parse = parse;\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required');\n  }\n\n  var parameters = obj.parameters;\n  var type = obj.type;\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type');\n  }\n\n  var string = type; // append parameters\n\n  if (parameters && typeof parameters === 'object') {\n    var param;\n    var params = Object.keys(parameters).sort();\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i];\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name');\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param]);\n    }\n  }\n\n  return string;\n}\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required');\n  } // support req/res-like objects as argument\n\n\n  var header = typeof string === 'object' ? getcontenttype(string) : string;\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string');\n  }\n\n  var index = header.indexOf(';');\n  var type = index !== -1 ? header.substr(0, index).trim() : header.trim();\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type');\n  }\n\n  var obj = new ContentType(type.toLowerCase()); // parse parameters\n\n  if (index !== -1) {\n    var key;\n    var match;\n    var value;\n    PARAM_REGEXP.lastIndex = index;\n\n    while (match = PARAM_REGEXP.exec(header)) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format');\n      }\n\n      index += match[0].length;\n      key = match[1].toLowerCase();\n      value = match[2];\n\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value.substr(1, value.length - 2).replace(QESC_REGEXP, '$1');\n      }\n\n      obj.parameters[key] = value;\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format');\n    }\n  }\n\n  return obj;\n}\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\n\nfunction getcontenttype(obj) {\n  var header;\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type');\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type'];\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object');\n  }\n\n  return header;\n}\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\n\nfunction qstring(val) {\n  var str = String(val); // no need to quote tokens\n\n  if (TOKEN_REGEXP.test(str)) {\n    return str;\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value');\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"';\n}\n/**\n * Class to represent a content type.\n * @private\n */\n\n\nfunction ContentType(type) {\n  this.parameters = Object.create(null);\n  this.type = type;\n}","map":{"version":3,"names":["PARAM_REGEXP","TEXT_REGEXP","TOKEN_REGEXP","QESC_REGEXP","QUOTE_REGEXP","TYPE_REGEXP","exports","format","parse","obj","TypeError","parameters","type","test","string","param","params","Object","keys","sort","i","length","qstring","header","getcontenttype","index","indexOf","substr","trim","ContentType","toLowerCase","key","match","value","lastIndex","exec","replace","getHeader","headers","val","str","String","create"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/content-type/index.js"],"sourcesContent":["/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.substr(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value\n          .substr(1, value.length - 2)\n          .replace(QESC_REGEXP, '$1')\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}