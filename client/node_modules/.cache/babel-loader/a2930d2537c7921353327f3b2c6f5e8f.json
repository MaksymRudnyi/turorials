{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\n\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n\n  let data;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n  /** @type {State} */\n\n\n  function atBreak(code) {\n    if (code === null || code === 91 || code === 93 && !data ||\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs || size > 999) {\n      return nok(code);\n    }\n\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return atBreak;\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return label(code);\n  }\n  /** @type {State} */\n\n\n  function label(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n\n    effects.consume(code);\n    data = data || !markdownSpace(code);\n    return code === 92 ? labelEscape : label;\n  }\n  /** @type {State} */\n\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return label;\n    }\n\n    return label(code);\n  }\n}","map":{"version":3,"names":["markdownLineEnding","markdownSpace","factoryLabel","effects","ok","nok","type","markerType","stringType","self","size","data","start","code","enter","consume","exit","atBreak","parser","constructs","contentType","label","labelEscape"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-factory-label/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAAQA,kBAAR,EAA4BC,aAA5B,QAAgD,0BAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,EAA/B,EAAmCC,GAAnC,EAAwCC,IAAxC,EAA8CC,UAA9C,EAA0DC,UAA1D,EAAsE;EAC3E,MAAMC,IAAI,GAAG,IAAb;EACA,IAAIC,IAAI,GAAG,CAAX;EACA;;EAEA,IAAIC,IAAJ;EACA,OAAOC,KAAP;EACA;;EAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnBV,OAAO,CAACW,KAAR,CAAcR,IAAd;IACAH,OAAO,CAACW,KAAR,CAAcP,UAAd;IACAJ,OAAO,CAACY,OAAR,CAAgBF,IAAhB;IACAV,OAAO,CAACa,IAAR,CAAaT,UAAb;IACAJ,OAAO,CAACW,KAAR,CAAcN,UAAd;IACA,OAAOS,OAAP;EACD;EACD;;;EAEA,SAASA,OAAT,CAAiBJ,IAAjB,EAAuB;IACrB,IACEA,IAAI,KAAK,IAAT,IACAA,IAAI,KAAK,EADT,IAECA,IAAI,KAAK,EAAT,IAAe,CAACF,IAFjB;IAGA;AACN;AACA;;IAEM;;IAEA;IACCE,IAAI,KAAK,EAAT,IACC,CAACH,IADF,IAEC,4BAA4BD,IAAI,CAACS,MAAL,CAAYC,UAZ1C,IAaAT,IAAI,GAAG,GAdT,EAeE;MACA,OAAOL,GAAG,CAACQ,IAAD,CAAV;IACD;;IAED,IAAIA,IAAI,KAAK,EAAb,EAAiB;MACfV,OAAO,CAACa,IAAR,CAAaR,UAAb;MACAL,OAAO,CAACW,KAAR,CAAcP,UAAd;MACAJ,OAAO,CAACY,OAAR,CAAgBF,IAAhB;MACAV,OAAO,CAACa,IAAR,CAAaT,UAAb;MACAJ,OAAO,CAACa,IAAR,CAAaV,IAAb;MACA,OAAOF,EAAP;IACD;;IAED,IAAIJ,kBAAkB,CAACa,IAAD,CAAtB,EAA8B;MAC5BV,OAAO,CAACW,KAAR,CAAc,YAAd;MACAX,OAAO,CAACY,OAAR,CAAgBF,IAAhB;MACAV,OAAO,CAACa,IAAR,CAAa,YAAb;MACA,OAAOC,OAAP;IACD;;IAEDd,OAAO,CAACW,KAAR,CAAc,aAAd,EAA6B;MAC3BM,WAAW,EAAE;IADc,CAA7B;IAGA,OAAOC,KAAK,CAACR,IAAD,CAAZ;EACD;EACD;;;EAEA,SAASQ,KAAT,CAAeR,IAAf,EAAqB;IACnB,IACEA,IAAI,KAAK,IAAT,IACAA,IAAI,KAAK,EADT,IAEAA,IAAI,KAAK,EAFT,IAGAb,kBAAkB,CAACa,IAAD,CAHlB,IAIAH,IAAI,KAAK,GALX,EAME;MACAP,OAAO,CAACa,IAAR,CAAa,aAAb;MACA,OAAOC,OAAO,CAACJ,IAAD,CAAd;IACD;;IAEDV,OAAO,CAACY,OAAR,CAAgBF,IAAhB;IACAF,IAAI,GAAGA,IAAI,IAAI,CAACV,aAAa,CAACY,IAAD,CAA7B;IACA,OAAOA,IAAI,KAAK,EAAT,GAAcS,WAAd,GAA4BD,KAAnC;EACD;EACD;;;EAEA,SAASC,WAAT,CAAqBT,IAArB,EAA2B;IACzB,IAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAxB,IAA8BA,IAAI,KAAK,EAA3C,EAA+C;MAC7CV,OAAO,CAACY,OAAR,CAAgBF,IAAhB;MACAH,IAAI;MACJ,OAAOW,KAAP;IACD;;IAED,OAAOA,KAAK,CAACR,IAAD,CAAZ;EACD;AACF"},"metadata":{},"sourceType":"module"}