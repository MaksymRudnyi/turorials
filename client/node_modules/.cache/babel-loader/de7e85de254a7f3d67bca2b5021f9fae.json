{"ast":null,"code":"import { simpleMode } from \"./simple-mode.js\";\nexport const factor = simpleMode({\n  start: [// comments\n  {\n    regex: /#?!.*/,\n    token: \"comment\"\n  }, // strings \"\"\", multiline --> state\n  {\n    regex: /\"\"\"/,\n    token: \"string\",\n    next: \"string3\"\n  }, {\n    regex: /(STRING:)(\\s)/,\n    token: [\"keyword\", null],\n    next: \"string2\"\n  }, {\n    regex: /\\S*?\"/,\n    token: \"string\",\n    next: \"string\"\n  }, // numbers: dec, hex, unicode, bin, fractional, complex\n  {\n    regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/,\n    token: \"number\"\n  }, //{regex: /[+-]?/} //fractional\n  // definition: defining word, defined word, etc\n  {\n    regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/,\n    token: [\"keyword\", null, \"def\", null, \"bracket\"],\n    next: \"stack\"\n  }, // method definition: defining word, type, defined word, etc\n  {\n    regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/,\n    token: [\"keyword\", null, \"def\", null, \"tag\"]\n  }, // vocabulary using --> state\n  {\n    regex: /USING\\:/,\n    token: \"keyword\",\n    next: \"vocabulary\"\n  }, // vocabulary definition/use\n  {\n    regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/,\n    token: [\"keyword\", null, \"tag\"]\n  }, // definition: a defining word, defined word\n  {\n    regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/,\n    token: [\"keyword\", null, \"def\"]\n  }, // \"keywords\", incl. ; t f . [ ] { } defining words\n  {\n    regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/,\n    token: \"keyword\"\n  }, // <constructors> and the like\n  {\n    regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/,\n    token: \"builtin\"\n  }, {\n    regex: /[\\)><]+\\S+(?=\\s|$)/,\n    token: \"builtin\"\n  }, // operators\n  {\n    regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/,\n    token: \"keyword\"\n  }, // any id (?)\n  {\n    regex: /\\S+/,\n    token: \"variable\"\n  }, {\n    regex: /\\s+|./,\n    token: null\n  }],\n  vocabulary: [{\n    regex: /;/,\n    token: \"keyword\",\n    next: \"start\"\n  }, {\n    regex: /\\S+/,\n    token: \"tag\"\n  }, {\n    regex: /\\s+|./,\n    token: null\n  }],\n  string: [{\n    regex: /(?:[^\\\\]|\\\\.)*?\"/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /.*/,\n    token: \"string\"\n  }],\n  string2: [{\n    regex: /^;/,\n    token: \"keyword\",\n    next: \"start\"\n  }, {\n    regex: /.*/,\n    token: \"string\"\n  }],\n  string3: [{\n    regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /.*/,\n    token: \"string\"\n  }],\n  stack: [{\n    regex: /\\)/,\n    token: \"bracket\",\n    next: \"start\"\n  }, {\n    regex: /--/,\n    token: \"bracket\"\n  }, {\n    regex: /\\S+/,\n    token: \"meta\"\n  }, {\n    regex: /\\s+|./,\n    token: null\n  }],\n  languageData: {\n    dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n    commentTokens: {\n      line: \"!\"\n    }\n  }\n});","map":{"version":3,"names":["simpleMode","factor","start","regex","token","next","vocabulary","string","string2","string3","stack","languageData","dontIndentStates","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/factor.js"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nexport const factor = simpleMode({\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    languageData: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      commentTokens: {line: \"!\"}\n    }\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}