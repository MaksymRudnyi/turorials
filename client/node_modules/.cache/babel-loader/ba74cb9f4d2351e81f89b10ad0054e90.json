{"ast":null,"code":"function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  token: function (stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n  blankLine: function (state) {\n    state.cur = body;\n  },\n  startState: function () {\n    return {\n      cur: start\n    };\n  }\n};","map":{"version":3,"names":["failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","http","token","eatSpace","blankLine","startState"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/http.js"],"sourcesContent":["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  token: function(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n\n  blankLine: function(state) {\n    state.cur = body;\n  },\n\n  startState: function() {\n    return {cur: start};\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}