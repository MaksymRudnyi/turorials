{"ast":null,"code":"/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\nimport { listItem } from 'mdast-util-to-markdown/lib/handle/list-item.js';\nimport { track } from 'mdast-util-to-markdown/lib/util/track.js';\n/** @type {FromMarkdownExtension} */\n\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n};\n/** @type {ToMarkdownExtension} */\n\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{\n    atBreak: true,\n    character: '-',\n    after: '[:|-]'\n  }],\n  handlers: {\n    listItem: listItemWithTaskListItem\n  }\n};\n/** @type {FromMarkdownHandle} */\n\nfunction exitCheck(token) {\n  const node =\n  /** @type {ListItem} */\n  this.stack[this.stack.length - 2]; // We’re always in a paragraph, in a list item.\n\n  node.checked = token.type === 'taskListCheckValueChecked';\n}\n/** @type {FromMarkdownHandle} */\n\n\nfunction exitParagraphWithTaskListItem(token) {\n  const parent =\n  /** @type {Parent} */\n  this.stack[this.stack.length - 2];\n  const node =\n  /** @type {Paragraph} */\n  this.stack[this.stack.length - 1];\n  const siblings = parent.children;\n  const head = node.children[0];\n  let index = -1;\n  /** @type {Paragraph|undefined} */\n\n  let firstParaghraph;\n\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean' && head && head.type === 'text') {\n    while (++index < siblings.length) {\n      const sibling = siblings[index];\n\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling;\n        break;\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1);\n\n      if (head.value.length === 0) {\n        node.children.shift();\n      } else if (node.position && head.position && typeof head.position.start.offset === 'number') {\n        head.position.start.column++;\n        head.position.start.offset++;\n        node.position.start = Object.assign({}, head.position.start);\n      }\n    }\n  }\n\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\n\n\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0];\n  const checkable = typeof node.checked === 'boolean' && head && head.type === 'paragraph';\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';\n  const tracker = track(safeOptions);\n\n  if (checkable) {\n    tracker.move(checkbox);\n  }\n\n  let value = listItem(node, parent, context, { ...safeOptions,\n    ...tracker.current()\n  });\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n\n  return value;\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n\n  function check($0) {\n    return $0 + checkbox;\n  }\n}","map":{"version":3,"names":["listItem","track","gfmTaskListItemFromMarkdown","exit","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","unsafe","atBreak","character","after","handlers","listItemWithTaskListItem","token","node","stack","length","checked","type","parent","siblings","children","head","index","firstParaghraph","sibling","value","slice","shift","position","start","offset","column","Object","assign","context","safeOptions","checkable","checkbox","tracker","move","current","replace","check","$0"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/mdast-util-gfm-task-list-item/index.js"],"sourcesContent":["/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parent} */ (this.stack[this.stack.length - 2])\n  const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n  const siblings = parent.children\n  const head = node.children[0]\n  let index = -1\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      const sibling = siblings[index]\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else if (\n        node.position &&\n        head.position &&\n        typeof head.position.start.offset === 'number'\n      ) {\n        head.position.start.column++\n        head.position.start.offset++\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}