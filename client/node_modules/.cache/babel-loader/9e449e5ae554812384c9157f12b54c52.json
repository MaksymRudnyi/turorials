{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n\n  let index;\n  /** @type {number|undefined} */\n\n  let enter; // If we start and end with an EOL or a space.\n\n  if ((events[headEnterIndex][1].type === 'lineEnding' || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === 'lineEnding' || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex; // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding';\n        events[tailExitIndex][1].type = 'codeTextPadding';\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === 'lineEnding') {\n      events[enter][1].type = 'codeTextData';\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n\n      enter = undefined;\n    }\n  }\n\n  return events;\n}\n/** @type {Previous} */\n\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === 'characterEscape';\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n\n  let size;\n  /** @type {Token} */\n\n  let token;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText');\n    effects.enter('codeTextSequence');\n    return openingSequence(code);\n  }\n  /** @type {State} */\n\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return openingSequence;\n    }\n\n    effects.exit('codeTextSequence');\n    return gap(code);\n  }\n  /** @type {State} */\n\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    } // Closing fence?\n    // Could also be data.\n\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence');\n      size = 0;\n      return closingSequence(code);\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return gap;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return gap;\n    } // Data.\n\n\n    effects.enter('codeTextData');\n    return data(code);\n  } // In code.\n\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit('codeTextData');\n      return gap(code);\n    }\n\n    effects.consume(code);\n    return data;\n  } // Closing fence.\n\n  /** @type {State} */\n\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return closingSequence;\n    } // Done!\n\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence');\n      effects.exit('codeText');\n      return ok(code);\n    } // More or less accents: mark as data.\n\n\n    token.type = 'codeTextData';\n    return data(code);\n  }\n}","map":{"version":3,"names":["markdownLineEnding","codeText","name","tokenize","tokenizeCodeText","resolve","resolveCodeText","previous","events","tailExitIndex","length","headEnterIndex","index","enter","type","undefined","end","splice","code","effects","ok","nok","self","sizeOpen","size","token","start","openingSequence","consume","exit","gap","closingSequence","data"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-core-commonmark/lib/code-text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}