{"ast":null,"code":"function switchState(source, setState, f) {\n  setState(f);\n  return f(source, setState);\n} // These should all be Unicode extended, as per the Haskell 2010 report\n\n\nvar smallRE = /[a-z_]/;\nvar largeRE = /[A-Z]/;\nvar digitRE = /\\d/;\nvar hexitRE = /[0-9A-Fa-f]/;\nvar octitRE = /[0-7]/;\nvar idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\nvar symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\nvar specialRE = /[(),;[\\]`{}]/;\nvar whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal(source, setState) {\n  if (source.eatWhile(whiteCharRE)) {\n    return null;\n  }\n\n  var ch = source.next();\n\n  if (specialRE.test(ch)) {\n    if (ch == '{' && source.eat('-')) {\n      var t = \"comment\";\n\n      if (source.eat('#')) {\n        t = \"meta\";\n      }\n\n      return switchState(source, setState, ncomment(t, 1));\n    }\n\n    return null;\n  }\n\n  if (ch == '\\'') {\n    if (source.eat('\\\\')) {\n      source.next(); // should handle other escapes here\n    } else {\n      source.next();\n    }\n\n    if (source.eat('\\'')) {\n      return \"string\";\n    }\n\n    return \"error\";\n  }\n\n  if (ch == '\"') {\n    return switchState(source, setState, stringLiteral);\n  }\n\n  if (largeRE.test(ch)) {\n    source.eatWhile(idRE);\n\n    if (source.eat('.')) {\n      return \"qualifier\";\n    }\n\n    return \"type\";\n  }\n\n  if (smallRE.test(ch)) {\n    source.eatWhile(idRE);\n    return \"variable\";\n  }\n\n  if (digitRE.test(ch)) {\n    if (ch == '0') {\n      if (source.eat(/[xX]/)) {\n        source.eatWhile(hexitRE); // should require at least 1\n\n        return \"integer\";\n      }\n\n      if (source.eat(/[oO]/)) {\n        source.eatWhile(octitRE); // should require at least 1\n\n        return \"number\";\n      }\n    }\n\n    source.eatWhile(digitRE);\n    var t = \"number\";\n\n    if (source.match(/^\\.\\d+/)) {\n      t = \"number\";\n    }\n\n    if (source.eat(/[eE]/)) {\n      t = \"number\";\n      source.eat(/[-+]/);\n      source.eatWhile(digitRE); // should require at least 1\n    }\n\n    return t;\n  }\n\n  if (ch == \".\" && source.eat(\".\")) return \"keyword\";\n\n  if (symbolRE.test(ch)) {\n    if (ch == '-' && source.eat(/-/)) {\n      source.eatWhile(/-/);\n\n      if (!source.eat(symbolRE)) {\n        source.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    source.eatWhile(symbolRE);\n    return \"variable\";\n  }\n\n  return \"error\";\n}\n\nfunction ncomment(type, nest) {\n  if (nest == 0) {\n    return normal;\n  }\n\n  return function (source, setState) {\n    var currNest = nest;\n\n    while (!source.eol()) {\n      var ch = source.next();\n\n      if (ch == '{' && source.eat('-')) {\n        ++currNest;\n      } else if (ch == '-' && source.eat('}')) {\n        --currNest;\n\n        if (currNest == 0) {\n          setState(normal);\n          return type;\n        }\n      }\n    }\n\n    setState(ncomment(type, currNest));\n    return type;\n  };\n}\n\nfunction stringLiteral(source, setState) {\n  while (!source.eol()) {\n    var ch = source.next();\n\n    if (ch == '\"') {\n      setState(normal);\n      return \"string\";\n    }\n\n    if (ch == '\\\\') {\n      if (source.eol() || source.eat(whiteCharRE)) {\n        setState(stringGap);\n        return \"string\";\n      }\n\n      if (source.eat('&')) {} else {\n        source.next(); // should handle other escapes here\n      }\n    }\n  }\n\n  setState(normal);\n  return \"error\";\n}\n\nfunction stringGap(source, setState) {\n  if (source.eat('\\\\')) {\n    return switchState(source, setState, stringLiteral);\n  }\n\n  source.next();\n  setState(normal);\n  return \"error\";\n}\n\nvar wellKnownWords = function () {\n  var wkw = {};\n\n  function setType(t) {\n    return function () {\n      for (var i = 0; i < arguments.length; i++) wkw[arguments[i]] = t;\n    };\n  }\n\n  setType(\"keyword\")(\"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\", \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\", \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n  setType(\"keyword\")(\"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n  setType(\"builtin\")(\"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\", \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\", \"*>\", \"**\");\n  setType(\"builtin\")(\"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\", \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\", \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\", \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\", \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\", \"String\", \"True\");\n  setType(\"builtin\")(\"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\", \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\", \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\", \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\", \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\", \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\", \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\", \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\", \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\", \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\", \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\", \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\", \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\", \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\", \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\", \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\", \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\", \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\", \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\", \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\", \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\", \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\", \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\", \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\", \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\", \"zip3\", \"zipWith\", \"zipWith3\");\n  return wkw;\n}();\n\nexport const haskell = {\n  startState: function () {\n    return {\n      f: normal\n    };\n  },\n  copyState: function (s) {\n    return {\n      f: s.f\n    };\n  },\n  token: function (stream, state) {\n    var t = state.f(stream, function (s) {\n      state.f = s;\n    });\n    var w = stream.current();\n    return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n  },\n  languageData: {\n    commentTokens: {\n      line: \"--\",\n      block: {\n        open: \"{-\",\n        close: \"-}\"\n      }\n    }\n  }\n};","map":{"version":3,"names":["switchState","source","setState","f","smallRE","largeRE","digitRE","hexitRE","octitRE","idRE","symbolRE","specialRE","whiteCharRE","normal","eatWhile","ch","next","test","eat","t","ncomment","stringLiteral","match","skipToEnd","type","nest","currNest","eol","stringGap","wellKnownWords","wkw","setType","i","arguments","length","haskell","startState","copyState","s","token","stream","state","w","current","hasOwnProperty","languageData","commentTokens","line","block","open","close"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/haskell.js"],"sourcesContent":["function switchState(source, setState, f) {\n  setState(f);\n  return f(source, setState);\n}\n\n// These should all be Unicode extended, as per the Haskell 2010 report\nvar smallRE = /[a-z_]/;\nvar largeRE = /[A-Z]/;\nvar digitRE = /\\d/;\nvar hexitRE = /[0-9A-Fa-f]/;\nvar octitRE = /[0-7]/;\nvar idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\nvar symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\nvar specialRE = /[(),;[\\]`{}]/;\nvar whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal(source, setState) {\n  if (source.eatWhile(whiteCharRE)) {\n    return null;\n  }\n\n  var ch = source.next();\n  if (specialRE.test(ch)) {\n    if (ch == '{' && source.eat('-')) {\n      var t = \"comment\";\n      if (source.eat('#')) {\n        t = \"meta\";\n      }\n      return switchState(source, setState, ncomment(t, 1));\n    }\n    return null;\n  }\n\n  if (ch == '\\'') {\n    if (source.eat('\\\\')) {\n      source.next();  // should handle other escapes here\n    }\n    else {\n      source.next();\n    }\n    if (source.eat('\\'')) {\n      return \"string\";\n    }\n    return \"error\";\n  }\n\n  if (ch == '\"') {\n    return switchState(source, setState, stringLiteral);\n  }\n\n  if (largeRE.test(ch)) {\n    source.eatWhile(idRE);\n    if (source.eat('.')) {\n      return \"qualifier\";\n    }\n    return \"type\";\n  }\n\n  if (smallRE.test(ch)) {\n    source.eatWhile(idRE);\n    return \"variable\";\n  }\n\n  if (digitRE.test(ch)) {\n    if (ch == '0') {\n      if (source.eat(/[xX]/)) {\n        source.eatWhile(hexitRE); // should require at least 1\n        return \"integer\";\n      }\n      if (source.eat(/[oO]/)) {\n        source.eatWhile(octitRE); // should require at least 1\n        return \"number\";\n      }\n    }\n    source.eatWhile(digitRE);\n    var t = \"number\";\n    if (source.match(/^\\.\\d+/)) {\n      t = \"number\";\n    }\n    if (source.eat(/[eE]/)) {\n      t = \"number\";\n      source.eat(/[-+]/);\n      source.eatWhile(digitRE); // should require at least 1\n    }\n    return t;\n  }\n\n  if (ch == \".\" && source.eat(\".\"))\n    return \"keyword\";\n\n  if (symbolRE.test(ch)) {\n    if (ch == '-' && source.eat(/-/)) {\n      source.eatWhile(/-/);\n      if (!source.eat(symbolRE)) {\n        source.skipToEnd();\n        return \"comment\";\n      }\n    }\n    source.eatWhile(symbolRE);\n    return \"variable\"\n  }\n\n  return \"error\";\n}\n\nfunction ncomment(type, nest) {\n  if (nest == 0) {\n    return normal;\n  }\n  return function(source, setState) {\n    var currNest = nest;\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '{' && source.eat('-')) {\n        ++currNest;\n      }\n      else if (ch == '-' && source.eat('}')) {\n        --currNest;\n        if (currNest == 0) {\n          setState(normal);\n          return type;\n        }\n      }\n    }\n    setState(ncomment(type, currNest));\n    return type;\n  };\n}\n\nfunction stringLiteral(source, setState) {\n  while (!source.eol()) {\n    var ch = source.next();\n    if (ch == '\"') {\n      setState(normal);\n      return \"string\";\n    }\n    if (ch == '\\\\') {\n      if (source.eol() || source.eat(whiteCharRE)) {\n        setState(stringGap);\n        return \"string\";\n      }\n      if (source.eat('&')) {\n      }\n      else {\n        source.next(); // should handle other escapes here\n      }\n    }\n  }\n  setState(normal);\n  return \"error\";\n}\n\nfunction stringGap(source, setState) {\n  if (source.eat('\\\\')) {\n    return switchState(source, setState, stringLiteral);\n  }\n  source.next();\n  setState(normal);\n  return \"error\";\n}\n\n\nvar wellKnownWords = (function() {\n  var wkw = {};\n  function setType(t) {\n    return function () {\n      for (var i = 0; i < arguments.length; i++)\n        wkw[arguments[i]] = t;\n    };\n  }\n\n  setType(\"keyword\")(\n    \"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\",\n    \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\",\n    \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n\n  setType(\"keyword\")(\n    \"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n\n  setType(\"builtin\")(\n    \"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\",\n    \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\",\n    \"*>\", \"**\");\n\n  setType(\"builtin\")(\n    \"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\",\n    \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\",\n    \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\",\n    \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\",\n    \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\",\n    \"String\", \"True\");\n\n  setType(\"builtin\")(\n    \"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\",\n    \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\",\n    \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\",\n    \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\",\n    \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\",\n    \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\",\n    \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\",\n    \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\",\n    \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\",\n    \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\",\n    \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\",\n    \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\",\n    \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\",\n    \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\",\n    \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\",\n    \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\",\n    \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\",\n    \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\",\n    \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\",\n    \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\",\n    \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\",\n    \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\",\n    \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\",\n    \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\",\n    \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\",\n    \"zip3\", \"zipWith\", \"zipWith3\");\n\n  return wkw;\n})();\n\nexport const haskell = {\n  startState: function ()  { return { f: normal }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var t = state.f(stream, function(s) { state.f = s; });\n    var w = stream.current();\n    return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\", block: {open: \"{-\", close: \"-}\"}}\n  }\n};\n"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,CAAvC,EAA0C;EACxCD,QAAQ,CAACC,CAAD,CAAR;EACA,OAAOA,CAAC,CAACF,MAAD,EAASC,QAAT,CAAR;AACD,C,CAED;;;AACA,IAAIE,OAAO,GAAG,QAAd;AACA,IAAIC,OAAO,GAAG,OAAd;AACA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,OAAO,GAAG,aAAd;AACA,IAAIC,OAAO,GAAG,OAAd;AACA,IAAIC,IAAI,GAAG,0BAAX;AACA,IAAIC,QAAQ,GAAG,0BAAf;AACA,IAAIC,SAAS,GAAG,cAAhB;AACA,IAAIC,WAAW,GAAG,WAAlB,C,CAA+B;;AAE/B,SAASC,MAAT,CAAgBZ,MAAhB,EAAwBC,QAAxB,EAAkC;EAChC,IAAID,MAAM,CAACa,QAAP,CAAgBF,WAAhB,CAAJ,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,IAAIG,EAAE,GAAGd,MAAM,CAACe,IAAP,EAAT;;EACA,IAAIL,SAAS,CAACM,IAAV,CAAeF,EAAf,CAAJ,EAAwB;IACtB,IAAIA,EAAE,IAAI,GAAN,IAAad,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAjB,EAAkC;MAChC,IAAIC,CAAC,GAAG,SAAR;;MACA,IAAIlB,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAJ,EAAqB;QACnBC,CAAC,GAAG,MAAJ;MACD;;MACD,OAAOnB,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBkB,QAAQ,CAACD,CAAD,EAAI,CAAJ,CAA3B,CAAlB;IACD;;IACD,OAAO,IAAP;EACD;;EAED,IAAIJ,EAAE,IAAI,IAAV,EAAgB;IACd,IAAId,MAAM,CAACiB,GAAP,CAAW,IAAX,CAAJ,EAAsB;MACpBjB,MAAM,CAACe,IAAP,GADoB,CACJ;IACjB,CAFD,MAGK;MACHf,MAAM,CAACe,IAAP;IACD;;IACD,IAAIf,MAAM,CAACiB,GAAP,CAAW,IAAX,CAAJ,EAAsB;MACpB,OAAO,QAAP;IACD;;IACD,OAAO,OAAP;EACD;;EAED,IAAIH,EAAE,IAAI,GAAV,EAAe;IACb,OAAOf,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBmB,aAAnB,CAAlB;EACD;;EAED,IAAIhB,OAAO,CAACY,IAAR,CAAaF,EAAb,CAAJ,EAAsB;IACpBd,MAAM,CAACa,QAAP,CAAgBL,IAAhB;;IACA,IAAIR,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAJ,EAAqB;MACnB,OAAO,WAAP;IACD;;IACD,OAAO,MAAP;EACD;;EAED,IAAId,OAAO,CAACa,IAAR,CAAaF,EAAb,CAAJ,EAAsB;IACpBd,MAAM,CAACa,QAAP,CAAgBL,IAAhB;IACA,OAAO,UAAP;EACD;;EAED,IAAIH,OAAO,CAACW,IAAR,CAAaF,EAAb,CAAJ,EAAsB;IACpB,IAAIA,EAAE,IAAI,GAAV,EAAe;MACb,IAAId,MAAM,CAACiB,GAAP,CAAW,MAAX,CAAJ,EAAwB;QACtBjB,MAAM,CAACa,QAAP,CAAgBP,OAAhB,EADsB,CACI;;QAC1B,OAAO,SAAP;MACD;;MACD,IAAIN,MAAM,CAACiB,GAAP,CAAW,MAAX,CAAJ,EAAwB;QACtBjB,MAAM,CAACa,QAAP,CAAgBN,OAAhB,EADsB,CACI;;QAC1B,OAAO,QAAP;MACD;IACF;;IACDP,MAAM,CAACa,QAAP,CAAgBR,OAAhB;IACA,IAAIa,CAAC,GAAG,QAAR;;IACA,IAAIlB,MAAM,CAACqB,KAAP,CAAa,QAAb,CAAJ,EAA4B;MAC1BH,CAAC,GAAG,QAAJ;IACD;;IACD,IAAIlB,MAAM,CAACiB,GAAP,CAAW,MAAX,CAAJ,EAAwB;MACtBC,CAAC,GAAG,QAAJ;MACAlB,MAAM,CAACiB,GAAP,CAAW,MAAX;MACAjB,MAAM,CAACa,QAAP,CAAgBR,OAAhB,EAHsB,CAGI;IAC3B;;IACD,OAAOa,CAAP;EACD;;EAED,IAAIJ,EAAE,IAAI,GAAN,IAAad,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAjB,EACE,OAAO,SAAP;;EAEF,IAAIR,QAAQ,CAACO,IAAT,CAAcF,EAAd,CAAJ,EAAuB;IACrB,IAAIA,EAAE,IAAI,GAAN,IAAad,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAjB,EAAkC;MAChCjB,MAAM,CAACa,QAAP,CAAgB,GAAhB;;MACA,IAAI,CAACb,MAAM,CAACiB,GAAP,CAAWR,QAAX,CAAL,EAA2B;QACzBT,MAAM,CAACsB,SAAP;QACA,OAAO,SAAP;MACD;IACF;;IACDtB,MAAM,CAACa,QAAP,CAAgBJ,QAAhB;IACA,OAAO,UAAP;EACD;;EAED,OAAO,OAAP;AACD;;AAED,SAASU,QAAT,CAAkBI,IAAlB,EAAwBC,IAAxB,EAA8B;EAC5B,IAAIA,IAAI,IAAI,CAAZ,EAAe;IACb,OAAOZ,MAAP;EACD;;EACD,OAAO,UAASZ,MAAT,EAAiBC,QAAjB,EAA2B;IAChC,IAAIwB,QAAQ,GAAGD,IAAf;;IACA,OAAO,CAACxB,MAAM,CAAC0B,GAAP,EAAR,EAAsB;MACpB,IAAIZ,EAAE,GAAGd,MAAM,CAACe,IAAP,EAAT;;MACA,IAAID,EAAE,IAAI,GAAN,IAAad,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAjB,EAAkC;QAChC,EAAEQ,QAAF;MACD,CAFD,MAGK,IAAIX,EAAE,IAAI,GAAN,IAAad,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAjB,EAAkC;QACrC,EAAEQ,QAAF;;QACA,IAAIA,QAAQ,IAAI,CAAhB,EAAmB;UACjBxB,QAAQ,CAACW,MAAD,CAAR;UACA,OAAOW,IAAP;QACD;MACF;IACF;;IACDtB,QAAQ,CAACkB,QAAQ,CAACI,IAAD,EAAOE,QAAP,CAAT,CAAR;IACA,OAAOF,IAAP;EACD,CAjBD;AAkBD;;AAED,SAASH,aAAT,CAAuBpB,MAAvB,EAA+BC,QAA/B,EAAyC;EACvC,OAAO,CAACD,MAAM,CAAC0B,GAAP,EAAR,EAAsB;IACpB,IAAIZ,EAAE,GAAGd,MAAM,CAACe,IAAP,EAAT;;IACA,IAAID,EAAE,IAAI,GAAV,EAAe;MACbb,QAAQ,CAACW,MAAD,CAAR;MACA,OAAO,QAAP;IACD;;IACD,IAAIE,EAAE,IAAI,IAAV,EAAgB;MACd,IAAId,MAAM,CAAC0B,GAAP,MAAgB1B,MAAM,CAACiB,GAAP,CAAWN,WAAX,CAApB,EAA6C;QAC3CV,QAAQ,CAAC0B,SAAD,CAAR;QACA,OAAO,QAAP;MACD;;MACD,IAAI3B,MAAM,CAACiB,GAAP,CAAW,GAAX,CAAJ,EAAqB,CACpB,CADD,MAEK;QACHjB,MAAM,CAACe,IAAP,GADG,CACY;MAChB;IACF;EACF;;EACDd,QAAQ,CAACW,MAAD,CAAR;EACA,OAAO,OAAP;AACD;;AAED,SAASe,SAAT,CAAmB3B,MAAnB,EAA2BC,QAA3B,EAAqC;EACnC,IAAID,MAAM,CAACiB,GAAP,CAAW,IAAX,CAAJ,EAAsB;IACpB,OAAOlB,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBmB,aAAnB,CAAlB;EACD;;EACDpB,MAAM,CAACe,IAAP;EACAd,QAAQ,CAACW,MAAD,CAAR;EACA,OAAO,OAAP;AACD;;AAGD,IAAIgB,cAAc,GAAI,YAAW;EAC/B,IAAIC,GAAG,GAAG,EAAV;;EACA,SAASC,OAAT,CAAiBZ,CAAjB,EAAoB;IAClB,OAAO,YAAY;MACjB,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EACEF,GAAG,CAACG,SAAS,CAACD,CAAD,CAAV,CAAH,GAAoBb,CAApB;IACH,CAHD;EAID;;EAEDY,OAAO,CAAC,SAAD,CAAP,CACE,MADF,EACU,OADV,EACmB,MADnB,EAC2B,SAD3B,EACsC,UADtC,EACkD,IADlD,EACwD,MADxD,EACgE,SADhE,EAEE,IAFF,EAEQ,QAFR,EAEkB,IAFlB,EAEwB,OAFxB,EAEiC,QAFjC,EAE2C,QAF3C,EAEqD,UAFrD,EAEiE,KAFjE,EAGE,QAHF,EAGY,SAHZ,EAGuB,IAHvB,EAG6B,MAH7B,EAGqC,MAHrC,EAG6C,OAH7C,EAGsD,GAHtD;EAKAA,OAAO,CAAC,SAAD,CAAP,CACE,MADF,EACU,GADV,EACe,IADf,EACqB,GADrB,EAC0B,IAD1B,EACgC,IADhC,EACsC,IADtC,EAC4C,GAD5C,EACiD,GADjD,EACsD,IADtD;EAGAA,OAAO,CAAC,SAAD,CAAP,CACE,IADF,EACQ,IADR,EACc,GADd,EACmB,IADnB,EACyB,GADzB,EAC8B,IAD9B,EACoC,GADpC,EACyC,GADzC,EAC8C,GAD9C,EACmD,IADnD,EACyD,GADzD,EAC8D,IAD9D,EACoE,IADpE,EAEE,KAFF,EAES,KAFT,EAEgB,KAFhB,EAEuB,IAFvB,EAE6B,GAF7B,EAEkC,IAFlC,EAEwC,IAFxC,EAE8C,KAF9C,EAEqD,GAFrD,EAE0D,IAF1D,EAEgE,IAFhE,EAEsE,GAFtE,EAGE,IAHF,EAGQ,IAHR;EAKAA,OAAO,CAAC,SAAD,CAAP,CACE,aADF,EACiB,MADjB,EACyB,SADzB,EACoC,MADpC,EAC4C,QAD5C,EACsD,IADtD,EAC4D,QAD5D,EACsE,MADtE,EAEE,IAFF,EAEQ,OAFR,EAEiB,UAFjB,EAE6B,OAF7B,EAEsC,UAFtC,EAEkD,YAFlD,EAEgE,SAFhE,EAGE,IAHF,EAGQ,IAHR,EAGc,SAHd,EAGyB,KAHzB,EAGgC,SAHhC,EAG2C,UAH3C,EAGuD,MAHvD,EAG+D,IAH/D,EAGqE,MAHrE,EAIE,OAJF,EAIW,OAJX,EAIoB,SAJpB,EAI+B,KAJ/B,EAIsC,KAJtC,EAI6C,UAJ7C,EAIyD,UAJzD,EAIqE,MAJrE,EAKE,OALF,EAKW,MALX,EAKmB,WALnB,EAKgC,UALhC,EAK4C,OAL5C,EAKqD,MALrD,EAK6D,OAL7D,EAME,QANF,EAMY,MANZ;EAQAA,OAAO,CAAC,SAAD,CAAP,CACE,KADF,EACS,MADT,EACiB,OADjB,EAC0B,KAD1B,EACiC,KADjC,EACwC,KADxC,EAC+C,YAD/C,EAC6D,UAD7D,EAEE,MAFF,EAEU,OAFV,EAEmB,MAFnB,EAE2B,OAF3B,EAEoC,OAFpC,EAE6C,OAF7C,EAEsD,OAFtD,EAE+D,SAF/D,EAGE,SAHF,EAGa,QAHb,EAGuB,WAHvB,EAGoC,OAHpC,EAG6C,KAH7C,EAGoD,MAHpD,EAG4D,OAH5D,EAIE,OAJF,EAIW,aAJX,EAI0B,KAJ1B,EAIiC,QAJjC,EAI2C,MAJ3C,EAImD,WAJnD,EAIgE,QAJhE,EAKE,MALF,EAKU,aALV,EAKyB,UALzB,EAKqC,cALrC,EAKqD,gBALrD,EAME,YANF,EAMgB,OANhB,EAMyB,MANzB,EAMiC,KANjC,EAMwC,UANxC,EAMoD,MANpD,EAM4D,QAN5D,EAOE,MAPF,EAOU,aAPV,EAOyB,YAPzB,EAOuC,YAPvC,EAOqD,OAPrD,EAO8D,MAP9D,EAQE,OARF,EAQW,QARX,EAQqB,OARrB,EAQ8B,QAR9B,EAQwC,UARxC,EAQoD,aARpD,EASE,cATF,EASkB,cATlB,EASkC,KATlC,EASyC,KATzC,EASgD,SAThD,EAS2D,aAT3D,EAUE,SAVF,EAUa,MAVb,EAUqB,IAVrB,EAU2B,MAV3B,EAUmC,UAVnC,EAU+C,SAV/C,EAU0D,gBAV1D,EAWE,QAXF,EAWY,YAXZ,EAW0B,OAX1B,EAWmC,gBAXnC,EAWqD,SAXrD,EAWgE,MAXhE,EAYE,KAZF,EAYS,QAZT,EAYmB,KAZnB,EAY0B,OAZ1B,EAYmC,KAZnC,EAY0C,SAZ1C,EAYqD,QAZrD,EAY+D,KAZ/D,EAaE,MAbF,EAaU,OAbV,EAamB,KAbnB,EAa0B,UAb1B,EAasC,SAbtC,EAaiD,OAbjD,EAa0D,KAb1D,EAaiE,UAbjE,EAcE,SAdF,EAca,KAdb,EAcoB,QAdpB,EAc8B,KAd9B,EAcqC,SAdrC,EAcgD,MAdhD,EAcwD,KAdxD,EAc+D,IAd/D,EAeE,WAfF,EAee,IAff,EAeqB,MAfrB,EAe6B,OAf7B,EAesC,SAftC,EAeiD,gBAfjD,EAemE,MAfnE,EAgBE,SAhBF,EAgBa,QAhBb,EAgBuB,UAhBvB,EAgBmC,MAhBnC,EAgB2C,SAhB3C,EAgBsD,MAhBtD,EAgB8D,UAhB9D,EAiBE,QAjBF,EAiBY,UAjBZ,EAiBwB,QAjBxB,EAiBkC,WAjBlC,EAiB+C,OAjB/C,EAiBwD,WAjBxD,EAkBE,YAlBF,EAkBgB,OAlBhB,EAkByB,KAlBzB,EAkBgC,QAlBhC,EAkB0C,WAlB1C,EAkBuD,QAlBvD,EAkBiE,SAlBjE,EAmBE,OAnBF,EAmBW,YAnBX,EAmByB,OAnBzB,EAmBkC,QAnBlC,EAmB4C,OAnB5C,EAmBqD,QAnBrD,EAmB+D,KAnB/D,EAoBE,UApBF,EAoBc,WApBd,EAoB2B,MApB3B,EAoBmC,UApBnC,EAoB+C,UApB/C,EAoB2D,WApB3D,EAqBE,YArBF,EAqBgB,OArBhB,EAqByB,WArBzB,EAqBsC,aArBtC,EAqBqD,QArBrD,EAqB+D,KArB/D,EAsBE,MAtBF,EAsBU,KAtBV,EAsBiB,MAtBjB,EAsByB,SAtBzB,EAsBoC,MAtBpC,EAsB4C,UAtB5C,EAsBwD,MAtBxD,EAsBgE,KAtBhE,EAuBE,MAvBF,EAuBU,MAvBV,EAuBkB,WAvBlB,EAuB+B,KAvB/B,EAuBsC,MAvBtC,EAuB8C,QAvB9C,EAuBwD,WAvBxD,EAwBE,YAxBF,EAwBgB,UAxBhB,EAwB4B,SAxB5B,EAwBuC,WAxBvC,EAwBoD,SAxBpD,EAwB+D,OAxB/D,EAyBE,SAzBF,EAyBa,OAzBb,EAyBsB,QAzBtB,EAyBgC,WAzBhC,EAyB6C,OAzB7C,EAyBsD,WAzBtD,EAyBmE,KAzBnE,EA0BE,MA1BF,EA0BU,SA1BV,EA0BqB,UA1BrB;EA4BA,OAAOD,GAAP;AACD,CA3DoB,EAArB;;AA6DA,OAAO,MAAMK,OAAO,GAAG;EACrBC,UAAU,EAAE,YAAa;IAAE,OAAO;MAAEjC,CAAC,EAAEU;IAAL,CAAP;EAAuB,CAD7B;EAErBwB,SAAS,EAAG,UAAUC,CAAV,EAAa;IAAE,OAAO;MAAEnC,CAAC,EAAEmC,CAAC,CAACnC;IAAP,CAAP;EAAoB,CAF1B;EAIrBoC,KAAK,EAAE,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;IAC7B,IAAItB,CAAC,GAAGsB,KAAK,CAACtC,CAAN,CAAQqC,MAAR,EAAgB,UAASF,CAAT,EAAY;MAAEG,KAAK,CAACtC,CAAN,GAAUmC,CAAV;IAAc,CAA5C,CAAR;IACA,IAAII,CAAC,GAAGF,MAAM,CAACG,OAAP,EAAR;IACA,OAAOd,cAAc,CAACe,cAAf,CAA8BF,CAA9B,IAAmCb,cAAc,CAACa,CAAD,CAAjD,GAAuDvB,CAA9D;EACD,CARoB;EAUrB0B,YAAY,EAAE;IACZC,aAAa,EAAE;MAACC,IAAI,EAAE,IAAP;MAAaC,KAAK,EAAE;QAACC,IAAI,EAAE,IAAP;QAAaC,KAAK,EAAE;MAApB;IAApB;EADH;AAVO,CAAhB"},"metadata":{},"sourceType":"module"}