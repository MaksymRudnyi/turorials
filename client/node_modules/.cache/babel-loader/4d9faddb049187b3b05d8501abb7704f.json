{"ast":null,"code":"// @ts-nocheck\narturo.displayName = 'arturo';\narturo.aliases = ['art'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function arturo(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * @param {string} lang\n     * @param {string} pattern\n     */\n    var createLanguageString = function (lang, pattern) {\n      return {\n        pattern: RegExp(/\\{!/.source + '(?:' + (pattern || lang) + ')' + /$[\\s\\S]*\\}/.source, 'm'),\n        greedy: true,\n        inside: {\n          embedded: {\n            pattern: /(^\\{!\\w+\\b)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            alias: 'language-' + lang,\n            inside: Prism.languages[lang]\n          },\n          string: /[\\s\\S]+/\n        }\n      };\n    };\n\n    Prism.languages.arturo = {\n      comment: {\n        pattern: /;.*/,\n        greedy: true\n      },\n      character: {\n        pattern: /`.`/,\n        alias: 'char',\n        greedy: true\n      },\n      number: {\n        pattern: /\\b\\d+(?:\\.\\d+(?:\\.\\d+(?:-[\\w+-]+)?)?)?\\b/\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      },\n      regex: {\n        pattern: /\\{\\/.*?\\/\\}/,\n        greedy: true\n      },\n      'html-string': createLanguageString('html'),\n      'css-string': createLanguageString('css'),\n      'js-string': createLanguageString('js'),\n      'md-string': createLanguageString('md'),\n      'sql-string': createLanguageString('sql'),\n      'sh-string': createLanguageString('shell', 'sh'),\n      multistring: {\n        pattern: /».*|\\{:[\\s\\S]*?:\\}|\\{[\\s\\S]*?\\}|^-{6}$[\\s\\S]*/m,\n        alias: 'string',\n        greedy: true\n      },\n      label: {\n        pattern: /\\w+\\b\\??:/,\n        alias: 'property'\n      },\n      literal: {\n        pattern: /'(?:\\w+\\b\\??:?)/,\n        alias: 'constant'\n      },\n      type: {\n        pattern: /:(?:\\w+\\b\\??:?)/,\n        alias: 'class-name'\n      },\n      color: /#\\w+/,\n      predicate: {\n        pattern: /\\b(?:all|and|any|ascii|attr|attribute|attributeLabel|binary|block|char|contains|database|date|dictionary|empty|equal|even|every|exists|false|floating|function|greater|greaterOrEqual|if|in|inline|integer|is|key|label|leap|less|lessOrEqual|literal|logical|lower|nand|negative|nor|not|notEqual|null|numeric|odd|or|path|pathLabel|positive|prefix|prime|regex|same|set|some|sorted|standalone|string|subset|suffix|superset|symbol|symbolLiteral|true|try|type|unless|upper|when|whitespace|word|xnor|xor|zero)\\?/,\n        alias: 'keyword'\n      },\n      'builtin-function': {\n        pattern: /\\b(?:abs|acos|acosh|acsec|acsech|actan|actanh|add|after|alert|alias|and|angle|append|arg|args|arity|array|as|asec|asech|asin|asinh|atan|atan2|atanh|attr|attrs|average|before|benchmark|blend|break|call|capitalize|case|ceil|chop|clear|clip|close|color|combine|conj|continue|copy|cos|cosh|crc|csec|csech|ctan|ctanh|cursor|darken|dec|decode|define|delete|desaturate|deviation|dialog|dictionary|difference|digest|digits|div|do|download|drop|dup|e|else|empty|encode|ensure|env|escape|execute|exit|exp|extend|extract|factors|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gcd|get|goto|hash|hypot|if|inc|indent|index|infinity|info|input|insert|inspect|intersection|invert|jaro|join|keys|kurtosis|last|let|levenshtein|lighten|list|ln|log|loop|lower|mail|map|match|max|median|min|mod|module|mul|nand|neg|new|nor|normalize|not|now|null|open|or|outdent|pad|palette|panic|path|pause|permissions|permutate|pi|pop|popup|pow|powerset|powmod|prefix|print|prints|process|product|query|random|range|read|relative|remove|rename|render|repeat|replace|request|return|reverse|round|sample|saturate|script|sec|sech|select|serve|set|shl|shr|shuffle|sin|sinh|size|skewness|slice|sort|spin|split|sqrt|squeeze|stack|strip|sub|suffix|sum|switch|symbols|symlink|sys|take|tan|tanh|terminal|terminate|to|truncate|try|type|unclip|union|unique|unless|until|unzip|upper|values|var|variance|volume|webview|while|with|wordwrap|write|xnor|xor|zip)\\b/,\n        alias: 'keyword'\n      },\n      sugar: {\n        pattern: /->|=>|\\||::/,\n        alias: 'operator'\n      },\n      punctuation: /[()[\\],]/,\n      symbol: {\n        pattern: /<:|-:|ø|@|#|\\+|\\||\\*|\\$|---|-|%|\\/|\\.\\.|\\^|~|=|<|>|\\\\/\n      },\n      boolean: {\n        pattern: /\\b(?:false|maybe|true)\\b/\n      }\n    };\n    Prism.languages.art = Prism.languages['arturo'];\n  })(Prism);\n}","map":{"version":3,"names":["arturo","displayName","aliases","Prism","createLanguageString","lang","pattern","RegExp","source","greedy","inside","embedded","lookbehind","alias","languages","string","comment","character","number","regex","multistring","label","literal","type","color","predicate","sugar","punctuation","symbol","boolean","art"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/arturo.js"],"sourcesContent":["// @ts-nocheck\narturo.displayName = 'arturo'\narturo.aliases = ['art']\n\n/** @type {import('../core.js').Syntax} */\nexport default function arturo(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} lang\n     * @param {string} pattern\n     */\n    var createLanguageString = function (lang, pattern) {\n      return {\n        pattern: RegExp(\n          /\\{!/.source + '(?:' + (pattern || lang) + ')' + /$[\\s\\S]*\\}/.source,\n          'm'\n        ),\n        greedy: true,\n        inside: {\n          embedded: {\n            pattern: /(^\\{!\\w+\\b)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            alias: 'language-' + lang,\n            inside: Prism.languages[lang]\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    }\n\n    Prism.languages.arturo = {\n      comment: {\n        pattern: /;.*/,\n        greedy: true\n      },\n      character: {\n        pattern: /`.`/,\n        alias: 'char',\n        greedy: true\n      },\n      number: {\n        pattern: /\\b\\d+(?:\\.\\d+(?:\\.\\d+(?:-[\\w+-]+)?)?)?\\b/\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      },\n      regex: {\n        pattern: /\\{\\/.*?\\/\\}/,\n        greedy: true\n      },\n      'html-string': createLanguageString('html'),\n      'css-string': createLanguageString('css'),\n      'js-string': createLanguageString('js'),\n      'md-string': createLanguageString('md'),\n      'sql-string': createLanguageString('sql'),\n      'sh-string': createLanguageString('shell', 'sh'),\n      multistring: {\n        pattern: /».*|\\{:[\\s\\S]*?:\\}|\\{[\\s\\S]*?\\}|^-{6}$[\\s\\S]*/m,\n        alias: 'string',\n        greedy: true\n      },\n      label: {\n        pattern: /\\w+\\b\\??:/,\n        alias: 'property'\n      },\n      literal: {\n        pattern: /'(?:\\w+\\b\\??:?)/,\n        alias: 'constant'\n      },\n      type: {\n        pattern: /:(?:\\w+\\b\\??:?)/,\n        alias: 'class-name'\n      },\n      color: /#\\w+/,\n      predicate: {\n        pattern:\n          /\\b(?:all|and|any|ascii|attr|attribute|attributeLabel|binary|block|char|contains|database|date|dictionary|empty|equal|even|every|exists|false|floating|function|greater|greaterOrEqual|if|in|inline|integer|is|key|label|leap|less|lessOrEqual|literal|logical|lower|nand|negative|nor|not|notEqual|null|numeric|odd|or|path|pathLabel|positive|prefix|prime|regex|same|set|some|sorted|standalone|string|subset|suffix|superset|symbol|symbolLiteral|true|try|type|unless|upper|when|whitespace|word|xnor|xor|zero)\\?/,\n        alias: 'keyword'\n      },\n      'builtin-function': {\n        pattern:\n          /\\b(?:abs|acos|acosh|acsec|acsech|actan|actanh|add|after|alert|alias|and|angle|append|arg|args|arity|array|as|asec|asech|asin|asinh|atan|atan2|atanh|attr|attrs|average|before|benchmark|blend|break|call|capitalize|case|ceil|chop|clear|clip|close|color|combine|conj|continue|copy|cos|cosh|crc|csec|csech|ctan|ctanh|cursor|darken|dec|decode|define|delete|desaturate|deviation|dialog|dictionary|difference|digest|digits|div|do|download|drop|dup|e|else|empty|encode|ensure|env|escape|execute|exit|exp|extend|extract|factors|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gcd|get|goto|hash|hypot|if|inc|indent|index|infinity|info|input|insert|inspect|intersection|invert|jaro|join|keys|kurtosis|last|let|levenshtein|lighten|list|ln|log|loop|lower|mail|map|match|max|median|min|mod|module|mul|nand|neg|new|nor|normalize|not|now|null|open|or|outdent|pad|palette|panic|path|pause|permissions|permutate|pi|pop|popup|pow|powerset|powmod|prefix|print|prints|process|product|query|random|range|read|relative|remove|rename|render|repeat|replace|request|return|reverse|round|sample|saturate|script|sec|sech|select|serve|set|shl|shr|shuffle|sin|sinh|size|skewness|slice|sort|spin|split|sqrt|squeeze|stack|strip|sub|suffix|sum|switch|symbols|symlink|sys|take|tan|tanh|terminal|terminate|to|truncate|try|type|unclip|union|unique|unless|until|unzip|upper|values|var|variance|volume|webview|while|with|wordwrap|write|xnor|xor|zip)\\b/,\n        alias: 'keyword'\n      },\n      sugar: {\n        pattern: /->|=>|\\||::/,\n        alias: 'operator'\n      },\n      punctuation: /[()[\\],]/,\n      symbol: {\n        pattern: /<:|-:|ø|@|#|\\+|\\||\\*|\\$|---|-|%|\\/|\\.\\.|\\^|~|=|<|>|\\\\/\n      },\n      boolean: {\n        pattern: /\\b(?:false|maybe|true)\\b/\n      }\n    }\n    Prism.languages.art = Prism.languages['arturo']\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,KAAD,CAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACpC;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB;AACJ;AACA;AACA;IACI,IAAIC,oBAAoB,GAAG,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;MAClD,OAAO;QACLA,OAAO,EAAEC,MAAM,CACb,MAAMC,MAAN,GAAe,KAAf,IAAwBF,OAAO,IAAID,IAAnC,IAA2C,GAA3C,GAAiD,aAAaG,MADjD,EAEb,GAFa,CADV;QAKLC,MAAM,EAAE,IALH;QAMLC,MAAM,EAAE;UACNC,QAAQ,EAAE;YACRL,OAAO,EAAE,2BADD;YAERM,UAAU,EAAE,IAFJ;YAGRC,KAAK,EAAE,cAAcR,IAHb;YAIRK,MAAM,EAAEP,KAAK,CAACW,SAAN,CAAgBT,IAAhB;UAJA,CADJ;UAONU,MAAM,EAAE;QAPF;MANH,CAAP;IAgBD,CAjBD;;IAmBAZ,KAAK,CAACW,SAAN,CAAgBd,MAAhB,GAAyB;MACvBgB,OAAO,EAAE;QACPV,OAAO,EAAE,KADF;QAEPG,MAAM,EAAE;MAFD,CADc;MAKvBQ,SAAS,EAAE;QACTX,OAAO,EAAE,KADA;QAETO,KAAK,EAAE,MAFE;QAGTJ,MAAM,EAAE;MAHC,CALY;MAUvBS,MAAM,EAAE;QACNZ,OAAO,EAAE;MADH,CAVe;MAavBS,MAAM,EAAE;QACNT,OAAO,EAAE,uBADH;QAENG,MAAM,EAAE;MAFF,CAbe;MAiBvBU,KAAK,EAAE;QACLb,OAAO,EAAE,aADJ;QAELG,MAAM,EAAE;MAFH,CAjBgB;MAqBvB,eAAeL,oBAAoB,CAAC,MAAD,CArBZ;MAsBvB,cAAcA,oBAAoB,CAAC,KAAD,CAtBX;MAuBvB,aAAaA,oBAAoB,CAAC,IAAD,CAvBV;MAwBvB,aAAaA,oBAAoB,CAAC,IAAD,CAxBV;MAyBvB,cAAcA,oBAAoB,CAAC,KAAD,CAzBX;MA0BvB,aAAaA,oBAAoB,CAAC,OAAD,EAAU,IAAV,CA1BV;MA2BvBgB,WAAW,EAAE;QACXd,OAAO,EAAE,gDADE;QAEXO,KAAK,EAAE,QAFI;QAGXJ,MAAM,EAAE;MAHG,CA3BU;MAgCvBY,KAAK,EAAE;QACLf,OAAO,EAAE,WADJ;QAELO,KAAK,EAAE;MAFF,CAhCgB;MAoCvBS,OAAO,EAAE;QACPhB,OAAO,EAAE,iBADF;QAEPO,KAAK,EAAE;MAFA,CApCc;MAwCvBU,IAAI,EAAE;QACJjB,OAAO,EAAE,iBADL;QAEJO,KAAK,EAAE;MAFH,CAxCiB;MA4CvBW,KAAK,EAAE,MA5CgB;MA6CvBC,SAAS,EAAE;QACTnB,OAAO,EACL,ufAFO;QAGTO,KAAK,EAAE;MAHE,CA7CY;MAkDvB,oBAAoB;QAClBP,OAAO,EACL,+4CAFgB;QAGlBO,KAAK,EAAE;MAHW,CAlDG;MAuDvBa,KAAK,EAAE;QACLpB,OAAO,EAAE,aADJ;QAELO,KAAK,EAAE;MAFF,CAvDgB;MA2DvBc,WAAW,EAAE,UA3DU;MA4DvBC,MAAM,EAAE;QACNtB,OAAO,EAAE;MADH,CA5De;MA+DvBuB,OAAO,EAAE;QACPvB,OAAO,EAAE;MADF;IA/Dc,CAAzB;IAmEAH,KAAK,CAACW,SAAN,CAAgBgB,GAAhB,GAAsB3B,KAAK,CAACW,SAAN,CAAgB,QAAhB,CAAtB;EACD,CA5FA,EA4FEX,KA5FF;AA6FF"},"metadata":{},"sourceType":"module"}