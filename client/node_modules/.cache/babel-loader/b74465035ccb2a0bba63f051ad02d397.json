{"ast":null,"code":"// @ts-nocheck\nimport refractorClike from './clike.js';\nd.displayName = 'd';\nd.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function d(Prism) {\n  Prism.register(refractorClike);\n  Prism.languages.d = Prism.languages.extend('clike', {\n    comment: [{\n      // Shebang\n      pattern: /^\\s*#!.+/,\n      greedy: true\n    }, {\n      pattern: RegExp(/(^|[^\\\\])/.source + '(?:' + [// /+ comment +/\n      // Allow one level of nesting\n      /\\/\\+(?:\\/\\+(?:[^+]|\\+(?!\\/))*\\+\\/|(?!\\/\\+)[\\s\\S])*?\\+\\//.source, // // comment\n      /\\/\\/.*/.source, // /* comment */\n      /\\/\\*[\\s\\S]*?\\*\\//.source].join('|') + ')'),\n      lookbehind: true,\n      greedy: true\n    }],\n    string: [{\n      pattern: RegExp([// r\"\", x\"\"\n      /\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/.source, // q\"[]\", q\"()\", q\"<>\", q\"{}\"\n      /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/.source, // q\"IDENT\n      // ...\n      // IDENT\"\n      /\\bq\"((?!\\d)\\w+)$[\\s\\S]*?^\\1\"/.source, // q\"//\", q\"||\", etc.\n      // eslint-disable-next-line regexp/strict\n      /\\bq\"(.)[\\s\\S]*?\\2\"/.source, // eslint-disable-next-line regexp/strict\n      /([\"`])(?:\\\\[\\s\\S]|(?!\\3)[^\\\\])*\\3[cwd]?/.source].join('|'), 'm'),\n      greedy: true\n    }, {\n      pattern: /\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,\n      greedy: true,\n      alias: 'token-string'\n    }],\n    // In order: $, keywords and special tokens, globally defined symbols\n    keyword: /\\$|\\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\\b/,\n    number: [// The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator\n    // Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"\n    /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i, {\n      pattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,\n      lookbehind: true\n    }],\n    operator: /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n  });\n  Prism.languages.insertBefore('d', 'string', {\n    // Characters\n    // 'a', '\\\\', '\\n', '\\xFF', '\\377', '\\uFFFF', '\\U0010FFFF', '\\quot'\n    char: /'(?:\\\\(?:\\W|\\w+)|[^\\\\])'/\n  });\n  Prism.languages.insertBefore('d', 'keyword', {\n    property: /\\B@\\w*/\n  });\n  Prism.languages.insertBefore('d', 'function', {\n    register: {\n      // Iasm registers\n      pattern: /\\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n      alias: 'variable'\n    }\n  });\n}","map":{"version":3,"names":["refractorClike","d","displayName","aliases","Prism","register","languages","extend","comment","pattern","greedy","RegExp","source","join","lookbehind","string","alias","keyword","number","operator","insertBefore","char","property"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/d.js"],"sourcesContent":["// @ts-nocheck\nimport refractorClike from './clike.js'\nd.displayName = 'd'\nd.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function d(Prism) {\n  Prism.register(refractorClike)\n  Prism.languages.d = Prism.languages.extend('clike', {\n    comment: [\n      {\n        // Shebang\n        pattern: /^\\s*#!.+/,\n        greedy: true\n      },\n      {\n        pattern: RegExp(\n          /(^|[^\\\\])/.source +\n            '(?:' +\n            [\n              // /+ comment +/\n              // Allow one level of nesting\n              /\\/\\+(?:\\/\\+(?:[^+]|\\+(?!\\/))*\\+\\/|(?!\\/\\+)[\\s\\S])*?\\+\\//.source, // // comment\n              /\\/\\/.*/.source, // /* comment */\n              /\\/\\*[\\s\\S]*?\\*\\//.source\n            ].join('|') +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true\n      }\n    ],\n    string: [\n      {\n        pattern: RegExp(\n          [\n            // r\"\", x\"\"\n            /\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/.source, // q\"[]\", q\"()\", q\"<>\", q\"{}\"\n            /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/.source, // q\"IDENT\n            // ...\n            // IDENT\"\n            /\\bq\"((?!\\d)\\w+)$[\\s\\S]*?^\\1\"/.source, // q\"//\", q\"||\", etc.\n            // eslint-disable-next-line regexp/strict\n            /\\bq\"(.)[\\s\\S]*?\\2\"/.source, // eslint-disable-next-line regexp/strict\n            /([\"`])(?:\\\\[\\s\\S]|(?!\\3)[^\\\\])*\\3[cwd]?/.source\n          ].join('|'),\n          'm'\n        ),\n        greedy: true\n      },\n      {\n        pattern: /\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,\n        greedy: true,\n        alias: 'token-string'\n      }\n    ],\n    // In order: $, keywords and special tokens, globally defined symbols\n    keyword:\n      /\\$|\\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\\b/,\n    number: [\n      // The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator\n      // Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"\n      /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i,\n      {\n        pattern:\n          /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,\n        lookbehind: true\n      }\n    ],\n    operator:\n      /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n  })\n  Prism.languages.insertBefore('d', 'string', {\n    // Characters\n    // 'a', '\\\\', '\\n', '\\xFF', '\\377', '\\uFFFF', '\\U0010FFFF', '\\quot'\n    char: /'(?:\\\\(?:\\W|\\w+)|[^\\\\])'/\n  })\n  Prism.languages.insertBefore('d', 'keyword', {\n    property: /\\B@\\w*/\n  })\n  Prism.languages.insertBefore('d', 'function', {\n    register: {\n      // Iasm registers\n      pattern:\n        /\\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n      alias: 'variable'\n    }\n  })\n}\n"],"mappings":"AAAA;AACA,OAAOA,cAAP,MAA2B,YAA3B;AACAC,CAAC,CAACC,WAAF,GAAgB,GAAhB;AACAD,CAAC,CAACE,OAAF,GAAY,EAAZ;AAEA;;AACA,eAAe,SAASF,CAAT,CAAWG,KAAX,EAAkB;EAC/BA,KAAK,CAACC,QAAN,CAAeL,cAAf;EACAI,KAAK,CAACE,SAAN,CAAgBL,CAAhB,GAAoBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;IAClDC,OAAO,EAAE,CACP;MACE;MACAC,OAAO,EAAE,UAFX;MAGEC,MAAM,EAAE;IAHV,CADO,EAMP;MACED,OAAO,EAAEE,MAAM,CACb,YAAYC,MAAZ,GACE,KADF,GAEE,CACE;MACA;MACA,0DAA0DA,MAH5D,EAGoE;MAClE,SAASA,MAJX,EAImB;MACjB,mBAAmBA,MALrB,EAMEC,IANF,CAMO,GANP,CAFF,GASE,GAVW,CADjB;MAaEC,UAAU,EAAE,IAbd;MAcEJ,MAAM,EAAE;IAdV,CANO,CADyC;IAwBlDK,MAAM,EAAE,CACN;MACEN,OAAO,EAAEE,MAAM,CACb,CACE;MACA,qCAAqCC,MAFvC,EAE+C;MAC7C,6DAA6DA,MAH/D,EAGuE;MACrE;MACA;MACA,+BAA+BA,MANjC,EAMyC;MACvC;MACA,qBAAqBA,MARvB,EAQ+B;MAC7B,0CAA0CA,MAT5C,EAUEC,IAVF,CAUO,GAVP,CADa,EAYb,GAZa,CADjB;MAeEH,MAAM,EAAE;IAfV,CADM,EAkBN;MACED,OAAO,EAAE,8BADX;MAEEC,MAAM,EAAE,IAFV;MAGEM,KAAK,EAAE;IAHT,CAlBM,CAxB0C;IAgDlD;IACAC,OAAO,EACL,s0BAlDgD;IAmDlDC,MAAM,EAAE,CACN;IACA;IACA,0EAHM,EAIN;MACET,OAAO,EACL,0FAFJ;MAGEK,UAAU,EAAE;IAHd,CAJM,CAnD0C;IA6DlDK,QAAQ,EACN;EA9DgD,CAAhC,CAApB;EAgEAf,KAAK,CAACE,SAAN,CAAgBc,YAAhB,CAA6B,GAA7B,EAAkC,QAAlC,EAA4C;IAC1C;IACA;IACAC,IAAI,EAAE;EAHoC,CAA5C;EAKAjB,KAAK,CAACE,SAAN,CAAgBc,YAAhB,CAA6B,GAA7B,EAAkC,SAAlC,EAA6C;IAC3CE,QAAQ,EAAE;EADiC,CAA7C;EAGAlB,KAAK,CAACE,SAAN,CAAgBc,YAAhB,CAA6B,GAA7B,EAAkC,UAAlC,EAA8C;IAC5Cf,QAAQ,EAAE;MACR;MACAI,OAAO,EACL,qNAHM;MAIRO,KAAK,EAAE;IAJC;EADkC,CAA9C;AAQD"},"metadata":{},"sourceType":"module"}