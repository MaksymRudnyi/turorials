{"ast":null,"code":"// used pattern building blocks\nvar Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar pBase = \"(?:\\\\d+)\";\nvar pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar pPrecision = \"(?:`(?:`?\" + pFloat + \")?)\"; // regular expressions\n\nvar reBaseForm = new RegExp('(?:' + pBase + '(?:\\\\^\\\\^' + pFloatBase + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar reFloatForm = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar reIdInContext = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\nfunction tokenBase(stream, state) {\n  var ch; // get next character\n\n  ch = stream.next(); // string\n\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  } // comment\n\n\n  if (ch === '(') {\n    if (stream.eat('*')) {\n      state.commentLevel++;\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n  } // go back one character\n\n\n  stream.backUp(1); // look for numbers\n  // Numbers in a baseform\n\n  if (stream.match(reBaseForm, true, false)) {\n    return 'number';\n  } // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n\n\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n  /* In[23] and Out[34] */\n\n\n  if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n    return 'atom';\n  } // usage\n\n\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n    return 'meta';\n  } // message\n\n\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n    return 'string.special';\n  } // this makes a look-ahead match for something like variable:{_Integer}\n  // the match is then forwarded to the mma-patterns tokenizer.\n\n\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n    return 'variableName.special';\n  } // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n  // Cannot start with a number, but can have numbers at any other position. Examples\n  // blub__Integer, a1_, b34_Integer32\n\n\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n    return 'variableName.special';\n  }\n\n  if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  } // Named characters in Mathematica, like \\[Gamma].\n\n\n  if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n    return 'character';\n  } // Match all braces separately\n\n\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  } // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n  // only one.\n\n\n  if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n    return 'variableName.constant';\n  } // Literals like variables, keywords, functions\n\n\n  if (stream.match(reIdInContext, true, false)) {\n    return 'keyword';\n  } // operators. Note that operators like @@ or /; are matched separately for each symbol.\n\n\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n    return 'operator';\n  } // everything else is an error\n\n\n  stream.next(); // advance the stream.\n\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next,\n      end = false,\n      escaped = false;\n\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n\n    escaped = !escaped && next === '\\\\';\n  }\n\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n\n  return 'string';\n}\n\n;\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n\n  while (state.commentLevel > 0 && (next = stream.next()) != null) {\n    if (prev === '(' && next === '*') state.commentLevel++;\n    if (prev === '*' && next === ')') state.commentLevel--;\n    prev = next;\n  }\n\n  if (state.commentLevel <= 0) {\n    state.tokenize = tokenBase;\n  }\n\n  return 'comment';\n}\n\nexport const mathematica = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      commentLevel: 0\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"(*\",\n        close: \"*)\"\n      }\n    }\n  }\n};","map":{"version":3,"names":["Identifier","pBase","pFloat","pFloatBase","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","mathematica","startState","token","eatSpace","languageData","commentTokens","block","open","close"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/mathematica.js"],"sourcesContent":["// used pattern building blocks\nvar Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar pBase      = \"(?:\\\\d+)\";\nvar pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n// regular expressions\nvar reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\nfunction tokenBase(stream, state) {\n  var ch;\n\n  // get next character\n  ch = stream.next();\n\n  // string\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  }\n\n  // comment\n  if (ch === '(') {\n    if (stream.eat('*')) {\n      state.commentLevel++;\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n  }\n\n  // go back one character\n  stream.backUp(1);\n\n  // look for numbers\n  // Numbers in a baseform\n  if (stream.match(reBaseForm, true, false)) {\n    return 'number';\n  }\n\n  // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n\n  /* In[23] and Out[34] */\n  if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n    return 'atom';\n  }\n\n  // usage\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n    return 'meta';\n  }\n\n  // message\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n    return 'string.special';\n  }\n\n  // this makes a look-ahead match for something like variable:{_Integer}\n  // the match is then forwarded to the mma-patterns tokenizer.\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n  // Cannot start with a number, but can have numbers at any other position. Examples\n  // blub__Integer, a1_, b34_Integer32\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // Named characters in Mathematica, like \\[Gamma].\n  if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n    return 'character';\n  }\n\n  // Match all braces separately\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  }\n\n  // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n  // only one.\n  if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n    return 'variableName.constant';\n  }\n\n  // Literals like variables, keywords, functions\n  if (stream.match(reIdInContext, true, false)) {\n    return 'keyword';\n  }\n\n  // operators. Note that operators like @@ or /; are matched separately for each symbol.\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n    return 'operator';\n  }\n\n  // everything else is an error\n  stream.next(); // advance the stream.\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next, end = false, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next === '\\\\';\n  }\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n  return 'string';\n};\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n  while(state.commentLevel > 0 && (next = stream.next()) != null) {\n    if (prev === '(' && next === '*') state.commentLevel++;\n    if (prev === '*' && next === ')') state.commentLevel--;\n    prev = next;\n  }\n  if (state.commentLevel <= 0) {\n    state.tokenize = tokenBase;\n  }\n  return 'comment';\n}\n\nexport const mathematica = {\n  startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}