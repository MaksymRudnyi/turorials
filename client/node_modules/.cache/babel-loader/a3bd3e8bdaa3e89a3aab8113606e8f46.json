{"ast":null,"code":"import { characterEntities } from 'character-entities';\nconst own = {}.hasOwnProperty;\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\n\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false;\n}","map":{"version":3,"names":["characterEntities","own","hasOwnProperty","decodeNamedCharacterReference","value","call"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/decode-named-character-reference/index.js"],"sourcesContent":["import {characterEntities} from 'character-entities'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n"],"mappings":"AAAA,SAAQA,iBAAR,QAAgC,oBAAhC;AAEA,MAAMC,GAAG,GAAG,GAAGC,cAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,6BAAT,CAAuCC,KAAvC,EAA8C;EACnD,OAAOH,GAAG,CAACI,IAAJ,CAASL,iBAAT,EAA4BI,KAA5B,IAAqCJ,iBAAiB,CAACI,KAAD,CAAtD,GAAgE,KAAvE;AACD"},"metadata":{},"sourceType":"module"}