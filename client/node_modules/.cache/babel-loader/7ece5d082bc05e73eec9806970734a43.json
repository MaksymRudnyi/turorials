{"ast":null,"code":"// @ts-nocheck\nkumir.displayName = 'kumir';\nkumir.aliases = ['kum'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;\n\n  (function (Prism) {\n    /**\n     * Regular expression for characters that are not allowed in identifiers.\n     *\n     * @type {string}\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source;\n    /**\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\n     *\n     * @param {string} pattern A regular expression for identifiers.\n     * @param {string} [flags] The regular expression flags.\n     * @returns {RegExp} A wrapped regular expression for identifiers.\n     */\n\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags);\n    }\n\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      boolean: {\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [{\n        pattern: wrapId(/(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'builtin'\n      }, {\n        pattern: wrapId(/(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'important'\n      }],\n\n      /**\n       * Should be performed after searching for type names because of \"таб\".\n       * \"таб\" is a reserved word, but never used without a preceding type name.\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n       */\n      keyword: {\n        pattern: wrapId(/(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(/(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(/(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/.source, 'i'),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n\n      /**\n       * Should be performed after searching for\n       * - numeric constants (because of \"+\" and \"-\");\n       * - punctuation marks (because of \":=\" and \"=\").\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    };\n    Prism.languages.kum = Prism.languages.kumir;\n  })(Prism);\n}","map":{"version":3,"names":["kumir","displayName","aliases","Prism","nonId","source","wrapId","pattern","flags","RegExp","replace","languages","comment","prolog","greedy","string","boolean","lookbehind","alias","type","keyword","name","number","punctuation","kum"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/kumir.js"],"sourcesContent":["// @ts-nocheck\nkumir.displayName = 'kumir'\nkumir.aliases = ['kum']\n\n/** @type {import('../core.js').Syntax} */\nexport default function kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;(function (Prism) {\n    /**\n     * Regular expression for characters that are not allowed in identifiers.\n     *\n     * @type {string}\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source\n    /**\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\n     *\n     * @param {string} pattern A regular expression for identifiers.\n     * @param {string} [flags] The regular expression flags.\n     * @returns {RegExp} A wrapped regular expression for identifiers.\n     */\n\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags)\n    }\n\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      boolean: {\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/\n              .source\n          ),\n          lookbehind: true,\n          alias: 'builtin'\n        },\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source\n          ),\n          lookbehind: true,\n          alias: 'important'\n        }\n      ],\n\n      /**\n       * Should be performed after searching for type names because of \"таб\".\n       * \"таб\" is a reserved word, but never used without a preceding type name.\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n       */\n      keyword: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(\n          /(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/\n            .source,\n          'i'\n        ),\n        lookbehind: true\n      },\n\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n\n      /**\n       * Should be performed after searching for\n       * - numeric constants (because of \"+\" and \"-\");\n       * - punctuation marks (because of \":=\" and \"=\").\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    }\n    Prism.languages.kum = Prism.languages.kumir\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,CAAC,KAAD,CAAhB;AAEA;;AACA,eAAe,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACnC;EACA;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB;AACJ;AACA;AACA;AACA;IACI,IAAIC,KAAK,GAAG,sDAAsDC,MAAlE;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;;IAEI,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;MAC9B,OAAOC,MAAM,CAACF,OAAO,CAACG,OAAR,CAAgB,UAAhB,EAA4BN,KAA5B,CAAD,EAAqCI,KAArC,CAAb;IACD;;IAEDL,KAAK,CAACQ,SAAN,CAAgBX,KAAhB,GAAwB;MACtBY,OAAO,EAAE;QACPL,OAAO,EAAE;MADF,CADa;MAItBM,MAAM,EAAE;QACNN,OAAO,EAAE,KADH;QAENO,MAAM,EAAE;MAFF,CAJc;MAQtBC,MAAM,EAAE;QACNR,OAAO,EAAE,yBADH;QAENO,MAAM,EAAE;MAFF,CARc;MAYtBE,OAAO,EAAE;QACPT,OAAO,EAAED,MAAM,CAAC,yCAAyCD,MAA1C,CADR;QAEPY,UAAU,EAAE;MAFL,CAZa;MAgBtB,iBAAiB;QACfV,OAAO,EAAED,MAAM,CAAC,2CAA2CD,MAA5C,CADA;QAEfY,UAAU,EAAE,IAFG;QAGfC,KAAK,EAAE;MAHQ,CAhBK;MAqBtB,mBAAmB;QACjBX,OAAO,EAAED,MAAM,CAAC,mCAAmCD,MAApC,CADE;QAEjBY,UAAU,EAAE,IAFK;QAGjBC,KAAK,EAAE;MAHU,CArBG;MA0BtBC,IAAI,EAAE,CACJ;QACEZ,OAAO,EAAED,MAAM,CACb,mEACGD,MAFU,CADjB;QAKEY,UAAU,EAAE,IALd;QAMEC,KAAK,EAAE;MANT,CADI,EASJ;QACEX,OAAO,EAAED,MAAM,CACb,0DAA0DD,MAD7C,CADjB;QAIEY,UAAU,EAAE,IAJd;QAKEC,KAAK,EAAE;MALT,CATI,CA1BgB;;MA4CtB;AACN;AACA;AACA;AACA;MACME,OAAO,EAAE;QACPb,OAAO,EAAED,MAAM,CACb,qPACGD,MAFU,CADR;QAKPY,UAAU,EAAE;MALL,CAjDa;;MAyDtB;MACAI,IAAI,EAAE;QACJ;QACAd,OAAO,EAAED,MAAM,CACb,2EACGD,MAFU,CAFX;QAMJY,UAAU,EAAE;MANR,CA1DgB;;MAmEtB;MACAK,MAAM,EAAE;QACNf,OAAO,EAAED,MAAM,CACb,2FACGD,MAFU,EAGb,GAHa,CADT;QAMNY,UAAU,EAAE;MANN,CApEc;;MA6EtB;MACAM,WAAW,EAAE,gBA9ES;;MAgFtB;AACN;AACA;AACA;AACA;MACM,iBAAiB;QACfhB,OAAO,EAAE,yBADM;QAEfW,KAAK,EAAE;MAFQ;IArFK,CAAxB;IA0FAf,KAAK,CAACQ,SAAN,CAAgBa,GAAhB,GAAsBrB,KAAK,CAACQ,SAAN,CAAgBX,KAAtC;EACD,CA9GA,EA8GEG,KA9GF;AA+GF"},"metadata":{},"sourceType":"module"}