{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n\n  let max;\n  /** @type {(code: Code) => code is number} */\n\n  let test;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference');\n    effects.enter('characterReferenceMarker');\n    effects.consume(code);\n    effects.exit('characterReferenceMarker');\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerNumeric');\n      return numeric;\n    }\n\n    effects.enter('characterReferenceValue');\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n  /** @type {State} */\n\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerHexadecimal');\n      effects.enter('characterReferenceValue');\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n\n    effects.enter('characterReferenceValue');\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n  /** @type {State} */\n\n\n  function value(code) {\n    /** @type {Token} */\n    let token;\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue');\n\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      effects.enter('characterReferenceMarker');\n      effects.consume(code);\n      effects.exit('characterReferenceMarker');\n      effects.exit('characterReference');\n      return ok;\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"names":["decodeNamedCharacterReference","asciiAlphanumeric","asciiDigit","asciiHexDigit","characterReference","name","tokenize","tokenizeCharacterReference","effects","ok","nok","self","size","max","test","start","code","enter","consume","exit","open","numeric","value","token","sliceSerialize"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-core-commonmark/lib/character-reference.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,6BAAR,QAA4C,kCAA5C;AACA,SACEC,iBADF,EAEEC,UAFF,EAGEC,aAHF,QAIO,0BAJP;AAMA;;AACA,OAAO,MAAMC,kBAAkB,GAAG;EAChCC,IAAI,EAAE,oBAD0B;EAEhCC,QAAQ,EAAEC;AAFsB,CAA3B;AAIP;;AAEA,SAASA,0BAAT,CAAoCC,OAApC,EAA6CC,EAA7C,EAAiDC,GAAjD,EAAsD;EACpD,MAAMC,IAAI,GAAG,IAAb;EACA,IAAIC,IAAI,GAAG,CAAX;EACA;;EAEA,IAAIC,GAAJ;EACA;;EAEA,IAAIC,IAAJ;EACA,OAAOC,KAAP;EACA;;EAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnBR,OAAO,CAACS,KAAR,CAAc,oBAAd;IACAT,OAAO,CAACS,KAAR,CAAc,0BAAd;IACAT,OAAO,CAACU,OAAR,CAAgBF,IAAhB;IACAR,OAAO,CAACW,IAAR,CAAa,0BAAb;IACA,OAAOC,IAAP;EACD;EACD;;;EAEA,SAASA,IAAT,CAAcJ,IAAd,EAAoB;IAClB,IAAIA,IAAI,KAAK,EAAb,EAAiB;MACfR,OAAO,CAACS,KAAR,CAAc,iCAAd;MACAT,OAAO,CAACU,OAAR,CAAgBF,IAAhB;MACAR,OAAO,CAACW,IAAR,CAAa,iCAAb;MACA,OAAOE,OAAP;IACD;;IAEDb,OAAO,CAACS,KAAR,CAAc,yBAAd;IACAJ,GAAG,GAAG,EAAN;IACAC,IAAI,GAAGb,iBAAP;IACA,OAAOqB,KAAK,CAACN,IAAD,CAAZ;EACD;EACD;;;EAEA,SAASK,OAAT,CAAiBL,IAAjB,EAAuB;IACrB,IAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAA5B,EAAiC;MAC/BR,OAAO,CAACS,KAAR,CAAc,qCAAd;MACAT,OAAO,CAACU,OAAR,CAAgBF,IAAhB;MACAR,OAAO,CAACW,IAAR,CAAa,qCAAb;MACAX,OAAO,CAACS,KAAR,CAAc,yBAAd;MACAJ,GAAG,GAAG,CAAN;MACAC,IAAI,GAAGX,aAAP;MACA,OAAOmB,KAAP;IACD;;IAEDd,OAAO,CAACS,KAAR,CAAc,yBAAd;IACAJ,GAAG,GAAG,CAAN;IACAC,IAAI,GAAGZ,UAAP;IACA,OAAOoB,KAAK,CAACN,IAAD,CAAZ;EACD;EACD;;;EAEA,SAASM,KAAT,CAAeN,IAAf,EAAqB;IACnB;IACA,IAAIO,KAAJ;;IAEA,IAAIP,IAAI,KAAK,EAAT,IAAeJ,IAAnB,EAAyB;MACvBW,KAAK,GAAGf,OAAO,CAACW,IAAR,CAAa,yBAAb,CAAR;;MAEA,IACEL,IAAI,KAAKb,iBAAT,IACA,CAACD,6BAA6B,CAACW,IAAI,CAACa,cAAL,CAAoBD,KAApB,CAAD,CAFhC,EAGE;QACA,OAAOb,GAAG,CAACM,IAAD,CAAV;MACD;;MAEDR,OAAO,CAACS,KAAR,CAAc,0BAAd;MACAT,OAAO,CAACU,OAAR,CAAgBF,IAAhB;MACAR,OAAO,CAACW,IAAR,CAAa,0BAAb;MACAX,OAAO,CAACW,IAAR,CAAa,oBAAb;MACA,OAAOV,EAAP;IACD;;IAED,IAAIK,IAAI,CAACE,IAAD,CAAJ,IAAcJ,IAAI,KAAKC,GAA3B,EAAgC;MAC9BL,OAAO,CAACU,OAAR,CAAgBF,IAAhB;MACA,OAAOM,KAAP;IACD;;IAED,OAAOZ,GAAG,CAACM,IAAD,CAAV;EACD;AACF"},"metadata":{},"sourceType":"module"}