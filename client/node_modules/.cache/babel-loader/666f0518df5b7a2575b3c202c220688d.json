{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes');\n\nvar contentType = require('content-type');\n\nvar debug = require('debug')('body-parser:text');\n\nvar read = require('../read');\n\nvar typeis = require('type-is');\n/**\n * Module exports.\n */\n\n\nmodule.exports = text;\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction text(options) {\n  var opts = options || {};\n  var defaultCharset = opts.defaultCharset || 'utf-8';\n  var inflate = opts.inflate !== false;\n  var limit = typeof opts.limit !== 'number' ? bytes.parse(opts.limit || '100kb') : opts.limit;\n  var type = opts.type || 'text/plain';\n  var verify = opts.verify || false;\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function');\n  } // create the appropriate type checking function\n\n\n  var shouldParse = typeof type !== 'function' ? typeChecker(type) : type;\n\n  function parse(buf) {\n    return buf;\n  }\n\n  return function textParser(req, res, next) {\n    if (req._body) {\n      debug('body already parsed');\n      next();\n      return;\n    }\n\n    req.body = req.body || {}; // skip requests without bodies\n\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body');\n      next();\n      return;\n    }\n\n    debug('content-type %j', req.headers['content-type']); // determine if request should be parsed\n\n    if (!shouldParse(req)) {\n      debug('skip parsing');\n      next();\n      return;\n    } // get charset\n\n\n    var charset = getCharset(req) || defaultCharset; // read\n\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    });\n  };\n}\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\n\nfunction getCharset(req) {\n  try {\n    return (contentType.parse(req).parameters.charset || '').toLowerCase();\n  } catch (e) {\n    return undefined;\n  }\n}\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\n\nfunction typeChecker(type) {\n  return function checkType(req) {\n    return Boolean(typeis(req, type));\n  };\n}","map":{"version":3,"names":["bytes","require","contentType","debug","read","typeis","module","exports","text","options","opts","defaultCharset","inflate","limit","parse","type","verify","TypeError","shouldParse","typeChecker","buf","textParser","req","res","next","_body","body","hasBody","headers","charset","getCharset","encoding","parameters","toLowerCase","e","undefined","checkType","Boolean"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/body-parser/lib/types/text.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar contentType = require('content-type')\nvar debug = require('debug')('body-parser:text')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = text\n\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction text (options) {\n  var opts = options || {}\n\n  var defaultCharset = opts.defaultCharset || 'utf-8'\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'text/plain'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function textParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // get charset\n    var charset = getCharset(req) || defaultCharset\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\nfunction getCharset (req) {\n  try {\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAZ;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAApB;AAEA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAT,CAAeC,OAAf,EAAwB;EACtB,IAAIC,IAAI,GAAGD,OAAO,IAAI,EAAtB;EAEA,IAAIE,cAAc,GAAGD,IAAI,CAACC,cAAL,IAAuB,OAA5C;EACA,IAAIC,OAAO,GAAGF,IAAI,CAACE,OAAL,KAAiB,KAA/B;EACA,IAAIC,KAAK,GAAG,OAAOH,IAAI,CAACG,KAAZ,KAAsB,QAAtB,GACRb,KAAK,CAACc,KAAN,CAAYJ,IAAI,CAACG,KAAL,IAAc,OAA1B,CADQ,GAERH,IAAI,CAACG,KAFT;EAGA,IAAIE,IAAI,GAAGL,IAAI,CAACK,IAAL,IAAa,YAAxB;EACA,IAAIC,MAAM,GAAGN,IAAI,CAACM,MAAL,IAAe,KAA5B;;EAEA,IAAIA,MAAM,KAAK,KAAX,IAAoB,OAAOA,MAAP,KAAkB,UAA1C,EAAsD;IACpD,MAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;EACD,CAbqB,CAetB;;;EACA,IAAIC,WAAW,GAAG,OAAOH,IAAP,KAAgB,UAAhB,GACdI,WAAW,CAACJ,IAAD,CADG,GAEdA,IAFJ;;EAIA,SAASD,KAAT,CAAgBM,GAAhB,EAAqB;IACnB,OAAOA,GAAP;EACD;;EAED,OAAO,SAASC,UAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqC;IAC1C,IAAIF,GAAG,CAACG,KAAR,EAAe;MACbtB,KAAK,CAAC,qBAAD,CAAL;MACAqB,IAAI;MACJ;IACD;;IAEDF,GAAG,CAACI,IAAJ,GAAWJ,GAAG,CAACI,IAAJ,IAAY,EAAvB,CAP0C,CAS1C;;IACA,IAAI,CAACrB,MAAM,CAACsB,OAAP,CAAeL,GAAf,CAAL,EAA0B;MACxBnB,KAAK,CAAC,iBAAD,CAAL;MACAqB,IAAI;MACJ;IACD;;IAEDrB,KAAK,CAAC,iBAAD,EAAoBmB,GAAG,CAACM,OAAJ,CAAY,cAAZ,CAApB,CAAL,CAhB0C,CAkB1C;;IACA,IAAI,CAACV,WAAW,CAACI,GAAD,CAAhB,EAAuB;MACrBnB,KAAK,CAAC,cAAD,CAAL;MACAqB,IAAI;MACJ;IACD,CAvByC,CAyB1C;;;IACA,IAAIK,OAAO,GAAGC,UAAU,CAACR,GAAD,CAAV,IAAmBX,cAAjC,CA1B0C,CA4B1C;;IACAP,IAAI,CAACkB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBV,KAAjB,EAAwBX,KAAxB,EAA+B;MACjC4B,QAAQ,EAAEF,OADuB;MAEjCjB,OAAO,EAAEA,OAFwB;MAGjCC,KAAK,EAAEA,KAH0B;MAIjCG,MAAM,EAAEA;IAJyB,CAA/B,CAAJ;EAMD,CAnCD;AAoCD;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASc,UAAT,CAAqBR,GAArB,EAA0B;EACxB,IAAI;IACF,OAAO,CAACpB,WAAW,CAACY,KAAZ,CAAkBQ,GAAlB,EAAuBU,UAAvB,CAAkCH,OAAlC,IAA6C,EAA9C,EAAkDI,WAAlD,EAAP;EACD,CAFD,CAEE,OAAOC,CAAP,EAAU;IACV,OAAOC,SAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAShB,WAAT,CAAsBJ,IAAtB,EAA4B;EAC1B,OAAO,SAASqB,SAAT,CAAoBd,GAApB,EAAyB;IAC9B,OAAOe,OAAO,CAAChC,MAAM,CAACiB,GAAD,EAAMP,IAAN,CAAP,CAAd;EACD,CAFD;AAGD"},"metadata":{},"sourceType":"script"}