{"ast":null,"code":"// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer;\n\nvar BN = require('bn.js');\n\nvar EC = require('elliptic').ec;\n\nvar parseKeys = require('parse-asn1');\n\nvar curves = require('./curves.json');\n\nfunction verify(sig, hash, key, signType, tag) {\n  var pub = parseKeys(key);\n\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');\n    return ecVerify(sig, hash, pub);\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong public key type');\n    return dsaVerify(sig, hash, pub);\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');\n  }\n\n  hash = Buffer.concat([tag, hash]);\n  var len = pub.modulus.byteLength();\n  var pad = [1];\n  var padNum = 0;\n\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff);\n    padNum++;\n  }\n\n  pad.push(0x00);\n  var i = -1;\n\n  while (++i < hash.length) {\n    pad.push(hash[i]);\n  }\n\n  pad = Buffer.from(pad);\n  var red = BN.mont(pub.modulus);\n  sig = new BN(sig).toRed(red);\n  sig = sig.redPow(new BN(pub.publicExponent));\n  sig = Buffer.from(sig.fromRed().toArray());\n  var out = padNum < 8 ? 1 : 0;\n  len = Math.min(sig.length, pad.length);\n  if (sig.length !== pad.length) out = 1;\n  i = -1;\n\n  while (++i < len) out |= sig[i] ^ pad[i];\n\n  return out === 0;\n}\n\nfunction ecVerify(sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')];\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));\n  var curve = new EC(curveId);\n  var pubkey = pub.data.subjectPrivateKey.data;\n  return curve.verify(hash, sig, pubkey);\n}\n\nfunction dsaVerify(sig, hash, pub) {\n  var p = pub.data.p;\n  var q = pub.data.q;\n  var g = pub.data.g;\n  var y = pub.data.pub_key;\n  var unpacked = parseKeys.signature.decode(sig, 'der');\n  var s = unpacked.s;\n  var r = unpacked.r;\n  checkValue(s, q);\n  checkValue(r, q);\n  var montp = BN.mont(p);\n  var w = s.invm(q);\n  var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);\n  return v.cmp(r) === 0;\n}\n\nfunction checkValue(b, q) {\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig');\n  if (b.cmp(q) >= q) throw new Error('invalid sig');\n}\n\nmodule.exports = verify;","map":{"version":3,"names":["Buffer","require","BN","EC","ec","parseKeys","curves","verify","sig","hash","key","signType","tag","pub","type","Error","ecVerify","dsaVerify","concat","len","modulus","byteLength","pad","padNum","length","push","i","from","red","mont","toRed","redPow","publicExponent","fromRed","toArray","out","Math","min","curveId","data","algorithm","curve","join","pubkey","subjectPrivateKey","p","q","g","y","pub_key","unpacked","signature","decode","s","r","checkValue","montp","w","invm","v","mul","mod","cmp","b","cmpn","module","exports"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/browserify-sign/browser/verify.js"],"sourcesContent":["// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\nvar parseKeys = require('parse-asn1')\nvar curves = require('./curves.json')\n\nfunction verify (sig, hash, key, signType, tag) {\n  var pub = parseKeys(key)\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n    return ecVerify(sig, hash, pub)\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong public key type')\n    return dsaVerify(sig, hash, pub)\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n  }\n  hash = Buffer.concat([tag, hash])\n  var len = pub.modulus.byteLength()\n  var pad = [1]\n  var padNum = 0\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff)\n    padNum++\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n  pad = Buffer.from(pad)\n  var red = BN.mont(pub.modulus)\n  sig = new BN(sig).toRed(red)\n\n  sig = sig.redPow(new BN(pub.publicExponent))\n  sig = Buffer.from(sig.fromRed().toArray())\n  var out = padNum < 8 ? 1 : 0\n  len = Math.min(sig.length, pad.length)\n  if (sig.length !== pad.length) out = 1\n\n  i = -1\n  while (++i < len) out |= sig[i] ^ pad[i]\n  return out === 0\n}\n\nfunction ecVerify (sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var pubkey = pub.data.subjectPrivateKey.data\n\n  return curve.verify(hash, sig, pubkey)\n}\n\nfunction dsaVerify (sig, hash, pub) {\n  var p = pub.data.p\n  var q = pub.data.q\n  var g = pub.data.g\n  var y = pub.data.pub_key\n  var unpacked = parseKeys.signature.decode(sig, 'der')\n  var s = unpacked.s\n  var r = unpacked.r\n  checkValue(s, q)\n  checkValue(r, q)\n  var montp = BN.mont(p)\n  var w = s.invm(q)\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\n    .mod(p)\n    .mod(q)\n  return v.cmp(r) === 0\n}\n\nfunction checkValue (b, q) {\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\n}\n\nmodule.exports = verify\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}