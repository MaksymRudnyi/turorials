{"ast":null,"code":"// @ts-nocheck\ndocker.displayName = 'docker';\ndocker.aliases = ['dockerfile'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function docker(Prism) {\n  ;\n\n  (function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash = /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source; // At least one space, comment, or line break\n\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(/<SP_BS>/g, function () {\n      return spaceAfterBackSlash;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/.source;\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(/<STR>/g, function () {\n      return string;\n    });\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    };\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    };\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n\n    function re(source, flags) {\n      source = source.replace(/<OPT>/g, function () {\n        return option;\n      }).replace(/<SP>/g, function () {\n        return space;\n      });\n      return RegExp(source, flags);\n    }\n\n    Prism.languages.docker = {\n      instruction: {\n        pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(/(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source, 'i'),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [stringRule, {\n                pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                lookbehind: true\n              }],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [{\n            // https://docs.docker.com/engine/reference/builder/#healthcheck\n            pattern: re(/(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#from\n            pattern: re(/(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            // https://docs.docker.com/engine/reference/builder/#onbuild\n            pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n            lookbehind: true,\n            greedy: true\n          }, {\n            pattern: /^\\w+/,\n            greedy: true\n          }],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    };\n    Prism.languages.dockerfile = Prism.languages.docker;\n  })(Prism);\n}","map":{"version":3,"names":["docker","displayName","aliases","Prism","spaceAfterBackSlash","source","space","replace","string","option","stringRule","pattern","RegExp","greedy","commentRule","lookbehind","re","flags","languages","instruction","inside","options","property","operator","punctuation","keyword","comment","variable","dockerfile"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/docker.js"],"sourcesContent":["// @ts-nocheck\ndocker.displayName = 'docker'\ndocker.aliases = ['dockerfile']\n\n/** @type {import('../core.js').Syntax} */\nexport default function docker(Prism) {\n  ;(function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash =\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\n\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\n      /<SP_BS>/g,\n      function () {\n        return spaceAfterBackSlash\n      }\n    )\n    var string =\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\n        .source\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\n      /<STR>/g,\n      function () {\n        return string\n      }\n    )\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    }\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n\n    function re(source, flags) {\n      source = source\n        .replace(/<OPT>/g, function () {\n          return option\n        })\n        .replace(/<SP>/g, function () {\n          return space\n        })\n      return RegExp(source, flags)\n    }\n\n    Prism.languages.docker = {\n      instruction: {\n        pattern:\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\n              'i'\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [\n                stringRule,\n                {\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                  lookbehind: true\n                }\n              ],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [\n            {\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#from\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#onbuild\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /^\\w+/,\n              greedy: true\n            }\n          ],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    }\n    Prism.languages.dockerfile = Prism.languages.docker\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,YAAD,CAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACpC;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB;IACA;IACA,IAAIC,mBAAmB,GACrB,sDAAsDC,MADxD,CAHiB,CAI8C;;IAE/D,IAAIC,KAAK,GAAG,0CAA0CD,MAA1C,CAAiDE,OAAjD,CACV,UADU,EAEV,YAAY;MACV,OAAOH,mBAAP;IACD,CAJS,CAAZ;IAMA,IAAII,MAAM,GACR,0EACGH,MAFL;IAGA,IAAII,MAAM,GAAG,8CAA8CJ,MAA9C,CAAqDE,OAArD,CACX,QADW,EAEX,YAAY;MACV,OAAOC,MAAP;IACD,CAJU,CAAb;IAMA,IAAIE,UAAU,GAAG;MACfC,OAAO,EAAEC,MAAM,CAACJ,MAAD,CADA;MAEfK,MAAM,EAAE;IAFO,CAAjB;IAIA,IAAIC,WAAW,GAAG;MAChBH,OAAO,EAAE,eADO;MAEhBI,UAAU,EAAE,IAFI;MAGhBF,MAAM,EAAE;IAHQ,CAAlB;IAKA;AACJ;AACA;AACA;AACA;;IAEI,SAASG,EAAT,CAAYX,MAAZ,EAAoBY,KAApB,EAA2B;MACzBZ,MAAM,GAAGA,MAAM,CACZE,OADM,CACE,QADF,EACY,YAAY;QAC7B,OAAOE,MAAP;MACD,CAHM,EAINF,OAJM,CAIE,OAJF,EAIW,YAAY;QAC5B,OAAOD,KAAP;MACD,CANM,CAAT;MAOA,OAAOM,MAAM,CAACP,MAAD,EAASY,KAAT,CAAb;IACD;;IAEDd,KAAK,CAACe,SAAN,CAAgBlB,MAAhB,GAAyB;MACvBmB,WAAW,EAAE;QACXR,OAAO,EACL,iNAFS;QAGXI,UAAU,EAAE,IAHD;QAIXF,MAAM,EAAE,IAJG;QAKXO,MAAM,EAAE;UACNC,OAAO,EAAE;YACPV,OAAO,EAAEK,EAAE,CACT,gDAAgDX,MADvC,EAET,GAFS,CADJ;YAKPU,UAAU,EAAE,IALL;YAMPF,MAAM,EAAE,IAND;YAOPO,MAAM,EAAE;cACNE,QAAQ,EAAE;gBACRX,OAAO,EAAE,gBADD;gBAERI,UAAU,EAAE;cAFJ,CADJ;cAKNP,MAAM,EAAE,CACNE,UADM,EAEN;gBACEC,OAAO,EAAE,6BADX;gBAEEI,UAAU,EAAE;cAFd,CAFM,CALF;cAYNQ,QAAQ,EAAE,MAZJ;cAaNC,WAAW,EAAE;YAbP;UAPD,CADH;UAwBNC,OAAO,EAAE,CACP;YACE;YACAd,OAAO,EAAEK,EAAE,CACT,iEACGX,MAFM,EAGT,GAHS,CAFb;YAOEU,UAAU,EAAE,IAPd;YAQEF,MAAM,EAAE;UARV,CADO,EAWP;YACE;YACAF,OAAO,EAAEK,EAAE,CACT,iEACGX,MAFM,EAGT,GAHS,CAFb;YAOEU,UAAU,EAAE,IAPd;YAQEF,MAAM,EAAE;UARV,CAXO,EAqBP;YACE;YACAF,OAAO,EAAEK,EAAE,CAAC,oBAAoBX,MAArB,EAA6B,GAA7B,CAFb;YAGEU,UAAU,EAAE,IAHd;YAIEF,MAAM,EAAE;UAJV,CArBO,EA2BP;YACEF,OAAO,EAAE,MADX;YAEEE,MAAM,EAAE;UAFV,CA3BO,CAxBH;UAwDNa,OAAO,EAAEZ,WAxDH;UAyDNN,MAAM,EAAEE,UAzDF;UA0DNiB,QAAQ,EAAE,0BA1DJ;UA2DNJ,QAAQ,EAAE;QA3DJ;MALG,CADU;MAoEvBG,OAAO,EAAEZ;IApEc,CAAzB;IAsEAX,KAAK,CAACe,SAAN,CAAgBU,UAAhB,GAA6BzB,KAAK,CAACe,SAAN,CAAgBlB,MAA7C;EACD,CAtHA,EAsHEG,KAtHF;AAuHF"},"metadata":{},"sourceType":"module"}