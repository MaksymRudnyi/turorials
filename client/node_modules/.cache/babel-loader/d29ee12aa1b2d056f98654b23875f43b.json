{"ast":null,"code":"import { simpleMode } from \"./simple-mode.js\";\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\nvar others = [\"arg\", \"from\", \"maintainer\", \"label\", \"env\", \"add\", \"copy\", \"volume\", \"user\", \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"]; // Collect all Dockerfile directives\n\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\nexport const dockerFile = simpleMode({\n  start: [// Block comment: This is a line starting with a comment\n  {\n    regex: /^\\s*#.*$/,\n    sol: true,\n    token: \"comment\"\n  }, {\n    regex: fromRegex,\n    token: [null, \"keyword\"],\n    sol: true,\n    next: \"from\"\n  }, // Highlight an instruction without any arguments (for convenience)\n  {\n    regex: instructionOnlyLine,\n    token: [null, \"keyword\", null, \"error\"],\n    sol: true\n  }, {\n    regex: shellsAsArrayRegex,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"array\"\n  }, {\n    regex: exposeRegex,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"expose\"\n  }, // Highlight an instruction followed by arguments\n  {\n    regex: instructionWithArguments,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"arguments\"\n  }, {\n    regex: /./,\n    token: null\n  }],\n  from: [{\n    regex: /\\s*$/,\n    token: null,\n    next: \"start\"\n  }, {\n    // Line comment without instruction arguments is an error\n    regex: /(\\s*)(#.*)$/,\n    token: [null, \"error\"],\n    next: \"start\"\n  }, {\n    regex: /(\\s*\\S+\\s+)(as)/i,\n    token: [null, \"keyword\"],\n    next: \"start\"\n  }, // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  single: [{\n    regex: /(?:[^\\\\']|\\\\.)/,\n    token: \"string\"\n  }, {\n    regex: /'/,\n    token: \"string\",\n    pop: true\n  }],\n  double: [{\n    regex: /(?:[^\\\\\"]|\\\\.)/,\n    token: \"string\"\n  }, {\n    regex: /\"/,\n    token: \"string\",\n    pop: true\n  }],\n  array: [{\n    regex: /\\]/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n    token: \"string\"\n  }],\n  expose: [{\n    regex: /\\d+$/,\n    token: \"number\",\n    next: \"start\"\n  }, {\n    regex: /[^\\d]+$/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /\\d+/,\n    token: \"number\"\n  }, {\n    regex: /[^\\d]+/,\n    token: null\n  }, // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  arguments: [{\n    regex: /^\\s*#.*$/,\n    sol: true,\n    token: \"comment\"\n  }, {\n    regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /\"/,\n    token: \"string\",\n    push: \"double\"\n  }, {\n    regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /'/,\n    token: \"string\",\n    push: \"single\"\n  }, {\n    regex: /[^#\"']+[\\\\`]$/,\n    token: null\n  }, {\n    regex: /[^#\"']+$/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /[^#\"']+/,\n    token: null\n  }, // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n});","map":{"version":3,"names":["simpleMode","from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","others","instructions","concat","instructionRegex","instructionOnlyLine","instructionWithArguments","dockerFile","start","regex","sol","token","next","single","pop","double","array","arguments","push","languageData","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/dockerfile.js"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\nvar others = [\n  \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n  \"add\", \"copy\", \"volume\", \"user\",\n  \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\nexport const dockerFile = simpleMode({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /\\d+/,\n      token: \"number\"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    },\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    },\n    {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    },\n    {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    },\n    {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    },\n    {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n});\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}