{"ast":null,"code":"// @ts-nocheck\nplantUml.displayName = 'plant-uml';\nplantUml.aliases = ['plantuml'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function plantUml(Prism) {\n  ;\n\n  (function (Prism) {\n    var variable = /\\$\\w+|%[a-z]+%/;\n    var arrowAttr = /\\[[^[\\]]*\\]/.source;\n    var arrowDirection = /(?:[drlu]|do|down|le|left|ri|right|up)/.source;\n    var arrowBody = '(?:-+' + arrowDirection + '-+|\\\\.+' + arrowDirection + '\\\\.+|-+(?:' + arrowAttr + '-*)?|' + arrowAttr + '-+|\\\\.+(?:' + arrowAttr + '\\\\.*)?|' + arrowAttr + '\\\\.+)';\n    var arrowLeft = /(?:<{1,2}|\\/{1,2}|\\\\{1,2}|<\\||[#*^+}xo])/.source;\n    var arrowRight = /(?:>{1,2}|\\/{1,2}|\\\\{1,2}|\\|>|[#*^+{xo])/.source;\n    var arrowPrefix = /[[?]?[ox]?/.source;\n    var arrowSuffix = /[ox]?[\\]?]?/.source;\n    var arrow = arrowPrefix + '(?:' + arrowBody + arrowRight + '|' + arrowLeft + arrowBody + '(?:' + arrowRight + ')?' + ')' + arrowSuffix;\n    Prism.languages['plant-uml'] = {\n      comment: {\n        pattern: /(^[ \\t]*)(?:'.*|\\/'[\\s\\S]*?'\\/)/m,\n        lookbehind: true,\n        greedy: true\n      },\n      preprocessor: {\n        pattern: /(^[ \\t]*)!.*/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'property',\n        inside: {\n          variable: variable\n        }\n      },\n      delimiter: {\n        pattern: /(^[ \\t]*)@(?:end|start)uml\\b/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      arrow: {\n        pattern: RegExp(/(^|[^-.<>?|\\\\[\\]ox])/.source + arrow + /(?![-.<>?|\\\\\\]ox])/.source),\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator',\n        inside: {\n          expression: {\n            pattern: /(\\[)[^[\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: null // see below\n\n          },\n          punctuation: /\\[(?=$|\\])|^\\]/\n        }\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      text: {\n        pattern: /(\\[[ \\t]*[\\r\\n]+(?![\\r\\n]))[^\\]]*(?=\\])/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string'\n      },\n      keyword: [{\n        pattern: /^([ \\t]*)(?:abstract\\s+class|end\\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\\/|while)(?=\\s|$)/m,\n        lookbehind: true,\n        greedy: true\n      }, /\\b(?:elseif|equals|not|while)(?=\\s*\\()/, /\\b(?:as|is|then)\\b/],\n      divider: {\n        pattern: /^==.+==$/m,\n        greedy: true,\n        alias: 'important'\n      },\n      time: {\n        pattern: /@(?:\\d+(?:[:/]\\d+){2}|[+-]?\\d+|:[a-z]\\w*(?:[+-]\\d+)?)\\b/i,\n        greedy: true,\n        alias: 'number'\n      },\n      color: {\n        pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\\b/,\n        alias: 'symbol'\n      },\n      variable: variable,\n      punctuation: /[:,;()[\\]{}]|\\.{3}/\n    };\n    Prism.languages['plant-uml'].arrow.inside.expression.inside = Prism.languages['plant-uml'];\n    Prism.languages['plantuml'] = Prism.languages['plant-uml'];\n  })(Prism);\n}","map":{"version":3,"names":["plantUml","displayName","aliases","Prism","variable","arrowAttr","source","arrowDirection","arrowBody","arrowLeft","arrowRight","arrowPrefix","arrowSuffix","arrow","languages","comment","pattern","lookbehind","greedy","preprocessor","alias","inside","delimiter","RegExp","expression","punctuation","string","text","keyword","divider","time","color"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/plant-uml.js"],"sourcesContent":["// @ts-nocheck\nplantUml.displayName = 'plant-uml'\nplantUml.aliases = ['plantuml']\n\n/** @type {import('../core.js').Syntax} */\nexport default function plantUml(Prism) {\n  ;(function (Prism) {\n    var variable = /\\$\\w+|%[a-z]+%/\n    var arrowAttr = /\\[[^[\\]]*\\]/.source\n    var arrowDirection = /(?:[drlu]|do|down|le|left|ri|right|up)/.source\n    var arrowBody =\n      '(?:-+' +\n      arrowDirection +\n      '-+|\\\\.+' +\n      arrowDirection +\n      '\\\\.+|-+(?:' +\n      arrowAttr +\n      '-*)?|' +\n      arrowAttr +\n      '-+|\\\\.+(?:' +\n      arrowAttr +\n      '\\\\.*)?|' +\n      arrowAttr +\n      '\\\\.+)'\n    var arrowLeft = /(?:<{1,2}|\\/{1,2}|\\\\{1,2}|<\\||[#*^+}xo])/.source\n    var arrowRight = /(?:>{1,2}|\\/{1,2}|\\\\{1,2}|\\|>|[#*^+{xo])/.source\n    var arrowPrefix = /[[?]?[ox]?/.source\n    var arrowSuffix = /[ox]?[\\]?]?/.source\n    var arrow =\n      arrowPrefix +\n      '(?:' +\n      arrowBody +\n      arrowRight +\n      '|' +\n      arrowLeft +\n      arrowBody +\n      '(?:' +\n      arrowRight +\n      ')?' +\n      ')' +\n      arrowSuffix\n    Prism.languages['plant-uml'] = {\n      comment: {\n        pattern: /(^[ \\t]*)(?:'.*|\\/'[\\s\\S]*?'\\/)/m,\n        lookbehind: true,\n        greedy: true\n      },\n      preprocessor: {\n        pattern: /(^[ \\t]*)!.*/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'property',\n        inside: {\n          variable: variable\n        }\n      },\n      delimiter: {\n        pattern: /(^[ \\t]*)@(?:end|start)uml\\b/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      arrow: {\n        pattern: RegExp(\n          /(^|[^-.<>?|\\\\[\\]ox])/.source + arrow + /(?![-.<>?|\\\\\\]ox])/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator',\n        inside: {\n          expression: {\n            pattern: /(\\[)[^[\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          punctuation: /\\[(?=$|\\])|^\\]/\n        }\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      text: {\n        pattern: /(\\[[ \\t]*[\\r\\n]+(?![\\r\\n]))[^\\]]*(?=\\])/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string'\n      },\n      keyword: [\n        {\n          pattern:\n            /^([ \\t]*)(?:abstract\\s+class|end\\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\\/|while)(?=\\s|$)/m,\n          lookbehind: true,\n          greedy: true\n        },\n        /\\b(?:elseif|equals|not|while)(?=\\s*\\()/,\n        /\\b(?:as|is|then)\\b/\n      ],\n      divider: {\n        pattern: /^==.+==$/m,\n        greedy: true,\n        alias: 'important'\n      },\n      time: {\n        pattern: /@(?:\\d+(?:[:/]\\d+){2}|[+-]?\\d+|:[a-z]\\w*(?:[+-]\\d+)?)\\b/i,\n        greedy: true,\n        alias: 'number'\n      },\n      color: {\n        pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\\b/,\n        alias: 'symbol'\n      },\n      variable: variable,\n      punctuation: /[:,;()[\\]{}]|\\.{3}/\n    }\n    Prism.languages['plant-uml'].arrow.inside.expression.inside =\n      Prism.languages['plant-uml']\n    Prism.languages['plantuml'] = Prism.languages['plant-uml']\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}