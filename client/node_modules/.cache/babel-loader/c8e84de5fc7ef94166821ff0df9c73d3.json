{"ast":null,"code":"function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\nvar doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\nvar singleDelimiters = new RegExp(\"^[\\\\.,:]\");\nvar brackets = new RegExp(\"[()]\");\nvar identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\nvar commandKeywords = [\"break\", \"close\", \"do\", \"else\", \"for\", \"goto\", \"halt\", \"hang\", \"if\", \"job\", \"kill\", \"lock\", \"merge\", \"new\", \"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"]; // The following list includes intrinsic functions _and_ special variables\n\nvar intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\nvar intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\nvar command = wordRegexp(commandKeywords);\n\nfunction tokenBase(stream, state) {\n  if (stream.sol()) {\n    state.label = true;\n    state.commandMode = 0;\n  } // The <space> character has meaning in MUMPS. Ignoring consecutive\n  // spaces would interfere with interpreting whether the next non-space\n  // character belongs to the command or argument context.\n  // Examine each character and update a mode variable whose interpretation is:\n  //   >0 => command    0 => argument    <0 => command post-conditional\n\n\n  var ch = stream.peek();\n\n  if (ch == \" \" || ch == \"\\t\") {\n    // Pre-process <space>\n    state.label = false;\n    if (state.commandMode == 0) state.commandMode = 1;else if (state.commandMode < 0 || state.commandMode == 2) state.commandMode = 0;\n  } else if (ch != \".\" && state.commandMode > 0) {\n    if (ch == \":\") state.commandMode = -1; // SIS - Command post-conditional\n    else state.commandMode = 2;\n  } // Do not color parameter list as line tag\n\n\n  if (ch === \"(\" || ch === \"\\u0009\") state.label = false; // MUMPS comment starts with \";\"\n\n  if (ch === \";\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n\n\n  if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/)) return \"number\"; // Handle Strings\n\n  if (ch == '\"') {\n    if (stream.skipTo('\"')) {\n      stream.next();\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } // Handle operators and Delimiters\n\n\n  if (stream.match(doubleOperators) || stream.match(singleOperators)) return \"operator\"; // Prevents leading \".\" in DO block from falling through to error\n\n  if (stream.match(singleDelimiters)) return null;\n\n  if (brackets.test(ch)) {\n    stream.next();\n    return \"bracket\";\n  }\n\n  if (state.commandMode > 0 && stream.match(command)) return \"controlKeyword\";\n  if (stream.match(intrinsicFuncs)) return \"builtin\";\n  if (stream.match(identifiers)) return \"variable\"; // Detect dollar-sign when not a documented intrinsic function\n  // \"^\" may introduce a GVN or SSVN - Color same as function\n\n  if (ch === \"$\" || ch === \"^\") {\n    stream.next();\n    return \"builtin\";\n  } // MUMPS Indirection\n\n\n  if (ch === \"@\") {\n    stream.next();\n    return \"string.special\";\n  }\n\n  if (/[\\w%]/.test(ch)) {\n    stream.eatWhile(/[\\w%]/);\n    return \"variable\";\n  } // Handle non-detected items\n\n\n  stream.next();\n  return \"error\";\n}\n\nexport const mumps = {\n  startState: function () {\n    return {\n      label: false,\n      commandMode: 0\n    };\n  },\n  token: function (stream, state) {\n    var style = tokenBase(stream, state);\n    if (state.label) return \"tag\";\n    return style;\n  }\n};","map":{"version":3,"names":["wordRegexp","words","RegExp","join","singleOperators","doubleOperators","singleDelimiters","brackets","identifiers","commandKeywords","intrinsicFuncsWords","intrinsicFuncs","command","tokenBase","stream","state","sol","label","commandMode","ch","peek","skipToEnd","match","skipTo","next","test","eatWhile","mumps","startState","token","style"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/mumps.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\nvar doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\nvar singleDelimiters = new RegExp(\"^[\\\\.,:]\");\nvar brackets = new RegExp(\"[()]\");\nvar identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\nvar commandKeywords = [\"break\",\"close\",\"do\",\"else\",\"for\",\"goto\", \"halt\", \"hang\", \"if\", \"job\",\"kill\",\"lock\",\"merge\",\"new\",\"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\",\"c\",\"d\",\"e\",\"f\",\"g\", \"h\", \"i\", \"j\",\"k\",\"l\",\"m\",\"n\",\"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"];\n// The following list includes intrinsic functions _and_ special variables\nvar intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\nvar intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\nvar command = wordRegexp(commandKeywords);\n\nfunction tokenBase(stream, state) {\n  if (stream.sol()) {\n    state.label = true;\n    state.commandMode = 0;\n  }\n\n  // The <space> character has meaning in MUMPS. Ignoring consecutive\n  // spaces would interfere with interpreting whether the next non-space\n  // character belongs to the command or argument context.\n\n  // Examine each character and update a mode variable whose interpretation is:\n  //   >0 => command    0 => argument    <0 => command post-conditional\n  var ch = stream.peek();\n\n  if (ch == \" \" || ch == \"\\t\") { // Pre-process <space>\n    state.label = false;\n    if (state.commandMode == 0)\n      state.commandMode = 1;\n    else if ((state.commandMode < 0) || (state.commandMode == 2))\n      state.commandMode = 0;\n  } else if ((ch != \".\") && (state.commandMode > 0)) {\n    if (ch == \":\")\n      state.commandMode = -1;   // SIS - Command post-conditional\n    else\n      state.commandMode = 2;\n  }\n\n  // Do not color parameter list as line tag\n  if ((ch === \"(\") || (ch === \"\\u0009\"))\n    state.label = false;\n\n  // MUMPS comment starts with \";\"\n  if (ch === \";\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n  if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/))\n    return \"number\";\n\n  // Handle Strings\n  if (ch == '\"') {\n    if (stream.skipTo('\"')) {\n      stream.next();\n      return \"string\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(doubleOperators) || stream.match(singleOperators))\n    return \"operator\";\n\n  // Prevents leading \".\" in DO block from falling through to error\n  if (stream.match(singleDelimiters))\n    return null;\n\n  if (brackets.test(ch)) {\n    stream.next();\n    return \"bracket\";\n  }\n\n  if (state.commandMode > 0 && stream.match(command))\n    return \"controlKeyword\";\n\n  if (stream.match(intrinsicFuncs))\n    return \"builtin\";\n\n  if (stream.match(identifiers))\n    return \"variable\";\n\n  // Detect dollar-sign when not a documented intrinsic function\n  // \"^\" may introduce a GVN or SSVN - Color same as function\n  if (ch === \"$\" || ch === \"^\") {\n    stream.next();\n    return \"builtin\";\n  }\n\n  // MUMPS Indirection\n  if (ch === \"@\") {\n    stream.next();\n    return \"string.special\";\n  }\n\n  if (/[\\w%]/.test(ch)) {\n    stream.eatWhile(/[\\w%]/);\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\n\nexport const mumps = {\n  startState: function() {\n    return {\n      label: false,\n      commandMode: 0\n    };\n  },\n\n  token: function(stream, state) {\n    var style = tokenBase(stream, state);\n    if (state.label) return \"tag\";\n    return style;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}