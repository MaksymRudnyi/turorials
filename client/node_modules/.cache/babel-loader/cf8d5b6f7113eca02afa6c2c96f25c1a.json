{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport { toString } from 'mdast-util-to-string';\nimport { parse } from 'micromark/lib/parse.js';\nimport { preprocess } from 'micromark/lib/preprocess.js';\nimport { postprocess } from 'micromark/lib/postprocess.js';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when itâ€™s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n/**\n * @type {(\n *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n *   ((value: Value, options?: Options) => Root)\n * )}\n */\n\n/**\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {Options} [options]\n * @returns {Root}\n */\nfunction (value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n};\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure({\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }, options.mdastExtensions || []);\n  /** @type {CompileData} */\n\n  const data = {};\n  return compile;\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree];\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = [];\n    /** @type {Array<number>} */\n\n    const listStack = [];\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    };\n    let index = -1;\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n\n    index = -1;\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    } // Figure out `root` position.\n\n\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n    index = -1;\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n\n    return tree;\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token|undefined} */\n\n    let listItem;\n    /** @type {number|undefined} */\n\n    let lineIndex;\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex;\n    /** @type {boolean|undefined} */\n\n    let atMarker;\n\n    while (++index <= length) {\n      const event = events[index];\n\n      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n\n        atMarker = undefined;\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n\n          atMarker = undefined;\n        }\n      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {// Empty.\n      } else {\n        atMarker = undefined;\n      }\n\n      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n\n            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {\n              if (tailEvent[0] === 'exit') continue;\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank';\n                listSpread = true;\n              }\n\n              tailEvent[1].type = 'lineEnding';\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {// Empty\n            } else {\n              break;\n            }\n          }\n\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            // @ts-expect-error Patched.\n            listItem._spread = true;\n          } // Fix position.\n\n\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        } // Create a new list item.\n\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }; // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    } // @ts-expect-error Patched.\n\n\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n\n  function setData(key, value) {\n    data[key] = value;\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n\n  function getData(key) {\n    return data[key];\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    };\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function opener(create, and) {\n    return open;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]; // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]); // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n\n  function closer(and) {\n    return close;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): itâ€™s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n\n    node.position.end = point(token.end);\n    return node;\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n\n  function resume() {\n    return toString(this.stack.pop());\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n  /** @type {Handle} */\n\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n      /** @type {List} */\n      this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData('expectingFirstListItemValue');\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node =\n    /** @type {Code} */\n    this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume();\n    const node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node =\n    /** @type {Definition} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitatxheadingsequence(token) {\n    const node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n    /** @type {Heading} */\n    this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n  /** @type {Handle} */\n\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n  /** @type {Handle} */\n\n\n  function onenterdata(token) {\n    const parent =\n    /** @type {Parent} */\n    this.stack[this.stack.length - 1];\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1];\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text(); // @ts-expect-error: weâ€™ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      }; // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail);\n    }\n\n    this.stack.push(tail);\n  }\n  /** @type {Handle} */\n\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]; // If weâ€™re at a hard break, include the line ending in there.\n\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node =\n    /** @type {HTML} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node =\n    /** @type {InlineCode} */\n    this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitlink() {\n    const context =\n    /** @type {Link & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitimage() {\n    const context =\n    /** @type {Image & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference'; // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut'; // @ts-expect-error: mutate.\n\n      delete context.url;\n      delete context.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier; // @ts-expect-error: mutate.\n\n      delete context.label;\n    }\n\n    setData('referenceType');\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabeltext(token) {\n    const ancestor =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 2];\n    const string = this.sliceSerialize(token);\n    ancestor.label = decodeString(string);\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n  /** @type {Handle} */\n\n\n  function onexitlabel() {\n    const fragment =\n    /** @type {Fragment} */\n    this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node =\n    /** @type {(Link|Image) & {identifier: string, label: string}} */\n    this.stack[this.stack.length - 1]; // Assume a reference.\n\n    setData('inReference', true);\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children;\n    } else {\n      node.alt = value;\n    }\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node =\n    /** @type {Link|Image} */\n    this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /** @type {Handle} */\n\n\n  function onexitresource() {\n    setData('inReference');\n  }\n  /** @type {Handle} */\n\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n  /** @type {Handle} */\n\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node =\n    /** @type {LinkReference|ImageReference} */\n    this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n  /** @type {Handle} */\n\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = getData('characterReferenceType');\n    /** @type {string} */\n\n    let value;\n\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);\n      setData('characterReferenceType');\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything weâ€™ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data);\n    }\n\n    const tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n  /** @type {Handle} */\n\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node =\n    /** @type {Link} */\n    this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n  /** @returns {Code} */\n\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n  /** @returns {InlineCode} */\n\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n  /** @returns {Definition} */\n\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n  /** @returns {Emphasis} */\n\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n  /** @returns {Heading} */\n\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n  /** @returns {Break} */\n\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n  /** @returns {HTML} */\n\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n  /** @returns {Image} */\n\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n  /** @returns {Link} */\n\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n  /** @returns {Paragraph} */\n\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n  /** @returns {Strong} */\n\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n  /** @returns {Text} */\n\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n  /** @returns {ThematicBreak} */\n\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\n\nfunction configure(combined, extensions) {\n  let index = -1;\n\n  while (++index < extensions.length) {\n    const value = extensions[index];\n\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n\n  return combined;\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key;\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms';\n      const maybe = own.call(combined, key) ? combined[key] : undefined;\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {});\n      const right = extension[key];\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right];\n        } else {\n          Object.assign(left, right);\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","map":{"version":3,"names":["toString","parse","preprocess","postprocess","decodeNumericCharacterReference","decodeString","normalizeIdentifier","decodeNamedCharacterReference","stringifyPosition","own","hasOwnProperty","fromMarkdown","value","encoding","options","undefined","compiler","document","write","config","configure","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","data","codeFlowValue","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","label","listItem","listItemValue","onenterlistitemvalue","listOrdered","list","onenterlistordered","listUnordered","paragraph","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","mdastExtensions","compile","events","tree","type","children","stack","tokenStack","listStack","context","resume","setData","getData","index","length","push","tail","pop","prepareList","handler","call","Object","assign","sliceSerialize","defaultOnError","position","start","point","line","column","offset","end","containerBalance","listSpread","lineIndex","firstBlankLineIndex","atMarker","event","tailIndex","tailEvent","_spread","splice","key","d","create","and","open","token","node","errorHandler","parent","close","onExitError","Error","ancestor","Number","parseInt","lang","meta","replace","identifier","toLowerCase","title","url","depth","charCodeAt","text","includes","referenceType","string","fragment","alt","ordered","spread","checked","combined","extensions","Array","isArray","extension","maybe","left","right"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/mdast-util-from-markdown/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when itâ€™s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): itâ€™s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: weâ€™ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If weâ€™re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything weâ€™ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,QAAR,QAAuB,sBAAvB;AACA,SAAQC,KAAR,QAAoB,wBAApB;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AACA,SAAQC,+BAAR,QAA8C,mDAA9C;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AACA,SAAQC,mBAAR,QAAkC,qCAAlC;AACA,SAAQC,6BAAR,QAA4C,kCAA5C;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,MAAMC,GAAG,GAAG,GAAGC,cAAf;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY;AACvB;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACE,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoC;EAClC,IAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;IAChCC,OAAO,GAAGD,QAAV;IACAA,QAAQ,GAAGE,SAAX;EACD;;EAED,OAAOC,QAAQ,CAACF,OAAD,CAAR,CACLX,WAAW,CACTF,KAAK,CAACa,OAAD,CAAL,CAAeG,QAAf,GAA0BC,KAA1B,CAAgChB,UAAU,GAAGU,KAAH,EAAUC,QAAV,EAAoB,IAApB,CAA1C,CADS,CADN,CAAP;AAKD,CAzBI;AA0BP;AACA;AACA;AACA;AACA;;AAEA,SAASG,QAAT,GAAgC;EAAA,IAAdF,OAAc,uEAAJ,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"},"metadata":{},"sourceType":"module"}