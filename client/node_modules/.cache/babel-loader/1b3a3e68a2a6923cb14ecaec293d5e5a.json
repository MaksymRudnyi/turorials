{"ast":null,"code":"// @ts-nocheck\nimport refractorJavascript from './javascript.js';\njsTemplates.displayName = 'js-templates';\njsTemplates.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function jsTemplates(Prism) {\n  Prism.register(refractorJavascript);\n\n  (function (Prism) {\n    var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n    var templateLiteralPattern = templateString.pattern.source;\n    var interpolationObject = templateString.inside['interpolation'];\n    var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n    var interpolationPattern = interpolationObject.pattern.source;\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined;\n      }\n\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      };\n    }\n\n    Prism.languages.javascript['template-string'] = [// styled-jsx:\n    //   css`a { color: #25F; }`\n    // styled-components:\n    //   styled.h1`color: red;`\n    createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n    // div.innerHTML = `<p></p>`\n    createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n    createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n    createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n    createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n    createTemplate('sql', /\\bsql/.source), // vanilla template string\n    templateString].filter(Boolean);\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___';\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n\n\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      };\n      Prism.hooks.run('before-tokenize', env);\n      env.tokens = Prism.tokenize(env.code, env.grammar);\n      Prism.hooks.run('after-tokenize', env);\n      return env.tokens;\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n\n\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {};\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n      /** @type {Array} */\n\n      var tokens = Prism.tokenize(expression, tempGrammar);\n\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1];\n        args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n        tokens.splice.apply(tokens, args);\n      }\n\n      return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n\n\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }); // replace all interpolations with a placeholder which is not in the code already\n\n\n      var placeholderCounter = 0;\n      /** @type {Object<string, string>} */\n\n      var placeholderMap = {};\n\n      var embeddedCode = _tokens.map(function (token) {\n        if (typeof token === 'string') {\n          return token;\n        } else {\n          var interpolationExpression = token.content;\n          var placeholder;\n\n          while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n            /* noop */\n          }\n\n          placeholderMap[placeholder] = interpolationExpression;\n          return placeholder;\n        }\n      }).join(''); // 2. Tokenize the embedded code\n\n\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n      var placeholders = Object.keys(placeholderMap);\n      placeholderCounter = 0;\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return;\n          }\n\n          var token = tokens[i];\n\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter];\n            var s = typeof token === 'string' ? token :\n            /** @type {string} */\n            token.content;\n            var index = s.indexOf(placeholder);\n\n            if (index !== -1) {\n              ++placeholderCounter;\n              var before = s.substring(0, index);\n              var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n              var after = s.substring(index + placeholder.length);\n              var replacement = [];\n\n              if (before) {\n                replacement.push(before);\n              }\n\n              replacement.push(middle);\n\n              if (after) {\n                var afterTokens = [after];\n                walkTokens(afterTokens);\n                replacement.push.apply(replacement, afterTokens);\n              }\n\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                i += replacement.length - 1;\n              } else {\n                token.content = replacement;\n              }\n            }\n          } else {\n            var content = token.content;\n\n            if (Array.isArray(content)) {\n              walkTokens(content);\n            } else {\n              walkTokens([content]);\n            }\n          }\n        }\n      }\n\n      walkTokens(embeddedTokens);\n      return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n\n\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    };\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return;\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n\n\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (typeof token === 'string') {\n            continue;\n          }\n\n          var content = token.content;\n\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content]);\n            }\n\n            continue;\n          }\n\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1];\n\n            if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n              // get string content\n              var code = stringContent(embedded);\n              var alias = embedded.alias;\n              var language = Array.isArray(alias) ? alias[0] : alias;\n              var grammar = Prism.languages[language];\n\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue;\n              }\n\n              content[1] = tokenizeEmbedded(code, grammar, language);\n            }\n          } else {\n            findTemplateStrings(content);\n          }\n        }\n      }\n\n      findTemplateStrings(env.tokens);\n    });\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value;\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('');\n      } else {\n        return stringContent(value.content);\n      }\n    }\n  })(Prism);\n}","map":{"version":3,"names":["refractorJavascript","jsTemplates","displayName","aliases","Prism","register","templateString","languages","javascript","templateLiteralPattern","pattern","source","interpolationObject","inside","interpolationPunctuationObject","interpolationPattern","createTemplate","language","tag","undefined","RegExp","lookbehind","greedy","alias","filter","Boolean","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","code","grammar","env","hooks","run","tokens","tokenize","tokenizeInterpolationExpression","expression","tempGrammar","length","args","push","apply","splice","Token","tokenizeEmbedded","_tokens","interpolation","placeholderCounter","placeholderMap","embeddedCode","map","token","interpolationExpression","content","placeholder","indexOf","join","embeddedTokens","placeholders","Object","keys","walkTokens","i","s","index","before","substring","middle","after","replacement","afterTokens","concat","Array","isArray","supportedLanguages","js","typescript","ts","jsx","tsx","add","findTemplateStrings","l","type","embedded","stringContent","value"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/js-templates.js"],"sourcesContent":["// @ts-nocheck\nimport refractorJavascript from './javascript.js'\njsTemplates.displayName = 'js-templates'\njsTemplates.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function jsTemplates(Prism) {\n  Prism.register(refractorJavascript)\n  ;(function (Prism) {\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\n\n    var templateLiteralPattern = templateString.pattern.source\n    var interpolationObject = templateString.inside['interpolation']\n    var interpolationPunctuationObject =\n      interpolationObject.inside['interpolation-punctuation']\n    var interpolationPattern = interpolationObject.pattern.source\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined\n      }\n\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      }\n    }\n\n    Prism.languages.javascript['template-string'] = [\n      // styled-jsx:\n      //   css`a { color: #25F; }`\n      // styled-components:\n      //   styled.h1`color: red;`\n      createTemplate(\n        'css',\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\n          .source\n      ), // html`<p></p>`\n      // div.innerHTML = `<p></p>`\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n      createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n      createTemplate(\n        'graphql',\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\n      ), // sql`...`\n      createTemplate('sql', /\\bsql/.source), // vanilla template string\n      templateString\n    ].filter(Boolean)\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___'\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      }\n      Prism.hooks.run('before-tokenize', env)\n      env.tokens = Prism.tokenize(env.code, env.grammar)\n      Prism.hooks.run('after-tokenize', env)\n      return env.tokens\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {}\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\n      /** @type {Array} */\n\n      var tokens = Prism.tokenize(expression, tempGrammar)\n\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1]\n        args.push.apply(\n          args,\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\n        )\n        tokens.splice.apply(tokens, args)\n      }\n\n      return new Prism.Token(\n        'interpolation',\n        tokens,\n        interpolationObject.alias,\n        expression\n      )\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }) // replace all interpolations with a placeholder which is not in the code already\n\n      var placeholderCounter = 0\n      /** @type {Object<string, string>} */\n\n      var placeholderMap = {}\n\n      var embeddedCode = _tokens\n        .map(function (token) {\n          if (typeof token === 'string') {\n            return token\n          } else {\n            var interpolationExpression = token.content\n            var placeholder\n\n            while (\n              code.indexOf(\n                (placeholder = getPlaceholder(placeholderCounter++, language))\n              ) !== -1\n            ) {\n              /* noop */\n            }\n\n            placeholderMap[placeholder] = interpolationExpression\n            return placeholder\n          }\n        })\n        .join('') // 2. Tokenize the embedded code\n\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\n\n      var placeholders = Object.keys(placeholderMap)\n      placeholderCounter = 0\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return\n          }\n\n          var token = tokens[i]\n\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter]\n            var s =\n              typeof token === 'string'\n                ? token\n                : /** @type {string} */\n                  token.content\n            var index = s.indexOf(placeholder)\n\n            if (index !== -1) {\n              ++placeholderCounter\n              var before = s.substring(0, index)\n              var middle = tokenizeInterpolationExpression(\n                placeholderMap[placeholder]\n              )\n              var after = s.substring(index + placeholder.length)\n              var replacement = []\n\n              if (before) {\n                replacement.push(before)\n              }\n\n              replacement.push(middle)\n\n              if (after) {\n                var afterTokens = [after]\n                walkTokens(afterTokens)\n                replacement.push.apply(replacement, afterTokens)\n              }\n\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                i += replacement.length - 1\n              } else {\n                token.content = replacement\n              }\n            }\n          } else {\n            var content = token.content\n\n            if (Array.isArray(content)) {\n              walkTokens(content)\n            } else {\n              walkTokens([content])\n            }\n          }\n        }\n      }\n\n      walkTokens(embeddedTokens)\n      return new Prism.Token(\n        language,\n        embeddedTokens,\n        'language-' + language,\n        code\n      )\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n\n          if (typeof token === 'string') {\n            continue\n          }\n\n          var content = token.content\n\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content])\n            }\n\n            continue\n          }\n\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1]\n\n            if (\n              content.length === 3 &&\n              typeof embedded !== 'string' &&\n              embedded.type === 'embedded-code'\n            ) {\n              // get string content\n              var code = stringContent(embedded)\n              var alias = embedded.alias\n              var language = Array.isArray(alias) ? alias[0] : alias\n              var grammar = Prism.languages[language]\n\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue\n              }\n\n              content[1] = tokenizeEmbedded(code, grammar, language)\n            }\n          } else {\n            findTemplateStrings(content)\n          }\n        }\n      }\n\n      findTemplateStrings(env.tokens)\n    })\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('')\n      } else {\n        return stringContent(value.content)\n      }\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA;AACA,OAAOA,mBAAP,MAAgC,iBAAhC;AACAC,WAAW,CAACC,WAAZ,GAA0B,cAA1B;AACAD,WAAW,CAACE,OAAZ,GAAsB,EAAtB;AAEA;;AACA,eAAe,SAASF,WAAT,CAAqBG,KAArB,EAA4B;EACzCA,KAAK,CAACC,QAAN,CAAeL,mBAAf;;EACC,CAAC,UAAUI,KAAV,EAAiB;IACjB,IAAIE,cAAc,GAAGF,KAAK,CAACG,SAAN,CAAgBC,UAAhB,CAA2B,iBAA3B,CAArB,CADiB,CACkD;;IAEnE,IAAIC,sBAAsB,GAAGH,cAAc,CAACI,OAAf,CAAuBC,MAApD;IACA,IAAIC,mBAAmB,GAAGN,cAAc,CAACO,MAAf,CAAsB,eAAtB,CAA1B;IACA,IAAIC,8BAA8B,GAChCF,mBAAmB,CAACC,MAApB,CAA2B,2BAA3B,CADF;IAEA,IAAIE,oBAAoB,GAAGH,mBAAmB,CAACF,OAApB,CAA4BC,MAAvD;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI,SAASK,cAAT,CAAwBC,QAAxB,EAAkCC,GAAlC,EAAuC;MACrC,IAAI,CAACd,KAAK,CAACG,SAAN,CAAgBU,QAAhB,CAAL,EAAgC;QAC9B,OAAOE,SAAP;MACD;;MAED,OAAO;QACLT,OAAO,EAAEU,MAAM,CAAC,SAASF,GAAT,GAAe,QAAf,GAA0BT,sBAA3B,CADV;QAELY,UAAU,EAAE,IAFP;QAGLC,MAAM,EAAE,IAHH;QAILT,MAAM,EAAE;UACN,wBAAwB;YACtBH,OAAO,EAAE,OADa;YAEtBa,KAAK,EAAE;UAFe,CADlB;UAKN,iBAAiB;YACfb,OAAO,EAAE,SADM;YAEfa,KAAK,EAAEN;UAFQ;QALX;MAJH,CAAP;IAeD;;IAEDb,KAAK,CAACG,SAAN,CAAgBC,UAAhB,CAA2B,iBAA3B,IAAgD,CAC9C;IACA;IACA;IACA;IACAQ,cAAc,CACZ,KADY,EAEZ,0HACGL,MAHS,CALgC,EAS3C;IACH;IACAK,cAAc,CAAC,MAAD,EAAS,yCAAyCL,MAAlD,CAXgC,EAW2B;IACzEK,cAAc,CAAC,KAAD,EAAQ,QAAQL,MAAhB,CAZgC,EAYP;IACvCK,cAAc,CAAC,UAAD,EAAa,oBAAoBL,MAAjC,CAbgC,EAaU;IACxDK,cAAc,CACZ,SADY,EAEZ,6CAA6CL,MAFjC,CAdgC,EAiB3C;IACHK,cAAc,CAAC,KAAD,EAAQ,QAAQL,MAAhB,CAlBgC,EAkBP;IACvCL,cAnB8C,EAoB9CkB,MApB8C,CAoBvCC,OApBuC,CAAhD;IAqBA;AACJ;AACA;AACA;AACA;AACA;AACA;;IAEI,SAASC,cAAT,CAAwBC,OAAxB,EAAiCV,QAAjC,EAA2C;MACzC,OAAO,QAAQA,QAAQ,CAACW,WAAT,EAAR,GAAiC,GAAjC,GAAuCD,OAAvC,GAAiD,KAAxD;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;IAEI,SAASE,iBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0Cd,QAA1C,EAAoD;MAClD,IAAIe,GAAG,GAAG;QACRF,IAAI,EAAEA,IADE;QAERC,OAAO,EAAEA,OAFD;QAGRd,QAAQ,EAAEA;MAHF,CAAV;MAKAb,KAAK,CAAC6B,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmCF,GAAnC;MACAA,GAAG,CAACG,MAAJ,GAAa/B,KAAK,CAACgC,QAAN,CAAeJ,GAAG,CAACF,IAAnB,EAAyBE,GAAG,CAACD,OAA7B,CAAb;MACA3B,KAAK,CAAC6B,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkCF,GAAlC;MACA,OAAOA,GAAG,CAACG,MAAX;IACD;IACD;AACJ;AACA;AACA;AACA;AACA;;;IAEI,SAASE,+BAAT,CAAyCC,UAAzC,EAAqD;MACnD,IAAIC,WAAW,GAAG,EAAlB;MACAA,WAAW,CAAC,2BAAD,CAAX,GAA2CzB,8BAA3C;MACA;;MAEA,IAAIqB,MAAM,GAAG/B,KAAK,CAACgC,QAAN,CAAeE,UAAf,EAA2BC,WAA3B,CAAb;;MAEA,IAAIJ,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;QACvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;QACQ,IAAIC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;QACAA,IAAI,CAACC,IAAL,CAAUC,KAAV,CACEF,IADF,EAEEZ,iBAAiB,CAACM,MAAM,CAAC,CAAD,CAAP,EAAY/B,KAAK,CAACG,SAAN,CAAgBC,UAA5B,EAAwC,YAAxC,CAFnB;QAIA2B,MAAM,CAACS,MAAP,CAAcD,KAAd,CAAoBR,MAApB,EAA4BM,IAA5B;MACD;;MAED,OAAO,IAAIrC,KAAK,CAACyC,KAAV,CACL,eADK,EAELV,MAFK,EAGLvB,mBAAmB,CAACW,KAHf,EAILe,UAJK,CAAP;IAMD;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IAEI,SAASQ,gBAAT,CAA0BhB,IAA1B,EAAgCC,OAAhC,EAAyCd,QAAzC,EAAmD;MACjD;MACA;;MAEA;MACA,IAAI8B,OAAO,GAAG3C,KAAK,CAACgC,QAAN,CAAeN,IAAf,EAAqB;QACjCkB,aAAa,EAAE;UACbtC,OAAO,EAAEU,MAAM,CAACL,oBAAD,CADF;UAEbM,UAAU,EAAE;QAFC;MADkB,CAArB,CAAd,CALiD,CAU9C;;;MAEH,IAAI4B,kBAAkB,GAAG,CAAzB;MACA;;MAEA,IAAIC,cAAc,GAAG,EAArB;;MAEA,IAAIC,YAAY,GAAGJ,OAAO,CACvBK,GADgB,CACZ,UAAUC,KAAV,EAAiB;QACpB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;UAC7B,OAAOA,KAAP;QACD,CAFD,MAEO;UACL,IAAIC,uBAAuB,GAAGD,KAAK,CAACE,OAApC;UACA,IAAIC,WAAJ;;UAEA,OACE1B,IAAI,CAAC2B,OAAL,CACGD,WAAW,GAAG9B,cAAc,CAACuB,kBAAkB,EAAnB,EAAuBhC,QAAvB,CAD/B,MAEM,CAAC,CAHT,EAIE;YACA;UACD;;UAEDiC,cAAc,CAACM,WAAD,CAAd,GAA8BF,uBAA9B;UACA,OAAOE,WAAP;QACD;MACF,CAnBgB,EAoBhBE,IApBgB,CAoBX,EApBW,CAAnB,CAjBiD,CAqCrC;;;MAEZ,IAAIC,cAAc,GAAG9B,iBAAiB,CAACsB,YAAD,EAAepB,OAAf,EAAwBd,QAAxB,CAAtC,CAvCiD,CAuCuB;;MAExE,IAAI2C,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYZ,cAAZ,CAAnB;MACAD,kBAAkB,GAAG,CAArB;MACA;AACN;AACA;AACA;AACA;;MAEM,SAASc,UAAT,CAAoB5B,MAApB,EAA4B;QAC1B,KAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,MAAM,CAACK,MAA3B,EAAmCwB,CAAC,EAApC,EAAwC;UACtC,IAAIf,kBAAkB,IAAIW,YAAY,CAACpB,MAAvC,EAA+C;YAC7C;UACD;;UAED,IAAIa,KAAK,GAAGlB,MAAM,CAAC6B,CAAD,CAAlB;;UAEA,IAAI,OAAOX,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAK,CAACE,OAAb,KAAyB,QAA1D,EAAoE;YAClE,IAAIC,WAAW,GAAGI,YAAY,CAACX,kBAAD,CAA9B;YACA,IAAIgB,CAAC,GACH,OAAOZ,KAAP,KAAiB,QAAjB,GACIA,KADJ;YAEI;YACAA,KAAK,CAACE,OAJZ;YAKA,IAAIW,KAAK,GAAGD,CAAC,CAACR,OAAF,CAAUD,WAAV,CAAZ;;YAEA,IAAIU,KAAK,KAAK,CAAC,CAAf,EAAkB;cAChB,EAAEjB,kBAAF;cACA,IAAIkB,MAAM,GAAGF,CAAC,CAACG,SAAF,CAAY,CAAZ,EAAeF,KAAf,CAAb;cACA,IAAIG,MAAM,GAAGhC,+BAA+B,CAC1Ca,cAAc,CAACM,WAAD,CAD4B,CAA5C;cAGA,IAAIc,KAAK,GAAGL,CAAC,CAACG,SAAF,CAAYF,KAAK,GAAGV,WAAW,CAAChB,MAAhC,CAAZ;cACA,IAAI+B,WAAW,GAAG,EAAlB;;cAEA,IAAIJ,MAAJ,EAAY;gBACVI,WAAW,CAAC7B,IAAZ,CAAiByB,MAAjB;cACD;;cAEDI,WAAW,CAAC7B,IAAZ,CAAiB2B,MAAjB;;cAEA,IAAIC,KAAJ,EAAW;gBACT,IAAIE,WAAW,GAAG,CAACF,KAAD,CAAlB;gBACAP,UAAU,CAACS,WAAD,CAAV;gBACAD,WAAW,CAAC7B,IAAZ,CAAiBC,KAAjB,CAAuB4B,WAAvB,EAAoCC,WAApC;cACD;;cAED,IAAI,OAAOnB,KAAP,KAAiB,QAArB,EAA+B;gBAC7BlB,MAAM,CAACS,MAAP,CAAcD,KAAd,CAAoBR,MAApB,EAA4B,CAAC6B,CAAD,EAAI,CAAJ,EAAOS,MAAP,CAAcF,WAAd,CAA5B;gBACAP,CAAC,IAAIO,WAAW,CAAC/B,MAAZ,GAAqB,CAA1B;cACD,CAHD,MAGO;gBACLa,KAAK,CAACE,OAAN,GAAgBgB,WAAhB;cACD;YACF;UACF,CArCD,MAqCO;YACL,IAAIhB,OAAO,GAAGF,KAAK,CAACE,OAApB;;YAEA,IAAImB,KAAK,CAACC,OAAN,CAAcpB,OAAd,CAAJ,EAA4B;cAC1BQ,UAAU,CAACR,OAAD,CAAV;YACD,CAFD,MAEO;cACLQ,UAAU,CAAC,CAACR,OAAD,CAAD,CAAV;YACD;UACF;QACF;MACF;;MAEDQ,UAAU,CAACJ,cAAD,CAAV;MACA,OAAO,IAAIvD,KAAK,CAACyC,KAAV,CACL5B,QADK,EAEL0C,cAFK,EAGL,cAAc1C,QAHT,EAILa,IAJK,CAAP;IAMD;IACD;AACJ;AACA;AACA;AACA;;;IAEI,IAAI8C,kBAAkB,GAAG;MACvBpE,UAAU,EAAE,IADW;MAEvBqE,EAAE,EAAE,IAFmB;MAGvBC,UAAU,EAAE,IAHW;MAIvBC,EAAE,EAAE,IAJmB;MAKvBC,GAAG,EAAE,IALkB;MAMvBC,GAAG,EAAE;IANkB,CAAzB;IAQA7E,KAAK,CAAC6B,KAAN,CAAYiD,GAAZ,CAAgB,gBAAhB,EAAkC,UAAUlD,GAAV,EAAe;MAC/C,IAAI,EAAEA,GAAG,CAACf,QAAJ,IAAgB2D,kBAAlB,CAAJ,EAA2C;QACzC;MACD;MACD;AACN;AACA;AACA;AACA;AACA;;;MAEM,SAASO,mBAAT,CAA6BhD,MAA7B,EAAqC;QACnC,KAAK,IAAI6B,CAAC,GAAG,CAAR,EAAWoB,CAAC,GAAGjD,MAAM,CAACK,MAA3B,EAAmCwB,CAAC,GAAGoB,CAAvC,EAA0CpB,CAAC,EAA3C,EAA+C;UAC7C,IAAIX,KAAK,GAAGlB,MAAM,CAAC6B,CAAD,CAAlB;;UAEA,IAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;YAC7B;UACD;;UAED,IAAIE,OAAO,GAAGF,KAAK,CAACE,OAApB;;UAEA,IAAI,CAACmB,KAAK,CAACC,OAAN,CAAcpB,OAAd,CAAL,EAA6B;YAC3B,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;cAC/B4B,mBAAmB,CAAC,CAAC5B,OAAD,CAAD,CAAnB;YACD;;YAED;UACD;;UAED,IAAIF,KAAK,CAACgC,IAAN,KAAe,iBAAnB,EAAsC;YACpC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;YACY,IAAIC,QAAQ,GAAG/B,OAAO,CAAC,CAAD,CAAtB;;YAEA,IACEA,OAAO,CAACf,MAAR,KAAmB,CAAnB,IACA,OAAO8C,QAAP,KAAoB,QADpB,IAEAA,QAAQ,CAACD,IAAT,KAAkB,eAHpB,EAIE;cACA;cACA,IAAIvD,IAAI,GAAGyD,aAAa,CAACD,QAAD,CAAxB;cACA,IAAI/D,KAAK,GAAG+D,QAAQ,CAAC/D,KAArB;cACA,IAAIN,QAAQ,GAAGyD,KAAK,CAACC,OAAN,CAAcpD,KAAd,IAAuBA,KAAK,CAAC,CAAD,CAA5B,GAAkCA,KAAjD;cACA,IAAIQ,OAAO,GAAG3B,KAAK,CAACG,SAAN,CAAgBU,QAAhB,CAAd;;cAEA,IAAI,CAACc,OAAL,EAAc;gBACZ;gBACA;cACD;;cAEDwB,OAAO,CAAC,CAAD,CAAP,GAAaT,gBAAgB,CAAChB,IAAD,EAAOC,OAAP,EAAgBd,QAAhB,CAA7B;YACD;UACF,CAnCD,MAmCO;YACLkE,mBAAmB,CAAC5B,OAAD,CAAnB;UACD;QACF;MACF;;MAED4B,mBAAmB,CAACnD,GAAG,CAACG,MAAL,CAAnB;IACD,CAvED;IAwEA;AACJ;AACA;AACA;AACA;AACA;;IAEI,SAASoD,aAAT,CAAuBC,KAAvB,EAA8B;MAC5B,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7B,OAAOA,KAAP;MACD,CAFD,MAEO,IAAId,KAAK,CAACC,OAAN,CAAca,KAAd,CAAJ,EAA0B;QAC/B,OAAOA,KAAK,CAACpC,GAAN,CAAUmC,aAAV,EAAyB7B,IAAzB,CAA8B,EAA9B,CAAP;MACD,CAFM,MAEA;QACL,OAAO6B,aAAa,CAACC,KAAK,CAACjC,OAAP,CAApB;MACD;IACF;EACF,CA9WA,EA8WEnD,KA9WF;AA+WF"},"metadata":{},"sourceType":"module"}