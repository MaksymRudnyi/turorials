{"ast":null,"code":"// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\n\nclass Range {\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n  }\n\n} /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\n\n\nclass NodeProp {\n  /// Create a new node prop type.\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.id = nextPropID++;\n    this.perNode = !!config.perNode;\n\n    this.deserialize = config.deserialize || (() => {\n      throw new Error(\"This node type doesn't define a deserialize function\");\n    });\n  } /// This is meant to be used with\n  /// [`NodeSet.extend`](#common.NodeSet.extend) or\n  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n  /// prop values for each node type in the set. Takes a [match\n  /// object](#common.NodeType^match) or function that returns undefined\n  /// if the node type doesn't get this prop, and the prop's value if\n  /// it does.\n\n\n  add(match) {\n    if (this.perNode) throw new RangeError(\"Can't add per-node props to node types\");\n    if (typeof match != \"function\") match = NodeType.match(match);\n    return type => {\n      let result = match(type);\n      return result === undefined ? null : [this, result];\n    };\n  }\n\n} /// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\n\n\nNodeProp.closedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n}); /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\n\nNodeProp.openedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n}); /// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\n\nNodeProp.group = new NodeProp({\n  deserialize: str => str.split(\" \")\n}); /// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\n\nNodeProp.contextHash = new NodeProp({\n  perNode: true\n}); /// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\n\nNodeProp.lookAhead = new NodeProp({\n  perNode: true\n}); /// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\n\nNodeProp.mounted = new NodeProp({\n  perNode: true\n}); /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\n\nclass MountedTree {\n  constructor( /// The inner tree.\n  tree, /// If this is null, this tree replaces the entire node (it will\n  /// be included in the regular iteration instead of its host\n  /// node). If not, only the given ranges are considered to be\n  /// covered by this tree. This is used for trees that are mixed in\n  /// a way that isn't strictly hierarchical. Such mounted trees are\n  /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n  /// and [`enter`](#common.SyntaxNode.enter).\n  overlay, /// The parser used to create this subtree.\n  parser) {\n    this.tree = tree;\n    this.overlay = overlay;\n    this.parser = parser;\n  }\n\n}\n\nconst noProps = Object.create(null); /// Each node in a syntax tree has a node type associated with it.\n\nclass NodeType {\n  /// @internal\n  constructor( /// The name of the node type. Not necessarily unique, but if the\n  /// grammar was written properly, different node types with the\n  /// same name within a node set should play the same semantic\n  /// role.\n  name, /// @internal\n  props, /// The id of this node in its set. Corresponds to the term ids\n  /// used in the parser.\n  id) {\n    let flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.name = name;\n    this.props = props;\n    this.id = id;\n    this.flags = flags;\n  } /// Define a node type.\n\n\n  static define(spec) {\n    let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n    let flags = (spec.top ? 1\n    /* Top */\n    : 0) | (spec.skipped ? 2\n    /* Skipped */\n    : 0) | (spec.error ? 4\n    /* Error */\n    : 0) | (spec.name == null ? 8\n    /* Anonymous */\n    : 0);\n    let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n    if (spec.props) for (let src of spec.props) {\n      if (!Array.isArray(src)) src = src(type);\n\n      if (src) {\n        if (src[0].perNode) throw new RangeError(\"Can't store a per-node prop on a node type\");\n        props[src[0].id] = src[1];\n      }\n    }\n    return type;\n  } /// Retrieves a node prop for this type. Will return `undefined` if\n  /// the prop isn't present on this node.\n\n\n  prop(prop) {\n    return this.props[prop.id];\n  } /// True when this is the top node of a grammar.\n\n\n  get isTop() {\n    return (this.flags & 1\n    /* Top */\n    ) > 0;\n  } /// True when this node is produced by a skip rule.\n\n\n  get isSkipped() {\n    return (this.flags & 2\n    /* Skipped */\n    ) > 0;\n  } /// Indicates whether this is an error node.\n\n\n  get isError() {\n    return (this.flags & 4\n    /* Error */\n    ) > 0;\n  } /// When true, this node type doesn't correspond to a user-declared\n  /// named node, for example because it is used to cache repetition.\n\n\n  get isAnonymous() {\n    return (this.flags & 8\n    /* Anonymous */\n    ) > 0;\n  } /// Returns true when this node's name or one of its\n  /// [groups](#common.NodeProp^group) matches the given string.\n\n\n  is(name) {\n    if (typeof name == 'string') {\n      if (this.name == name) return true;\n      let group = this.prop(NodeProp.group);\n      return group ? group.indexOf(name) > -1 : false;\n    }\n\n    return this.id == name;\n  } /// Create a function from node types to arbitrary values by\n  /// specifying an object whose property names are node or\n  /// [group](#common.NodeProp^group) names. Often useful with\n  /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n  /// names, separated by spaces, in a single property name to map\n  /// multiple node names to a single value.\n\n\n  static match(map) {\n    let direct = Object.create(null);\n\n    for (let prop in map) for (let name of prop.split(\" \")) direct[name] = map[prop];\n\n    return node => {\n      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n        let found = direct[i < 0 ? node.name : groups[i]];\n        if (found) return found;\n      }\n    };\n  }\n\n} /// An empty dummy node type to use when no actual type is available.\n\n\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8\n/* Anonymous */\n); /// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\n\nclass NodeSet {\n  /// Create a set with the given types. The `id` property of each\n  /// type should correspond to its position within the array.\n  constructor( /// The node types in this set, by id.\n  types) {\n    this.types = types;\n\n    for (let i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n  } /// Create a copy of this set with some node properties added. The\n  /// arguments to this method can be created with\n  /// [`NodeProp.add`](#common.NodeProp.add).\n\n\n  extend() {\n    let newTypes = [];\n\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    for (let type of this.types) {\n      let newProps = null;\n\n      for (let source of props) {\n        let add = source(type);\n\n        if (add) {\n          if (!newProps) newProps = Object.assign({}, type.props);\n          newProps[add[0].id] = add[1];\n        }\n      }\n\n      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n    }\n\n    return new NodeSet(newTypes);\n  }\n\n}\n\nconst CachedNode = new WeakMap(),\n      CachedInnerNode = new WeakMap(); /// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\n\nvar IterMode;\n\n(function (IterMode) {\n  /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n  /// objects, not nodes packed into\n  /// [`TreeBuffer`](#common.TreeBuffer)s.\n  IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\"; /// Enable this to make iteration include anonymous nodes (such as\n  /// the nodes that wrap repeated grammar constructs into a balanced\n  /// tree).\n\n  IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\"; /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n  /// replace their base node in iteration. Enable this to ignore them\n  /// instead.\n\n  IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\"; /// This option only applies in\n  /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n  /// library to not enter mounted overlays if one covers the given\n  /// position.\n\n  IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {})); /// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\n\n\nclass Tree {\n  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n  constructor( /// The type of the top node.\n  type, /// This node's child nodes.\n  children, /// The positions (offsets relative to the start of this tree) of\n  /// the children.\n  positions, /// The total length of this tree\n  length, /// Per-node [node props](#common.NodeProp) to associate with this node.\n  props) {\n    this.type = type;\n    this.children = children;\n    this.positions = positions;\n    this.length = length; /// @internal\n\n    this.props = null;\n\n    if (props && props.length) {\n      this.props = Object.create(null);\n\n      for (let [prop, value] of props) this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n    }\n  } /// @internal\n\n\n  toString() {\n    let mounted = this.prop(NodeProp.mounted);\n    if (mounted && !mounted.overlay) return mounted.tree.toString();\n    let children = \"\";\n\n    for (let ch of this.children) {\n      let str = ch.toString();\n\n      if (str) {\n        if (children) children += \",\";\n        children += str;\n      }\n    }\n\n    return !this.type.name ? children : (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? \"(\" + children + \")\" : \"\");\n  } /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n  /// the tree. Mode can be used to [control](#common.IterMode) which\n  /// nodes the cursor visits.\n\n\n  cursor() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return new TreeCursor(this.topNode, mode);\n  } /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n  /// at the given position and side (see\n  /// [`moveTo`](#common.TreeCursor.moveTo).\n\n\n  cursorAt(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let scope = CachedNode.get(this) || this.topNode;\n    let cursor = new TreeCursor(scope);\n    cursor.moveTo(pos, side);\n    CachedNode.set(this, cursor._tree);\n    return cursor;\n  } /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n  /// tree.\n\n\n  get topNode() {\n    return new TreeNode(this, 0, 0, null);\n  } /// Get the [syntax node](#common.SyntaxNode) at the given position.\n  /// If `side` is -1, this will move into nodes that end at the\n  /// position. If 1, it'll move into nodes that start at the\n  /// position. With 0, it'll only enter nodes that cover the position\n  /// from both sides.\n  ///\n  /// Note that this will not enter\n  /// [overlays](#common.MountedTree.overlay), and you often want\n  /// [`resolveInner`](#common.Tree.resolveInner) instead.\n\n\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n    CachedNode.set(this, node);\n    return node;\n  } /// Like [`resolve`](#common.Tree.resolve), but will enter\n  /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n  /// pointing into the innermost overlaid tree at the given position\n  /// (with parent links going through all parent structure, including\n  /// the host trees).\n\n\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n    CachedInnerNode.set(this, node);\n    return node;\n  } /// Iterate over the tree and its children, calling `enter` for any\n  /// node that touches the `from`/`to` region (if given) before\n  /// running over such a node's children, and `leave` (if given) when\n  /// leaving the node. When `enter` returns `false`, that node will\n  /// not have its children iterated over (or `leave` called).\n\n\n  iterate(spec) {\n    let {\n      enter,\n      leave,\n      from = 0,\n      to = this.length\n    } = spec;\n\n    for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\n      let entered = false;\n\n      if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\n        if (c.firstChild()) continue;\n        entered = true;\n      }\n\n      for (;;) {\n        if (entered && leave && !c.type.isAnonymous) leave(c);\n        if (c.nextSibling()) break;\n        if (!c.parent()) return;\n        entered = true;\n      }\n    }\n  } /// Get the value of the given [node prop](#common.NodeProp) for this\n  /// node. Works with both per-node and per-type props.\n\n\n  prop(prop) {\n    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n  } /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n  /// format that can be passed to the [`Tree`](#common.Tree)\n  /// constructor.\n\n\n  get propValues() {\n    let result = [];\n    if (this.props) for (let id in this.props) result.push([+id, this.props[id]]);\n    return result;\n  } /// Balance the direct children of this tree, producing a copy of\n  /// which may have children grouped into subtrees with type\n  /// [`NodeType.none`](#common.NodeType^none).\n\n\n  balance() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.children.length <= 8\n    /* BranchFactor */\n    ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n  } /// Build a tree from a postfix-ordered buffer of node information,\n  /// or a cursor over such a buffer.\n\n\n  static build(data) {\n    return buildTree(data);\n  }\n\n} /// The empty tree\n\n\nTree.empty = new Tree(NodeType.none, [], [], 0);\n\nclass FlatBufferCursor {\n  constructor(buffer, index) {\n    this.buffer = buffer;\n    this.index = index;\n  }\n\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n\n  get pos() {\n    return this.index;\n  }\n\n  next() {\n    this.index -= 4;\n  }\n\n  fork() {\n    return new FlatBufferCursor(this.buffer, this.index);\n  }\n\n} /// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\n\n\nclass TreeBuffer {\n  /// Create a tree buffer.\n  constructor( /// The buffer's content.\n  buffer, /// The total length of the group of nodes in the buffer.\n  length, /// The node set used in this buffer.\n  set) {\n    this.buffer = buffer;\n    this.length = length;\n    this.set = set;\n  } /// @internal\n\n\n  get type() {\n    return NodeType.none;\n  } /// @internal\n\n\n  toString() {\n    let result = [];\n\n    for (let index = 0; index < this.buffer.length;) {\n      result.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n\n    return result.join(\",\");\n  } /// @internal\n\n\n  childString(index) {\n    let id = this.buffer[index],\n        endIndex = this.buffer[index + 3];\n    let type = this.set.types[id],\n        result = type.name;\n    if (/\\W/.test(result) && !type.isError) result = JSON.stringify(result);\n    index += 4;\n    if (endIndex == index) return result;\n    let children = [];\n\n    while (index < endIndex) {\n      children.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n\n    return result + \"(\" + children.join(\",\") + \")\";\n  } /// @internal\n\n\n  findChild(startIndex, endIndex, dir, pos, side) {\n    let {\n      buffer\n    } = this,\n        pick = -1;\n\n    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n        pick = i;\n        if (dir > 0) break;\n      }\n    }\n\n    return pick;\n  } /// @internal\n\n\n  slice(startI, endI, from, to) {\n    let b = this.buffer;\n    let copy = new Uint16Array(endI - startI);\n\n    for (let i = startI, j = 0; i < endI;) {\n      copy[j++] = b[i++];\n      copy[j++] = b[i++] - from;\n      copy[j++] = b[i++] - from;\n      copy[j++] = b[i++] - startI;\n    }\n\n    return new TreeBuffer(copy, to - from, this.set);\n  }\n\n}\n\nfunction checkSide(side, pos, from, to) {\n  switch (side) {\n    case -2\n    /* Before */\n    :\n      return from < pos;\n\n    case -1\n    /* AtOrBefore */\n    :\n      return to >= pos && from < pos;\n\n    case 0\n    /* Around */\n    :\n      return from < pos && to > pos;\n\n    case 1\n    /* AtOrAfter */\n    :\n      return from <= pos && to > pos;\n\n    case 2\n    /* After */\n    :\n      return to > pos;\n\n    case 4\n    /* DontCare */\n    :\n      return true;\n  }\n}\n\nfunction enterUnfinishedNodesBefore(node, pos) {\n  let scan = node.childBefore(pos);\n\n  while (scan) {\n    let last = scan.lastChild;\n    if (!last || last.to != scan.to) break;\n\n    if (last.type.isError && last.from == last.to) {\n      node = scan;\n      scan = last.prevSibling;\n    } else {\n      scan = last;\n    }\n  }\n\n  return node;\n}\n\nfunction resolveNode(node, pos, side, overlays) {\n  var _a; // Move up to a node that actually holds the position, if possible\n\n\n  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {\n    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n    if (!parent) return node;\n    node = parent;\n  }\n\n  let mode = overlays ? 0 : IterMode.IgnoreOverlays; // Must go up out of overlays when those do not overlap with pos\n\n  if (overlays) for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n    if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = parent;\n  }\n\n  for (;;) {\n    let inner = node.enter(pos, side, mode);\n    if (!inner) return node;\n    node = inner;\n  }\n}\n\nclass TreeNode {\n  constructor(_tree, from, // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n  index, _parent) {\n    this._tree = _tree;\n    this.from = from;\n    this.index = index;\n    this._parent = _parent;\n  }\n\n  get type() {\n    return this._tree.type;\n  }\n\n  get name() {\n    return this._tree.type.name;\n  }\n\n  get to() {\n    return this.from + this._tree.length;\n  }\n\n  nextChild(i, dir, pos, side) {\n    let mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n    for (let parent = this;;) {\n      for (let {\n        children,\n        positions\n      } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n        let next = children[i],\n            start = positions[i] + parent.from;\n        if (!checkSide(side, pos, start, start + next.length)) continue;\n\n        if (next instanceof TreeBuffer) {\n          if (mode & IterMode.ExcludeBuffers) continue;\n          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n          if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n        } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {\n          let mounted;\n          if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);\n          let inner = new TreeNode(next, start, i, parent);\n          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n        }\n      }\n\n      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;\n      if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;\n      parent = parent._parent;\n      if (!parent) return null;\n    }\n  }\n\n  get firstChild() {\n    return this.nextChild(0, 1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  get lastChild() {\n    return this.nextChild(this._tree.children.length - 1, -1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  childAfter(pos) {\n    return this.nextChild(0, 1, pos, 2\n    /* After */\n    );\n  }\n\n  childBefore(pos) {\n    return this.nextChild(this._tree.children.length - 1, -1, pos, -2\n    /* Before */\n    );\n  }\n\n  enter(pos, side) {\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let mounted;\n\n    if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n      let rPos = pos - this.from;\n\n      for (let {\n        from,\n        to\n      } of mounted.overlay) {\n        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n      }\n    }\n\n    return this.nextChild(0, 1, pos, side, mode);\n  }\n\n  nextSignificantParent() {\n    let val = this;\n\n    while (val.type.isAnonymous && val._parent) val = val._parent;\n\n    return val;\n  }\n\n  get parent() {\n    return this._parent ? this._parent.nextSignificantParent() : null;\n  }\n\n  get nextSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4\n    /* DontCare */\n    ) : null;\n  }\n\n  get prevSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4\n    /* DontCare */\n    ) : null;\n  }\n\n  cursor() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return new TreeCursor(this, mode);\n  }\n\n  get tree() {\n    return this._tree;\n  }\n\n  toTree() {\n    return this._tree;\n  }\n\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, false);\n  }\n\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, true);\n  }\n\n  enterUnfinishedNodesBefore(pos) {\n    return enterUnfinishedNodesBefore(this, pos);\n  }\n\n  getChild(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let r = getChildren(this, type, before, after);\n    return r.length ? r[0] : null;\n  }\n\n  getChildren(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return getChildren(this, type, before, after);\n  } /// @internal\n\n\n  toString() {\n    return this._tree.toString();\n  }\n\n  get node() {\n    return this;\n  }\n\n  matchContext(context) {\n    return matchNodeContext(this, context);\n  }\n\n}\n\nfunction getChildren(node, type, before, after) {\n  let cur = node.cursor(),\n      result = [];\n  if (!cur.firstChild()) return result;\n  if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;\n\n  for (;;) {\n    if (after != null && cur.type.is(after)) return result;\n    if (cur.type.is(type)) result.push(cur.node);\n    if (!cur.nextSibling()) return after == null ? result : [];\n  }\n}\n\nfunction matchNodeContext(node, context) {\n  let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : context.length - 1;\n\n  for (let p = node.parent; i >= 0; p = p.parent) {\n    if (!p) return false;\n\n    if (!p.type.isAnonymous) {\n      if (context[i] && context[i] != p.name) return false;\n      i--;\n    }\n  }\n\n  return true;\n}\n\nclass BufferContext {\n  constructor(parent, buffer, index, start) {\n    this.parent = parent;\n    this.buffer = buffer;\n    this.index = index;\n    this.start = start;\n  }\n\n}\n\nclass BufferNode {\n  constructor(context, _parent, index) {\n    this.context = context;\n    this._parent = _parent;\n    this.index = index;\n    this.type = context.buffer.set.types[context.buffer.buffer[index]];\n  }\n\n  get name() {\n    return this.type.name;\n  }\n\n  get from() {\n    return this.context.start + this.context.buffer.buffer[this.index + 1];\n  }\n\n  get to() {\n    return this.context.start + this.context.buffer.buffer[this.index + 2];\n  }\n\n  child(dir, pos, side) {\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n\n  get firstChild() {\n    return this.child(1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  get lastChild() {\n    return this.child(-1, 0, 4\n    /* DontCare */\n    );\n  }\n\n  childAfter(pos) {\n    return this.child(1, pos, 2\n    /* After */\n    );\n  }\n\n  childBefore(pos) {\n    return this.child(-1, pos, -2\n    /* Before */\n    );\n  }\n\n  enter(pos, side) {\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (mode & IterMode.ExcludeBuffers) return null;\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n\n  get parent() {\n    return this._parent || this.context.parent.nextSignificantParent();\n  }\n\n  externalSibling(dir) {\n    return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4\n    /* DontCare */\n    );\n  }\n\n  get nextSibling() {\n    let {\n      buffer\n    } = this.context;\n    let after = buffer.buffer[this.index + 3];\n    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);\n    return this.externalSibling(1);\n  }\n\n  get prevSibling() {\n    let {\n      buffer\n    } = this.context;\n    let parentStart = this._parent ? this._parent.index + 4 : 0;\n    if (this.index == parentStart) return this.externalSibling(-1);\n    return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4\n    /* DontCare */\n    ));\n  }\n\n  cursor() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return new TreeCursor(this, mode);\n  }\n\n  get tree() {\n    return null;\n  }\n\n  toTree() {\n    let children = [],\n        positions = [];\n    let {\n      buffer\n    } = this.context;\n    let startI = this.index + 4,\n        endI = buffer.buffer[this.index + 3];\n\n    if (endI > startI) {\n      let from = buffer.buffer[this.index + 1],\n          to = buffer.buffer[this.index + 2];\n      children.push(buffer.slice(startI, endI, from, to));\n      positions.push(0);\n    }\n\n    return new Tree(this.type, children, positions, this.to - this.from);\n  }\n\n  resolve(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, false);\n  }\n\n  resolveInner(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return resolveNode(this, pos, side, true);\n  }\n\n  enterUnfinishedNodesBefore(pos) {\n    return enterUnfinishedNodesBefore(this, pos);\n  } /// @internal\n\n\n  toString() {\n    return this.context.buffer.childString(this.index);\n  }\n\n  getChild(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let r = getChildren(this, type, before, after);\n    return r.length ? r[0] : null;\n  }\n\n  getChildren(type) {\n    let before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return getChildren(this, type, before, after);\n  }\n\n  get node() {\n    return this;\n  }\n\n  matchContext(context) {\n    return matchNodeContext(this, context);\n  }\n\n} /// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\n\n\nclass TreeCursor {\n  /// @internal\n  constructor(node) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.mode = mode; /// @internal\n\n    this.buffer = null;\n    this.stack = []; /// @internal\n\n    this.index = 0;\n    this.bufferNode = null;\n\n    if (node instanceof TreeNode) {\n      this.yieldNode(node);\n    } else {\n      this._tree = node.context.parent;\n      this.buffer = node.context;\n\n      for (let n = node._parent; n; n = n._parent) this.stack.unshift(n.index);\n\n      this.bufferNode = node;\n      this.yieldBuf(node.index);\n    }\n  } /// Shorthand for `.type.name`.\n\n\n  get name() {\n    return this.type.name;\n  }\n\n  yieldNode(node) {\n    if (!node) return false;\n    this._tree = node;\n    this.type = node.type;\n    this.from = node.from;\n    this.to = node.to;\n    return true;\n  }\n\n  yieldBuf(index, type) {\n    this.index = index;\n    let {\n      start,\n      buffer\n    } = this.buffer;\n    this.type = type || buffer.set.types[buffer.buffer[index]];\n    this.from = start + buffer.buffer[index + 1];\n    this.to = start + buffer.buffer[index + 2];\n    return true;\n  }\n\n  yield(node) {\n    if (!node) return false;\n\n    if (node instanceof TreeNode) {\n      this.buffer = null;\n      return this.yieldNode(node);\n    }\n\n    this.buffer = node.context;\n    return this.yieldBuf(node.index, node.type);\n  } /// @internal\n\n\n  toString() {\n    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n  } /// @internal\n\n\n  enterChild(dir, pos, side) {\n    if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n    let {\n      buffer\n    } = this.buffer;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n    if (index < 0) return false;\n    this.stack.push(this.index);\n    return this.yieldBuf(index);\n  } /// Move the cursor to this node's first child. When this returns\n  /// false, the node has no child, and the cursor has not been moved.\n\n\n  firstChild() {\n    return this.enterChild(1, 0, 4\n    /* DontCare */\n    );\n  } /// Move the cursor to this node's last child.\n\n\n  lastChild() {\n    return this.enterChild(-1, 0, 4\n    /* DontCare */\n    );\n  } /// Move the cursor to the first child that ends after `pos`.\n\n\n  childAfter(pos) {\n    return this.enterChild(1, pos, 2\n    /* After */\n    );\n  } /// Move to the last child that starts before `pos`.\n\n\n  childBefore(pos) {\n    return this.enterChild(-1, pos, -2\n    /* Before */\n    );\n  } /// Move the cursor to the child around `pos`. If side is -1 the\n  /// child may end at that position, when 1 it may start there. This\n  /// will also enter [overlaid](#common.MountedTree.overlay)\n  /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n  /// set to false.\n\n\n  enter(pos, side) {\n    let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mode;\n    if (!this.buffer) return this.yield(this._tree.enter(pos, side, mode));\n    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n  } /// Move to the node's parent node, if this isn't the top node.\n\n\n  parent() {\n    if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);\n    if (this.stack.length) return this.yieldBuf(this.stack.pop());\n    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n    this.buffer = null;\n    return this.yieldNode(parent);\n  } /// @internal\n\n\n  sibling(dir) {\n    if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4\n    /* DontCare */\n    , this.mode));\n    let {\n      buffer\n    } = this.buffer,\n        d = this.stack.length - 1;\n\n    if (dir < 0) {\n      let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n      if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4\n      /* DontCare */\n      ));\n    } else {\n      let after = buffer.buffer[this.index + 3];\n      if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);\n    }\n\n    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4\n    /* DontCare */\n    , this.mode)) : false;\n  } /// Move to this node's next sibling, if any.\n\n\n  nextSibling() {\n    return this.sibling(1);\n  } /// Move to this node's previous sibling, if any.\n\n\n  prevSibling() {\n    return this.sibling(-1);\n  }\n\n  atLastNode(dir) {\n    let index,\n        parent,\n        {\n      buffer\n    } = this;\n\n    if (buffer) {\n      if (dir > 0) {\n        if (this.index < buffer.buffer.buffer.length) return false;\n      } else {\n        for (let i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;\n      }\n\n      ({\n        index,\n        parent\n      } = buffer);\n    } else {\n      ({\n        index,\n        _parent: parent\n      } = this._tree);\n    }\n\n    for (; parent; ({\n      index,\n      _parent: parent\n    } = parent)) {\n      if (index > -1) for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n        let child = parent._tree.children[i];\n        if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;\n      }\n    }\n\n    return true;\n  }\n\n  move(dir, enter) {\n    if (enter && this.enterChild(dir, 0, 4\n    /* DontCare */\n    )) return true;\n\n    for (;;) {\n      if (this.sibling(dir)) return true;\n      if (this.atLastNode(dir) || !this.parent()) return false;\n    }\n  } /// Move to the next node in a\n  /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n  /// traversal, going from a node to its first child or, if the\n  /// current node is empty or `enter` is false, its next sibling or\n  /// the next sibling of the first parent node that has one.\n\n\n  next() {\n    let enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.move(1, enter);\n  } /// Move to the next node in a last-to-first pre-order traveral. A\n  /// node is followed by its last child or, if it has none, its\n  /// previous sibling or the previous sibling of the first parent\n  /// node that has one.\n\n\n  prev() {\n    let enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.move(-1, enter);\n  } /// Move the cursor to the innermost node that covers `pos`. If\n  /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n  /// it will enter nodes that start at `pos`.\n\n\n  moveTo(pos) {\n    let side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    // Move up to a node that actually holds the position, if possible\n    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break; // Then scan down into child nodes as far as possible\n\n\n    while (this.enterChild(1, pos, side)) {}\n\n    return this;\n  } /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n  /// position.\n\n\n  get node() {\n    if (!this.buffer) return this._tree;\n    let cache = this.bufferNode,\n        result = null,\n        depth = 0;\n\n    if (cache && cache.context == this.buffer) {\n      scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n        for (let c = cache; c; c = c._parent) if (c.index == index) {\n          if (index == this.index) return c;\n          result = c;\n          depth = d + 1;\n          break scan;\n        }\n\n        index = this.stack[--d];\n      }\n    }\n\n    for (let i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);\n\n    return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n  } /// Get the [tree](#common.Tree) that represents the current node, if\n  /// any. Will return null when the node is in a [tree\n  /// buffer](#common.TreeBuffer).\n\n\n  get tree() {\n    return this.buffer ? null : this._tree._tree;\n  } /// Iterate over the current node and all its descendants, calling\n  /// `enter` when entering a node and `leave`, if given, when leaving\n  /// one. When `enter` returns `false`, any children of that node are\n  /// skipped, and `leave` isn't called for it.\n\n\n  iterate(enter, leave) {\n    for (let depth = 0;;) {\n      let mustLeave = false;\n\n      if (this.type.isAnonymous || enter(this) !== false) {\n        if (this.firstChild()) {\n          depth++;\n          continue;\n        }\n\n        if (!this.type.isAnonymous) mustLeave = true;\n      }\n\n      for (;;) {\n        if (mustLeave && leave) leave(this);\n        mustLeave = this.type.isAnonymous;\n        if (this.nextSibling()) break;\n        if (!depth) return;\n        this.parent();\n        depth--;\n        mustLeave = true;\n      }\n    }\n  } /// Test whether the current node matches a given context—a sequence\n  /// of direct parent node names. Empty strings in the context array\n  /// are treated as wildcards.\n\n\n  matchContext(context) {\n    if (!this.buffer) return matchNodeContext(this.node, context);\n    let {\n      buffer\n    } = this.buffer,\n        {\n      types\n    } = buffer.set;\n\n    for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n      if (d < 0) return matchNodeContext(this.node, context, i);\n      let type = types[buffer.buffer[this.stack[d]]];\n\n      if (!type.isAnonymous) {\n        if (context[i] && context[i] != type.name) return false;\n        i--;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nfunction hasChild(tree) {\n  return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\n\nfunction buildTree(data) {\n  var _a;\n\n  let {\n    buffer,\n    nodeSet,\n    maxBufferLength = DefaultBufferLength,\n    reused = [],\n    minRepeatType = nodeSet.types.length\n  } = data;\n  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n  let types = nodeSet.types;\n  let contextHash = 0,\n      lookAhead = 0;\n\n  function takeNode(parentStart, minPos, children, positions, inRepeat) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    let lookAheadAtStart = lookAhead;\n\n    while (size < 0) {\n      cursor.next();\n\n      if (size == -1\n      /* Reuse */\n      ) {\n        let node = reused[id];\n        children.push(node);\n        positions.push(start - parentStart);\n        return;\n      } else if (size == -3\n      /* ContextChange */\n      ) {\n        // Context change\n        contextHash = id;\n        return;\n      } else if (size == -4\n      /* LookAhead */\n      ) {\n        lookAhead = id;\n        return;\n      } else {\n        throw new RangeError(`Unrecognized record size: ${size}`);\n      }\n    }\n\n    let type = types[id],\n        node,\n        buffer;\n    let startPos = start - parentStart;\n\n    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n      // Small enough for a buffer, and no reused nodes inside\n      let data = new Uint16Array(buffer.size - buffer.skip);\n      let endPos = cursor.pos - buffer.size,\n          index = data.length;\n\n      while (cursor.pos > endPos) index = copyToBuffer(buffer.start, data, index);\n\n      node = new TreeBuffer(data, end - buffer.start, nodeSet);\n      startPos = buffer.start - parentStart;\n    } else {\n      // Make it a node\n      let endPos = cursor.pos - size;\n      cursor.next();\n      let localChildren = [],\n          localPositions = [];\n      let localInRepeat = id >= minRepeatType ? id : -1;\n      let lastGroup = 0,\n          lastEnd = end;\n\n      while (cursor.pos > endPos) {\n        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n          if (cursor.end <= lastEnd - maxBufferLength) {\n            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n            lastGroup = localChildren.length;\n            lastEnd = cursor.end;\n          }\n\n          cursor.next();\n        } else {\n          takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n        }\n      }\n\n      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n      localChildren.reverse();\n      localPositions.reverse();\n\n      if (localInRepeat > -1 && lastGroup > 0) {\n        let make = makeBalanced(type);\n        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n      } else {\n        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n      }\n    }\n\n    children.push(node);\n    positions.push(startPos);\n  }\n\n  function makeBalanced(type) {\n    return (children, positions, length) => {\n      let lookAhead = 0,\n          lastI = children.length - 1,\n          last,\n          lookAheadProp;\n\n      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n        if (!lastI && last.type == type && last.length == length) return last;\n        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;\n      }\n\n      return makeTree(type, children, positions, length, lookAhead);\n    };\n  }\n\n  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n    let localChildren = [],\n        localPositions = [];\n\n    while (children.length > i) {\n      localChildren.push(children.pop());\n      localPositions.push(positions.pop() + base - from);\n    }\n\n    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n    positions.push(from - base);\n  }\n\n  function makeTree(type, children, positions, length) {\n    let lookAhead = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let props = arguments.length > 5 ? arguments[5] : undefined;\n\n    if (contextHash) {\n      let pair = [NodeProp.contextHash, contextHash];\n      props = props ? [pair].concat(props) : [pair];\n    }\n\n    if (lookAhead > 25) {\n      let pair = [NodeProp.lookAhead, lookAhead];\n      props = props ? [pair].concat(props) : [pair];\n    }\n\n    return new Tree(type, children, positions, length, props);\n  }\n\n  function findBufferSize(maxSize, inRepeat) {\n    // Scan through the buffer to find previous siblings that fit\n    // together in a TreeBuffer, and don't contain any reused nodes\n    // (which can't be stored in a buffer).\n    // If `inRepeat` is > -1, ignore node boundaries of that type for\n    // nesting, but make sure the end falls either at the start\n    // (`maxSize`) or before such a node.\n    let fork = cursor.fork();\n    let size = 0,\n        start = 0,\n        skip = 0,\n        minStart = fork.end - maxBufferLength;\n    let result = {\n      size: 0,\n      start: 0,\n      skip: 0\n    };\n\n    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n      let nodeSize = fork.size; // Pretend nested repeat nodes of the same type don't exist\n\n      if (fork.id == inRepeat && nodeSize >= 0) {\n        // Except that we store the current state as a valid return\n        // value.\n        result.size = size;\n        result.start = start;\n        result.skip = skip;\n        skip += 4;\n        size += 4;\n        fork.next();\n        continue;\n      }\n\n      let startPos = fork.pos - nodeSize;\n      if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;\n      let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n      let nodeStart = fork.start;\n      fork.next();\n\n      while (fork.pos > startPos) {\n        if (fork.size < 0) {\n          if (fork.size == -3\n          /* ContextChange */\n          ) localSkipped += 4;else break scan;\n        } else if (fork.id >= minRepeatType) {\n          localSkipped += 4;\n        }\n\n        fork.next();\n      }\n\n      start = nodeStart;\n      size += nodeSize;\n      skip += localSkipped;\n    }\n\n    if (inRepeat < 0 || size == maxSize) {\n      result.size = size;\n      result.start = start;\n      result.skip = skip;\n    }\n\n    return result.size > 4 ? result : undefined;\n  }\n\n  function copyToBuffer(bufferStart, buffer, index) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    cursor.next();\n\n    if (size >= 0 && id < minRepeatType) {\n      let startIndex = index;\n\n      if (size > 4) {\n        let endPos = cursor.pos - (size - 4);\n\n        while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);\n      }\n\n      buffer[--index] = startIndex;\n      buffer[--index] = end - bufferStart;\n      buffer[--index] = start - bufferStart;\n      buffer[--index] = id;\n    } else if (size == -3\n    /* ContextChange */\n    ) {\n      contextHash = id;\n    } else if (size == -4\n    /* LookAhead */\n    ) {\n      lookAhead = id;\n    }\n\n    return index;\n  }\n\n  let children = [],\n      positions = [];\n\n  while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n\n  let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;\n  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\n\nconst nodeSizeCache = new WeakMap();\n\nfunction nodeSize(balanceType, node) {\n  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;\n  let size = nodeSizeCache.get(node);\n\n  if (size == null) {\n    size = 1;\n\n    for (let child of node.children) {\n      if (child.type != balanceType || !(child instanceof Tree)) {\n        size = 1;\n        break;\n      }\n\n      size += nodeSize(balanceType, child);\n    }\n\n    nodeSizeCache.set(node, size);\n  }\n\n  return size;\n}\n\nfunction balanceRange( // The type the balanced tree's inner nodes.\nbalanceType, // The direct children and their positions\nchildren, positions, // The index range in children/positions to use\nfrom, to, // The start position of the nodes, relative to their parent.\nstart, // Length of the outer node\nlength, // Function to build the top node of the balanced tree\nmkTop, // Function to build internal nodes for the balanced tree\nmkTree) {\n  let total = 0;\n\n  for (let i = from; i < to; i++) total += nodeSize(balanceType, children[i]);\n\n  let maxChild = Math.ceil(total * 1.5 / 8\n  /* BranchFactor */\n  );\n  let localChildren = [],\n      localPositions = [];\n\n  function divide(children, positions, from, to, offset) {\n    for (let i = from; i < to;) {\n      let groupFrom = i,\n          groupStart = positions[i],\n          groupSize = nodeSize(balanceType, children[i]);\n      i++;\n\n      for (; i < to; i++) {\n        let nextSize = nodeSize(balanceType, children[i]);\n        if (groupSize + nextSize >= maxChild) break;\n        groupSize += nextSize;\n      }\n\n      if (i == groupFrom + 1) {\n        if (groupSize > maxChild) {\n          let only = children[groupFrom]; // Only trees can have a size > 1\n\n          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n          continue;\n        }\n\n        localChildren.push(children[groupFrom]);\n      } else {\n        let length = positions[i - 1] + children[i - 1].length - groupStart;\n        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n      }\n\n      localPositions.push(groupStart + offset - start);\n    }\n  }\n\n  divide(children, positions, from, to, 0);\n  return (mkTop || mkTree)(localChildren, localPositions, length);\n} /// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\n\n\nclass NodeWeakMap {\n  constructor() {\n    this.map = new WeakMap();\n  }\n\n  setBuffer(buffer, index, value) {\n    let inner = this.map.get(buffer);\n    if (!inner) this.map.set(buffer, inner = new Map());\n    inner.set(index, value);\n  }\n\n  getBuffer(buffer, index) {\n    let inner = this.map.get(buffer);\n    return inner && inner.get(index);\n  } /// Set the value for this syntax node.\n\n\n  set(node, value) {\n    if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);\n  } /// Retrieve value for this syntax node, if it exists in the map.\n\n\n  get(node) {\n    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n  } /// Set the value for the node that a cursor currently points to.\n\n\n  cursorSet(cursor, value) {\n    if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);\n  } /// Retrieve the value for the node that a cursor currently points\n  /// to.\n\n\n  cursorGet(cursor) {\n    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n  }\n\n} /// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\n\n\nclass TreeFragment {\n  /// Construct a tree fragment. You'll usually want to use\n  /// [`addTree`](#common.TreeFragment^addTree) and\n  /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n  /// calling this directly.\n  constructor( /// The start of the unchanged range pointed to by this fragment.\n  /// This refers to an offset in the _updated_ document (as opposed\n  /// to the original tree).\n  from, /// The end of the unchanged range.\n  to, /// The tree that this fragment is based on.\n  tree, /// The offset between the fragment's tree and the document that\n  /// this fragment can be used against. Add this when going from\n  /// document to tree positions, subtract it to go from tree to\n  /// document positions.\n  offset) {\n    let openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    this.from = from;\n    this.to = to;\n    this.tree = tree;\n    this.offset = offset;\n    this.open = (openStart ? 1\n    /* Start */\n    : 0) | (openEnd ? 2\n    /* End */\n    : 0);\n  } /// Whether the start of the fragment represents the start of a\n  /// parse, or the end of a change. (In the second case, it may not\n  /// be safe to reuse some nodes at the start, depending on the\n  /// parsing algorithm.)\n\n\n  get openStart() {\n    return (this.open & 1\n    /* Start */\n    ) > 0;\n  } /// Whether the end of the fragment represents the end of a\n  /// full-document parse, or the start of a change.\n\n\n  get openEnd() {\n    return (this.open & 2\n    /* End */\n    ) > 0;\n  } /// Create a set of fragments from a freshly parsed tree, or update\n  /// an existing set of fragments by replacing the ones that overlap\n  /// with a tree with content from the new tree. When `partial` is\n  /// true, the parse is treated as incomplete, and the resulting\n  /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n  /// true.\n\n\n  static addTree(tree) {\n    let fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n\n    for (let f of fragments) if (f.to > tree.length) result.push(f);\n\n    return result;\n  } /// Apply a set of edits to an array of fragments, removing or\n  /// splitting fragments as necessary to remove edited ranges, and\n  /// adjusting offsets for fragments that moved.\n\n\n  static applyChanges(fragments, changes) {\n    let minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;\n    if (!changes.length) return fragments;\n    let result = [];\n    let fI = 1,\n        nextF = fragments.length ? fragments[0] : null;\n\n    for (let cI = 0, pos = 0, off = 0;; cI++) {\n      let nextC = cI < changes.length ? changes[cI] : null;\n      let nextPos = nextC ? nextC.fromA : 1e9;\n      if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {\n        let cut = nextF;\n\n        if (pos >= cut.from || nextPos <= cut.to || off) {\n          let fFrom = Math.max(cut.from, pos) - off,\n              fTo = Math.min(cut.to, nextPos) - off;\n          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n        }\n\n        if (cut) result.push(cut);\n        if (nextF.to > nextPos) break;\n        nextF = fI < fragments.length ? fragments[fI++] : null;\n      }\n      if (!nextC) break;\n      pos = nextC.toA;\n      off = nextC.toA - nextC.toB;\n    }\n\n    return result;\n  }\n\n} /// A superclass that parsers should extend.\n\n\nclass Parser {\n  /// Start a parse, returning a [partial parse](#common.PartialParse)\n  /// object. [`fragments`](#common.TreeFragment) can be passed in to\n  /// make the parse incremental.\n  ///\n  /// By default, the entire input is parsed. You can pass `ranges`,\n  /// which should be a sorted array of non-empty, non-overlapping\n  /// ranges, to parse only those ranges. The tree returned in that\n  /// case will start at `ranges[0].from`.\n  startParse(input, fragments, ranges) {\n    if (typeof input == \"string\") input = new StringInput(input);\n    ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n    return this.createParse(input, fragments || [], ranges);\n  } /// Run a full parse, returning the resulting tree.\n\n\n  parse(input, fragments, ranges) {\n    let parse = this.startParse(input, fragments, ranges);\n\n    for (;;) {\n      let done = parse.advance();\n      if (done) return done;\n    }\n  }\n\n}\n\nclass StringInput {\n  constructor(string) {\n    this.string = string;\n  }\n\n  get length() {\n    return this.string.length;\n  }\n\n  chunk(from) {\n    return this.string.slice(from);\n  }\n\n  get lineChunks() {\n    return false;\n  }\n\n  read(from, to) {\n    return this.string.slice(from, to);\n  }\n\n} /// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n\n\nfunction parseMixed(nest) {\n  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\n\nclass InnerParse {\n  constructor(parser, parse, overlay, target, ranges) {\n    this.parser = parser;\n    this.parse = parse;\n    this.overlay = overlay;\n    this.target = target;\n    this.ranges = ranges;\n  }\n\n}\n\nclass ActiveOverlay {\n  constructor(parser, predicate, mounts, index, start, target, prev) {\n    this.parser = parser;\n    this.predicate = predicate;\n    this.mounts = mounts;\n    this.index = index;\n    this.start = start;\n    this.target = target;\n    this.prev = prev;\n    this.depth = 0;\n    this.ranges = [];\n  }\n\n}\n\nconst stoppedInner = new NodeProp({\n  perNode: true\n});\n\nclass MixedParse {\n  constructor(base, nest, input, fragments, ranges) {\n    this.nest = nest;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.inner = [];\n    this.innerDone = 0;\n    this.baseTree = null;\n    this.stoppedAt = null;\n    this.baseParse = base;\n  }\n\n  advance() {\n    if (this.baseParse) {\n      let done = this.baseParse.advance();\n      if (!done) return null;\n      this.baseParse = null;\n      this.baseTree = done;\n      this.startInner();\n      if (this.stoppedAt != null) for (let inner of this.inner) inner.parse.stopAt(this.stoppedAt);\n    }\n\n    if (this.innerDone == this.inner.length) {\n      let result = this.baseTree;\n      if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n      return result;\n    }\n\n    let inner = this.inner[this.innerDone],\n        done = inner.parse.advance();\n\n    if (done) {\n      this.innerDone++; // This is a somewhat dodgy but super helpful hack where we\n      // patch up nodes created by the inner parse (and thus\n      // presumably not aliased anywhere else) to hold the information\n      // about the inner parse.\n\n      let props = Object.assign(Object.create(null), inner.target.props);\n      props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n      inner.target.props = props;\n    }\n\n    return null;\n  }\n\n  get parsedPos() {\n    if (this.baseParse) return 0;\n    let pos = this.input.length;\n\n    for (let i = this.innerDone; i < this.inner.length; i++) {\n      if (this.inner[i].ranges[0].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);\n    }\n\n    return pos;\n  }\n\n  stopAt(pos) {\n    this.stoppedAt = pos;\n    if (this.baseParse) this.baseParse.stopAt(pos);else for (let i = this.innerDone; i < this.inner.length; i++) this.inner[i].parse.stopAt(pos);\n  }\n\n  startInner() {\n    let fragmentCursor = new FragmentCursor(this.fragments);\n    let overlay = null;\n    let covered = null;\n    let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n\n    scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n      let enter = true,\n          range;\n\n      if (fragmentCursor.hasNode(cursor)) {\n        if (overlay) {\n          let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n          if (match) for (let r of match.mount.overlay) {\n            let from = r.from + match.pos,\n                to = r.to + match.pos;\n            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from)) overlay.ranges.push({\n              from,\n              to\n            });\n          }\n        }\n\n        enter = false;\n      } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n        enter = isCovered != 2\n        /* Full */\n        ;\n      } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n        if (!cursor.tree) materialize(cursor);\n        let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n\n        if (typeof nest.overlay == \"function\") {\n          overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n        } else {\n          let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n          if (ranges.length) this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n          if (!nest.overlay) enter = false;else if (ranges.length) covered = {\n            ranges,\n            depth: 0,\n            prev: covered\n          };\n        }\n      } else if (overlay && (range = overlay.predicate(cursor))) {\n        if (range === true) range = new Range(cursor.from, cursor.to);\n        if (range.from < range.to) overlay.ranges.push(range);\n      }\n\n      if (enter && cursor.firstChild()) {\n        if (overlay) overlay.depth++;\n        if (covered) covered.depth++;\n      } else {\n        for (;;) {\n          if (cursor.nextSibling()) break;\n          if (!cursor.parent()) break scan;\n\n          if (overlay && ! --overlay.depth) {\n            let ranges = punchRanges(this.ranges, overlay.ranges);\n            if (ranges.length) this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n            overlay = overlay.prev;\n          }\n\n          if (covered && ! --covered.depth) covered = covered.prev;\n        }\n      }\n    }\n  }\n\n}\n\nfunction checkCover(covered, from, to) {\n  for (let range of covered) {\n    if (range.from >= to) break;\n    if (range.to > from) return range.from <= from && range.to >= to ? 2\n    /* Full */\n    : 1\n    /* Partial */\n    ;\n  }\n\n  return 0\n  /* None */\n  ;\n} // Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\n\n\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n  if (startI < endI) {\n    let from = buf.buffer[startI + 1],\n        to = buf.buffer[endI - 2];\n    nodes.push(buf.slice(startI, endI, from, to));\n    positions.push(from - off);\n  }\n} // This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\n\n\nfunction materialize(cursor) {\n  let {\n    node\n  } = cursor,\n      depth = 0; // Scan up to the nearest tree\n\n  do {\n    cursor.parent();\n    depth++;\n  } while (!cursor.tree); // Find the index of the buffer in that tree\n\n\n  let i = 0,\n      base = cursor.tree,\n      off = 0;\n\n  for (;; i++) {\n    off = base.positions[i] + cursor.from;\n    if (off <= node.from && off + base.children[i].length >= node.to) break;\n  }\n\n  let buf = base.children[i],\n      b = buf.buffer; // Split a level in the buffer, putting the nodes before and after\n  // the child that contains `node` into new buffers.\n\n  function split(startI, endI, type, innerOffset, length) {\n    let i = startI;\n\n    while (b[i + 2] + off <= node.from) i = b[i + 3];\n\n    let children = [],\n        positions = [];\n    sliceBuf(buf, startI, i, children, positions, innerOffset);\n    let from = b[i + 1],\n        to = b[i + 2];\n    let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n    children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n    positions.push(from - innerOffset);\n    sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n    return new Tree(type, children, positions, length);\n  }\n\n  base.children[i] = split(0, b.length, NodeType.none, 0, buf.length); // Move the cursor back to the target node\n\n  for (let d = 0; d <= depth; d++) cursor.childAfter(node.from);\n}\n\nclass StructureCursor {\n  constructor(root, offset) {\n    this.offset = offset;\n    this.done = false;\n    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n  } // Move to the first node (in pre-order) that starts at or after `pos`.\n\n\n  moveTo(pos) {\n    let {\n      cursor\n    } = this,\n        p = pos - this.offset;\n\n    while (!this.done && cursor.from < p) {\n      if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;else if (!cursor.next(false)) this.done = true;\n    }\n  }\n\n  hasNode(cursor) {\n    this.moveTo(cursor.from);\n\n    if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n      for (let tree = this.cursor.tree;;) {\n        if (tree == cursor.tree) return true;\n        if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nclass FragmentCursor {\n  constructor(fragments) {\n    var _a;\n\n    this.fragments = fragments;\n    this.curTo = 0;\n    this.fragI = 0;\n\n    if (fragments.length) {\n      let first = this.curFrag = fragments[0];\n      this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n      this.inner = new StructureCursor(first.tree, -first.offset);\n    } else {\n      this.curFrag = this.inner = null;\n    }\n  }\n\n  hasNode(node) {\n    while (this.curFrag && node.from >= this.curTo) this.nextFrag();\n\n    return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n  }\n\n  nextFrag() {\n    var _a;\n\n    this.fragI++;\n\n    if (this.fragI == this.fragments.length) {\n      this.curFrag = this.inner = null;\n    } else {\n      let frag = this.curFrag = this.fragments[this.fragI];\n      this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n      this.inner = new StructureCursor(frag.tree, -frag.offset);\n    }\n  }\n\n  findMounts(pos, parser) {\n    var _a;\n\n    let result = [];\n\n    if (this.inner) {\n      this.inner.cursor.moveTo(pos, 1);\n\n      for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n        let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n\n        if (mount && mount.parser == parser) {\n          for (let i = this.fragI; i < this.fragments.length; i++) {\n            let frag = this.fragments[i];\n            if (frag.from >= pos.to) break;\n            if (frag.tree == this.curFrag.tree) result.push({\n              frag,\n              pos: pos.from - frag.offset,\n              mount\n            });\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n}\n\nfunction punchRanges(outer, ranges) {\n  let copy = null,\n      current = ranges;\n\n  for (let i = 1, j = 0; i < outer.length; i++) {\n    let gapFrom = outer[i - 1].to,\n        gapTo = outer[i].from;\n\n    for (; j < current.length; j++) {\n      let r = current[j];\n      if (r.from >= gapTo) break;\n      if (r.to <= gapFrom) continue;\n      if (!copy) current = copy = ranges.slice();\n\n      if (r.from < gapFrom) {\n        copy[j] = new Range(r.from, gapFrom);\n        if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));\n      } else if (r.to > gapTo) {\n        copy[j--] = new Range(gapTo, r.to);\n      } else {\n        copy.splice(j--, 1);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction findCoverChanges(a, b, from, to) {\n  let iA = 0,\n      iB = 0,\n      inA = false,\n      inB = false,\n      pos = -1e9;\n  let result = [];\n\n  for (;;) {\n    let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n    let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n\n    if (inA != inB) {\n      let start = Math.max(pos, from),\n          end = Math.min(nextA, nextB, to);\n      if (start < end) result.push(new Range(start, end));\n    }\n\n    pos = Math.min(nextA, nextB);\n    if (pos == 1e9) break;\n\n    if (nextA == pos) {\n      if (!inA) inA = true;else {\n        inA = false;\n        iA++;\n      }\n    }\n\n    if (nextB == pos) {\n      if (!inB) inB = true;else {\n        inB = false;\n        iB++;\n      }\n    }\n  }\n\n  return result;\n} // Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\n\n\nfunction enterFragments(mounts, ranges) {\n  let result = [];\n\n  for (let {\n    pos,\n    mount,\n    frag\n  } of mounts) {\n    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),\n        endPos = startPos + mount.tree.length;\n    let from = Math.max(frag.from, startPos),\n        to = Math.min(frag.to, endPos);\n\n    if (mount.overlay) {\n      let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n      let changes = findCoverChanges(ranges, overlay, from, to);\n\n      for (let i = 0, pos = from;; i++) {\n        let last = i == changes.length,\n            end = last ? to : changes[i].from;\n        if (end > pos) result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n        if (last) break;\n        pos = changes[i].to;\n      }\n    } else {\n      result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n    }\n  }\n\n  return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };","map":{"version":3,"names":["DefaultBufferLength","nextPropID","Range","constructor","from","to","NodeProp","config","id","perNode","deserialize","Error","add","match","RangeError","NodeType","type","result","undefined","closedBy","str","split","openedBy","group","contextHash","lookAhead","mounted","MountedTree","tree","overlay","parser","noProps","Object","create","name","props","flags","define","spec","length","top","skipped","error","src","Array","isArray","prop","isTop","isSkipped","isError","isAnonymous","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","extend","newTypes","newProps","source","assign","push","CachedNode","WeakMap","CachedInnerNode","IterMode","Tree","children","positions","value","toString","ch","test","JSON","stringify","cursor","mode","TreeCursor","topNode","cursorAt","pos","side","scope","get","moveTo","set","_tree","TreeNode","resolve","resolveNode","resolveInner","iterate","enter","leave","c","IncludeAnonymous","entered","firstChild","nextSibling","parent","propValues","balance","balanceRange","makeTree","build","data","buildTree","empty","FlatBufferCursor","buffer","index","start","end","size","next","fork","TreeBuffer","childString","join","endIndex","findChild","startIndex","dir","pick","checkSide","slice","startI","endI","b","copy","Uint16Array","j","enterUnfinishedNodesBefore","scan","childBefore","last","lastChild","prevSibling","overlays","_a","IgnoreOverlays","inner","_parent","nextChild","e","ExcludeBuffers","BufferNode","BufferContext","hasChild","IgnoreMounts","childAfter","rPos","nextSignificantParent","val","toTree","getChild","before","after","r","getChildren","matchContext","context","matchNodeContext","cur","p","child","externalSibling","parentStart","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","pop","sibling","d","atLastNode","move","prev","cache","depth","mustLeave","some","nodeSet","maxBufferLength","reused","minRepeatType","takeNode","minPos","inRepeat","lookAheadAtStart","startPos","findBufferSize","skip","endPos","copyToBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","reverse","make","makeBalanced","lastI","lookAheadProp","base","pair","concat","maxSize","minStart","nodeSize","localSkipped","nodeStart","bufferStart","topID","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","Math","ceil","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","NodeWeakMap","setBuffer","Map","getBuffer","cursorSet","cursorGet","TreeFragment","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","max","fTo","min","toA","toB","Parser","startParse","input","ranges","StringInput","createParse","parse","done","advance","string","chunk","lineChunks","read","parseMixed","nest","MixedParse","InnerParse","target","ActiveOverlay","predicate","mounts","stoppedInner","innerDone","baseTree","stoppedAt","baseParse","startInner","stopAt","parsedPos","fragmentCursor","FragmentCursor","covered","isCovered","range","hasNode","find","m","frag","mount","checkCover","materialize","oldMounts","findMounts","punchRanges","enterFragments","splice","sliceBuf","buf","nodes","innerOffset","isTarget","StructureCursor","root","curTo","fragI","first","curFrag","nextFrag","outer","current","gapFrom","gapTo","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@lezer/common/dist/index.js"],"sourcesContent":["// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /// Define a node type.\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method can be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nvar IterMode;\n(function (IterMode) {\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n    /// objects, not nodes packed into\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /// Enable this to make iteration include anonymous nodes (such as\n    /// the nodes that wrap repeated grammar constructs into a balanced\n    /// tree).\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n    /// replace their base node in iteration. Enable this to ignore them\n    /// instead.\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /// This option only applies in\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    /// library to not enter mounted overlays if one covers the given\n    /// position.\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    ///\n    /// Note that this will not enter\n    /// [overlays](#common.MountedTree.overlay), and you often want\n    /// [`resolveInner`](#common.Tree.resolveInner) instead.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && !c.type.isAnonymous)\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from, to) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI);\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n        }\n        return new TreeBuffer(copy, to - from, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Before */: return from < pos;\n        case -1 /* AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Around */: return from < pos && to > pos;\n        case 1 /* AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* After */: return to > pos;\n        case 4 /* DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) &&\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this._tree.toString(); }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];\n            children.push(buffer.slice(startI, endI, from, to));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        /// @internal\n        this.buffer = null;\n        this.stack = [];\n        /// @internal\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Test whether the current node matches a given context—a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /// Set the value for this syntax node.\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /// Retrieve value for this syntax node, if it exists in the map.\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /// Set the value for the node that a cursor currently points to.\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /// Retrieve the value for the node that a cursor currently points\n    /// to.\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment. You'll usually want to use\n    /// [`addTree`](#common.TreeFragment^addTree) and\n    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    /// calling this directly.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\n    }\n    return 0 /* None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];\n        nodes.push(buf.slice(startI, endI, from, to));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}