{"ast":null,"code":"// @ts-nocheck\nregex.displayName = 'regex';\nregex.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function regex(Prism) {\n  ;\n\n  (function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    };\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    };\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [{\n        // a backreference which is not an octal escape\n        pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n        alias: 'keyword'\n      }, {\n        pattern: /\\\\k<[^<>']+>/,\n        alias: 'keyword',\n        inside: {\n          'group-name': groupName\n        }\n      }],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [{\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n        pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n        alias: 'punctuation',\n        inside: {\n          'group-name': groupName\n        }\n      }, {\n        pattern: /\\)/,\n        alias: 'punctuation'\n      }],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    };\n  })(Prism);\n}","map":{"version":3,"names":["regex","displayName","aliases","Prism","specialEscape","pattern","alias","escape","charSet","charSetWithoutDot","rangeChar","source","range","RegExp","groupName","lookbehind","languages","inside","backreference","anchor","group","quantifier","alternation"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/regex.js"],"sourcesContent":["// @ts-nocheck\nregex.displayName = 'regex'\nregex.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape =\n      /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/\n    var charSet = {\n      pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var charSetWithoutDot = {\n      pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n      alias: 'class-name'\n    }\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    Prism.languages.regex = {\n      'char-class': {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'char-class-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          'char-class-punctuation': {\n            pattern: /^\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': {\n                pattern: /-/,\n                alias: 'operator'\n              }\n            }\n          },\n          'special-escape': specialEscape,\n          'char-set': charSetWithoutDot,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      'char-set': charSet,\n      backreference: [\n        {\n          // a backreference which is not an octal escape\n          pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n          alias: 'keyword'\n        },\n        {\n          pattern: /\\\\k<[^<>']+>/,\n          alias: 'keyword',\n          inside: {\n            'group-name': groupName\n          }\n        }\n      ],\n      anchor: {\n        pattern: /[$^]|\\\\[ABbGZz]/,\n        alias: 'function'\n      },\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern:\n            /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          alias: 'punctuation',\n          inside: {\n            'group-name': groupName\n          }\n        },\n        {\n          pattern: /\\)/,\n          alias: 'punctuation'\n        }\n      ],\n      quantifier: {\n        pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n        alias: 'number'\n      },\n      alternation: {\n        pattern: /\\|/,\n        alias: 'keyword'\n      }\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;AAEA;;AACA,eAAe,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACnC;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB,IAAIC,aAAa,GAAG;MAClBC,OAAO,EAAE,sBADS;MAElBC,KAAK,EAAE;IAFW,CAApB;IAIA,IAAIC,MAAM,GACR,4FADF;IAEA,IAAIC,OAAO,GAAG;MACZH,OAAO,EAAE,2BADG;MAEZC,KAAK,EAAE;IAFK,CAAd;IAIA,IAAIG,iBAAiB,GAAG;MACtBJ,OAAO,EAAE,wBADa;MAEtBC,KAAK,EAAE;IAFe,CAAxB;IAIA,IAAII,SAAS,GAAG,iBAAiBH,MAAM,CAACI,MAAxB,GAAiC,GAAjD;IACA,IAAIC,KAAK,GAAGC,MAAM,CAACH,SAAS,GAAG,GAAZ,GAAkBA,SAAnB,CAAlB,CAhBiB,CAgB+B;;IAEhD,IAAII,SAAS,GAAG;MACdT,OAAO,EAAE,uBADK;MAEdU,UAAU,EAAE,IAFE;MAGdT,KAAK,EAAE;IAHO,CAAhB;IAKAH,KAAK,CAACa,SAAN,CAAgBhB,KAAhB,GAAwB;MACtB,cAAc;QACZK,OAAO,EAAE,iDADG;QAEZU,UAAU,EAAE,IAFA;QAGZE,MAAM,EAAE;UACN,uBAAuB;YACrBZ,OAAO,EAAE,SADY;YAErBU,UAAU,EAAE,IAFS;YAGrBT,KAAK,EAAE;UAHc,CADjB;UAMN,0BAA0B;YACxBD,OAAO,EAAE,SADe;YAExBC,KAAK,EAAE;UAFiB,CANpB;UAUNM,KAAK,EAAE;YACLP,OAAO,EAAEO,KADJ;YAELK,MAAM,EAAE;cACNV,MAAM,EAAEA,MADF;cAEN,qBAAqB;gBACnBF,OAAO,EAAE,GADU;gBAEnBC,KAAK,EAAE;cAFY;YAFf;UAFH,CAVD;UAoBN,kBAAkBF,aApBZ;UAqBN,YAAYK,iBArBN;UAsBNF,MAAM,EAAEA;QAtBF;MAHI,CADQ;MA6BtB,kBAAkBH,aA7BI;MA8BtB,YAAYI,OA9BU;MA+BtBU,aAAa,EAAE,CACb;QACE;QACAb,OAAO,EAAE,0BAFX;QAGEC,KAAK,EAAE;MAHT,CADa,EAMb;QACED,OAAO,EAAE,cADX;QAEEC,KAAK,EAAE,SAFT;QAGEW,MAAM,EAAE;UACN,cAAcH;QADR;MAHV,CANa,CA/BO;MA6CtBK,MAAM,EAAE;QACNd,OAAO,EAAE,iBADH;QAENC,KAAK,EAAE;MAFD,CA7Cc;MAiDtBC,MAAM,EAAEA,MAjDc;MAkDtBa,KAAK,EAAE,CACL;QACE;QACA;QACA;QACAf,OAAO,EACL,6EALJ;QAMEC,KAAK,EAAE,aANT;QAOEW,MAAM,EAAE;UACN,cAAcH;QADR;MAPV,CADK,EAYL;QACET,OAAO,EAAE,IADX;QAEEC,KAAK,EAAE;MAFT,CAZK,CAlDe;MAmEtBe,UAAU,EAAE;QACVhB,OAAO,EAAE,iCADC;QAEVC,KAAK,EAAE;MAFG,CAnEU;MAuEtBgB,WAAW,EAAE;QACXjB,OAAO,EAAE,IADE;QAEXC,KAAK,EAAE;MAFI;IAvES,CAAxB;EA4ED,CAnGA,EAmGEH,KAnGF;AAoGF"},"metadata":{},"sourceType":"module"}