{"ast":null,"code":"var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\" + cons.join(\")|(\") + \"))$\", 'i');\nexport const yaml = {\n  token: function (stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/)) return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd();\n      return \"string\";\n    } else if (state.literal) {\n      state.literal = false;\n    }\n\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n\n      if (stream.match('---')) {\n        return \"def\";\n      }\n      /* document end */\n\n\n      if (stream.match('...')) {\n        return \"def\";\n      }\n      /* array list item */\n\n\n      if (stream.match(/^\\s*-\\s+/)) {\n        return 'meta';\n      }\n    }\n    /* inline pairs/lists */\n\n\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{') state.inlinePairs++;else if (ch == '}') state.inlinePairs--;else if (ch == '[') state.inlineList++;else state.inlineList--;\n      return 'meta';\n    }\n    /* list separator */\n\n\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n\n\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n    /* start of value of a pair */\n\n\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) {\n        state.literal = true;\n        return 'meta';\n      }\n\n      ;\n      /* references */\n\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) {\n        return 'variable';\n      }\n      /* numbers */\n\n\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) {\n        return 'number';\n      }\n\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) {\n        return 'number';\n      }\n      /* keywords */\n\n\n      if (stream.match(keywordRegex)) {\n        return 'keyword';\n      }\n    }\n    /* pairs (associative arrays) -> key */\n\n\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n\n    if (state.pair && stream.match(/^:\\s*/)) {\n      state.pairStart = true;\n      return 'meta';\n    }\n    /* nothing found, continue */\n\n\n    state.pairStart = false;\n    state.escaped = ch == '\\\\';\n    stream.next();\n    return null;\n  },\n  startState: function () {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};","map":{"version":3,"names":["cons","keywordRegex","RegExp","join","yaml","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","languageData","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/yaml.js"],"sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\nexport const yaml = {\n  token: function(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n      return \"string\";\n\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd(); return \"string\";\n    } else if (state.literal) { state.literal = false; }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if(stream.match('---')) { return \"def\"; }\n      /* document end */\n      if (stream.match('...')) { return \"def\"; }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) { return 'meta'; }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{')\n        state.inlinePairs++;\n      else if (ch == '}')\n        state.inlinePairs--;\n      else if (ch == '[')\n        state.inlineList++;\n      else\n        state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable'; }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n      /* keywords */\n      if (stream.match(keywordRegex)) { return 'keyword'; }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = (ch == '\\\\');\n    stream.next();\n    return null;\n  },\n  startState: function() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}