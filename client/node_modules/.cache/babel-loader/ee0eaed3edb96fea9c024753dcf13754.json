{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"value\", \"selection\", \"extensions\", \"onChange\", \"onStatistics\", \"onCreateEditor\", \"onUpdate\", \"autoFocus\", \"theme\", \"height\", \"minHeight\", \"maxHeight\", \"width\", \"minWidth\", \"maxWidth\", \"basicSetup\", \"placeholder\", \"indentWithTab\", \"editable\", \"readOnly\", \"root\", \"initialState\"];\nimport React, { useRef, forwardRef, useImperativeHandle } from 'react';\nimport { useCodeMirror } from './useCodeMirror';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport * from '@uiw/codemirror-extensions-basic-setup';\nexport * from './useCodeMirror';\nexport * from './utils';\nvar ReactCodeMirror = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className,\n    value = '',\n    selection,\n    extensions = [],\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    autoFocus,\n    theme = 'light',\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    readOnly,\n    root,\n    initialState\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var editor = useRef(null);\n  var {\n    state,\n    view,\n    container,\n    setContainer\n  } = useCodeMirror({\n    container: editor.current,\n    root,\n    value,\n    autoFocus,\n    theme,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    readOnly,\n    selection,\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    extensions,\n    initialState\n  });\n  useImperativeHandle(ref, () => ({\n    editor: editor.current,\n    state: state,\n    view: view\n  }), [editor, container, state, view]); // check type of value\n\n  if (typeof value !== 'string') {\n    throw new Error(\"value must be typeof string but got \" + typeof value);\n  }\n\n  var defaultClassNames = typeof theme === 'string' ? \"cm-theme-\" + theme : 'cm-theme';\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    ref: editor,\n    className: \"\" + defaultClassNames + (className ? \" \" + className : '')\n  }, other));\n});\nReactCodeMirror.displayName = 'CodeMirror';\nexport default ReactCodeMirror;","map":{"version":3,"sources":["../src/index.tsx"],"names":["ReactCodeMirror","forwardRef","value","extensions","theme","initialState","other","editor","useRef","setContainer","useCodeMirror","container","useImperativeHandle","state","view","defaultClassNames","className"],"mappings":";;;AAAA,OAAA,KAAA,IAAA,MAAA,EAAA,UAAA,EAAA,mBAAA,QAAA,OAAA;AAIA,SAAA,aAAA,QAAA,iBAAA;;AAGA,cAAA,wCAAA;AACA,cAAA,iBAAA;AACA,cAAA,SAAA;AA6EA,IAAMA,eAAe,GAAA,aAAGC,UAAU,CAA2C,CAAA,KAAA,EAAA,GAAA,KAAgB;EAC3F,IAAM;IAAA,SAAA;IAEJC,KAAK,GAFD,EAAA;IAAA,SAAA;IAIJC,UAAU,GAJN,EAAA;IAAA,QAAA;IAAA,YAAA;IAAA,cAAA;IAAA,QAAA;IAAA,SAAA;IAUJC,KAAK,GAVD,OAAA;IAAA,MAAA;IAAA,SAAA;IAAA,SAAA;IAAA,KAAA;IAAA,QAAA;IAAA,QAAA;IAAA,UAAA;IAAA,WAAA;IAAA,aAAA;IAAA,QAAA;IAAA,QAAA;IAAA,IAAA;IAuBJC;EAvBI,IAAN,KAAA;EAAA,IAwBKC,KAxBL,GAAA,6BAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;EA0BA,IAAMC,MAAM,GAAGC,MAAM,CAArB,IAAqB,CAArB;EACA,IAAM;IAAA,KAAA;IAAA,IAAA;IAAA,SAAA;IAA0BC;EAA1B,IAA2CC,aAAa,CAAC;IAC7DC,SAAS,EAAEJ,MAAM,CAD4C,OAAA;IAAA,IAAA;IAAA,KAAA;IAAA,SAAA;IAAA,KAAA;IAAA,MAAA;IAAA,SAAA;IAAA,SAAA;IAAA,KAAA;IAAA,QAAA;IAAA,QAAA;IAAA,UAAA;IAAA,WAAA;IAAA,aAAA;IAAA,QAAA;IAAA,QAAA;IAAA,SAAA;IAAA,QAAA;IAAA,YAAA;IAAA,cAAA;IAAA,QAAA;IAAA,UAAA;IAuB7DF;EAvB6D,CAAD,CAA9D;EA0BAO,mBAAmB,CAAA,GAAA,EAAM,OAAO;IAAEL,MAAM,EAAEA,MAAM,CAAhB,OAAA;IAA0BM,KAAK,EAA/B,KAAA;IAAwCC,IAAI,EAAEA;EAA9C,CAAP,CAAN,EAAoE,CAAA,MAAA,EAAA,SAAA,EAAA,KAAA,EAtDI,IAsDJ,CAApE,CAAnBF,CAtD2F,CA6D3F;;EACA,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;IAC7B,MAAM,IAAA,KAAA,CAAA,yCAAiD,OAAvD,KAAM,CAAN;EACD;;EAED,IAAMG,iBAAiB,GAAG,OAAA,KAAA,KAAA,QAAA,GAAA,cAAA,KAAA,GAA1B,UAAA;EACA,OAAA,aAAO,IAAA,CAAA,KAAA,EAAA,QAAA,CAAA;IAAK,GAAG,EAAR,MAAA;IAAkB,SAAS,EAAA,KAAA,iBAAA,IAAyBC,SAAS,GAAA,MAAA,SAAA,GAAlC,EAAA;EAA3B,CAAA,EAAP,KAAO,CAAA,CAAP;AAnEF,CAAkC,CAAlC;AAsEAhB,eAAe,CAAfA,WAAAA,GAAAA,YAAAA;AAEA,eAAA,eAAA","sourcesContent":["import React, { useRef, forwardRef, useImperativeHandle } from 'react';\nimport { EditorState, EditorStateConfig, Extension, StateField } from '@codemirror/state';\nimport { EditorView, ViewUpdate } from '@codemirror/view';\nimport { BasicSetupOptions } from '@uiw/codemirror-extensions-basic-setup';\nimport { useCodeMirror } from './useCodeMirror';\nimport { Statistics } from './utils';\n\nexport * from '@uiw/codemirror-extensions-basic-setup';\nexport * from './useCodeMirror';\nexport * from './utils';\n\nexport interface ReactCodeMirrorProps\n  extends Omit<EditorStateConfig, 'doc' | 'extensions'>,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'placeholder'> {\n  /** value of the auto created model in the editor. */\n  value?: string;\n  height?: string;\n  minHeight?: string;\n  maxHeight?: string;\n  width?: string;\n  minWidth?: string;\n  maxWidth?: string;\n  /** focus on the editor. */\n  autoFocus?: boolean;\n  /** Enables a placeholder—a piece of example content to show when the editor is empty. */\n  placeholder?: string | HTMLElement;\n  /**\n   * `light` / `dark` / `Extension` Defaults to `light`.\n   * @default light\n   */\n  theme?: 'light' | 'dark' | Extension;\n  /**\n   * Whether to optional basicSetup by default\n   * @default true\n   */\n  basicSetup?: boolean | BasicSetupOptions;\n  /**\n   * This disables editing of the editor content by the user.\n   * @default true\n   */\n  editable?: boolean;\n  /**\n   * This disables editing of the editor content by the user.\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * Whether to optional basicSetup by default\n   * @default true\n   */\n  indentWithTab?: boolean;\n  /** Fired whenever a change occurs to the document. */\n  onChange?(value: string, viewUpdate: ViewUpdate): void;\n  /** Some data on the statistics editor. */\n  onStatistics?(data: Statistics): void;\n  /** Fired whenever any state change occurs within the editor, including non-document changes like lint results. */\n  onUpdate?(viewUpdate: ViewUpdate): void;\n  /** The first time the editor executes the event. */\n  onCreateEditor?(view: EditorView, state: EditorState): void;\n  /**\n   * Extension values can be [provided](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions) when creating a state to attach various kinds of configuration and behavior information.\n   * They can either be built-in extension-providing objects,\n   * such as [state fields](https://codemirror.net/6/docs/ref/#state.StateField) or [facet providers](https://codemirror.net/6/docs/ref/#state.Facet.of),\n   * or objects with an extension in its `extension` property. Extensions can be nested in arrays arbitrarily deep—they will be flattened when processed.\n   */\n  extensions?: Extension[];\n  /**\n   * If the view is going to be mounted in a shadow root or document other than the one held by the global variable document (the default), you should pass it here.\n   * Originally from the [config of EditorView](https://codemirror.net/6/docs/ref/#view.EditorView.constructor%5Econfig.root)\n   */\n  root?: ShadowRoot | Document;\n  /**\n   * Create a state from its JSON representation serialized with [toJSON](https://codemirror.net/docs/ref/#state.EditorState.toJSON) function\n   */\n  initialState?: {\n    json: any;\n    fields?: Record<string, StateField<any>>;\n  };\n}\n\nexport interface ReactCodeMirrorRef {\n  editor?: HTMLDivElement | null;\n  state?: EditorState;\n  view?: EditorView;\n}\n\nconst ReactCodeMirror = forwardRef<ReactCodeMirrorRef, ReactCodeMirrorProps>((props, ref) => {\n  const {\n    className,\n    value = '',\n    selection,\n    extensions = [],\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    autoFocus,\n    theme = 'light',\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    readOnly,\n    root,\n    initialState,\n    ...other\n  } = props;\n  const editor = useRef<HTMLDivElement>(null);\n  const { state, view, container, setContainer } = useCodeMirror({\n    container: editor.current,\n    root,\n    value,\n    autoFocus,\n    theme,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    basicSetup,\n    placeholder,\n    indentWithTab,\n    editable,\n    readOnly,\n    selection,\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    extensions,\n    initialState,\n  });\n\n  useImperativeHandle(ref, () => ({ editor: editor.current, state: state, view: view }), [\n    editor,\n    container,\n    state,\n    view,\n  ]);\n\n  // check type of value\n  if (typeof value !== 'string') {\n    throw new Error(`value must be typeof string but got ${typeof value}`);\n  }\n\n  const defaultClassNames = typeof theme === 'string' ? `cm-theme-${theme}` : 'cm-theme';\n  return <div ref={editor} className={`${defaultClassNames}${className ? ` ${className}` : ''}`} {...other}></div>;\n});\n\nReactCodeMirror.displayName = 'CodeMirror';\n\nexport default ReactCodeMirror;\n"]},"metadata":{},"sourceType":"module"}