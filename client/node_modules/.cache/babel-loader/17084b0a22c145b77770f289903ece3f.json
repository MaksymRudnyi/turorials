{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length;\n  /** @type {number|undefined} */\n\n  let content;\n  /** @type {number|undefined} */\n\n  let text;\n  /** @type {number|undefined} */\n\n  let definition; // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index;\n        break;\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index;\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index;\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }; // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText'; // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  } // Add the heading exit at the end.\n\n\n  events.push(['exit', heading, context]);\n  return events;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  /** @type {boolean} */\n\n  let paragraph; // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (self.events[index][1].type !== 'lineEnding' && self.events[index][1].type !== 'linePrefix' && self.events[index][1].type !== 'content') {\n      paragraph = self.events[index][1].type === 'paragraph';\n      break;\n    }\n  }\n\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine');\n      effects.enter('setextHeadingLineSequence');\n      marker = code;\n      return closingSequence(code);\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return closingSequence;\n    }\n\n    effects.exit('setextHeadingLineSequence');\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code);\n  }\n  /** @type {State} */\n\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine');\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","setextUnderline","name","tokenize","tokenizeSetextUnderline","resolveTo","resolveToSetextUnderline","events","context","index","length","content","text","definition","type","splice","heading","start","Object","assign","end","push","effects","ok","nok","self","marker","paragraph","code","parser","lazy","now","line","interrupt","enter","closingSequence","consume","exit","closingSequenceEnd"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-core-commonmark/lib/setext-underline.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}