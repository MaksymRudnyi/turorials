{"ast":null,"code":"/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\nvar map = {\n  b: 1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5)\n};\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = options && options.thousandsSeparator || '';\n  var unitSeparator = options && options.unitSeparator || '';\n  var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = options && options.unit || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\n  }\n\n  return str + unitSeparator + unit;\n}\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  } // Test if the string passed is valid\n\n\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b';\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}","map":{"version":3,"names":["module","exports","bytes","format","parse","formatThousandsRegExp","formatDecimalsRegExp","map","b","kb","mb","gb","tb","Math","pow","pb","parseRegExp","value","options","Number","isFinite","mag","abs","thousandsSeparator","unitSeparator","decimalPlaces","undefined","fixedDecimals","Boolean","unit","toLowerCase","val","str","toFixed","replace","isNaN","results","exec","floatValue","parseInt","parseFloat","floor"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/bytes/index.js"],"sourcesContent":["/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}