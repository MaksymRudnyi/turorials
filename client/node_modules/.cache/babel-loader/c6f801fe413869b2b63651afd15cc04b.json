{"ast":null,"code":"// @ts-nocheck\nsas.displayName = 'sas';\nsas.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function sas(Prism) {\n  ;\n\n  (function (Prism) {\n    var stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source;\n    var number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i;\n    var numericConstant = {\n      pattern: RegExp(stringPattern + '[bx]'),\n      alias: 'number'\n    };\n    var macroVariable = {\n      pattern: /&[a-z_]\\w*/i\n    };\n    var macroKeyword = {\n      pattern: /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var step = {\n      pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n      alias: 'keyword',\n      lookbehind: true\n    };\n    var comment = [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n      lookbehind: true\n    }];\n    var string = {\n      pattern: RegExp(stringPattern),\n      greedy: true\n    };\n    var punctuation = /[$%@.(){}\\[\\];,\\\\]/;\n    var func = {\n      pattern: /%?\\b\\w+(?=\\()/,\n      alias: 'keyword'\n    };\n    var args = {\n      function: func,\n      'arg-value': {\n        pattern: /(=\\s*)[A-Z\\.]+/i,\n        lookbehind: true\n      },\n      operator: /=/,\n      'macro-variable': macroVariable,\n      arg: {\n        pattern: /[A-Z]+/i,\n        alias: 'keyword'\n      },\n      number: number,\n      'numeric-constant': numericConstant,\n      punctuation: punctuation,\n      string: string\n    };\n    var format = {\n      pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n      inside: {\n        keyword: /^(?:format|put)(?==)/i,\n        equals: /=/,\n        format: {\n          pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    };\n    var altformat = {\n      pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n      inside: {\n        keyword: /^(?:format|put)/i,\n        format: {\n          pattern: /[\\w$]+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    };\n    var globalStatements = {\n      pattern: /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var submitStatement = {\n      pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    };\n    var actionSets = /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/.source;\n    var casActions = {\n      pattern: RegExp(/(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(/<act>/g, function () {\n        return actionSets;\n      }), 'i'),\n      lookbehind: true,\n      inside: {\n        keyword: RegExp(/(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function () {\n          return actionSets;\n        }), 'i'),\n        action: {\n          pattern: /(?:action)/i,\n          alias: 'keyword'\n        },\n        comment: comment,\n        function: func,\n        'arg-value': args['arg-value'],\n        operator: args.operator,\n        argument: args.arg,\n        number: number,\n        'numeric-constant': numericConstant,\n        punctuation: punctuation,\n        string: string\n      }\n    };\n    var keywords = {\n      pattern: /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n      lookbehind: true\n    };\n    Prism.languages.sas = {\n      datalines: {\n        pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          keyword: {\n            pattern: /^(?:cards|(?:data)?lines)/i\n          },\n          punctuation: /;/\n        }\n      },\n      'proc-sql': {\n        pattern: /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          sql: {\n            pattern: RegExp(/^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            alias: 'language-sql',\n            inside: Prism.languages.sql\n          },\n          'global-statements': globalStatements,\n          'sql-statements': {\n            pattern: /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-groovy': {\n        pattern: /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          groovy: {\n            pattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            lookbehind: true,\n            alias: 'language-groovy',\n            inside: Prism.languages.groovy\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-lua': {\n        pattern: /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          lua: {\n            pattern: RegExp(/(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(/<str>/g, function () {\n              return stringPattern;\n            }), 'im'),\n            lookbehind: true,\n            alias: 'language-lua',\n            inside: Prism.languages.lua\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-cas': {\n        pattern: /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          'statement-var': {\n            pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n            lookbehind: true,\n            inside: {\n              statement: {\n                pattern: /^saveresult\\s+\\S+/i,\n                inside: {\n                  keyword: /^(?:saveresult)/i\n                }\n              },\n              rest: args\n            }\n          },\n          'cas-actions': casActions,\n          statement: {\n            pattern: /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,\n            lookbehind: true,\n            inside: args\n          },\n          step: step,\n          keyword: keywords,\n          function: func,\n          format: format,\n          altformat: altformat,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-args': {\n        pattern: RegExp(/(^proc\\s+\\w+\\s+)(?!\\s)(?:[^;\"']|<str>)+;/.source.replace(/<str>/g, function () {\n          return stringPattern;\n        }), 'im'),\n        lookbehind: true,\n        inside: args\n      },\n\n      /*Special keywords within macros*/\n      'macro-keyword': macroKeyword,\n      'macro-variable': macroVariable,\n      'macro-string-functions': {\n        pattern: /((?:^|\\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\\(.*?(?:[^%]\\))/i,\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,\n            alias: 'keyword'\n          },\n          'macro-keyword': macroKeyword,\n          'macro-variable': macroVariable,\n          'escaped-char': {\n            pattern: /%['\"()<>=¬^~;,#]/\n          },\n          punctuation: punctuation\n        }\n      },\n      'macro-declaration': {\n        pattern: /^%macro[^;]+(?=;)/im,\n        inside: {\n          keyword: /%macro/i\n        }\n      },\n      'macro-end': {\n        pattern: /^%mend[^;]+(?=;)/im,\n        inside: {\n          keyword: /%mend/i\n        }\n      },\n\n      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */\n      macro: {\n        pattern: /%_\\w+(?=\\()/,\n        alias: 'keyword'\n      },\n      input: {\n        pattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,\n        inside: {\n          input: {\n            alias: 'keyword',\n            pattern: /^input/i\n          },\n          comment: comment,\n          number: number,\n          'numeric-constant': numericConstant\n        }\n      },\n      'options-args': {\n        pattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,\n        lookbehind: true,\n        inside: args\n      },\n      'cas-actions': casActions,\n      comment: comment,\n      function: func,\n      format: format,\n      altformat: altformat,\n      'numeric-constant': numericConstant,\n      datetime: {\n        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt\n        pattern: RegExp(stringPattern + '(?:dt?|t)'),\n        alias: 'number'\n      },\n      string: string,\n      step: step,\n      keyword: keywords,\n      // In SAS Studio syntax highlighting, these operators are styled like keywords\n      'operator-keyword': {\n        pattern: /\\b(?:eq|ge|gt|in|le|lt|ne|not)\\b/i,\n        alias: 'operator'\n      },\n      // Decimal (1.2e23), hexadecimal (0c1x)\n      number: number,\n      operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/,\n      punctuation: punctuation\n    };\n  })(Prism);\n}","map":{"version":3,"names":["sas","displayName","aliases","Prism","stringPattern","source","number","numericConstant","pattern","RegExp","alias","macroVariable","macroKeyword","lookbehind","step","comment","string","greedy","punctuation","func","args","function","operator","arg","format","inside","keyword","equals","altformat","globalStatements","submitStatement","actionSets","casActions","replace","action","argument","keywords","languages","datalines","sql","groovy","lua","statement","rest","macro","input","datetime"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/sas.js"],"sourcesContent":["// @ts-nocheck\nsas.displayName = 'sas'\nsas.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function sas(Prism) {\n  ;(function (Prism) {\n    var stringPattern = /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))/.source\n    var number = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i\n    var numericConstant = {\n      pattern: RegExp(stringPattern + '[bx]'),\n      alias: 'number'\n    }\n    var macroVariable = {\n      pattern: /&[a-z_]\\w*/i\n    }\n    var macroKeyword = {\n      pattern:\n        /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var step = {\n      pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n      alias: 'keyword',\n      lookbehind: true\n    }\n    var comment = [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n        lookbehind: true\n      }\n    ]\n    var string = {\n      pattern: RegExp(stringPattern),\n      greedy: true\n    }\n    var punctuation = /[$%@.(){}\\[\\];,\\\\]/\n    var func = {\n      pattern: /%?\\b\\w+(?=\\()/,\n      alias: 'keyword'\n    }\n    var args = {\n      function: func,\n      'arg-value': {\n        pattern: /(=\\s*)[A-Z\\.]+/i,\n        lookbehind: true\n      },\n      operator: /=/,\n      'macro-variable': macroVariable,\n      arg: {\n        pattern: /[A-Z]+/i,\n        alias: 'keyword'\n      },\n      number: number,\n      'numeric-constant': numericConstant,\n      punctuation: punctuation,\n      string: string\n    }\n    var format = {\n      pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n      inside: {\n        keyword: /^(?:format|put)(?==)/i,\n        equals: /=/,\n        format: {\n          pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    }\n    var altformat = {\n      pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n      inside: {\n        keyword: /^(?:format|put)/i,\n        format: {\n          pattern: /[\\w$]+\\.\\d?/,\n          alias: 'number'\n        }\n      }\n    }\n    var globalStatements = {\n      pattern:\n        /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var submitStatement = {\n      pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n      lookbehind: true,\n      alias: 'keyword'\n    }\n    var actionSets =\n      /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/\n        .source\n    var casActions = {\n      pattern: RegExp(\n        /(^|\\s)(?:action\\s+)?(?:<act>)\\.[a-z]+\\b[^;]+/.source.replace(\n          /<act>/g,\n          function () {\n            return actionSets\n          }\n        ),\n        'i'\n      ),\n      lookbehind: true,\n      inside: {\n        keyword: RegExp(\n          /(?:<act>)\\.[a-z]+\\b/.source.replace(/<act>/g, function () {\n            return actionSets\n          }),\n          'i'\n        ),\n        action: {\n          pattern: /(?:action)/i,\n          alias: 'keyword'\n        },\n        comment: comment,\n        function: func,\n        'arg-value': args['arg-value'],\n        operator: args.operator,\n        argument: args.arg,\n        number: number,\n        'numeric-constant': numericConstant,\n        punctuation: punctuation,\n        string: string\n      }\n    }\n    var keywords = {\n      pattern:\n        /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n      lookbehind: true\n    }\n    Prism.languages.sas = {\n      datalines: {\n        pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          keyword: {\n            pattern: /^(?:cards|(?:data)?lines)/i\n          },\n          punctuation: /;/\n        }\n      },\n      'proc-sql': {\n        pattern:\n          /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          sql: {\n            pattern: RegExp(\n              /^[ \\t]*(?:select|alter\\s+table|(?:create|describe|drop)\\s+(?:index|table(?:\\s+constraints)?|view)|create\\s+unique\\s+index|insert\\s+into|update)(?:<str>|[^;\"'])+;/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            alias: 'language-sql',\n            inside: Prism.languages.sql\n          },\n          'global-statements': globalStatements,\n          'sql-statements': {\n            pattern:\n              /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-groovy': {\n        pattern:\n          /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          groovy: {\n            pattern: RegExp(\n              /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            lookbehind: true,\n            alias: 'language-groovy',\n            inside: Prism.languages.groovy\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-lua': {\n        pattern:\n          /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          lua: {\n            pattern: RegExp(\n              /(^[ \\t]*submit(?:\\s+(?:load|norun|parseonly))?)(?:<str>|[^\"'])+?(?=endsubmit;)/.source.replace(\n                /<str>/g,\n                function () {\n                  return stringPattern\n                }\n              ),\n              'im'\n            ),\n            lookbehind: true,\n            alias: 'language-lua',\n            inside: Prism.languages.lua\n          },\n          keyword: keywords,\n          'submit-statement': submitStatement,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-cas': {\n        pattern:\n          /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n        lookbehind: true,\n        inside: {\n          comment: comment,\n          'statement-var': {\n            pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n            lookbehind: true,\n            inside: {\n              statement: {\n                pattern: /^saveresult\\s+\\S+/i,\n                inside: {\n                  keyword: /^(?:saveresult)/i\n                }\n              },\n              rest: args\n            }\n          },\n          'cas-actions': casActions,\n          statement: {\n            pattern:\n              /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,\n            lookbehind: true,\n            inside: args\n          },\n          step: step,\n          keyword: keywords,\n          function: func,\n          format: format,\n          altformat: altformat,\n          'global-statements': globalStatements,\n          number: number,\n          'numeric-constant': numericConstant,\n          punctuation: punctuation,\n          string: string\n        }\n      },\n      'proc-args': {\n        pattern: RegExp(\n          /(^proc\\s+\\w+\\s+)(?!\\s)(?:[^;\"']|<str>)+;/.source.replace(\n            /<str>/g,\n            function () {\n              return stringPattern\n            }\n          ),\n          'im'\n        ),\n        lookbehind: true,\n        inside: args\n      },\n\n      /*Special keywords within macros*/\n      'macro-keyword': macroKeyword,\n      'macro-variable': macroVariable,\n      'macro-string-functions': {\n        pattern:\n          /((?:^|\\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\\(.*?(?:[^%]\\))/i,\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,\n            alias: 'keyword'\n          },\n          'macro-keyword': macroKeyword,\n          'macro-variable': macroVariable,\n          'escaped-char': {\n            pattern: /%['\"()<>=¬^~;,#]/\n          },\n          punctuation: punctuation\n        }\n      },\n      'macro-declaration': {\n        pattern: /^%macro[^;]+(?=;)/im,\n        inside: {\n          keyword: /%macro/i\n        }\n      },\n      'macro-end': {\n        pattern: /^%mend[^;]+(?=;)/im,\n        inside: {\n          keyword: /%mend/i\n        }\n      },\n\n      /*%_zscore(headcir, _lhc, _mhc, _shc, headcz, headcpct, _Fheadcz); */\n      macro: {\n        pattern: /%_\\w+(?=\\()/,\n        alias: 'keyword'\n      },\n      input: {\n        pattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,\n        inside: {\n          input: {\n            alias: 'keyword',\n            pattern: /^input/i\n          },\n          comment: comment,\n          number: number,\n          'numeric-constant': numericConstant\n        }\n      },\n      'options-args': {\n        pattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,\n        lookbehind: true,\n        inside: args\n      },\n      'cas-actions': casActions,\n      comment: comment,\n      function: func,\n      format: format,\n      altformat: altformat,\n      'numeric-constant': numericConstant,\n      datetime: {\n        // '1jan2013'd, '9:25:19pm't, '18jan2003:9:27:05am'dt\n        pattern: RegExp(stringPattern + '(?:dt?|t)'),\n        alias: 'number'\n      },\n      string: string,\n      step: step,\n      keyword: keywords,\n      // In SAS Studio syntax highlighting, these operators are styled like keywords\n      'operator-keyword': {\n        pattern: /\\b(?:eq|ge|gt|in|le|lt|ne|not)\\b/i,\n        alias: 'operator'\n      },\n      // Decimal (1.2e23), hexadecimal (0c1x)\n      number: number,\n      operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/,\n      punctuation: punctuation\n    }\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}