{"ast":null,"code":"var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\n\nvar ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\", \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\", \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\", \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\", \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\", \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\", \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\", \"isblank\", \"isliteral\", \"a\", \"bind\"]);\nvar keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\", \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\", \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\", \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\", \"true\", \"false\", \"with\", \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\"]);\nvar operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n\n  if (ch == \"$\" || ch == \"?\") {\n    if (ch == \"?\" && stream.match(/\\s/, false)) {\n      return \"operator\";\n    }\n\n    stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n    return \"variableName.local\";\n  } else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  } else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"bracket\";\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    return \"operator\";\n  } else if (ch == \":\") {\n    eatPnLocal(stream);\n    return \"atom\";\n  } else if (ch == \"@\") {\n    stream.eatWhile(/[a-z\\d\\-]/i);\n    return \"meta\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n\n    if (stream.eat(\":\")) {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n\n    var word = stream.current();\n    if (ops.test(word)) return \"builtin\";else if (keywords.test(word)) return \"keyword\";else return \"variable\";\n  }\n}\n\nfunction eatPnLocal(stream) {\n  stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\n\nfunction tokenLiteral(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        ch;\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n\n      escaped = !escaped && ch == \"\\\\\";\n    }\n\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n}\n\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const sparql = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function (stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n\n      if (state.context && curPunc == state.context.type) {\n        popContext(state);\n        if (curPunc == \"}\" && state.context && state.context.type == \"pattern\") popContext(state);\n      }\n    } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function (state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n    var closing = context && firstChar == context.type;\n    if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};","map":{"version":3,"names":["curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatPnLocal","eatWhile","eat","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","sparql","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/sparql.js"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                      \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                      \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                      \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                      \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                      \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                      \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                      \"isblank\", \"isliteral\", \"a\", \"bind\"]);\nvar keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                           \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                           \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                           \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                           \"true\", \"false\", \"with\",\n                           \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\"]);\nvar operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"$\" || ch == \"?\") {\n    if(ch == \"?\" && stream.match(/\\s/, false)){\n      return \"operator\";\n    }\n    stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n    return \"variableName.local\";\n  }\n  else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"bracket\";\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    return \"operator\";\n  }\n  else if (ch == \":\") {\n    eatPnLocal(stream);\n    return \"atom\";\n  }\n  else if (ch == \"@\") {\n    stream.eatWhile(/[a-z\\d\\-]/i);\n    return \"meta\";\n  }\n  else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (ops.test(word))\n      return \"builtin\";\n    else if (keywords.test(word))\n      return \"keyword\";\n    else\n      return \"variable\";\n  }\n}\n\nfunction eatPnLocal(stream) {\n  stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const sparql = {\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) {\n        popContext(state);\n        if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n          popContext(state);\n      }\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}