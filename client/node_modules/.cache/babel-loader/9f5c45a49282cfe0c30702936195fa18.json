{"ast":null,"code":"'use strict';\n\nconst unicode = require('../common/unicode');\n\nconst ERR = require('../common/error-codes'); //Aliases\n\n\nconst $ = unicode.CODE_POINTS; //Const\n\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16; //Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\n\nclass Preprocessor {\n  constructor() {\n    this.html = null;\n    this.pos = -1;\n    this.lastGapPos = -1;\n    this.lastCharPos = -1;\n    this.gapStack = [];\n    this.skipNextNewLine = false;\n    this.lastChunkWritten = false;\n    this.endOfChunkHit = false;\n    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n  }\n\n  _err() {// NOTE: err reporting is noop by default. Enabled by mixin.\n  }\n\n  _addGap() {\n    this.gapStack.push(this.lastGapPos);\n    this.lastGapPos = this.pos;\n  }\n\n  _processSurrogate(cp) {\n    //NOTE: try to peek a surrogate pair\n    if (this.pos !== this.lastCharPos) {\n      const nextCp = this.html.charCodeAt(this.pos + 1);\n\n      if (unicode.isSurrogatePair(nextCp)) {\n        //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n        this.pos++; //NOTE: add gap that should be avoided during retreat\n\n        this._addGap();\n\n        return unicode.getSurrogatePairCodePoint(cp, nextCp);\n      }\n    } //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n    else if (!this.lastChunkWritten) {\n      this.endOfChunkHit = true;\n      return $.EOF;\n    } //NOTE: isolated surrogate\n\n\n    this._err(ERR.surrogateInInputStream);\n\n    return cp;\n  }\n\n  dropParsedChunk() {\n    if (this.pos > this.bufferWaterline) {\n      this.lastCharPos -= this.pos;\n      this.html = this.html.substring(this.pos);\n      this.pos = 0;\n      this.lastGapPos = -1;\n      this.gapStack = [];\n    }\n  }\n\n  write(chunk, isLastChunk) {\n    if (this.html) {\n      this.html += chunk;\n    } else {\n      this.html = chunk;\n    }\n\n    this.lastCharPos = this.html.length - 1;\n    this.endOfChunkHit = false;\n    this.lastChunkWritten = isLastChunk;\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n    this.lastCharPos = this.html.length - 1;\n    this.endOfChunkHit = false;\n  }\n\n  advance() {\n    this.pos++;\n\n    if (this.pos > this.lastCharPos) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return $.EOF;\n    }\n\n    let cp = this.html.charCodeAt(this.pos); //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n    //must be ignored.\n\n    if (this.skipNextNewLine && cp === $.LINE_FEED) {\n      this.skipNextNewLine = false;\n\n      this._addGap();\n\n      return this.advance();\n    } //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n\n\n    if (cp === $.CARRIAGE_RETURN) {\n      this.skipNextNewLine = true;\n      return $.LINE_FEED;\n    }\n\n    this.skipNextNewLine = false;\n\n    if (unicode.isSurrogate(cp)) {\n      cp = this._processSurrogate(cp);\n    } //OPTIMIZATION: first check if code point is in the common allowed\n    //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n    //before going into detailed performance cost validation.\n\n\n    const isCommonValidRange = cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 0xfdd0;\n\n    if (!isCommonValidRange) {\n      this._checkForProblematicCharacters(cp);\n    }\n\n    return cp;\n  }\n\n  _checkForProblematicCharacters(cp) {\n    if (unicode.isControlCodePoint(cp)) {\n      this._err(ERR.controlCharacterInInputStream);\n    } else if (unicode.isUndefinedCodePoint(cp)) {\n      this._err(ERR.noncharacterInInputStream);\n    }\n  }\n\n  retreat() {\n    if (this.pos === this.lastGapPos) {\n      this.lastGapPos = this.gapStack.pop();\n      this.pos--;\n    }\n\n    this.pos--;\n  }\n\n}\n\nmodule.exports = Preprocessor;","map":{"version":3,"names":["unicode","require","ERR","$","CODE_POINTS","DEFAULT_BUFFER_WATERLINE","Preprocessor","constructor","html","pos","lastGapPos","lastCharPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","_err","_addGap","push","_processSurrogate","cp","nextCp","charCodeAt","isSurrogatePair","getSurrogatePairCodePoint","EOF","surrogateInInputStream","dropParsedChunk","substring","write","chunk","isLastChunk","length","insertHtmlAtCurrentPos","advance","LINE_FEED","CARRIAGE_RETURN","isSurrogate","isCommonValidRange","_checkForProblematicCharacters","isControlCodePoint","controlCharacterInInputStream","isUndefinedCodePoint","noncharacterInInputStream","retreat","pop","module","exports"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/parse5/lib/tokenizer/preprocessor.js"],"sourcesContent":["'use strict';\n\nconst unicode = require('../common/unicode');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}