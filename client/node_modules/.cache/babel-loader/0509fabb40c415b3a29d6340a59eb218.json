{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"onChange\"];\nimport React, { useContext, useEffect } from 'react';\nimport { EditorContext } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Textarea(props) {\n  var {\n    prefixCls,\n    onChange: _onChange\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var {\n    markdown,\n    commands,\n    fullscreen,\n    preview,\n    highlightEnable,\n    extraCommands,\n    tabSize,\n    defaultTabEnable,\n    dispatch\n  } = useContext(EditorContext);\n  var textRef = React.useRef(null);\n  var executeRef = React.useRef();\n  var statesRef = React.useRef({\n    fullscreen,\n    preview\n  });\n  useEffect(() => {\n    statesRef.current = {\n      fullscreen,\n      preview,\n      highlightEnable\n    };\n  }, [fullscreen, preview, highlightEnable]);\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({\n        textarea: textRef.current,\n        commandOrchestrator\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  var onKeyDown = e => {\n    handleKeyDown(e, tabSize, defaultTabEnable);\n    shortcuts(e, [...(commands || []), ...(extraCommands || [])], executeRef.current, dispatch, statesRef.current);\n  };\n\n  useEffect(() => {\n    if (textRef.current) {\n      textRef.current.addEventListener('keydown', onKeyDown);\n    }\n\n    return () => {\n      if (textRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        textRef.current.removeEventListener('keydown', onKeyDown);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsx(\"textarea\", _extends({\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    autoCapitalize: \"off\",\n    spellCheck: false\n  }, other, {\n    ref: textRef,\n    className: prefixCls + \"-text-input \" + (other.className ? other.className : ''),\n    value: markdown,\n    onChange: e => {\n      dispatch && dispatch({\n        markdown: e.target.value\n      });\n      _onChange && _onChange(e);\n    }\n  }));\n}","map":{"version":3,"sources":["../../../src/components/TextArea/Textarea.tsx"],"names":["onChange","other","dispatch","useContext","textRef","React","executeRef","statesRef","preview","useEffect","highlightEnable","commandOrchestrator","textarea","onKeyDown","e","handleKeyDown","shortcuts","commands","extraCommands","prefixCls","markdown","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { IProps } from '../../Editor';\nimport { EditorContext, ExecuteCommandState } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport './index.less';\n\nexport interface TextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value'>, IProps {}\n\nexport default function Textarea(props: TextAreaProps) {\n  const { prefixCls, onChange, ...other } = props;\n  const {\n    markdown,\n    commands,\n    fullscreen,\n    preview,\n    highlightEnable,\n    extraCommands,\n    tabSize,\n    defaultTabEnable,\n    dispatch,\n  } = useContext(EditorContext);\n  const textRef = React.useRef<HTMLTextAreaElement>(null);\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  const statesRef = React.useRef<ExecuteCommandState>({ fullscreen, preview });\n\n  useEffect(() => {\n    statesRef.current = { fullscreen, preview, highlightEnable };\n  }, [fullscreen, preview, highlightEnable]);\n\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onKeyDown = (e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>) => {\n    handleKeyDown(e, tabSize, defaultTabEnable);\n    shortcuts(e, [...(commands || []), ...(extraCommands || [])], executeRef.current, dispatch, statesRef.current);\n  };\n  useEffect(() => {\n    if (textRef.current) {\n      textRef.current.addEventListener('keydown', onKeyDown);\n    }\n    return () => {\n      if (textRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        textRef.current.removeEventListener('keydown', onKeyDown);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <textarea\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      autoCapitalize=\"off\"\n      spellCheck={false}\n      {...other}\n      ref={textRef}\n      className={`${prefixCls}-text-input ${other.className ? other.className : ''}`}\n      value={markdown}\n      onChange={(e) => {\n        dispatch && dispatch({ markdown: e.target.value });\n        onChange && onChange(e);\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}