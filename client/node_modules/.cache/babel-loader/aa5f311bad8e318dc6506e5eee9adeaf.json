{"ast":null,"code":"/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').PropertyValue} PropertyValue\n * @typedef {import('./types.js').Parent} Parent\n */\nimport { svg, find } from 'property-information';\nimport { stringify as spaces } from 'space-separated-tokens';\nimport { stringify as commas } from 'comma-separated-tokens';\nimport { stringifyEntities } from 'stringify-entities';\nimport { ccount } from 'ccount';\nimport { constants } from './constants.js';\nimport { comment } from './comment.js';\nimport { doctype } from './doctype.js';\nimport { raw } from './raw.js';\nimport { text } from './text.js';\n/**\n * @type {Object.<string, Handle>}\n */\n\nconst handlers = {\n  comment,\n  doctype,\n  element,\n  // @ts-ignore `raw` is nonstandard\n  raw,\n  // @ts-ignore `root` is a parent.\n  root: all,\n  text\n};\nconst own = {}.hasOwnProperty;\n/**\n * @type {Handle}\n */\n\nexport function one(ctx, node, index, parent) {\n  if (!node || !node.type) {\n    throw new Error('Expected node, not `' + node + '`');\n  }\n\n  if (!own.call(handlers, node.type)) {\n    throw new Error('Cannot compile unknown node `' + node.type + '`');\n  }\n\n  return handlers[node.type](ctx, node, index, parent);\n}\n/**\n * Serialize all children of `parent`.\n *\n * @type {Handle}\n * @param {Parent} parent\n */\n\nexport function all(ctx, parent) {\n  /** @type {Array.<string>} */\n  const results = [];\n  const children = parent && parent.children || [];\n  let index = -1;\n\n  while (++index < children.length) {\n    results[index] = one(ctx, children[index], index, parent);\n  }\n\n  return results.join('');\n}\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\n\nexport function element(ctx, node, index, parent) {\n  const schema = ctx.schema;\n  const omit = schema.space === 'svg' ? undefined : ctx.omit;\n  let selfClosing = schema.space === 'svg' ? ctx.closeEmpty : ctx.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array.<string>} */\n\n  const parts = [];\n  /** @type {string} */\n\n  let last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg;\n  }\n\n  const attrs = serializeAttributes(ctx, node.properties);\n  const content = all(ctx, schema.space === 'html' && node.tagName === 'template' ? node.content : node);\n  ctx.schema = schema; // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n\n  if (content) selfClosing = false;\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\n\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1);\n\n      if (!ctx.tightClose || last === '/' || last && last !== '\"' && last !== \"'\") {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('');\n}\n/**\n * @param {Context} ctx\n * @param {Properties} props\n * @returns {string}\n */\n\nfunction serializeAttributes(ctx, props) {\n  /** @type {Array.<string>} */\n  const values = [];\n  let index = -1;\n  /** @type {string} */\n\n  let key;\n  /** @type {string} */\n\n  let value;\n  /** @type {string} */\n\n  let last;\n\n  for (key in props) {\n    if (props[key] !== undefined && props[key] !== null) {\n      value = serializeAttribute(ctx, key, props[key]);\n      if (value) values.push(value);\n    }\n  }\n\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null; // In tight mode, don’t add a space after quoted attributes.\n\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('');\n}\n/**\n * @param {Context} ctx\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\n\n\nfunction serializeAttribute(ctx, key, value) {\n  const info = find(ctx.schema, key);\n  let quote = ctx.quote;\n  /** @type {string} */\n\n  let result;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\n    value = Boolean(value);\n  }\n\n  if (value === undefined || value === null || value === false || typeof value === 'number' && Number.isNaN(value)) {\n    return '';\n  }\n\n  const name = stringifyEntities(info.attribute, Object.assign({}, ctx.entities, {\n    // Always encode without parse errors in non-HTML.\n    subset: constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n  })); // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n\n  if (value === true) return name;\n  value = typeof value === 'object' && 'length' in value ? // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  (info.commaSeparated ? commas : spaces)(value, {\n    padLeft: !ctx.tightLists\n  }) : String(value);\n  if (ctx.collapseEmpty && !value) return name; // Check unquoted value.\n\n  if (ctx.unquoted) {\n    result = stringifyEntities(value, Object.assign({}, ctx.entities, {\n      subset: constants.unquoted[ctx.valid][ctx.safe],\n      attribute: true\n    }));\n  } // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n\n\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative;\n    }\n\n    result = quote + stringifyEntities(value, Object.assign({}, ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset: (quote === \"'\" ? constants.single : constants.double)[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe],\n      attribute: true\n    })) + quote;\n  } // Don’t add a `=` for unquoted empties.\n\n\n  return name + (result ? '=' + result : result);\n}","map":{"version":3,"names":["svg","find","stringify","spaces","commas","stringifyEntities","ccount","constants","comment","doctype","raw","text","handlers","element","root","all","own","hasOwnProperty","one","ctx","node","index","parent","type","Error","call","results","children","length","join","schema","omit","space","undefined","selfClosing","closeEmpty","voids","includes","tagName","toLowerCase","parts","last","attrs","serializeAttributes","properties","content","opening","push","close","charAt","tightClose","closing","props","values","key","value","serializeAttribute","tight","info","quote","result","overloadedBoolean","attribute","boolean","Boolean","Number","isNaN","name","Object","assign","entities","subset","valid","safe","commaSeparated","padLeft","tightLists","String","collapseEmpty","unquoted","smart","alternative","single","double"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/hast-util-to-html/lib/tree.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Element} Element\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Properties} Properties\n * @typedef {import('./types.js').PropertyValue} PropertyValue\n * @typedef {import('./types.js').Parent} Parent\n */\n\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {ccount} from 'ccount'\nimport {constants} from './constants.js'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {raw} from './raw.js'\nimport {text} from './text.js'\n\n/**\n * @type {Object.<string, Handle>}\n */\nconst handlers = {\n  comment,\n  doctype,\n  element,\n  // @ts-ignore `raw` is nonstandard\n  raw,\n  // @ts-ignore `root` is a parent.\n  root: all,\n  text\n}\n\nconst own = {}.hasOwnProperty\n\n/**\n * @type {Handle}\n */\nexport function one(ctx, node, index, parent) {\n  if (!node || !node.type) {\n    throw new Error('Expected node, not `' + node + '`')\n  }\n\n  if (!own.call(handlers, node.type)) {\n    throw new Error('Cannot compile unknown node `' + node.type + '`')\n  }\n\n  return handlers[node.type](ctx, node, index, parent)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @type {Handle}\n * @param {Parent} parent\n */\nexport function all(ctx, parent) {\n  /** @type {Array.<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = one(ctx, children[index], index, parent)\n  }\n\n  return results.join('')\n}\n\n/**\n * @type {Handle}\n * @param {Element} node\n */\n// eslint-disable-next-line complexity\nexport function element(ctx, node, index, parent) {\n  const schema = ctx.schema\n  const omit = schema.space === 'svg' ? undefined : ctx.omit\n  let selfClosing =\n    schema.space === 'svg'\n      ? ctx.closeEmpty\n      : ctx.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array.<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    ctx.schema = svg\n  }\n\n  const attrs = serializeAttributes(ctx, node.properties)\n\n  const content = all(\n    ctx,\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  ctx.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !omit.opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (selfClosing && (schema.space === 'svg' || ctx.close)) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !ctx.tightClose ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {Context} ctx\n * @param {Properties} props\n * @returns {string}\n */\nfunction serializeAttributes(ctx, props) {\n  /** @type {Array.<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n  /** @type {string} */\n  let value\n  /** @type {string} */\n  let last\n\n  for (key in props) {\n    if (props[key] !== undefined && props[key] !== null) {\n      value = serializeAttribute(ctx, key, props[key])\n      if (value) values.push(value)\n    }\n  }\n\n  while (++index < values.length) {\n    last = ctx.tight ? values[index].charAt(values[index].length - 1) : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {Context} ctx\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(ctx, key, value) {\n  const info = find(ctx.schema, key)\n  let quote = ctx.quote\n  /** @type {string} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, ctx.entities, {\n      // Always encode without parse errors in non-HTML.\n      subset:\n        constants.name[ctx.schema.space === 'html' ? ctx.valid : 1][ctx.safe]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (FF, Sa, Ch), so I can’t\n  // test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  value =\n    typeof value === 'object' && 'length' in value\n      ? // `spaces` doesn’t accept a second argument, but it’s given here just to\n        // keep the code cleaner.\n        (info.commaSeparated ? commas : spaces)(value, {\n          padLeft: !ctx.tightLists\n        })\n      : String(value)\n\n  if (ctx.collapseEmpty && !value) return name\n\n  // Check unquoted value.\n  if (ctx.unquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, ctx.entities, {\n        subset: constants.unquoted[ctx.valid][ctx.safe],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (ctx.smart && ccount(value, quote) > ccount(value, ctx.alternative)) {\n      quote = ctx.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, ctx.entities, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[\n            ctx.schema.space === 'html' ? ctx.valid : 1\n          ][ctx.safe],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}