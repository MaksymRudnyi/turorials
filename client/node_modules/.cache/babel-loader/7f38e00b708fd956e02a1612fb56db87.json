{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"onClick\", \"toolbars\", \"editor\", \"mode\", \"preview\", \"container\", \"containerEditor\", \"editorProps\"];\nimport React from 'react';\nimport { defaultCommands } from '../../commands';\nimport \"./index.css\";\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ToolBar(props) {\n  var {\n    prefixCls = 'md-editor',\n    className,\n    toolbars = [],\n    editor,\n    mode,\n    preview,\n    container,\n    containerEditor,\n    editorProps = {}\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n  if (!toolbars || toolbars.length === 0) return null;\n\n  function handleClick(execute) {\n    if (execute && editor && editor) {\n      execute(editor.current);\n    }\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    className: prefixCls + \"-toolbar \" + (className || '') + \" \" + (mode ? prefixCls + \"-toolbar-mode\" : '')\n  }, htmlProps, {\n    children: [...toolbars].map((command, key) => {\n      var buttonProps = {\n        type: 'button'\n      };\n      var obj = typeof command === 'string' ? defaultCommands[command] : command;\n      if (!obj) return null;\n      buttonProps.children = obj.icon;\n\n      buttonProps.onClick = () => handleClick(obj.execute);\n\n      if (obj.button && typeof obj.button === 'object') {\n        var btn = obj.button;\n        Object.keys(btn).forEach(key => {\n          buttonProps[key] = btn[key];\n        });\n      } else if (typeof obj.button === 'function') {\n        return /*#__PURE__*/React.cloneElement(obj.button(obj, editorProps, {\n          preview,\n          container,\n          containerEditor,\n          editor,\n          editorProps\n        }), {\n          key\n        });\n      }\n\n      return /*#__PURE__*/_createElement(\"button\", _extends({}, buttonProps, {\n        key: key\n      }));\n    })\n  }));\n}","map":{"version":3,"sources":["../../../src/components/ToolBar/index.tsx"],"names":["prefixCls","toolbars","editorProps","htmlProps","execute","editor","className","mode","buttonProps","type","obj","defaultCommands","handleClick","btn","Object","key"],"mappings":";;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,eAAA,QAAA,gBAAA;AAEA,OAAA,aAAA;;;AAWA,eAAe,SAAA,OAAA,CAAA,KAAA,EAAuC;EACpD,IAAM;IACJA,SAAS,GADL,WAAA;IAAA,SAAA;IAIJC,QAAQ,GAJJ,EAAA;IAAA,MAAA;IAAA,IAAA;IAAA,OAAA;IAAA,SAAA;IAAA,eAAA;IAUJC,WAAW,GAAG;EAVV,IAAN,KAAA;EAAA,IAWKC,SAXL,GAAA,6BAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;EAaA,IAAI,CAAA,QAAA,IAAaF,QAAQ,CAARA,MAAAA,KAAjB,CAAA,EAAwC,OAAA,IAAA;;EACxC,SAAA,WAAA,CAAA,OAAA,EAAmD;IACjD,IAAIG,OAAO,IAAPA,MAAAA,IAAJ,MAAA,EAAiC;MAC/BA,OAAO,CAACC,MAAM,CAAdD,OAAO,CAAPA;IACD;EACF;;EACD,OAAA,aACE,IAAA,CAAA,KAAA,EAAA,QAAA,CAAA;IACE,SAAS,EAAKJ,SAAL,GAAA,WAAKA,IAAqBM,SAAS,IAAnC,EAAKN,IAAL,GAAKA,IAAwCO,IAAI,GAAMP,SAAN,GAAA,eAAA,GAAjD,EAAKA;EADhB,CAAA,EAAA,SAAA,EAAA;IAAA,QAAA,EAIG,CAAC,GAAD,QAAA,EAAA,GAAA,CAAkB,CAAA,OAAA,EAAA,GAAA,KAAkB;MACnC,IAAIQ,WAA0D,GAAG;QAC/DC,IAAI,EAAE;MADyD,CAAjE;MAGA,IAAMC,GAAG,GAAG,OAAA,OAAA,KAAA,QAAA,GAA8BC,eAAe,CAA7C,OAA6C,CAA7C,GAAZ,OAAA;MACA,IAAI,CAAJ,GAAA,EAAU,OAAA,IAAA;MACVH,WAAW,CAAXA,QAAAA,GAAuBE,GAAG,CAA1BF,IAAAA;;MACAA,WAAW,CAAXA,OAAAA,GAAsB,MAAMI,WAAW,CAACF,GAAG,CAA3CF,OAAuC,CAAvCA;;MACA,IAAIE,GAAG,CAAHA,MAAAA,IAAc,OAAOA,GAAG,CAAV,MAAA,KAAlB,QAAA,EAAkD;QAChD,IAAMG,GAAkD,GAAGH,GAAG,CAA9D,MAAA;QACCI,MAAM,CAANA,IAAAA,CAAD,GAACA,EAAD,OAACA,CAAsFC,GAAD,IAAS;UAC7FP,WAAW,CAAXA,GAAW,CAAXA,GAAmBK,GAAG,CAAtBL,GAAsB,CAAtBA;QADF,CAACM;MAFH,CAAA,MAKO,IAAI,OAAOJ,GAAG,CAAV,MAAA,KAAJ,UAAA,EAAsC;QAC3C,OAAA,aAAO,KAAK,CAAL,YAAA,CACL,GAAG,CAAH,MAAA,CAAA,GAAA,EAAA,WAAA,EAA6B;UAAA,OAAA;UAAA,SAAA;UAAA,eAAA;UAAA,MAAA;UAK3BR;QAL2B,CAA7B,CADK,EAQL;UAAEa;QAAF,CARK,CAAP;MAUD;;MACD,OAAA,aAAO,cAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA;QAAyB,GAAG,EAAEA;MAA9B,CAAA,CAAA,CAAP;IAzBD,CAAA;EAJH,CAAA,CAAA,CADF;AAkCD","sourcesContent":["import React from 'react';\nimport { ICommand, defaultCommands } from '../../commands';\nimport { IMarkdownEditor, ToolBarProps } from '../../';\nimport './index.less';\n\nexport interface IToolBarProps<T = keyof typeof defaultCommands | ICommand> extends ToolBarProps {\n  className?: string;\n  editorProps: IMarkdownEditor;\n  mode?: boolean;\n  prefixCls?: string;\n  toolbars?: T[];\n  onClick?: (type: string) => void;\n}\n\nexport default function ToolBar(props: IToolBarProps) {\n  const {\n    prefixCls = 'md-editor',\n    className,\n    onClick,\n    toolbars = [],\n    editor,\n    mode,\n    preview,\n    container,\n    containerEditor,\n    editorProps = {},\n    ...htmlProps\n  } = props;\n  if (!toolbars || toolbars.length === 0) return null;\n  function handleClick(execute: ICommand['execute']) {\n    if (execute && editor && editor) {\n      execute(editor.current!);\n    }\n  }\n  return (\n    <div\n      className={`${prefixCls}-toolbar ${className || ''} ${mode ? `${prefixCls}-toolbar-mode` : ''}`}\n      {...htmlProps}\n    >\n      {[...toolbars].map((command, key) => {\n        let buttonProps: React.ButtonHTMLAttributes<HTMLButtonElement> = {\n          type: 'button',\n        };\n        const obj = typeof command === 'string' ? defaultCommands[command] : command;\n        if (!obj) return null;\n        buttonProps.children = obj.icon;\n        buttonProps.onClick = () => handleClick(obj.execute);\n        if (obj.button && typeof obj.button === 'object') {\n          const btn: React.ButtonHTMLAttributes<HTMLButtonElement> = obj.button;\n          (Object.keys(btn) as (keyof React.ButtonHTMLAttributes<HTMLButtonElement>)[]).forEach((key) => {\n            buttonProps[key] = btn[key];\n          });\n        } else if (typeof obj.button === 'function') {\n          return React.cloneElement(\n            obj.button(obj, editorProps, {\n              preview,\n              container,\n              containerEditor,\n              editor,\n              editorProps,\n            }),\n            { key },\n          );\n        }\n        return <button {...buttonProps} key={key} />;\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}