{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport { splice } from 'micromark-util-chunked';\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\n\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n\n  let event;\n  /** @type {number|undefined} */\n\n  let lineIndex;\n  /** @type {number} */\n\n  let otherIndex;\n  /** @type {Event} */\n\n  let otherEvent;\n  /** @type {Event[]} */\n\n  let parameters;\n  /** @type {Event[]} */\n\n  let subevents;\n  /** @type {boolean|undefined} */\n\n  let more;\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n\n    event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (index && event[1].type === 'chunkFlow' && events[index - 1][1].type === 'listItemPrefix') {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'lineEndingBlank') {\n        otherIndex += 2;\n      }\n\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'content') {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break;\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    } // Enter.\n\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n\n        if (otherEvent[1].type === 'lineEnding' || otherEvent[1].type === 'lineEndingBlank') {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank';\n            }\n\n            otherEvent[1].type = 'lineEnding';\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        splice(events, lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  return !more;\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1];\n  const context = events[eventIndex][2];\n  let startPosition = eventIndex - 1;\n  /** @type {number[]} */\n\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {[number, number][]} */\n\n  const jumps = [];\n  /** @type {Record<string, number>} */\n\n  const gaps = {};\n  /** @type {Chunk[]} */\n\n  let stream;\n  /** @type {Token|undefined} */\n\n  let previous;\n  let index = -1;\n  /** @type {Token|undefined} */\n\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start]; // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {// Empty.\n    }\n\n    startPositions.push(startPosition);\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n\n      if (!current.next) {\n        stream.push(null);\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n\n      tokenizer.write(stream);\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    } // Unravel the next token.\n\n\n    previous = current;\n    current = current.next;\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n\n  current = token;\n\n  while (++index < childEvents.length) {\n    if ( // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start); // Help GC.\n\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  } // Help GC.\n\n\n  tokenizer.events = []; // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n\n  index = breaks.length;\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.unshift([start, start + slice.length - 1]);\n    splice(events, start, 2, slice);\n  }\n\n  index = -1;\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n\n  return gaps;\n}","map":{"version":3,"names":["splice","subtokenize","events","jumps","index","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","length","type","_tokenizer","_isInFirstContentOfListItem","contentType","Object","assign","subcontent","_container","undefined","end","start","slice","unshift","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","push","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","line","pop"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-util-subtokenize/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}