{"ast":null,"code":"import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { LRParser } from '@lezer/lr'; // This file was generated by lezer-generator. You probably shouldn't edit it.\n\nconst spec_Keyword = {\n  __proto__: null,\n  anyref: 34,\n  dataref: 34,\n  eqref: 34,\n  externref: 34,\n  i31ref: 34,\n  funcref: 34,\n  i8: 34,\n  i16: 34,\n  i32: 34,\n  i64: 34,\n  f32: 34,\n  f64: 34\n};\nconst parser = /*@__PURE__*/LRParser.deserialize({\n  version: 14,\n  states: \"!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h\",\n  stateData: \"!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O\",\n  goto: \"xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV\",\n  nodeNames: \"⚠ LineComment BlockComment Module ) ( App Identifier Type Keyword Number String\",\n  maxTerm: 17,\n  nodeProps: [[\"openedBy\", 4, \"(\"], [\"closedBy\", 5, \")\"], [\"group\", -6, 6, 7, 8, 9, 10, 11, \"Expression\"]],\n  skippedNodes: [0, 1, 2],\n  repeatNodeCount: 1,\n  tokenData: \"/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^\",\n  tokenizers: [0],\n  topRules: {\n    \"Module\": [0, 3]\n  },\n  specialized: [{\n    term: 9,\n    get: value => spec_Keyword[value] || -1\n  }],\n  tokenPrec: 0\n});\nconst wastLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      App: /*@__PURE__*/delimitedIndent({\n        closing: \")\",\n        align: false\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      App: foldInside,\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    }), /*@__PURE__*/styleTags({\n      Keyword: tags.keyword,\n      Type: tags.typeName,\n      Number: tags.number,\n      String: tags.string,\n      Identifier: tags.variableName,\n      LineComment: tags.lineComment,\n      BlockComment: tags.blockComment,\n      \"( )\": tags.paren\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \";;\",\n      block: {\n        open: \"(;\",\n        close: \";)\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", '\"']\n    }\n  }\n});\n\nfunction wast() {\n  return new LanguageSupport(wastLanguage);\n}\n\nexport { wast, wastLanguage };","map":{"version":3,"names":["LRLanguage","indentNodeProp","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","styleTags","tags","LRParser","spec_Keyword","__proto__","anyref","dataref","eqref","externref","i31ref","funcref","i8","i16","i32","i64","f32","f64","parser","deserialize","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","specialized","term","get","value","tokenPrec","wastLanguage","define","configure","props","add","App","closing","align","BlockComment","tree","from","to","Keyword","keyword","Type","typeName","Number","number","String","string","Identifier","variableName","LineComment","lineComment","blockComment","paren","languageData","commentTokens","line","block","open","close","closeBrackets","brackets","wast"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/lang-wast/dist/index.js"],"sourcesContent":["import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { LRParser } from '@lezer/lr';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Keyword = {__proto__:null,anyref:34, dataref:34, eqref:34, externref:34, i31ref:34, funcref:34, i8:34, i16:34, i32:34, i64:34, f32:34, f64:34};\nconst parser = /*@__PURE__*/LRParser.deserialize({\n  version: 14,\n  states: \"!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h\",\n  stateData: \"!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O\",\n  goto: \"xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV\",\n  nodeNames: \"⚠ LineComment BlockComment Module ) ( App Identifier Type Keyword Number String\",\n  maxTerm: 17,\n  nodeProps: [\n    [\"openedBy\", 4,\"(\"],\n    [\"closedBy\", 5,\")\"],\n    [\"group\", -6,6,7,8,9,10,11,\"Expression\"]\n  ],\n  skippedNodes: [0,1,2],\n  repeatNodeCount: 1,\n  tokenData: \"/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^\",\n  tokenizers: [0],\n  topRules: {\"Module\":[0,3]},\n  specialized: [{term: 9, get: value => spec_Keyword[value] || -1}],\n  tokenPrec: 0\n});\n\nconst wastLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                App: /*@__PURE__*/delimitedIndent({ closing: \")\", align: false })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                App: foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            }),\n            /*@__PURE__*/styleTags({\n                Keyword: tags.keyword,\n                Type: tags.typeName,\n                Number: tags.number,\n                String: tags.string,\n                Identifier: tags.variableName,\n                LineComment: tags.lineComment,\n                BlockComment: tags.blockComment,\n                \"( )\": tags.paren\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \";;\", block: { open: \"(;\", close: \";)\" } },\n        closeBrackets: { brackets: [\"(\", '\"'] }\n    }\n});\nfunction wast() {\n    return new LanguageSupport(wastLanguage);\n}\n\nexport { wast, wastLanguage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}