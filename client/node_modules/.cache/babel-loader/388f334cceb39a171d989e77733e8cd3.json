{"ast":null,"code":"/////////////////////////////////////////////////////////////////////////////\n// constants\nvar typeWords = [\"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\nvar keywordWords = [\"after\", \"begin\", \"catch\", \"case\", \"cond\", \"end\", \"fun\", \"if\", \"let\", \"of\", \"query\", \"receive\", \"try\", \"when\"];\nvar separatorRE = /[\\->,;]/;\nvar separatorWords = [\"->\", \";\", \",\"];\nvar operatorAtomWords = [\"and\", \"andalso\", \"band\", \"bnot\", \"bor\", \"bsl\", \"bsr\", \"bxor\", \"div\", \"not\", \"or\", \"orelse\", \"rem\", \"xor\"];\nvar operatorSymbolRE = /[\\+\\-\\*\\/<>=\\|:!]/;\nvar operatorSymbolWords = [\"=\", \"+\", \"-\", \"*\", \"/\", \">\", \">=\", \"<\", \"=<\", \"=:=\", \"==\", \"=/=\", \"/=\", \"||\", \"<-\", \"!\"];\nvar openParenRE = /[<\\(\\[\\{]/;\nvar openParenWords = [\"<<\", \"(\", \"[\", \"{\"];\nvar closeParenRE = /[>\\)\\]\\}]/;\nvar closeParenWords = [\"}\", \"]\", \")\", \">>\"];\nvar guardWords = [\"is_atom\", \"is_binary\", \"is_bitstring\", \"is_boolean\", \"is_float\", \"is_function\", \"is_integer\", \"is_list\", \"is_number\", \"is_pid\", \"is_port\", \"is_record\", \"is_reference\", \"is_tuple\", \"atom\", \"binary\", \"bitstring\", \"boolean\", \"function\", \"integer\", \"list\", \"number\", \"pid\", \"port\", \"record\", \"reference\", \"tuple\"];\nvar bifWords = [\"abs\", \"adler32\", \"adler32_combine\", \"alive\", \"apply\", \"atom_to_binary\", \"atom_to_list\", \"binary_to_atom\", \"binary_to_existing_atom\", \"binary_to_list\", \"binary_to_term\", \"bit_size\", \"bitstring_to_list\", \"byte_size\", \"check_process_code\", \"contact_binary\", \"crc32\", \"crc32_combine\", \"date\", \"decode_packet\", \"delete_module\", \"disconnect_node\", \"element\", \"erase\", \"exit\", \"float\", \"float_to_list\", \"garbage_collect\", \"get\", \"get_keys\", \"group_leader\", \"halt\", \"hd\", \"integer_to_list\", \"internal_bif\", \"iolist_size\", \"iolist_to_binary\", \"is_alive\", \"is_atom\", \"is_binary\", \"is_bitstring\", \"is_boolean\", \"is_float\", \"is_function\", \"is_integer\", \"is_list\", \"is_number\", \"is_pid\", \"is_port\", \"is_process_alive\", \"is_record\", \"is_reference\", \"is_tuple\", \"length\", \"link\", \"list_to_atom\", \"list_to_binary\", \"list_to_bitstring\", \"list_to_existing_atom\", \"list_to_float\", \"list_to_integer\", \"list_to_pid\", \"list_to_tuple\", \"load_module\", \"make_ref\", \"module_loaded\", \"monitor_node\", \"node\", \"node_link\", \"node_unlink\", \"nodes\", \"notalive\", \"now\", \"open_port\", \"pid_to_list\", \"port_close\", \"port_command\", \"port_connect\", \"port_control\", \"pre_loaded\", \"process_flag\", \"process_info\", \"processes\", \"purge_module\", \"put\", \"register\", \"registered\", \"round\", \"self\", \"setelement\", \"size\", \"spawn\", \"spawn_link\", \"spawn_monitor\", \"spawn_opt\", \"split_binary\", \"statistics\", \"term_to_binary\", \"time\", \"throw\", \"tl\", \"trunc\", \"tuple_size\", \"tuple_to_list\", \"unlink\", \"unregister\", \"whereis\"]; // upper case: [A-Z] [Ø-Þ] [À-Ö]\n// lower case: [a-z] [ß-ö] [ø-ÿ]\n\nvar anumRE = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\nvar escapesRE = /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/; /////////////////////////////////////////////////////////////////////////////\n// tokenizer\n\nfunction tokenizer(stream, state) {\n  // in multi-line string\n  if (state.in_string) {\n    state.in_string = !doubleQuote(stream);\n    return rval(state, stream, \"string\");\n  } // in multi-line atom\n\n\n  if (state.in_atom) {\n    state.in_atom = !singleQuote(stream);\n    return rval(state, stream, \"atom\");\n  } // whitespace\n\n\n  if (stream.eatSpace()) {\n    return rval(state, stream, \"whitespace\");\n  } // attributes and type specs\n\n\n  if (!peekToken(state) && stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n    if (is_member(stream.current(), typeWords)) {\n      return rval(state, stream, \"type\");\n    } else {\n      return rval(state, stream, \"attribute\");\n    }\n  }\n\n  var ch = stream.next(); // comment\n\n  if (ch == '%') {\n    stream.skipToEnd();\n    return rval(state, stream, \"comment\");\n  } // colon\n\n\n  if (ch == \":\") {\n    return rval(state, stream, \"colon\");\n  } // macro\n\n\n  if (ch == '?') {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state, stream, \"macro\");\n  } // record\n\n\n  if (ch == \"#\") {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state, stream, \"record\");\n  } // dollar escape\n\n\n  if (ch == \"$\") {\n    if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n      return rval(state, stream, \"error\");\n    }\n\n    return rval(state, stream, \"number\");\n  } // dot\n\n\n  if (ch == \".\") {\n    return rval(state, stream, \"dot\");\n  } // quoted atom\n\n\n  if (ch == '\\'') {\n    if (!(state.in_atom = !singleQuote(stream))) {\n      if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n        stream.match(/\\s*\\/\\s*[0-9]/, true);\n        return rval(state, stream, \"fun\"); // 'f'/0 style fun\n      }\n\n      if (stream.match(/\\s*\\(/, false) || stream.match(/\\s*:/, false)) {\n        return rval(state, stream, \"function\");\n      }\n    }\n\n    return rval(state, stream, \"atom\");\n  } // string\n\n\n  if (ch == '\"') {\n    state.in_string = !doubleQuote(stream);\n    return rval(state, stream, \"string\");\n  } // variable\n\n\n  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n    stream.eatWhile(anumRE);\n    return rval(state, stream, \"variable\");\n  } // atom/keyword/BIF/function\n\n\n  if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n    stream.eatWhile(anumRE);\n\n    if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n      stream.match(/\\s*\\/\\s*[0-9]/, true);\n      return rval(state, stream, \"fun\"); // f/0 style fun\n    }\n\n    var w = stream.current();\n\n    if (is_member(w, keywordWords)) {\n      return rval(state, stream, \"keyword\");\n    } else if (is_member(w, operatorAtomWords)) {\n      return rval(state, stream, \"operator\");\n    } else if (stream.match(/\\s*\\(/, false)) {\n      // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n      if (is_member(w, bifWords) && (peekToken(state).token != \":\" || peekToken(state, 2).token == \"erlang\")) {\n        return rval(state, stream, \"builtin\");\n      } else if (is_member(w, guardWords)) {\n        return rval(state, stream, \"guard\");\n      } else {\n        return rval(state, stream, \"function\");\n      }\n    } else if (lookahead(stream) == \":\") {\n      if (w == \"erlang\") {\n        return rval(state, stream, \"builtin\");\n      } else {\n        return rval(state, stream, \"function\");\n      }\n    } else if (is_member(w, [\"true\", \"false\"])) {\n      return rval(state, stream, \"boolean\");\n    } else {\n      return rval(state, stream, \"atom\");\n    }\n  } // number\n\n\n  var digitRE = /[0-9]/;\n  var radixRE = /[0-9a-zA-Z]/; // 36#zZ style int\n\n  if (digitRE.test(ch)) {\n    stream.eatWhile(digitRE);\n\n    if (stream.eat('#')) {\n      // 36#aZ  style integer\n      if (!stream.eatWhile(radixRE)) {\n        stream.backUp(1); //\"36#\" - syntax error\n      }\n    } else if (stream.eat('.')) {\n      // float\n      if (!stream.eatWhile(digitRE)) {\n        stream.backUp(1); // \"3.\" - probably end of function\n      } else {\n        if (stream.eat(/[eE]/)) {\n          // float with exponent\n          if (stream.eat(/[-+]/)) {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(2); // \"2e-\" - syntax error\n            }\n          } else {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(1); // \"2e\" - syntax error\n            }\n          }\n        }\n      }\n    }\n\n    return rval(state, stream, \"number\"); // normal integer\n  } // open parens\n\n\n  if (nongreedy(stream, openParenRE, openParenWords)) {\n    return rval(state, stream, \"open_paren\");\n  } // close parens\n\n\n  if (nongreedy(stream, closeParenRE, closeParenWords)) {\n    return rval(state, stream, \"close_paren\");\n  } // separators\n\n\n  if (greedy(stream, separatorRE, separatorWords)) {\n    return rval(state, stream, \"separator\");\n  } // operators\n\n\n  if (greedy(stream, operatorSymbolRE, operatorSymbolWords)) {\n    return rval(state, stream, \"operator\");\n  }\n\n  return rval(state, stream, null);\n} /////////////////////////////////////////////////////////////////////////////\n// utilities\n\n\nfunction nongreedy(stream, re, words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    stream.backUp(1);\n\n    while (re.test(stream.peek())) {\n      stream.next();\n\n      if (is_member(stream.current(), words)) {\n        return true;\n      }\n    }\n\n    stream.backUp(stream.current().length - 1);\n  }\n\n  return false;\n}\n\nfunction greedy(stream, re, words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    while (re.test(stream.peek())) {\n      stream.next();\n    }\n\n    while (0 < stream.current().length) {\n      if (is_member(stream.current(), words)) {\n        return true;\n      } else {\n        stream.backUp(1);\n      }\n    }\n\n    stream.next();\n  }\n\n  return false;\n}\n\nfunction doubleQuote(stream) {\n  return quote(stream, '\"', '\\\\');\n}\n\nfunction singleQuote(stream) {\n  return quote(stream, '\\'', '\\\\');\n}\n\nfunction quote(stream, quoteChar, escapeChar) {\n  while (!stream.eol()) {\n    var ch = stream.next();\n\n    if (ch == quoteChar) {\n      return true;\n    } else if (ch == escapeChar) {\n      stream.next();\n    }\n  }\n\n  return false;\n}\n\nfunction lookahead(stream) {\n  var m = stream.match(/^\\s*([^\\s%])/, false);\n  return m ? m[1] : \"\";\n}\n\nfunction is_member(element, list) {\n  return -1 < list.indexOf(element);\n}\n\nfunction rval(state, stream, type) {\n  // parse stack\n  pushToken(state, realToken(type, stream)); // map erlang token type to CodeMirror style class\n  //     erlang             -> CodeMirror tag\n\n  switch (type) {\n    case \"atom\":\n      return \"atom\";\n\n    case \"attribute\":\n      return \"attribute\";\n\n    case \"boolean\":\n      return \"atom\";\n\n    case \"builtin\":\n      return \"builtin\";\n\n    case \"close_paren\":\n      return null;\n\n    case \"colon\":\n      return null;\n\n    case \"comment\":\n      return \"comment\";\n\n    case \"dot\":\n      return null;\n\n    case \"error\":\n      return \"error\";\n\n    case \"fun\":\n      return \"meta\";\n\n    case \"function\":\n      return \"tag\";\n\n    case \"guard\":\n      return \"property\";\n\n    case \"keyword\":\n      return \"keyword\";\n\n    case \"macro\":\n      return \"macroName\";\n\n    case \"number\":\n      return \"number\";\n\n    case \"open_paren\":\n      return null;\n\n    case \"operator\":\n      return \"operator\";\n\n    case \"record\":\n      return \"bracket\";\n\n    case \"separator\":\n      return null;\n\n    case \"string\":\n      return \"string\";\n\n    case \"type\":\n      return \"def\";\n\n    case \"variable\":\n      return \"variable\";\n\n    default:\n      return null;\n  }\n}\n\nfunction aToken(tok, col, ind, typ) {\n  return {\n    token: tok,\n    column: col,\n    indent: ind,\n    type: typ\n  };\n}\n\nfunction realToken(type, stream) {\n  return aToken(stream.current(), stream.column(), stream.indentation(), type);\n}\n\nfunction fakeToken(type) {\n  return aToken(type, 0, 0, type);\n}\n\nfunction peekToken(state, depth) {\n  var len = state.tokenStack.length;\n  var dep = depth ? depth : 1;\n\n  if (len < dep) {\n    return false;\n  } else {\n    return state.tokenStack[len - dep];\n  }\n}\n\nfunction pushToken(state, token) {\n  if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n    state.tokenStack = maybe_drop_pre(state.tokenStack, token);\n    state.tokenStack = maybe_drop_post(state.tokenStack);\n  }\n}\n\nfunction maybe_drop_pre(s, token) {\n  var last = s.length - 1;\n\n  if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n    s.pop();\n  } else if (0 < last && s[last].type === \"group\") {\n    s.pop();\n    s.push(token);\n  } else {\n    s.push(token);\n  }\n\n  return s;\n}\n\nfunction maybe_drop_post(s) {\n  if (!s.length) return s;\n  var last = s.length - 1;\n\n  if (s[last].type === \"dot\") {\n    return [];\n  }\n\n  if (last > 1 && s[last].type === \"fun\" && s[last - 1].token === \"fun\") {\n    return s.slice(0, last - 1);\n  }\n\n  switch (s[last].token) {\n    case \"}\":\n      return d(s, {\n        g: [\"{\"]\n      });\n\n    case \"]\":\n      return d(s, {\n        i: [\"[\"]\n      });\n\n    case \")\":\n      return d(s, {\n        i: [\"(\"]\n      });\n\n    case \">>\":\n      return d(s, {\n        i: [\"<<\"]\n      });\n\n    case \"end\":\n      return d(s, {\n        i: [\"begin\", \"case\", \"fun\", \"if\", \"receive\", \"try\"]\n      });\n\n    case \",\":\n      return d(s, {\n        e: [\"begin\", \"try\", \"when\", \"->\", \",\", \"(\", \"[\", \"{\", \"<<\"]\n      });\n\n    case \"->\":\n      return d(s, {\n        r: [\"when\"],\n        m: [\"try\", \"if\", \"case\", \"receive\"]\n      });\n\n    case \";\":\n      return d(s, {\n        E: [\"case\", \"fun\", \"if\", \"receive\", \"try\", \"when\"]\n      });\n\n    case \"catch\":\n      return d(s, {\n        e: [\"try\"]\n      });\n\n    case \"of\":\n      return d(s, {\n        e: [\"case\"]\n      });\n\n    case \"after\":\n      return d(s, {\n        e: [\"receive\", \"try\"]\n      });\n\n    default:\n      return s;\n  }\n}\n\nfunction d(stack, tt) {\n  // stack is a stack of Token objects.\n  // tt is an object; {type:tokens}\n  // type is a char, tokens is a list of token strings.\n  // The function returns (possibly truncated) stack.\n  // It will descend the stack, looking for a Token such that Token.token\n  //  is a member of tokens. If it does not find that, it will normally (but\n  //  see \"E\" below) return stack. If it does find a match, it will remove\n  //  all the Tokens between the top and the matched Token.\n  // If type is \"m\", that is all it does.\n  // If type is \"i\", it will also remove the matched Token and the top Token.\n  // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n  // If type is \"r\", it will remove the matched Token, but not the top Token.\n  // If type is \"e\", it will keep the matched Token but not the top Token.\n  // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n  //  in which case it will return an empty stack.\n  for (var type in tt) {\n    var len = stack.length - 1;\n    var tokens = tt[type];\n\n    for (var i = len - 1; -1 < i; i--) {\n      if (is_member(stack[i].token, tokens)) {\n        var ss = stack.slice(0, i);\n\n        switch (type) {\n          case \"m\":\n            return ss.concat(stack[i]).concat(stack[len]);\n\n          case \"r\":\n            return ss.concat(stack[len]);\n\n          case \"i\":\n            return ss;\n\n          case \"g\":\n            return ss.concat(fakeToken(\"group\"));\n\n          case \"E\":\n            return ss.concat(stack[i]);\n\n          case \"e\":\n            return ss.concat(stack[i]);\n        }\n      }\n    }\n  }\n\n  return type == \"E\" ? [] : stack;\n} /////////////////////////////////////////////////////////////////////////////\n// indenter\n\n\nfunction indenter(state, textAfter, cx) {\n  var t;\n  var wordAfter = wordafter(textAfter);\n  var currT = peekToken(state, 1);\n  var prevT = peekToken(state, 2);\n\n  if (state.in_string || state.in_atom) {\n    return null;\n  } else if (!prevT) {\n    return 0;\n  } else if (currT.token == \"when\") {\n    return currT.column + cx.unit;\n  } else if (wordAfter === \"when\" && prevT.type === \"function\") {\n    return prevT.indent + cx.unit;\n  } else if (wordAfter === \"(\" && currT.token === \"fun\") {\n    return currT.column + 3;\n  } else if (wordAfter === \"catch\" && (t = getToken(state, [\"try\"]))) {\n    return t.column;\n  } else if (is_member(wordAfter, [\"end\", \"after\", \"of\"])) {\n    t = getToken(state, [\"begin\", \"case\", \"fun\", \"if\", \"receive\", \"try\"]);\n    return t ? t.column : null;\n  } else if (is_member(wordAfter, closeParenWords)) {\n    t = getToken(state, openParenWords);\n    return t ? t.column : null;\n  } else if (is_member(currT.token, [\",\", \"|\", \"||\"]) || is_member(wordAfter, [\",\", \"|\", \"||\"])) {\n    t = postcommaToken(state);\n    return t ? t.column + t.token.length : cx.unit;\n  } else if (currT.token == \"->\") {\n    if (is_member(prevT.token, [\"receive\", \"case\", \"if\", \"try\"])) {\n      return prevT.column + cx.unit + cx.unit;\n    } else {\n      return prevT.column + cx.unit;\n    }\n  } else if (is_member(currT.token, openParenWords)) {\n    return currT.column + currT.token.length;\n  } else {\n    t = defaultToken(state);\n    return truthy(t) ? t.column + cx.unit : 0;\n  }\n}\n\nfunction wordafter(str) {\n  var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n  return truthy(m) && m.index === 0 ? m[0] : \"\";\n}\n\nfunction postcommaToken(state) {\n  var objs = state.tokenStack.slice(0, -1);\n  var i = getTokenIndex(objs, \"type\", [\"open_paren\"]);\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction defaultToken(state) {\n  var objs = state.tokenStack;\n  var stop = getTokenIndex(objs, \"type\", [\"open_paren\", \"separator\", \"keyword\"]);\n  var oper = getTokenIndex(objs, \"type\", [\"operator\"]);\n\n  if (truthy(stop) && truthy(oper) && stop < oper) {\n    return objs[stop + 1];\n  } else if (truthy(stop)) {\n    return objs[stop];\n  } else {\n    return false;\n  }\n}\n\nfunction getToken(state, tokens) {\n  var objs = state.tokenStack;\n  var i = getTokenIndex(objs, \"token\", tokens);\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction getTokenIndex(objs, propname, propvals) {\n  for (var i = objs.length - 1; -1 < i; i--) {\n    if (is_member(objs[i][propname], propvals)) {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction truthy(x) {\n  return x !== false && x != null;\n} /////////////////////////////////////////////////////////////////////////////\n// this object defines the mode\n\n\nexport const erlang = {\n  startState() {\n    return {\n      tokenStack: [],\n      in_string: false,\n      in_atom: false\n    };\n  },\n\n  token: tokenizer,\n  indent: indenter,\n  languageData: {\n    commentTokens: {\n      line: \"%\"\n    }\n  }\n};","map":{"version":3,"names":["typeWords","keywordWords","separatorRE","separatorWords","operatorAtomWords","operatorSymbolRE","operatorSymbolWords","openParenRE","openParenWords","closeParenRE","closeParenWords","guardWords","bifWords","anumRE","escapesRE","tokenizer","stream","state","in_string","doubleQuote","rval","in_atom","singleQuote","eatSpace","peekToken","match","is_member","current","ch","next","skipToEnd","eatWhile","test","w","token","lookahead","digitRE","radixRE","eat","backUp","nongreedy","greedy","re","words","length","peek","quote","quoteChar","escapeChar","eol","m","element","list","indexOf","type","pushToken","realToken","aToken","tok","col","ind","typ","column","indent","indentation","fakeToken","depth","len","tokenStack","dep","maybe_drop_pre","maybe_drop_post","s","last","pop","push","slice","d","g","i","e","r","E","stack","tt","tokens","ss","concat","indenter","textAfter","cx","t","wordAfter","wordafter","currT","prevT","unit","getToken","postcommaToken","defaultToken","truthy","str","index","objs","getTokenIndex","stop","oper","propname","propvals","x","erlang","startState","languageData","commentTokens","line"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/erlang.js"],"sourcesContent":["/////////////////////////////////////////////////////////////////////////////\n// constants\n\nvar typeWords = [\n  \"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n\nvar keywordWords = [\n  \"after\",\"begin\",\"catch\",\"case\",\"cond\",\"end\",\"fun\",\"if\",\n  \"let\",\"of\",\"query\",\"receive\",\"try\",\"when\"];\n\nvar separatorRE    = /[\\->,;]/;\nvar separatorWords = [\n  \"->\",\";\",\",\"];\n\nvar operatorAtomWords = [\n  \"and\",\"andalso\",\"band\",\"bnot\",\"bor\",\"bsl\",\"bsr\",\"bxor\",\n  \"div\",\"not\",\"or\",\"orelse\",\"rem\",\"xor\"];\n\nvar operatorSymbolRE    = /[\\+\\-\\*\\/<>=\\|:!]/;\nvar operatorSymbolWords = [\n  \"=\",\"+\",\"-\",\"*\",\"/\",\">\",\">=\",\"<\",\"=<\",\"=:=\",\"==\",\"=/=\",\"/=\",\"||\",\"<-\",\"!\"];\n\nvar openParenRE    = /[<\\(\\[\\{]/;\nvar openParenWords = [\n  \"<<\",\"(\",\"[\",\"{\"];\n\nvar closeParenRE    = /[>\\)\\]\\}]/;\nvar closeParenWords = [\n  \"}\",\"]\",\")\",\">>\"];\n\nvar guardWords = [\n  \"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\"is_float\",\n  \"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"atom\",\"binary\",\"bitstring\",\"boolean\",\"function\",\"integer\",\"list\",\n  \"number\",\"pid\",\"port\",\"record\",\"reference\",\"tuple\"];\n\nvar bifWords = [\n  \"abs\",\"adler32\",\"adler32_combine\",\"alive\",\"apply\",\"atom_to_binary\",\n  \"atom_to_list\",\"binary_to_atom\",\"binary_to_existing_atom\",\n  \"binary_to_list\",\"binary_to_term\",\"bit_size\",\"bitstring_to_list\",\n  \"byte_size\",\"check_process_code\",\"contact_binary\",\"crc32\",\n  \"crc32_combine\",\"date\",\"decode_packet\",\"delete_module\",\n  \"disconnect_node\",\"element\",\"erase\",\"exit\",\"float\",\"float_to_list\",\n  \"garbage_collect\",\"get\",\"get_keys\",\"group_leader\",\"halt\",\"hd\",\n  \"integer_to_list\",\"internal_bif\",\"iolist_size\",\"iolist_to_binary\",\n  \"is_alive\",\"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\n  \"is_float\",\"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n  \"is_port\",\"is_process_alive\",\"is_record\",\"is_reference\",\"is_tuple\",\n  \"length\",\"link\",\"list_to_atom\",\"list_to_binary\",\"list_to_bitstring\",\n  \"list_to_existing_atom\",\"list_to_float\",\"list_to_integer\",\n  \"list_to_pid\",\"list_to_tuple\",\"load_module\",\"make_ref\",\"module_loaded\",\n  \"monitor_node\",\"node\",\"node_link\",\"node_unlink\",\"nodes\",\"notalive\",\n  \"now\",\"open_port\",\"pid_to_list\",\"port_close\",\"port_command\",\n  \"port_connect\",\"port_control\",\"pre_loaded\",\"process_flag\",\n  \"process_info\",\"processes\",\"purge_module\",\"put\",\"register\",\n  \"registered\",\"round\",\"self\",\"setelement\",\"size\",\"spawn\",\"spawn_link\",\n  \"spawn_monitor\",\"spawn_opt\",\"split_binary\",\"statistics\",\n  \"term_to_binary\",\"time\",\"throw\",\"tl\",\"trunc\",\"tuple_size\",\n  \"tuple_to_list\",\"unlink\",\"unregister\",\"whereis\"];\n\n// upper case: [A-Z] [Ø-Þ] [À-Ö]\n// lower case: [a-z] [ß-ö] [ø-ÿ]\nvar anumRE       = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\nvar escapesRE    =\n    /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\n\n/////////////////////////////////////////////////////////////////////////////\n// tokenizer\n\nfunction tokenizer(stream,state) {\n  // in multi-line string\n  if (state.in_string) {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // in multi-line atom\n  if (state.in_atom) {\n    state.in_atom = (!singleQuote(stream));\n    return rval(state,stream,\"atom\");\n  }\n\n  // whitespace\n  if (stream.eatSpace()) {\n    return rval(state,stream,\"whitespace\");\n  }\n\n  // attributes and type specs\n  if (!peekToken(state) &&\n      stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n    if (is_member(stream.current(),typeWords)) {\n      return rval(state,stream,\"type\");\n    }else{\n      return rval(state,stream,\"attribute\");\n    }\n  }\n\n  var ch = stream.next();\n\n  // comment\n  if (ch == '%') {\n    stream.skipToEnd();\n    return rval(state,stream,\"comment\");\n  }\n\n  // colon\n  if (ch == \":\") {\n    return rval(state,stream,\"colon\");\n  }\n\n  // macro\n  if (ch == '?') {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"macro\");\n  }\n\n  // record\n  if (ch == \"#\") {\n    stream.eatSpace();\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"record\");\n  }\n\n  // dollar escape\n  if (ch == \"$\") {\n    if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n      return rval(state,stream,\"error\");\n    }\n    return rval(state,stream,\"number\");\n  }\n\n  // dot\n  if (ch == \".\") {\n    return rval(state,stream,\"dot\");\n  }\n\n  // quoted atom\n  if (ch == '\\'') {\n    if (!(state.in_atom = (!singleQuote(stream)))) {\n      if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n        stream.match(/\\s*\\/\\s*[0-9]/,true);\n        return rval(state,stream,\"fun\");      // 'f'/0 style fun\n      }\n      if (stream.match(/\\s*\\(/,false) || stream.match(/\\s*:/,false)) {\n        return rval(state,stream,\"function\");\n      }\n    }\n    return rval(state,stream,\"atom\");\n  }\n\n  // string\n  if (ch == '\"') {\n    state.in_string = (!doubleQuote(stream));\n    return rval(state,stream,\"string\");\n  }\n\n  // variable\n  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n    stream.eatWhile(anumRE);\n    return rval(state,stream,\"variable\");\n  }\n\n  // atom/keyword/BIF/function\n  if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n    stream.eatWhile(anumRE);\n\n    if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n      stream.match(/\\s*\\/\\s*[0-9]/,true);\n      return rval(state,stream,\"fun\");      // f/0 style fun\n    }\n\n    var w = stream.current();\n\n    if (is_member(w,keywordWords)) {\n      return rval(state,stream,\"keyword\");\n    }else if (is_member(w,operatorAtomWords)) {\n      return rval(state,stream,\"operator\");\n    }else if (stream.match(/\\s*\\(/,false)) {\n      // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n      if (is_member(w,bifWords) &&\n          ((peekToken(state).token != \":\") ||\n           (peekToken(state,2).token == \"erlang\"))) {\n        return rval(state,stream,\"builtin\");\n      }else if (is_member(w,guardWords)) {\n        return rval(state,stream,\"guard\");\n      }else{\n        return rval(state,stream,\"function\");\n      }\n    }else if (lookahead(stream) == \":\") {\n      if (w == \"erlang\") {\n        return rval(state,stream,\"builtin\");\n      } else {\n        return rval(state,stream,\"function\");\n      }\n    }else if (is_member(w,[\"true\",\"false\"])) {\n      return rval(state,stream,\"boolean\");\n    }else{\n      return rval(state,stream,\"atom\");\n    }\n  }\n\n  // number\n  var digitRE      = /[0-9]/;\n  var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int\n  if (digitRE.test(ch)) {\n    stream.eatWhile(digitRE);\n    if (stream.eat('#')) {                // 36#aZ  style integer\n      if (!stream.eatWhile(radixRE)) {\n        stream.backUp(1);                 //\"36#\" - syntax error\n      }\n    } else if (stream.eat('.')) {       // float\n      if (!stream.eatWhile(digitRE)) {\n        stream.backUp(1);        // \"3.\" - probably end of function\n      } else {\n        if (stream.eat(/[eE]/)) {        // float with exponent\n          if (stream.eat(/[-+]/)) {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(2);            // \"2e-\" - syntax error\n            }\n          } else {\n            if (!stream.eatWhile(digitRE)) {\n              stream.backUp(1);            // \"2e\" - syntax error\n            }\n          }\n        }\n      }\n    }\n    return rval(state,stream,\"number\");   // normal integer\n  }\n\n  // open parens\n  if (nongreedy(stream,openParenRE,openParenWords)) {\n    return rval(state,stream,\"open_paren\");\n  }\n\n  // close parens\n  if (nongreedy(stream,closeParenRE,closeParenWords)) {\n    return rval(state,stream,\"close_paren\");\n  }\n\n  // separators\n  if (greedy(stream,separatorRE,separatorWords)) {\n    return rval(state,stream,\"separator\");\n  }\n\n  // operators\n  if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {\n    return rval(state,stream,\"operator\");\n  }\n\n  return rval(state,stream,null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// utilities\nfunction nongreedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    stream.backUp(1);\n    while (re.test(stream.peek())) {\n      stream.next();\n      if (is_member(stream.current(),words)) {\n        return true;\n      }\n    }\n    stream.backUp(stream.current().length-1);\n  }\n  return false;\n}\n\nfunction greedy(stream,re,words) {\n  if (stream.current().length == 1 && re.test(stream.current())) {\n    while (re.test(stream.peek())) {\n      stream.next();\n    }\n    while (0 < stream.current().length) {\n      if (is_member(stream.current(),words)) {\n        return true;\n      }else{\n        stream.backUp(1);\n      }\n    }\n    stream.next();\n  }\n  return false;\n}\n\nfunction doubleQuote(stream) {\n  return quote(stream, '\"', '\\\\');\n}\n\nfunction singleQuote(stream) {\n  return quote(stream,'\\'','\\\\');\n}\n\nfunction quote(stream,quoteChar,escapeChar) {\n  while (!stream.eol()) {\n    var ch = stream.next();\n    if (ch == quoteChar) {\n      return true;\n    }else if (ch == escapeChar) {\n      stream.next();\n    }\n  }\n  return false;\n}\n\nfunction lookahead(stream) {\n  var m = stream.match(/^\\s*([^\\s%])/, false)\n  return m ? m[1] : \"\";\n}\n\nfunction is_member(element,list) {\n  return (-1 < list.indexOf(element));\n}\n\nfunction rval(state,stream,type) {\n\n  // parse stack\n  pushToken(state,realToken(type,stream));\n\n  // map erlang token type to CodeMirror style class\n  //     erlang             -> CodeMirror tag\n  switch (type) {\n  case \"atom\":        return \"atom\";\n  case \"attribute\":   return \"attribute\";\n  case \"boolean\":     return \"atom\";\n  case \"builtin\":     return \"builtin\";\n  case \"close_paren\": return null;\n  case \"colon\":       return null;\n  case \"comment\":     return \"comment\";\n  case \"dot\":         return null;\n  case \"error\":       return \"error\";\n  case \"fun\":         return \"meta\";\n  case \"function\":    return \"tag\";\n  case \"guard\":       return \"property\";\n  case \"keyword\":     return \"keyword\";\n  case \"macro\":       return \"macroName\";\n  case \"number\":      return \"number\";\n  case \"open_paren\":  return null;\n  case \"operator\":    return \"operator\";\n  case \"record\":      return \"bracket\";\n  case \"separator\":   return null;\n  case \"string\":      return \"string\";\n  case \"type\":        return \"def\";\n  case \"variable\":    return \"variable\";\n  default:            return null;\n  }\n}\n\nfunction aToken(tok,col,ind,typ) {\n  return {token:  tok,\n          column: col,\n          indent: ind,\n          type:   typ};\n}\n\nfunction realToken(type,stream) {\n  return aToken(stream.current(),\n                stream.column(),\n                stream.indentation(),\n                type);\n}\n\nfunction fakeToken(type) {\n  return aToken(type,0,0,type);\n}\n\nfunction peekToken(state,depth) {\n  var len = state.tokenStack.length;\n  var dep = (depth ? depth : 1);\n\n  if (len < dep) {\n    return false;\n  }else{\n    return state.tokenStack[len-dep];\n  }\n}\n\nfunction pushToken(state,token) {\n\n  if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n    state.tokenStack = maybe_drop_pre(state.tokenStack,token);\n    state.tokenStack = maybe_drop_post(state.tokenStack);\n  }\n}\n\nfunction maybe_drop_pre(s,token) {\n  var last = s.length-1;\n\n  if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n    s.pop();\n  }else if (0 < last && s[last].type === \"group\") {\n    s.pop();\n    s.push(token);\n  }else{\n    s.push(token);\n  }\n  return s;\n}\n\nfunction maybe_drop_post(s) {\n  if (!s.length) return s\n  var last = s.length-1;\n\n  if (s[last].type === \"dot\") {\n    return [];\n  }\n  if (last > 1 && s[last].type === \"fun\" && s[last-1].token === \"fun\") {\n    return s.slice(0,last-1);\n  }\n  switch (s[last].token) {\n  case \"}\":    return d(s,{g:[\"{\"]});\n  case \"]\":    return d(s,{i:[\"[\"]});\n  case \")\":    return d(s,{i:[\"(\"]});\n  case \">>\":   return d(s,{i:[\"<<\"]});\n  case \"end\":  return d(s,{i:[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]});\n  case \",\":    return d(s,{e:[\"begin\",\"try\",\"when\",\"->\",\n                              \",\",\"(\",\"[\",\"{\",\"<<\"]});\n  case \"->\":   return d(s,{r:[\"when\"],\n                           m:[\"try\",\"if\",\"case\",\"receive\"]});\n  case \";\":    return d(s,{E:[\"case\",\"fun\",\"if\",\"receive\",\"try\",\"when\"]});\n  case \"catch\":return d(s,{e:[\"try\"]});\n  case \"of\":   return d(s,{e:[\"case\"]});\n  case \"after\":return d(s,{e:[\"receive\",\"try\"]});\n  default:     return s;\n  }\n}\n\nfunction d(stack,tt) {\n  // stack is a stack of Token objects.\n  // tt is an object; {type:tokens}\n  // type is a char, tokens is a list of token strings.\n  // The function returns (possibly truncated) stack.\n  // It will descend the stack, looking for a Token such that Token.token\n  //  is a member of tokens. If it does not find that, it will normally (but\n  //  see \"E\" below) return stack. If it does find a match, it will remove\n  //  all the Tokens between the top and the matched Token.\n  // If type is \"m\", that is all it does.\n  // If type is \"i\", it will also remove the matched Token and the top Token.\n  // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n  // If type is \"r\", it will remove the matched Token, but not the top Token.\n  // If type is \"e\", it will keep the matched Token but not the top Token.\n  // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n  //  in which case it will return an empty stack.\n\n  for (var type in tt) {\n    var len = stack.length-1;\n    var tokens = tt[type];\n    for (var i = len-1; -1 < i ; i--) {\n      if (is_member(stack[i].token,tokens)) {\n        var ss = stack.slice(0,i);\n        switch (type) {\n        case \"m\": return ss.concat(stack[i]).concat(stack[len]);\n        case \"r\": return ss.concat(stack[len]);\n        case \"i\": return ss;\n        case \"g\": return ss.concat(fakeToken(\"group\"));\n        case \"E\": return ss.concat(stack[i]);\n        case \"e\": return ss.concat(stack[i]);\n        }\n      }\n    }\n  }\n  return (type == \"E\" ? [] : stack);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// indenter\n\nfunction indenter(state, textAfter, cx) {\n  var t;\n  var wordAfter = wordafter(textAfter);\n  var currT = peekToken(state,1);\n  var prevT = peekToken(state,2);\n\n  if (state.in_string || state.in_atom) {\n    return null;\n  }else if (!prevT) {\n    return 0;\n  }else if (currT.token == \"when\") {\n    return currT.column + cx.unit;\n  }else if (wordAfter === \"when\" && prevT.type === \"function\") {\n    return prevT.indent+cx.unit;\n  }else if (wordAfter === \"(\" && currT.token === \"fun\") {\n    return  currT.column+3;\n  }else if (wordAfter === \"catch\" && (t = getToken(state,[\"try\"]))) {\n    return t.column;\n  }else if (is_member(wordAfter,[\"end\",\"after\",\"of\"])) {\n    t = getToken(state,[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]);\n    return t ? t.column : null;\n  }else if (is_member(wordAfter,closeParenWords)) {\n    t = getToken(state,openParenWords);\n    return t ? t.column : null;\n  }else if (is_member(currT.token,[\",\",\"|\",\"||\"]) ||\n            is_member(wordAfter,[\",\",\"|\",\"||\"])) {\n    t = postcommaToken(state);\n    return t ? t.column+t.token.length : cx.unit;\n  }else if (currT.token == \"->\") {\n    if (is_member(prevT.token, [\"receive\",\"case\",\"if\",\"try\"])) {\n      return prevT.column+cx.unit+cx.unit;\n    }else{\n      return prevT.column+cx.unit;\n    }\n  }else if (is_member(currT.token,openParenWords)) {\n    return currT.column+currT.token.length;\n  }else{\n    t = defaultToken(state);\n    return truthy(t) ? t.column+cx.unit : 0;\n  }\n}\n\nfunction wordafter(str) {\n  var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n\n  return truthy(m) && (m.index === 0) ? m[0] : \"\";\n}\n\nfunction postcommaToken(state) {\n  var objs = state.tokenStack.slice(0,-1);\n  var i = getTokenIndex(objs,\"type\",[\"open_paren\"]);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction defaultToken(state) {\n  var objs = state.tokenStack;\n  var stop = getTokenIndex(objs,\"type\",[\"open_paren\",\"separator\",\"keyword\"]);\n  var oper = getTokenIndex(objs,\"type\",[\"operator\"]);\n\n  if (truthy(stop) && truthy(oper) && stop < oper) {\n    return objs[stop+1];\n  } else if (truthy(stop)) {\n    return objs[stop];\n  } else {\n    return false;\n  }\n}\n\nfunction getToken(state,tokens) {\n  var objs = state.tokenStack;\n  var i = getTokenIndex(objs,\"token\",tokens);\n\n  return truthy(objs[i]) ? objs[i] : false;\n}\n\nfunction getTokenIndex(objs,propname,propvals) {\n\n  for (var i = objs.length-1; -1 < i ; i--) {\n    if (is_member(objs[i][propname],propvals)) {\n      return i;\n    }\n  }\n  return false;\n}\n\nfunction truthy(x) {\n  return (x !== false) && (x != null);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// this object defines the mode\n\nexport const erlang = {\n  startState() {\n    return {tokenStack: [],\n            in_string:  false,\n            in_atom:    false};\n  },\n\n  token: tokenizer,\n\n  indent: indenter,\n\n  languageData: {\n    commentTokens: {line: \"%\"}\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}