{"ast":null,"code":"// @ts-nocheck\nimport refractorMarkupTemplating from './markup-templating.js';\nphp.displayName = 'php';\nphp.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;\n\n  (function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [{\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'boolean'\n    }, {\n      pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n      greedy: true,\n      lookbehind: true\n    }, {\n      pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n      greedy: true,\n      lookbehind: true\n    }, /\\b(?:null)\\b/i, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/];\n    var number = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [{\n        pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n        alias: 'type-casting',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n        alias: 'type-declaration',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        // yield from\n        pattern: /(\\byield\\s+)from\\b/i,\n        lookbehind: true\n      }, // `class` is always a keyword unlike other keywords\n      /\\bclass\\b/i, {\n        // https://www.php.net/manual/en/reserved.keywords.php\n        //\n        // keywords cannot be preceded by \"->\"\n        // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n        pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n        lookbehind: true\n      }],\n      'argument-name': {\n        pattern: /([(,]\\s*)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-declaration'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n        alias: ['class-name-fully-qualified', 'static-context'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-hint'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: ['class-name-fully-qualified', 'return-type'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    };\n    var string_interpolation = {\n      pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    };\n    var string = [{\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      alias: 'nowdoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    }, {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      alias: 'heredoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: string_interpolation\n      }\n    }, {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      alias: 'backtick-quoted-string',\n      greedy: true\n    }, {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      alias: 'single-quoted-string',\n      greedy: true\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      alias: 'double-quoted-string',\n      greedy: true,\n      inside: {\n        interpolation: string_interpolation\n      }\n    }];\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [{\n                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: 'class-name',\n                greedy: true,\n                lookbehind: true\n              }, {\n                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                alias: ['class-name', 'class-name-fully-qualified'],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\\\/\n                }\n              }],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","php","displayName","aliases","Prism","register","comment","constant","pattern","alias","greedy","lookbehind","number","operator","punctuation","languages","delimiter","variable","package","inside","keyword","function","property","string_interpolation","string","interpolation","insertBefore","attribute","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/php.js"],"sourcesContent":["// @ts-nocheck\nimport refractorMarkupTemplating from './markup-templating.js'\nphp.displayName = 'php'\nphp.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s*)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}