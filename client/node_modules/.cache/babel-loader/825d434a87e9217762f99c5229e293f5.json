{"ast":null,"code":"// @ts-nocheck\npure.displayName = 'pure';\npure.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function pure(Prism) {\n  ;\n\n  (function (Prism) {\n    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n    Prism.languages.pure = {\n      comment: [{\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true\n      }, {\n        pattern: /(^|[^\\\\:])\\/\\/.*/,\n        lookbehind: true\n      }, /#!.+/],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword: /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      function: /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      // eslint-disable-next-line no-misleading-character-class\n      operator: /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    };\n    var inlineLanguages = ['c', {\n      lang: 'c++',\n      alias: 'cpp'\n    }, 'fortran'];\n    var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;\n    inlineLanguages.forEach(function (lang) {\n      var alias = lang;\n\n      if (typeof lang !== 'string') {\n        alias = lang.alias;\n        lang = lang.lang;\n      }\n\n      if (Prism.languages[alias]) {\n        var o = {};\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(inlineLanguageRe.replace('<lang>', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')), 'i'),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        };\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n        Prism.languages.insertBefore('pure', 'inline-lang', o);\n      }\n    }); // C is the default inline language\n\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n    }\n  })(Prism);\n}","map":{"version":3,"names":["pure","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","inside","lang","alias","delimiter","string","number","keyword","function","special","operator","punctuation","inlineLanguages","inlineLanguageRe","source","forEach","o","RegExp","replace","util","clone","rest","insertBefore","c"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/pure.js"],"sourcesContent":["// @ts-nocheck\npure.displayName = 'pure'\npure.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function pure(Prism) {\n  ;(function (Prism) {\n    // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n    Prism.languages.pure = {\n      comment: [\n        {\n          pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n          lookbehind: true\n        },\n        {\n          pattern: /(^|[^\\\\:])\\/\\/.*/,\n          lookbehind: true\n        },\n        /#!.+/\n      ],\n      'inline-lang': {\n        pattern: /%<[\\s\\S]+?%>/,\n        greedy: true,\n        inside: {\n          lang: {\n            pattern: /(^%< *)-\\*-.+?-\\*-/,\n            lookbehind: true,\n            alias: 'comment'\n          },\n          delimiter: {\n            pattern: /^%<.*|%>$/,\n            alias: 'punctuation'\n          }\n        }\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n      },\n      number: {\n        // The look-behind prevents wrong highlighting of the .. operator\n        pattern:\n          /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n        lookbehind: true\n      },\n      keyword:\n        /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n      function:\n        /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n      special: {\n        pattern: /\\b__[a-z]+__\\b/i,\n        alias: 'builtin'\n      },\n      // Any combination of operator chars can be an operator\n      // eslint-disable-next-line no-misleading-character-class\n      operator:\n        /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n      // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n      punctuation: /[(){}\\[\\];,|]/\n    }\n    var inlineLanguages = [\n      'c',\n      {\n        lang: 'c++',\n        alias: 'cpp'\n      },\n      'fortran'\n    ]\n    var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source\n    inlineLanguages.forEach(function (lang) {\n      var alias = lang\n\n      if (typeof lang !== 'string') {\n        alias = lang.alias\n        lang = lang.lang\n      }\n\n      if (Prism.languages[alias]) {\n        var o = {}\n        o['inline-lang-' + alias] = {\n          pattern: RegExp(\n            inlineLanguageRe.replace(\n              '<lang>',\n              lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')\n            ),\n            'i'\n          ),\n          inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n        }\n        o['inline-lang-' + alias].inside.rest = Prism.util.clone(\n          Prism.languages[alias]\n        )\n        Prism.languages.insertBefore('pure', 'inline-lang', o)\n      }\n    }) // C is the default inline language\n\n    if (Prism.languages.c) {\n      Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(\n        Prism.languages.c\n      )\n    }\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}