{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  };\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  };\n  const tail = this.events[this.events.length - 1];\n  const initialPrefix = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    marker = code;\n    return sequenceOpen(code);\n  }\n  /** @type {State} */\n\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n\n    effects.exit('codeFencedFenceSequence');\n    return sizeOpen < 3 ? nok(code) : factorySpace(effects, infoOpen, 'whitespace')(code);\n  }\n  /** @type {State} */\n\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n  /** @type {State} */\n\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return factorySpace(effects, infoAfter, 'whitespace')(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return info;\n  }\n  /** @type {State} */\n\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n  /** @type {State} */\n\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return openAfter(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return meta;\n  }\n  /** @type {State} */\n\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence');\n    return self.interrupt ? ok(code) : contentStart(code);\n  }\n  /** @type {State} */\n\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(nonLazyLine, effects.attempt(closingFenceConstruct, after, initialPrefix ? factorySpace(effects, contentStart, 'linePrefix', initialPrefix + 1) : contentStart), after)(code);\n    }\n\n    effects.enter('codeFlowValue');\n    return contentContinue(code);\n  }\n  /** @type {State} */\n\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return contentStart(code);\n    }\n\n    effects.consume(code);\n    return contentContinue;\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n  /** @type {Tokenizer} */\n\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this;\n    return start;\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return lineStart;\n    }\n    /** @type {State} */\n\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n    }\n  }\n  /** @type {Tokenizer} */\n\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0;\n    return factorySpace(effects, closingSequenceStart, 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence');\n      effects.enter('codeFencedFenceSequence');\n      return closingSequence(code);\n    }\n    /** @type {State} */\n\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n\n      if (size < sizeOpen) return nok(code);\n      effects.exit('codeFencedFenceSequence');\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code);\n    }\n    /** @type {State} */\n\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n\n      return nok(code);\n    }\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownLineEndingOrSpace","codeFenced","name","tokenize","tokenizeCodeFenced","concrete","effects","ok","nok","self","closingFenceConstruct","tokenizeClosingFence","partial","nonLazyLine","tokenizeNonLazyLine","tail","events","length","initialPrefix","type","sliceSerialize","sizeOpen","marker","start","code","enter","sequenceOpen","consume","exit","infoOpen","openAfter","contentType","info","infoAfter","meta","interrupt","contentStart","after","attempt","contentContinue","lineStart","parser","lazy","now","line","size","closingSequenceStart","constructs","disable","null","includes","undefined","closingSequence","closingSequenceEnd"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-core-commonmark/lib/code-fenced.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SACEC,kBADF,EAEEC,yBAFF,QAGO,0BAHP;AAKA;;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,YADkB;EAExBC,QAAQ,EAAEC,kBAFc;EAGxBC,QAAQ,EAAE;AAHc,CAAnB;AAKP;;AAEA,SAASD,kBAAT,CAA4BE,OAA5B,EAAqCC,EAArC,EAAyCC,GAAzC,EAA8C;EAC5C,MAAMC,IAAI,GAAG,IAAb;EACA;;EAEA,MAAMC,qBAAqB,GAAG;IAC5BP,QAAQ,EAAEQ,oBADkB;IAE5BC,OAAO,EAAE;EAFmB,CAA9B;EAIA;;EAEA,MAAMC,WAAW,GAAG;IAClBV,QAAQ,EAAEW,mBADQ;IAElBF,OAAO,EAAE;EAFS,CAApB;EAIA,MAAMG,IAAI,GAAG,KAAKC,MAAL,CAAY,KAAKA,MAAL,CAAYC,MAAZ,GAAqB,CAAjC,CAAb;EACA,MAAMC,aAAa,GACjBH,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAR,KAAiB,YAAzB,GACIJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,cAAR,CAAuBL,IAAI,CAAC,CAAD,CAA3B,EAAgC,IAAhC,EAAsCE,MAD1C,GAEI,CAHN;EAIA,IAAII,QAAQ,GAAG,CAAf;EACA;;EAEA,IAAIC,MAAJ;EACA,OAAOC,KAAP;EACA;;EAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnBlB,OAAO,CAACmB,KAAR,CAAc,YAAd;IACAnB,OAAO,CAACmB,KAAR,CAAc,iBAAd;IACAnB,OAAO,CAACmB,KAAR,CAAc,yBAAd;IACAH,MAAM,GAAGE,IAAT;IACA,OAAOE,YAAY,CAACF,IAAD,CAAnB;EACD;EACD;;;EAEA,SAASE,YAAT,CAAsBF,IAAtB,EAA4B;IAC1B,IAAIA,IAAI,KAAKF,MAAb,EAAqB;MACnBhB,OAAO,CAACqB,OAAR,CAAgBH,IAAhB;MACAH,QAAQ;MACR,OAAOK,YAAP;IACD;;IAEDpB,OAAO,CAACsB,IAAR,CAAa,yBAAb;IACA,OAAOP,QAAQ,GAAG,CAAX,GACHb,GAAG,CAACgB,IAAD,CADA,GAEH1B,YAAY,CAACQ,OAAD,EAAUuB,QAAV,EAAoB,YAApB,CAAZ,CAA8CL,IAA9C,CAFJ;EAGD;EACD;;;EAEA,SAASK,QAAT,CAAkBL,IAAlB,EAAwB;IACtB,IAAIA,IAAI,KAAK,IAAT,IAAiBzB,kBAAkB,CAACyB,IAAD,CAAvC,EAA+C;MAC7C,OAAOM,SAAS,CAACN,IAAD,CAAhB;IACD;;IAEDlB,OAAO,CAACmB,KAAR,CAAc,qBAAd;IACAnB,OAAO,CAACmB,KAAR,CAAc,aAAd,EAA6B;MAC3BM,WAAW,EAAE;IADc,CAA7B;IAGA,OAAOC,IAAI,CAACR,IAAD,CAAX;EACD;EACD;;;EAEA,SAASQ,IAAT,CAAcR,IAAd,EAAoB;IAClB,IAAIA,IAAI,KAAK,IAAT,IAAiBxB,yBAAyB,CAACwB,IAAD,CAA9C,EAAsD;MACpDlB,OAAO,CAACsB,IAAR,CAAa,aAAb;MACAtB,OAAO,CAACsB,IAAR,CAAa,qBAAb;MACA,OAAO9B,YAAY,CAACQ,OAAD,EAAU2B,SAAV,EAAqB,YAArB,CAAZ,CAA+CT,IAA/C,CAAP;IACD;;IAED,IAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAKF,MAA5B,EAAoC,OAAOd,GAAG,CAACgB,IAAD,CAAV;IACpClB,OAAO,CAACqB,OAAR,CAAgBH,IAAhB;IACA,OAAOQ,IAAP;EACD;EACD;;;EAEA,SAASC,SAAT,CAAmBT,IAAnB,EAAyB;IACvB,IAAIA,IAAI,KAAK,IAAT,IAAiBzB,kBAAkB,CAACyB,IAAD,CAAvC,EAA+C;MAC7C,OAAOM,SAAS,CAACN,IAAD,CAAhB;IACD;;IAEDlB,OAAO,CAACmB,KAAR,CAAc,qBAAd;IACAnB,OAAO,CAACmB,KAAR,CAAc,aAAd,EAA6B;MAC3BM,WAAW,EAAE;IADc,CAA7B;IAGA,OAAOG,IAAI,CAACV,IAAD,CAAX;EACD;EACD;;;EAEA,SAASU,IAAT,CAAcV,IAAd,EAAoB;IAClB,IAAIA,IAAI,KAAK,IAAT,IAAiBzB,kBAAkB,CAACyB,IAAD,CAAvC,EAA+C;MAC7ClB,OAAO,CAACsB,IAAR,CAAa,aAAb;MACAtB,OAAO,CAACsB,IAAR,CAAa,qBAAb;MACA,OAAOE,SAAS,CAACN,IAAD,CAAhB;IACD;;IAED,IAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAKF,MAA5B,EAAoC,OAAOd,GAAG,CAACgB,IAAD,CAAV;IACpClB,OAAO,CAACqB,OAAR,CAAgBH,IAAhB;IACA,OAAOU,IAAP;EACD;EACD;;;EAEA,SAASJ,SAAT,CAAmBN,IAAnB,EAAyB;IACvBlB,OAAO,CAACsB,IAAR,CAAa,iBAAb;IACA,OAAOnB,IAAI,CAAC0B,SAAL,GAAiB5B,EAAE,CAACiB,IAAD,CAAnB,GAA4BY,YAAY,CAACZ,IAAD,CAA/C;EACD;EACD;;;EAEA,SAASY,YAAT,CAAsBZ,IAAtB,EAA4B;IAC1B,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAOa,KAAK,CAACb,IAAD,CAAZ;IACD;;IAED,IAAIzB,kBAAkB,CAACyB,IAAD,CAAtB,EAA8B;MAC5B,OAAOlB,OAAO,CAACgC,OAAR,CACLzB,WADK,EAELP,OAAO,CAACgC,OAAR,CACE5B,qBADF,EAEE2B,KAFF,EAGEnB,aAAa,GACTpB,YAAY,CACVQ,OADU,EAEV8B,YAFU,EAGV,YAHU,EAIVlB,aAAa,GAAG,CAJN,CADH,GAOTkB,YAVN,CAFK,EAcLC,KAdK,EAeLb,IAfK,CAAP;IAgBD;;IAEDlB,OAAO,CAACmB,KAAR,CAAc,eAAd;IACA,OAAOc,eAAe,CAACf,IAAD,CAAtB;EACD;EACD;;;EAEA,SAASe,eAAT,CAAyBf,IAAzB,EAA+B;IAC7B,IAAIA,IAAI,KAAK,IAAT,IAAiBzB,kBAAkB,CAACyB,IAAD,CAAvC,EAA+C;MAC7ClB,OAAO,CAACsB,IAAR,CAAa,eAAb;MACA,OAAOQ,YAAY,CAACZ,IAAD,CAAnB;IACD;;IAEDlB,OAAO,CAACqB,OAAR,CAAgBH,IAAhB;IACA,OAAOe,eAAP;EACD;EACD;;;EAEA,SAASF,KAAT,CAAeb,IAAf,EAAqB;IACnBlB,OAAO,CAACsB,IAAR,CAAa,YAAb;IACA,OAAOrB,EAAE,CAACiB,IAAD,CAAT;EACD;EACD;;;EAEA,SAASV,mBAAT,CAA6BR,OAA7B,EAAsCC,EAAtC,EAA0CC,GAA1C,EAA+C;IAC7C,MAAMC,IAAI,GAAG,IAAb;IACA,OAAOc,KAAP;IACA;;IAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;MACnBlB,OAAO,CAACmB,KAAR,CAAc,YAAd;MACAnB,OAAO,CAACqB,OAAR,CAAgBH,IAAhB;MACAlB,OAAO,CAACsB,IAAR,CAAa,YAAb;MACA,OAAOY,SAAP;IACD;IACD;;;IAEA,SAASA,SAAT,CAAmBhB,IAAnB,EAAyB;MACvB,OAAOf,IAAI,CAACgC,MAAL,CAAYC,IAAZ,CAAiBjC,IAAI,CAACkC,GAAL,GAAWC,IAA5B,IAAoCpC,GAAG,CAACgB,IAAD,CAAvC,GAAgDjB,EAAE,CAACiB,IAAD,CAAzD;IACD;EACF;EACD;;;EAEA,SAASb,oBAAT,CAA8BL,OAA9B,EAAuCC,EAAvC,EAA2CC,GAA3C,EAAgD;IAC9C,IAAIqC,IAAI,GAAG,CAAX;IACA,OAAO/C,YAAY,CACjBQ,OADiB,EAEjBwC,oBAFiB,EAGjB,YAHiB,EAIjB,KAAKL,MAAL,CAAYM,UAAZ,CAAuBC,OAAvB,CAA+BC,IAA/B,CAAoCC,QAApC,CAA6C,cAA7C,IACIC,SADJ,GAEI,CANa,CAAnB;IAQA;;IAEA,SAASL,oBAAT,CAA8BtB,IAA9B,EAAoC;MAClClB,OAAO,CAACmB,KAAR,CAAc,iBAAd;MACAnB,OAAO,CAACmB,KAAR,CAAc,yBAAd;MACA,OAAO2B,eAAe,CAAC5B,IAAD,CAAtB;IACD;IACD;;;IAEA,SAAS4B,eAAT,CAAyB5B,IAAzB,EAA+B;MAC7B,IAAIA,IAAI,KAAKF,MAAb,EAAqB;QACnBhB,OAAO,CAACqB,OAAR,CAAgBH,IAAhB;QACAqB,IAAI;QACJ,OAAOO,eAAP;MACD;;MAED,IAAIP,IAAI,GAAGxB,QAAX,EAAqB,OAAOb,GAAG,CAACgB,IAAD,CAAV;MACrBlB,OAAO,CAACsB,IAAR,CAAa,yBAAb;MACA,OAAO9B,YAAY,CAACQ,OAAD,EAAU+C,kBAAV,EAA8B,YAA9B,CAAZ,CAAwD7B,IAAxD,CAAP;IACD;IACD;;;IAEA,SAAS6B,kBAAT,CAA4B7B,IAA5B,EAAkC;MAChC,IAAIA,IAAI,KAAK,IAAT,IAAiBzB,kBAAkB,CAACyB,IAAD,CAAvC,EAA+C;QAC7ClB,OAAO,CAACsB,IAAR,CAAa,iBAAb;QACA,OAAOrB,EAAE,CAACiB,IAAD,CAAT;MACD;;MAED,OAAOhB,GAAG,CAACgB,IAAD,CAAV;IACD;EACF;AACF"},"metadata":{},"sourceType":"module"}