{"ast":null,"code":"// @ts-nocheck\nnevod.displayName = 'nevod';\nnevod.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function nevod(Prism) {\n  Prism.languages.nevod = {\n    comment: /\\/\\/.*|(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$))/,\n    string: {\n      pattern: /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))!?\\*?/,\n      greedy: true,\n      inside: {\n        'string-attrs': /!$|!\\*$|\\*$/\n      }\n    },\n    namespace: {\n      pattern: /(@namespace\\s+)[a-zA-Z0-9\\-.]+(?=\\s*\\{)/,\n      lookbehind: true\n    },\n    pattern: {\n      pattern: /(@pattern\\s+)?#?[a-zA-Z0-9\\-.]+(?:\\s*\\(\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]+\\s*(?:,\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]*)*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      inside: {\n        'pattern-name': {\n          pattern: /^#?[a-zA-Z0-9\\-.]+/,\n          alias: 'class-name'\n        },\n        fields: {\n          pattern: /\\(.*\\)/,\n          inside: {\n            'field-name': {\n              pattern: /[a-zA-Z0-9\\-.]+/,\n              alias: 'variable'\n            },\n            punctuation: /[,()]/,\n            operator: {\n              pattern: /~/,\n              alias: 'field-hidden-mark'\n            }\n          }\n        }\n      }\n    },\n    search: {\n      pattern: /(@search\\s+|#)[a-zA-Z0-9\\-.]+(?:\\.\\*)?(?=\\s*;)/,\n      alias: 'function',\n      lookbehind: true\n    },\n    keyword: /@(?:having|inside|namespace|outside|pattern|require|search|where)\\b/,\n    'standard-pattern': {\n      pattern: /\\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\\b(?:\\([a-zA-Z0-9\\-.,\\s+]*\\))?/,\n      inside: {\n        'standard-pattern-name': {\n          pattern: /^[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        quantifier: {\n          pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n          alias: 'number'\n        },\n        'standard-pattern-attr': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        punctuation: /[,()]/\n      }\n    },\n    quantifier: {\n      pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n      alias: 'number'\n    },\n    operator: [{\n      pattern: /=/,\n      alias: 'pattern-def'\n    }, {\n      pattern: /&/,\n      alias: 'conjunction'\n    }, {\n      pattern: /~/,\n      alias: 'exception'\n    }, {\n      pattern: /\\?/,\n      alias: 'optionality'\n    }, {\n      pattern: /[[\\]]/,\n      alias: 'repetition'\n    }, {\n      pattern: /[{}]/,\n      alias: 'variation'\n    }, {\n      pattern: /[+_]/,\n      alias: 'sequence'\n    }, {\n      pattern: /\\.{2,3}/,\n      alias: 'span'\n    }],\n    'field-capture': [{\n      pattern: /([a-zA-Z0-9\\-.]+\\s*\\()\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+(?:\\s*,\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+)*(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'field-name': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'variable'\n        },\n        colon: /:/\n      }\n    }, {\n      pattern: /[a-zA-Z0-9\\-.]+\\s*:/,\n      inside: {\n        'field-name': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'variable'\n        },\n        colon: /:/\n      }\n    }],\n    punctuation: /[:;,()]/,\n    name: /[a-zA-Z0-9\\-.]+/\n  };\n}","map":{"version":3,"names":["nevod","displayName","aliases","Prism","languages","comment","string","pattern","greedy","inside","namespace","lookbehind","alias","fields","punctuation","operator","search","keyword","quantifier","colon","name"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/nevod.js"],"sourcesContent":["// @ts-nocheck\nnevod.displayName = 'nevod'\nnevod.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function nevod(Prism) {\n  Prism.languages.nevod = {\n    comment: /\\/\\/.*|(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$))/,\n    string: {\n      pattern: /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))!?\\*?/,\n      greedy: true,\n      inside: {\n        'string-attrs': /!$|!\\*$|\\*$/\n      }\n    },\n    namespace: {\n      pattern: /(@namespace\\s+)[a-zA-Z0-9\\-.]+(?=\\s*\\{)/,\n      lookbehind: true\n    },\n    pattern: {\n      pattern:\n        /(@pattern\\s+)?#?[a-zA-Z0-9\\-.]+(?:\\s*\\(\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]+\\s*(?:,\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]*)*\\))?(?=\\s*=)/,\n      lookbehind: true,\n      inside: {\n        'pattern-name': {\n          pattern: /^#?[a-zA-Z0-9\\-.]+/,\n          alias: 'class-name'\n        },\n        fields: {\n          pattern: /\\(.*\\)/,\n          inside: {\n            'field-name': {\n              pattern: /[a-zA-Z0-9\\-.]+/,\n              alias: 'variable'\n            },\n            punctuation: /[,()]/,\n            operator: {\n              pattern: /~/,\n              alias: 'field-hidden-mark'\n            }\n          }\n        }\n      }\n    },\n    search: {\n      pattern: /(@search\\s+|#)[a-zA-Z0-9\\-.]+(?:\\.\\*)?(?=\\s*;)/,\n      alias: 'function',\n      lookbehind: true\n    },\n    keyword:\n      /@(?:having|inside|namespace|outside|pattern|require|search|where)\\b/,\n    'standard-pattern': {\n      pattern:\n        /\\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\\b(?:\\([a-zA-Z0-9\\-.,\\s+]*\\))?/,\n      inside: {\n        'standard-pattern-name': {\n          pattern: /^[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        quantifier: {\n          pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n          alias: 'number'\n        },\n        'standard-pattern-attr': {\n          pattern: /[a-zA-Z0-9\\-.]+/,\n          alias: 'builtin'\n        },\n        punctuation: /[,()]/\n      }\n    },\n    quantifier: {\n      pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n      alias: 'number'\n    },\n    operator: [\n      {\n        pattern: /=/,\n        alias: 'pattern-def'\n      },\n      {\n        pattern: /&/,\n        alias: 'conjunction'\n      },\n      {\n        pattern: /~/,\n        alias: 'exception'\n      },\n      {\n        pattern: /\\?/,\n        alias: 'optionality'\n      },\n      {\n        pattern: /[[\\]]/,\n        alias: 'repetition'\n      },\n      {\n        pattern: /[{}]/,\n        alias: 'variation'\n      },\n      {\n        pattern: /[+_]/,\n        alias: 'sequence'\n      },\n      {\n        pattern: /\\.{2,3}/,\n        alias: 'span'\n      }\n    ],\n    'field-capture': [\n      {\n        pattern:\n          /([a-zA-Z0-9\\-.]+\\s*\\()\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+(?:\\s*,\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+)*(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'field-name': {\n            pattern: /[a-zA-Z0-9\\-.]+/,\n            alias: 'variable'\n          },\n          colon: /:/\n        }\n      },\n      {\n        pattern: /[a-zA-Z0-9\\-.]+\\s*:/,\n        inside: {\n          'field-name': {\n            pattern: /[a-zA-Z0-9\\-.]+/,\n            alias: 'variable'\n          },\n          colon: /:/\n        }\n      }\n    ],\n    punctuation: /[:;,()]/,\n    name: /[a-zA-Z0-9\\-.]+/\n  }\n}\n"],"mappings":"AAAA;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;AAEA;;AACA,eAAe,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACnCA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;IACtBK,OAAO,EAAE,mCADa;IAEtBC,MAAM,EAAE;MACNC,OAAO,EAAE,kDADH;MAENC,MAAM,EAAE,IAFF;MAGNC,MAAM,EAAE;QACN,gBAAgB;MADV;IAHF,CAFc;IAStBC,SAAS,EAAE;MACTH,OAAO,EAAE,yCADA;MAETI,UAAU,EAAE;IAFH,CATW;IAatBJ,OAAO,EAAE;MACPA,OAAO,EACL,oHAFK;MAGPI,UAAU,EAAE,IAHL;MAIPF,MAAM,EAAE;QACN,gBAAgB;UACdF,OAAO,EAAE,oBADK;UAEdK,KAAK,EAAE;QAFO,CADV;QAKNC,MAAM,EAAE;UACNN,OAAO,EAAE,QADH;UAENE,MAAM,EAAE;YACN,cAAc;cACZF,OAAO,EAAE,iBADG;cAEZK,KAAK,EAAE;YAFK,CADR;YAKNE,WAAW,EAAE,OALP;YAMNC,QAAQ,EAAE;cACRR,OAAO,EAAE,GADD;cAERK,KAAK,EAAE;YAFC;UANJ;QAFF;MALF;IAJD,CAba;IAsCtBI,MAAM,EAAE;MACNT,OAAO,EAAE,gDADH;MAENK,KAAK,EAAE,UAFD;MAGND,UAAU,EAAE;IAHN,CAtCc;IA2CtBM,OAAO,EACL,qEA5CoB;IA6CtB,oBAAoB;MAClBV,OAAO,EACL,iIAFgB;MAGlBE,MAAM,EAAE;QACN,yBAAyB;UACvBF,OAAO,EAAE,kBADc;UAEvBK,KAAK,EAAE;QAFgB,CADnB;QAKNM,UAAU,EAAE;UACVX,OAAO,EAAE,kCADC;UAEVK,KAAK,EAAE;QAFG,CALN;QASN,yBAAyB;UACvBL,OAAO,EAAE,iBADc;UAEvBK,KAAK,EAAE;QAFgB,CATnB;QAaNE,WAAW,EAAE;MAbP;IAHU,CA7CE;IAgEtBI,UAAU,EAAE;MACVX,OAAO,EAAE,kCADC;MAEVK,KAAK,EAAE;IAFG,CAhEU;IAoEtBG,QAAQ,EAAE,CACR;MACER,OAAO,EAAE,GADX;MAEEK,KAAK,EAAE;IAFT,CADQ,EAKR;MACEL,OAAO,EAAE,GADX;MAEEK,KAAK,EAAE;IAFT,CALQ,EASR;MACEL,OAAO,EAAE,GADX;MAEEK,KAAK,EAAE;IAFT,CATQ,EAaR;MACEL,OAAO,EAAE,IADX;MAEEK,KAAK,EAAE;IAFT,CAbQ,EAiBR;MACEL,OAAO,EAAE,OADX;MAEEK,KAAK,EAAE;IAFT,CAjBQ,EAqBR;MACEL,OAAO,EAAE,MADX;MAEEK,KAAK,EAAE;IAFT,CArBQ,EAyBR;MACEL,OAAO,EAAE,MADX;MAEEK,KAAK,EAAE;IAFT,CAzBQ,EA6BR;MACEL,OAAO,EAAE,SADX;MAEEK,KAAK,EAAE;IAFT,CA7BQ,CApEY;IAsGtB,iBAAiB,CACf;MACEL,OAAO,EACL,0HAFJ;MAGEI,UAAU,EAAE,IAHd;MAIEF,MAAM,EAAE;QACN,cAAc;UACZF,OAAO,EAAE,iBADG;UAEZK,KAAK,EAAE;QAFK,CADR;QAKNO,KAAK,EAAE;MALD;IAJV,CADe,EAaf;MACEZ,OAAO,EAAE,qBADX;MAEEE,MAAM,EAAE;QACN,cAAc;UACZF,OAAO,EAAE,iBADG;UAEZK,KAAK,EAAE;QAFK,CADR;QAKNO,KAAK,EAAE;MALD;IAFV,CAbe,CAtGK;IA8HtBL,WAAW,EAAE,SA9HS;IA+HtBM,IAAI,EAAE;EA/HgB,CAAxB;AAiID"},"metadata":{},"sourceType":"module"}