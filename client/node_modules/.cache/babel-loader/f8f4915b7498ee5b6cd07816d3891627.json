{"ast":null,"code":"/*!\n * content-disposition\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = contentDisposition;\nmodule.exports.parse = parse;\n/**\n * Module dependencies.\n * @private\n */\n\nvar basename = require('path').basename;\n\nvar Buffer = require('safe-buffer').Buffer;\n/**\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\n * @private\n */\n\n\nvar ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g; // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match percent encoding escape.\n * @private\n */\n\nvar HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;\nvar HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;\n/**\n * RegExp to match non-latin1 characters.\n * @private\n */\n\nvar NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g;\n/**\n * RegExp to match quoted-pair in RFC 2616\n *\n * quoted-pair = \"\\\" CHAR\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\n * @private\n */\n\nvar QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g; // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 2616\n * @private\n */\n\nvar QUOTE_REGEXP = /([\\\\\"])/g;\n/**\n * RegExp for various RFC 2616 grammar\n *\n * parameter     = token \"=\" ( token | quoted-string )\n * token         = 1*<any CHAR except CTLs or separators>\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *               | \"{\" | \"}\" | SP | HT\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\n * qdtext        = <any TEXT except <\">>\n * quoted-pair   = \"\\\" CHAR\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\n * TEXT          = <any OCTET except CTLs, but including LWS>\n * LWS           = [CRLF] 1*( SP | HT )\n * CRLF          = CR LF\n * CR            = <US-ASCII CR, carriage return (13)>\n * LF            = <US-ASCII LF, linefeed (10)>\n * SP            = <US-ASCII SP, space (32)>\n * HT            = <US-ASCII HT, horizontal-tab (9)>\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\n * OCTET         = <any 8-bit sequence of data>\n * @private\n */\n\nvar PARAM_REGEXP = /;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g; // eslint-disable-line no-control-regex\n\nvar TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/;\nvar TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;\n/**\n * RegExp for various RFC 5987 grammar\n *\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\n * mime-charset  = 1*mime-charsetc\n * mime-charsetc = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\n *               / \"{\" / \"}\" / \"~\"\n * language      = ( 2*3ALPHA [ extlang ] )\n *               / 4ALPHA\n *               / 5*8ALPHA\n * extlang       = *3( \"-\" 3ALPHA )\n * value-chars   = *( pct-encoded / attr-char )\n * pct-encoded   = \"%\" HEXDIG HEXDIG\n * attr-char     = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n * @private\n */\n\nvar EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;\n/**\n * RegExp for various RFC 6266 grammar\n *\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\n * disp-ext-type    = token\n * disposition-parm = filename-parm | disp-ext-parm\n * filename-parm    = \"filename\" \"=\" value\n *                  | \"filename*\" \"=\" ext-value\n * disp-ext-parm    = token \"=\" value\n *                  | ext-token \"=\" ext-value\n * ext-token        = <the characters in token, followed by \"*\">\n * @private\n */\n\nvar DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/; // eslint-disable-line no-control-regex\n\n/**\n * Create an attachment Content-Disposition header.\n *\n * @param {string} [filename]\n * @param {object} [options]\n * @param {string} [options.type=attachment]\n * @param {string|boolean} [options.fallback=true]\n * @return {string}\n * @public\n */\n\nfunction contentDisposition(filename, options) {\n  var opts = options || {}; // get type\n\n  var type = opts.type || 'attachment'; // get parameters\n\n  var params = createparams(filename, opts.fallback); // format into string\n\n  return format(new ContentDisposition(type, params));\n}\n/**\n * Create parameters object from filename and fallback.\n *\n * @param {string} [filename]\n * @param {string|boolean} [fallback=true]\n * @return {object}\n * @private\n */\n\n\nfunction createparams(filename, fallback) {\n  if (filename === undefined) {\n    return;\n  }\n\n  var params = {};\n\n  if (typeof filename !== 'string') {\n    throw new TypeError('filename must be a string');\n  } // fallback defaults to true\n\n\n  if (fallback === undefined) {\n    fallback = true;\n  }\n\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\n    throw new TypeError('fallback must be a string or boolean');\n  }\n\n  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\n    throw new TypeError('fallback must be ISO-8859-1 string');\n  } // restrict to file base name\n\n\n  var name = basename(filename); // determine if name is suitable for quoted string\n\n  var isQuotedString = TEXT_REGEXP.test(name); // generate fallback name\n\n  var fallbackName = typeof fallback !== 'string' ? fallback && getlatin1(name) : basename(fallback);\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name; // set extended filename parameter\n\n  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\n    params['filename*'] = name;\n  } // set filename parameter\n\n\n  if (isQuotedString || hasFallback) {\n    params.filename = hasFallback ? fallbackName : name;\n  }\n\n  return params;\n}\n/**\n * Format object to Content-Disposition header.\n *\n * @param {object} obj\n * @param {string} obj.type\n * @param {object} [obj.parameters]\n * @return {string}\n * @private\n */\n\n\nfunction format(obj) {\n  var parameters = obj.parameters;\n  var type = obj.type;\n\n  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\n    throw new TypeError('invalid type');\n  } // start with normalized type\n\n\n  var string = String(type).toLowerCase(); // append parameters\n\n  if (parameters && typeof parameters === 'object') {\n    var param;\n    var params = Object.keys(parameters).sort();\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i];\n      var val = param.substr(-1) === '*' ? ustring(parameters[param]) : qstring(parameters[param]);\n      string += '; ' + param + '=' + val;\n    }\n  }\n\n  return string;\n}\n/**\n * Decode a RFC 6987 field value (gracefully).\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\n\nfunction decodefield(str) {\n  var match = EXT_VALUE_REGEXP.exec(str);\n\n  if (!match) {\n    throw new TypeError('invalid extended field value');\n  }\n\n  var charset = match[1].toLowerCase();\n  var encoded = match[2];\n  var value; // to binary string\n\n  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);\n\n  switch (charset) {\n    case 'iso-8859-1':\n      value = getlatin1(binary);\n      break;\n\n    case 'utf-8':\n      value = Buffer.from(binary, 'binary').toString('utf8');\n      break;\n\n    default:\n      throw new TypeError('unsupported charset in extended field');\n  }\n\n  return value;\n}\n/**\n * Get ISO-8859-1 version of string.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\n\nfunction getlatin1(val) {\n  // simple Unicode -> ISO-8859-1 transformation\n  return String(val).replace(NON_LATIN1_REGEXP, '?');\n}\n/**\n * Parse Content-Disposition header string.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\n\nfunction parse(string) {\n  if (!string || typeof string !== 'string') {\n    throw new TypeError('argument string is required');\n  }\n\n  var match = DISPOSITION_TYPE_REGEXP.exec(string);\n\n  if (!match) {\n    throw new TypeError('invalid type format');\n  } // normalize type\n\n\n  var index = match[0].length;\n  var type = match[1].toLowerCase();\n  var key;\n  var names = [];\n  var params = {};\n  var value; // calculate index to start at\n\n  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';' ? index - 1 : index; // match parameters\n\n  while (match = PARAM_REGEXP.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format');\n    }\n\n    index += match[0].length;\n    key = match[1].toLowerCase();\n    value = match[2];\n\n    if (names.indexOf(key) !== -1) {\n      throw new TypeError('invalid duplicate parameter');\n    }\n\n    names.push(key);\n\n    if (key.indexOf('*') + 1 === key.length) {\n      // decode extended value\n      key = key.slice(0, -1);\n      value = decodefield(value); // overwrite existing value\n\n      params[key] = value;\n      continue;\n    }\n\n    if (typeof params[key] === 'string') {\n      continue;\n    }\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value.substr(1, value.length - 2).replace(QESC_REGEXP, '$1');\n    }\n\n    params[key] = value;\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format');\n  }\n\n  return new ContentDisposition(type, params);\n}\n/**\n * Percent decode a single character.\n *\n * @param {string} str\n * @param {string} hex\n * @return {string}\n * @private\n */\n\n\nfunction pdecode(str, hex) {\n  return String.fromCharCode(parseInt(hex, 16));\n}\n/**\n * Percent encode a single character.\n *\n * @param {string} char\n * @return {string}\n * @private\n */\n\n\nfunction pencode(char) {\n  return '%' + String(char).charCodeAt(0).toString(16).toUpperCase();\n}\n/**\n * Quote a string for HTTP.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\n\nfunction qstring(val) {\n  var str = String(val);\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"';\n}\n/**\n * Encode a Unicode string for HTTP (RFC 5987).\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\n\nfunction ustring(val) {\n  var str = String(val); // percent encode as UTF-8\n\n  var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);\n  return 'UTF-8\\'\\'' + encoded;\n}\n/**\n * Class for parsed Content-Disposition header for v8 optimization\n *\n * @public\n * @param {string} type\n * @param {object} parameters\n * @constructor\n */\n\n\nfunction ContentDisposition(type, parameters) {\n  this.type = type;\n  this.parameters = parameters;\n}","map":{"version":3,"names":["module","exports","contentDisposition","parse","basename","require","Buffer","ENCODE_URL_ATTR_CHAR_REGEXP","HEX_ESCAPE_REGEXP","HEX_ESCAPE_REPLACE_REGEXP","NON_LATIN1_REGEXP","QESC_REGEXP","QUOTE_REGEXP","PARAM_REGEXP","TEXT_REGEXP","TOKEN_REGEXP","EXT_VALUE_REGEXP","DISPOSITION_TYPE_REGEXP","filename","options","opts","type","params","createparams","fallback","format","ContentDisposition","undefined","TypeError","test","name","isQuotedString","fallbackName","getlatin1","hasFallback","obj","parameters","string","String","toLowerCase","param","Object","keys","sort","i","length","val","substr","ustring","qstring","decodefield","str","match","exec","charset","encoded","value","binary","replace","pdecode","from","toString","index","key","names","lastIndex","indexOf","push","slice","hex","fromCharCode","parseInt","pencode","char","charCodeAt","toUpperCase","encodeURIComponent"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/content-disposition/index.js"],"sourcesContent":["/*!\n * content-disposition\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = contentDisposition\nmodule.exports.parse = parse\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar basename = require('path').basename\nvar Buffer = require('safe-buffer').Buffer\n\n/**\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\n * @private\n */\n\nvar ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match percent encoding escape.\n * @private\n */\n\nvar HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/\nvar HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g\n\n/**\n * RegExp to match non-latin1 characters.\n * @private\n */\n\nvar NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g\n\n/**\n * RegExp to match quoted-pair in RFC 2616\n *\n * quoted-pair = \"\\\" CHAR\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\n * @private\n */\n\nvar QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 2616\n * @private\n */\n\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp for various RFC 2616 grammar\n *\n * parameter     = token \"=\" ( token | quoted-string )\n * token         = 1*<any CHAR except CTLs or separators>\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *               | \"{\" | \"}\" | SP | HT\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\n * qdtext        = <any TEXT except <\">>\n * quoted-pair   = \"\\\" CHAR\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\n * TEXT          = <any OCTET except CTLs, but including LWS>\n * LWS           = [CRLF] 1*( SP | HT )\n * CRLF          = CR LF\n * CR            = <US-ASCII CR, carriage return (13)>\n * LF            = <US-ASCII LF, linefeed (10)>\n * SP            = <US-ASCII SP, space (32)>\n * HT            = <US-ASCII HT, horizontal-tab (9)>\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\n * OCTET         = <any 8-bit sequence of data>\n * @private\n */\n\nvar PARAM_REGEXP = /;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g // eslint-disable-line no-control-regex\nvar TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/\n\n/**\n * RegExp for various RFC 5987 grammar\n *\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\n * mime-charset  = 1*mime-charsetc\n * mime-charsetc = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\n *               / \"{\" / \"}\" / \"~\"\n * language      = ( 2*3ALPHA [ extlang ] )\n *               / 4ALPHA\n *               / 5*8ALPHA\n * extlang       = *3( \"-\" 3ALPHA )\n * value-chars   = *( pct-encoded / attr-char )\n * pct-encoded   = \"%\" HEXDIG HEXDIG\n * attr-char     = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n * @private\n */\n\nvar EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/\n\n/**\n * RegExp for various RFC 6266 grammar\n *\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\n * disp-ext-type    = token\n * disposition-parm = filename-parm | disp-ext-parm\n * filename-parm    = \"filename\" \"=\" value\n *                  | \"filename*\" \"=\" ext-value\n * disp-ext-parm    = token \"=\" value\n *                  | ext-token \"=\" ext-value\n * ext-token        = <the characters in token, followed by \"*\">\n * @private\n */\n\nvar DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/ // eslint-disable-line no-control-regex\n\n/**\n * Create an attachment Content-Disposition header.\n *\n * @param {string} [filename]\n * @param {object} [options]\n * @param {string} [options.type=attachment]\n * @param {string|boolean} [options.fallback=true]\n * @return {string}\n * @public\n */\n\nfunction contentDisposition (filename, options) {\n  var opts = options || {}\n\n  // get type\n  var type = opts.type || 'attachment'\n\n  // get parameters\n  var params = createparams(filename, opts.fallback)\n\n  // format into string\n  return format(new ContentDisposition(type, params))\n}\n\n/**\n * Create parameters object from filename and fallback.\n *\n * @param {string} [filename]\n * @param {string|boolean} [fallback=true]\n * @return {object}\n * @private\n */\n\nfunction createparams (filename, fallback) {\n  if (filename === undefined) {\n    return\n  }\n\n  var params = {}\n\n  if (typeof filename !== 'string') {\n    throw new TypeError('filename must be a string')\n  }\n\n  // fallback defaults to true\n  if (fallback === undefined) {\n    fallback = true\n  }\n\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\n    throw new TypeError('fallback must be a string or boolean')\n  }\n\n  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\n    throw new TypeError('fallback must be ISO-8859-1 string')\n  }\n\n  // restrict to file base name\n  var name = basename(filename)\n\n  // determine if name is suitable for quoted string\n  var isQuotedString = TEXT_REGEXP.test(name)\n\n  // generate fallback name\n  var fallbackName = typeof fallback !== 'string'\n    ? fallback && getlatin1(name)\n    : basename(fallback)\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name\n\n  // set extended filename parameter\n  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\n    params['filename*'] = name\n  }\n\n  // set filename parameter\n  if (isQuotedString || hasFallback) {\n    params.filename = hasFallback\n      ? fallbackName\n      : name\n  }\n\n  return params\n}\n\n/**\n * Format object to Content-Disposition header.\n *\n * @param {object} obj\n * @param {string} obj.type\n * @param {object} [obj.parameters]\n * @return {string}\n * @private\n */\n\nfunction format (obj) {\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  // start with normalized type\n  var string = String(type).toLowerCase()\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      var val = param.substr(-1) === '*'\n        ? ustring(parameters[param])\n        : qstring(parameters[param])\n\n      string += '; ' + param + '=' + val\n    }\n  }\n\n  return string\n}\n\n/**\n * Decode a RFC 6987 field value (gracefully).\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction decodefield (str) {\n  var match = EXT_VALUE_REGEXP.exec(str)\n\n  if (!match) {\n    throw new TypeError('invalid extended field value')\n  }\n\n  var charset = match[1].toLowerCase()\n  var encoded = match[2]\n  var value\n\n  // to binary string\n  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode)\n\n  switch (charset) {\n    case 'iso-8859-1':\n      value = getlatin1(binary)\n      break\n    case 'utf-8':\n      value = Buffer.from(binary, 'binary').toString('utf8')\n      break\n    default:\n      throw new TypeError('unsupported charset in extended field')\n  }\n\n  return value\n}\n\n/**\n * Get ISO-8859-1 version of string.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction getlatin1 (val) {\n  // simple Unicode -> ISO-8859-1 transformation\n  return String(val).replace(NON_LATIN1_REGEXP, '?')\n}\n\n/**\n * Parse Content-Disposition header string.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string || typeof string !== 'string') {\n    throw new TypeError('argument string is required')\n  }\n\n  var match = DISPOSITION_TYPE_REGEXP.exec(string)\n\n  if (!match) {\n    throw new TypeError('invalid type format')\n  }\n\n  // normalize type\n  var index = match[0].length\n  var type = match[1].toLowerCase()\n\n  var key\n  var names = []\n  var params = {}\n  var value\n\n  // calculate index to start at\n  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';'\n    ? index - 1\n    : index\n\n  // match parameters\n  while ((match = PARAM_REGEXP.exec(string))) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format')\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (names.indexOf(key) !== -1) {\n      throw new TypeError('invalid duplicate parameter')\n    }\n\n    names.push(key)\n\n    if (key.indexOf('*') + 1 === key.length) {\n      // decode extended value\n      key = key.slice(0, -1)\n      value = decodefield(value)\n\n      // overwrite existing value\n      params[key] = value\n      continue\n    }\n\n    if (typeof params[key] === 'string') {\n      continue\n    }\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .substr(1, value.length - 2)\n        .replace(QESC_REGEXP, '$1')\n    }\n\n    params[key] = value\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format')\n  }\n\n  return new ContentDisposition(type, params)\n}\n\n/**\n * Percent decode a single character.\n *\n * @param {string} str\n * @param {string} hex\n * @return {string}\n * @private\n */\n\nfunction pdecode (str, hex) {\n  return String.fromCharCode(parseInt(hex, 16))\n}\n\n/**\n * Percent encode a single character.\n *\n * @param {string} char\n * @return {string}\n * @private\n */\n\nfunction pencode (char) {\n  return '%' + String(char)\n    .charCodeAt(0)\n    .toString(16)\n    .toUpperCase()\n}\n\n/**\n * Quote a string for HTTP.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Encode a Unicode string for HTTP (RFC 5987).\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction ustring (val) {\n  var str = String(val)\n\n  // percent encode as UTF-8\n  var encoded = encodeURIComponent(str)\n    .replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode)\n\n  return 'UTF-8\\'\\'' + encoded\n}\n\n/**\n * Class for parsed Content-Disposition header for v8 optimization\n *\n * @public\n * @param {string} type\n * @param {object} parameters\n * @constructor\n */\n\nfunction ContentDisposition (type, parameters) {\n  this.type = type\n  this.parameters = parameters\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}