{"ast":null,"code":"function toWordList(words) {\n  var ret = [];\n  words.split(' ').forEach(function (e) {\n    ret.push({\n      name: e\n    });\n  });\n  return ret;\n}\n\nvar coreWordList = toWordList('INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\nvar immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\nfunction searchWordList(wordList, word) {\n  var i;\n\n  for (i = wordList.length - 1; i >= 0; i--) {\n    if (wordList[i].name === word.toUpperCase()) {\n      return wordList[i];\n    }\n  }\n\n  return undefined;\n}\n\nexport const forth = {\n  startState: function () {\n    return {\n      state: '',\n      base: 10,\n      coreWordList: coreWordList,\n      immediateWordList: immediateWordList,\n      wordList: []\n    };\n  },\n  token: function (stream, stt) {\n    var mat;\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    if (stt.state === '') {\n      // interpretation\n      if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n        stt.state = ' compilation';\n        return 'builtin';\n      }\n\n      mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n\n      if (mat) {\n        stt.wordList.push({\n          name: mat[2].toUpperCase()\n        });\n        stt.state = ' compilation';\n        return 'def';\n      }\n\n      mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n\n      if (mat) {\n        stt.wordList.push({\n          name: mat[2].toUpperCase()\n        });\n        return 'def';\n      }\n\n      mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n\n      if (mat) {\n        return 'builtin';\n      }\n    } else {\n      // compilation\n      // ; [\n      if (stream.match(/^(\\;|\\[)(\\s)/)) {\n        stt.state = '';\n        stream.backUp(1);\n        return 'builtin';\n      }\n\n      if (stream.match(/^(\\;|\\[)($)/)) {\n        stt.state = '';\n        return 'builtin';\n      }\n\n      if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n        return 'builtin';\n      }\n    } // dynamic wordlist\n\n\n    mat = stream.match(/^(\\S+)(\\s+|$)/);\n\n    if (mat) {\n      if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n        return 'variable';\n      } // comments\n\n\n      if (mat[1] === '\\\\') {\n        stream.skipToEnd();\n        return 'comment';\n      } // core words\n\n\n      if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n        return 'builtin';\n      }\n\n      if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n        return 'keyword';\n      }\n\n      if (mat[1] === '(') {\n        stream.eatWhile(function (s) {\n          return s !== ')';\n        });\n        stream.eat(')');\n        return 'comment';\n      } // // strings\n\n\n      if (mat[1] === '.(') {\n        stream.eatWhile(function (s) {\n          return s !== ')';\n        });\n        stream.eat(')');\n        return 'string';\n      }\n\n      if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n        stream.eatWhile(function (s) {\n          return s !== '\"';\n        });\n        stream.eat('\"');\n        return 'string';\n      } // numbers\n\n\n      if (mat[1] - 0xfffffffff) {\n        return 'number';\n      } // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n      //     return 'number';\n      // }\n\n\n      return 'atom';\n    }\n  }\n};","map":{"version":3,"names":["toWordList","words","ret","split","forEach","e","push","name","coreWordList","immediateWordList","searchWordList","wordList","word","i","length","toUpperCase","undefined","forth","startState","state","base","token","stream","stt","mat","eatSpace","match","backUp","skipToEnd","eatWhile","s","eat"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/forth.js"],"sourcesContent":["function toWordList(words) {\n  var ret = [];\n  words.split(' ').forEach(function(e){\n    ret.push({name: e});\n  });\n  return ret;\n}\n\nvar coreWordList = toWordList(\n  'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\nvar immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\nfunction searchWordList (wordList, word) {\n  var i;\n  for (i = wordList.length - 1; i >= 0; i--) {\n    if (wordList[i].name === word.toUpperCase()) {\n      return wordList[i];\n    }\n  }\n  return undefined;\n}\nexport const forth = {\n  startState: function() {\n    return {\n      state: '',\n      base: 10,\n      coreWordList: coreWordList,\n      immediateWordList: immediateWordList,\n      wordList: []\n    };\n  },\n  token: function (stream, stt) {\n    var mat;\n    if (stream.eatSpace()) {\n      return null;\n    }\n    if (stt.state === '') { // interpretation\n      if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n        stt.state = ' compilation';\n        return 'builtin';\n      }\n      mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        stt.wordList.push({name: mat[2].toUpperCase()});\n        stt.state = ' compilation';\n        return 'def';\n      }\n      mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n      if (mat) {\n        stt.wordList.push({name: mat[2].toUpperCase()});\n        return 'def';\n      }\n      mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        return 'builtin'\n      }\n    } else { // compilation\n      // ; [\n      if (stream.match(/^(\\;|\\[)(\\s)/)) {\n        stt.state = '';\n        stream.backUp(1);\n        return 'builtin';\n      }\n      if (stream.match(/^(\\;|\\[)($)/)) {\n        stt.state = '';\n        return 'builtin';\n      }\n      if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n        return 'builtin';\n      }\n    }\n\n    // dynamic wordlist\n    mat = stream.match(/^(\\S+)(\\s+|$)/);\n    if (mat) {\n      if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n        return 'variable';\n      }\n\n      // comments\n      if (mat[1] === '\\\\') {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      // core words\n      if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n        return 'builtin';\n      }\n      if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n        return 'keyword';\n      }\n\n      if (mat[1] === '(') {\n        stream.eatWhile(function (s) { return s !== ')'; });\n        stream.eat(')');\n        return 'comment';\n      }\n\n      // // strings\n      if (mat[1] === '.(') {\n        stream.eatWhile(function (s) { return s !== ')'; });\n        stream.eat(')');\n        return 'string';\n      }\n      if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n        stream.eatWhile(function (s) { return s !== '\"'; });\n        stream.eat('\"');\n        return 'string';\n      }\n\n      // numbers\n      if (mat[1] - 0xfffffffff) {\n        return 'number';\n      }\n      // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n      //     return 'number';\n      // }\n\n      return 'atom';\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}