{"ast":null,"code":"import { EditorView } from '@codemirror/view';\nimport { HighlightStyle, syntaxHighlighting } from '@codemirror/language';\nexport var createTheme = _ref => {\n  var {\n    theme,\n    settings,\n    styles\n  } = _ref;\n  var themeOptions = {\n    '&': {\n      backgroundColor: settings.background,\n      color: settings.foreground\n    },\n    '.cm-gutters': {}\n  };\n\n  if (settings.gutterBackground) {\n    themeOptions['.cm-gutters'].backgroundColor = settings.gutterBackground;\n  }\n\n  if (settings.gutterForeground) {\n    themeOptions['.cm-gutters'].color = settings.gutterForeground;\n  }\n\n  if (settings.gutterBorder) {\n    themeOptions['.cm-gutters'].borderRightColor = settings.gutterBorder;\n  }\n\n  if (settings.caret) {\n    themeOptions['.cm-content'] = {\n      caretColor: settings.caret\n    };\n    themeOptions['.cm-cursor, .cm-dropCursor'] = {\n      borderLeftColor: settings.caret\n    };\n  }\n\n  if (settings.lineHighlight) {\n    themeOptions['.cm-activeLine'] = {\n      backgroundColor: settings.lineHighlight\n    };\n    themeOptions['.cm-activeLineGutter'] = {\n      backgroundColor: settings.lineHighlight\n    };\n  }\n\n  if (settings.selection) {\n    themeOptions['&.cm-focused .cm-selectionBackground .cm-selectionBackground, & .cm-selectionLayer .cm-selectionBackground, ::selection'] = {\n      backgroundColor: settings.selection\n    };\n  }\n\n  if (settings.selectionMatch) {\n    themeOptions['& .cm-selectionMatch'] = {\n      backgroundColor: settings.selectionMatch\n    };\n  }\n\n  var themeExtension = EditorView.theme(themeOptions, {\n    dark: theme === 'dark'\n  });\n  var highlightStyle = HighlightStyle.define(styles);\n  var extension = [themeExtension, syntaxHighlighting(highlightStyle)];\n  return extension;\n};\nexport default createTheme;","map":{"version":3,"sources":["../src/index.tsx"],"names":["createTheme","styles","themeOptions","backgroundColor","settings","color","foreground","caretColor","caret","borderLeftColor","lineHighlight","selection","selectionMatch","themeExtension","dark","theme","highlightStyle","HighlightStyle","extension","syntaxHighlighting"],"mappings":"AAAA,SAAA,UAAA,QAAA,kBAAA;AAEA,SAAA,cAAA,EAAA,kBAAA,QAAA,sBAAA;AAuCA,OAAO,IAAMA,WAAW,GAAG,IAAA,IAAgE;EAAA,IAA/D;IAAA,KAAA;IAAA,QAAA;IAAmBC;EAAnB,IAA+D,IAAA;EACzF,IAAMC,YAAuC,GAAG;IAC9C,KAAK;MACHC,eAAe,EAAEC,QAAQ,CADtB,UAAA;MAEHC,KAAK,EAAED,QAAQ,CAACE;IAFb,CADyC;IAK9C,eAAe;EAL+B,CAAhD;;EAQA,IAAIF,QAAQ,CAAZ,gBAAA,EAA+B;IAC7BF,YAAY,CAAZA,aAAY,CAAZA,CAAAA,eAAAA,GAA8CE,QAAQ,CAAtDF,gBAAAA;EACD;;EACD,IAAIE,QAAQ,CAAZ,gBAAA,EAA+B;IAC7BF,YAAY,CAAZA,aAAY,CAAZA,CAAAA,KAAAA,GAAoCE,QAAQ,CAA5CF,gBAAAA;EACD;;EACD,IAAIE,QAAQ,CAAZ,YAAA,EAA2B;IACzBF,YAAY,CAAZA,aAAY,CAAZA,CAAAA,gBAAAA,GAA+CE,QAAQ,CAAvDF,YAAAA;EACD;;EAED,IAAIE,QAAQ,CAAZ,KAAA,EAAoB;IAClBF,YAAY,CAAZA,aAAY,CAAZA,GAA8B;MAC5BK,UAAU,EAAEH,QAAQ,CAACI;IADO,CAA9BN;IAGAA,YAAY,CAAZA,4BAAY,CAAZA,GAA6C;MAC3CO,eAAe,EAAEL,QAAQ,CAACI;IADiB,CAA7CN;EAGD;;EAED,IAAIE,QAAQ,CAAZ,aAAA,EAA4B;IAC1BF,YAAY,CAAZA,gBAAY,CAAZA,GAAiC;MAC/BC,eAAe,EAAEC,QAAQ,CAACM;IADK,CAAjCR;IAGAA,YAAY,CAAZA,sBAAY,CAAZA,GAAuC;MACrCC,eAAe,EAAEC,QAAQ,CAACM;IADW,CAAvCR;EAGD;;EAED,IAAIE,QAAQ,CAAZ,SAAA,EAAwB;IACtBF,YAAY,CAAZA,yHAAY,CAAZA,GAEI;MACFC,eAAe,EAAEC,QAAQ,CAACO;IADxB,CAFJT;EAKD;;EACD,IAAIE,QAAQ,CAAZ,cAAA,EAA6B;IAC3BF,YAAY,CAAZA,sBAAY,CAAZA,GAAuC;MACrCC,eAAe,EAAEC,QAAQ,CAACQ;IADW,CAAvCV;EAGD;;EACD,IAAMW,cAAc,GAAG,UAAU,CAAV,KAAA,CAAA,YAAA,EAA+B;IACpDC,IAAI,EAAEC,KAAK,KAAK;EADoC,CAA/B,CAAvB;EAIA,IAAMC,cAAc,GAAGC,cAAc,CAAdA,MAAAA,CAAvB,MAAuBA,CAAvB;EACA,IAAMC,SAAS,GAAG,CAAA,cAAA,EAAiBC,kBAAkB,CAArD,cAAqD,CAAnC,CAAlB;EAEA,OAAA,SAAA;AAxDK,CAAA;AA2DP,eAAA,WAAA","sourcesContent":["import { EditorView } from '@codemirror/view';\nimport { Extension } from '@codemirror/state';\nimport { HighlightStyle, TagStyle, syntaxHighlighting } from '@codemirror/language';\nimport { StyleSpec } from 'style-mod';\n\nexport interface CreateThemeOptions {\n  /**\n   * Theme inheritance. Determines which styles CodeMirror will apply by default.\n   */\n  theme: Theme;\n  /**\n   * Settings to customize the look of the editor, like background, gutter, selection and others.\n   */\n  settings: Settings;\n  /** Syntax highlighting styles. */\n  styles: TagStyle[];\n}\n\ntype Theme = 'light' | 'dark';\n\nexport interface Settings {\n  /** Editor background. */\n  background: string;\n  /** Default text color. */\n  foreground: string;\n  /** Caret color. */\n  caret?: string;\n  /** Selection background. */\n  selection?: string;\n  /** Selection match background. */\n  selectionMatch?: string;\n  /** Background of highlighted lines. */\n  lineHighlight?: string;\n  /** Gutter background. */\n  gutterBackground?: string;\n  /** Text color inside gutter. */\n  gutterForeground?: string;\n  /** Gutter right border color. */\n  gutterBorder?: string;\n}\n\nexport const createTheme = ({ theme, settings, styles }: CreateThemeOptions): Extension => {\n  const themeOptions: Record<string, StyleSpec> = {\n    '&': {\n      backgroundColor: settings.background,\n      color: settings.foreground,\n    },\n    '.cm-gutters': {},\n  };\n\n  if (settings.gutterBackground) {\n    themeOptions['.cm-gutters'].backgroundColor = settings.gutterBackground;\n  }\n  if (settings.gutterForeground) {\n    themeOptions['.cm-gutters'].color = settings.gutterForeground;\n  }\n  if (settings.gutterBorder) {\n    themeOptions['.cm-gutters'].borderRightColor = settings.gutterBorder;\n  }\n\n  if (settings.caret) {\n    themeOptions['.cm-content'] = {\n      caretColor: settings.caret,\n    };\n    themeOptions['.cm-cursor, .cm-dropCursor'] = {\n      borderLeftColor: settings.caret,\n    };\n  }\n\n  if (settings.lineHighlight) {\n    themeOptions['.cm-activeLine'] = {\n      backgroundColor: settings.lineHighlight,\n    };\n    themeOptions['.cm-activeLineGutter'] = {\n      backgroundColor: settings.lineHighlight,\n    };\n  }\n\n  if (settings.selection) {\n    themeOptions[\n      '&.cm-focused .cm-selectionBackground .cm-selectionBackground, & .cm-selectionLayer .cm-selectionBackground, ::selection'\n    ] = {\n      backgroundColor: settings.selection,\n    };\n  }\n  if (settings.selectionMatch) {\n    themeOptions['& .cm-selectionMatch'] = {\n      backgroundColor: settings.selectionMatch,\n    };\n  }\n  const themeExtension = EditorView.theme(themeOptions, {\n    dark: theme === 'dark',\n  });\n\n  const highlightStyle = HighlightStyle.define(styles);\n  const extension = [themeExtension, syntaxHighlighting(highlightStyle)];\n\n  return extension;\n};\n\nexport default createTheme;\n"]},"metadata":{},"sourceType":"module"}