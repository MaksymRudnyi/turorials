{"ast":null,"code":"// @ts-nocheck\nconcurnas.displayName = 'concurnas';\nconcurnas.aliases = ['conc'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function concurnas(Prism) {\n  Prism.languages.concurnas = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    langext: {\n      pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n      greedy: true,\n      inside: {\n        'class-name': /^\\w+/,\n        string: {\n          pattern: /(^\\s*\\|\\|)[\\s\\S]+(?=\\|\\|$)/,\n          lookbehind: true\n        },\n        punctuation: /\\|\\|/\n      }\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n    punctuation: /[{}[\\];(),.:]/,\n    operator: /<==|>==|=>|->|<-|<>|&==|&<>|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|[!^~]|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n    annotation: {\n      pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n      alias: 'builtin'\n    }\n  };\n  Prism.languages.insertBefore('concurnas', 'langext', {\n    'regex-literal': {\n      pattern: /\\br(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        regex: /[\\s\\S]+/\n      }\n    },\n    'string-literal': {\n      pattern: /(?:\\B|\\bs)(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.conc = Prism.languages.concurnas;\n}","map":{"version":3,"names":["concurnas","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","langext","inside","string","punctuation","function","keyword","boolean","number","operator","annotation","alias","insertBefore","interpolation","regex","conc"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/concurnas.js"],"sourcesContent":["// @ts-nocheck\nconcurnas.displayName = 'concurnas'\nconcurnas.aliases = ['conc']\n\n/** @type {import('../core.js').Syntax} */\nexport default function concurnas(Prism) {\n  Prism.languages.concurnas = {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    langext: {\n      pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n      greedy: true,\n      inside: {\n        'class-name': /^\\w+/,\n        string: {\n          pattern: /(^\\s*\\|\\|)[\\s\\S]+(?=\\|\\|$)/,\n          lookbehind: true\n        },\n        punctuation: /\\|\\|/\n      }\n    },\n    function: {\n      pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number:\n      /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n    punctuation: /[{}[\\];(),.:]/,\n    operator:\n      /<==|>==|=>|->|<-|<>|&==|&<>|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|[!^~]|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n    annotation: {\n      pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n      alias: 'builtin'\n    }\n  }\n  Prism.languages.insertBefore('concurnas', 'langext', {\n    'regex-literal': {\n      pattern: /\\br(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        regex: /[\\s\\S]+/\n      }\n    },\n    'string-literal': {\n      pattern: /(?:\\B|\\bs)(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.concurnas\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.conc = Prism.languages.concurnas\n}\n"],"mappings":"AAAA;AACAA,SAAS,CAACC,WAAV,GAAwB,WAAxB;AACAD,SAAS,CAACE,OAAV,GAAoB,CAAC,MAAD,CAApB;AAEA;;AACA,eAAe,SAASF,SAAT,CAAmBG,KAAnB,EAA0B;EACvCA,KAAK,CAACC,SAAN,CAAgBJ,SAAhB,GAA4B;IAC1BK,OAAO,EAAE;MACPC,OAAO,EAAE,4CADF;MAEPC,UAAU,EAAE,IAFL;MAGPC,MAAM,EAAE;IAHD,CADiB;IAM1BC,OAAO,EAAE;MACPH,OAAO,EAAE,0BADF;MAEPE,MAAM,EAAE,IAFD;MAGPE,MAAM,EAAE;QACN,cAAc,MADR;QAENC,MAAM,EAAE;UACNL,OAAO,EAAE,4BADH;UAENC,UAAU,EAAE;QAFN,CAFF;QAMNK,WAAW,EAAE;MANP;IAHD,CANiB;IAkB1BC,QAAQ,EAAE;MACRP,OAAO,EAAE,0CADD;MAERC,UAAU,EAAE;IAFJ,CAlBgB;IAsB1BO,OAAO,EACL,yjBAvBwB;IAwB1BC,OAAO,EAAE,oBAxBiB;IAyB1BC,MAAM,EACJ,2HA1BwB;IA2B1BJ,WAAW,EAAE,eA3Ba;IA4B1BK,QAAQ,EACN,qHA7BwB;IA8B1BC,UAAU,EAAE;MACVZ,OAAO,EAAE,+BADC;MAEVa,KAAK,EAAE;IAFG;EA9Bc,CAA5B;EAmCAhB,KAAK,CAACC,SAAN,CAAgBgB,YAAhB,CAA6B,WAA7B,EAA0C,SAA1C,EAAqD;IACnD,iBAAiB;MACfd,OAAO,EAAE,oCADM;MAEfE,MAAM,EAAE,IAFO;MAGfE,MAAM,EAAE;QACNW,aAAa,EAAE;UACbf,OAAO,EACL,gEAFW;UAGbC,UAAU,EAAE,IAHC;UAIbG,MAAM,EAAEP,KAAK,CAACC,SAAN,CAAgBJ;QAJX,CADT;QAONsB,KAAK,EAAE;MAPD;IAHO,CADkC;IAcnD,kBAAkB;MAChBhB,OAAO,EAAE,2CADO;MAEhBE,MAAM,EAAE,IAFQ;MAGhBE,MAAM,EAAE;QACNW,aAAa,EAAE;UACbf,OAAO,EACL,gEAFW;UAGbC,UAAU,EAAE,IAHC;UAIbG,MAAM,EAAEP,KAAK,CAACC,SAAN,CAAgBJ;QAJX,CADT;QAONW,MAAM,EAAE;MAPF;IAHQ;EAdiC,CAArD;EA4BAR,KAAK,CAACC,SAAN,CAAgBmB,IAAhB,GAAuBpB,KAAK,CAACC,SAAN,CAAgBJ,SAAvC;AACD"},"metadata":{},"sourceType":"module"}