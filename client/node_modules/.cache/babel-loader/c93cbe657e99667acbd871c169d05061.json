{"ast":null,"code":"// @ts-nocheck\npuppet.displayName = 'puppet';\npuppet.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function puppet(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.puppet = {\n      heredoc: [// Matches the content of a quoted heredoc string (subject to interpolation)\n      {\n        pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          // Matches the end tag\n          punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\n\n        }\n      }, // Matches the content of an unquoted heredoc string (no interpolation)\n      {\n        pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          // Matches the end tag\n          punctuation: /(?=\\S).*\\S(?= *$)/\n        }\n      }, // Matches the start tag of heredoc strings\n      {\n        pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n        alias: 'string',\n        inside: {\n          punctuation: {\n            pattern: /(\\().+?(?=\\))/,\n            lookbehind: true\n          }\n        }\n      }],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {// See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n      function: [{\n        pattern: /(\\.)(?!\\d)\\w+/,\n        lookbehind: true\n      }, /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      boolean: /\\b(?:false|true)\\b/,\n      // Includes words reserved for future use\n      keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    };\n    var interpolation = [{\n      // Allow for one nested level of braces inside interpolation\n      pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n      lookbehind: true,\n      inside: {\n        'short-variable': {\n          // Negative look-ahead prevent wrong highlighting of functions\n          pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n          lookbehind: true,\n          alias: 'variable',\n          inside: {\n            punctuation: /::/\n          }\n        },\n        delimiter: {\n          pattern: /^\\$/,\n          alias: 'variable'\n        },\n        rest: Prism.languages.puppet\n      }\n    }, {\n      pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n      lookbehind: true,\n      alias: 'variable',\n      inside: {\n        punctuation: /::/\n      }\n    }];\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;\n    Prism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;\n  })(Prism);\n}","map":{"version":3,"names":["puppet","displayName","aliases","Prism","languages","heredoc","pattern","lookbehind","alias","inside","punctuation","greedy","regex","comment","string","variable","function","number","boolean","keyword","datatype","operator","interpolation","delimiter","rest"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/puppet.js"],"sourcesContent":["// @ts-nocheck\npuppet.displayName = 'puppet'\npuppet.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function puppet(Prism) {\n  ;(function (Prism) {\n    Prism.languages.puppet = {\n      heredoc: [\n        // Matches the content of a quoted heredoc string (subject to interpolation)\n        {\n          pattern:\n            /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n          lookbehind: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\n          }\n        }, // Matches the content of an unquoted heredoc string (no interpolation)\n        {\n          pattern:\n            /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/\n          }\n        }, // Matches the start tag of heredoc strings\n        {\n          pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n          alias: 'string',\n          inside: {\n            punctuation: {\n              pattern: /(\\().+?(?=\\))/,\n              lookbehind: true\n            }\n          }\n        }\n      ],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern:\n          /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern:\n          /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {\n              // See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n      function: [\n        {\n          pattern: /(\\.)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\n      ],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      boolean: /\\b(?:false|true)\\b/,\n      // Includes words reserved for future use\n      keyword:\n        /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern:\n          /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator:\n        /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    }\n    var interpolation = [\n      {\n        // Allow for one nested level of braces inside interpolation\n        pattern:\n          /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n        lookbehind: true,\n        inside: {\n          'short-variable': {\n            // Negative look-ahead prevent wrong highlighting of functions\n            pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n            lookbehind: true,\n            alias: 'variable',\n            inside: {\n              punctuation: /::/\n            }\n          },\n          delimiter: {\n            pattern: /^\\$/,\n            alias: 'variable'\n          },\n          rest: Prism.languages.puppet\n        }\n      },\n      {\n        pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: true,\n        alias: 'variable',\n        inside: {\n          punctuation: /::/\n        }\n      }\n    ]\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation\n    Prism.languages.puppet['string'].inside[\n      'double-quoted'\n    ].inside.interpolation = interpolation\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}