{"ast":null,"code":"// @ts-nocheck\nimport refractorMarkup from './markup.js';\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function markdown(Prism) {\n  Prism.register(refractorMarkup);\n\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner;\n      });\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n      return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n            var alias = 'language-' + lang; // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n\n      var codeLang = '';\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n\n      var grammar = Prism.languages[codeLang];\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);\n      }\n    });\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    }; // IE 11 doesn't support `String.fromCodePoint`\n\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, ''); // decode known entities\n\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase();\n\n        if (code[0] === '#') {\n          var value;\n\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16);\n          } else {\n            value = Number(code.slice(1));\n          }\n\n          return fromCodePoint(value);\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code];\n\n          if (known) {\n            return known;\n          } // unable to decode\n\n\n          return m;\n        }\n      });\n      return text;\n    }\n\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkup","markdown","displayName","aliases","Prism","register","inner","source","createInline","pattern","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","lookbehind","greedy","inside","punctuation","alias","yaml","blockquote","table","code","title","hr","list","variable","string","bold","content","italic","strike","url","operator","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","lang","exec","toLowerCase","push","classes","cls","match","grammar","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","highlight","textContent","value","tagPattern","markup","tag","KNOWN_ENTITY_NAMES","amp","lt","gt","quot","fromCodePoint","String","fromCharCode","html","text","m","parseInt","slice","Number","known","md"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/markdown.js"],"sourcesContent":["// @ts-nocheck\nimport refractorMarkup from './markup.js'\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\n\n/** @type {import('../core.js').Syntax} */\nexport default function markdown(Prism) {\n  Prism.register(refractorMarkup)\n  ;(function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner\n      })\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/\n      .source\n    var tableRow =\n      /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(\n        /__/g,\n        function () {\n          return tableCell\n        }\n      )\n    var tableLine =\n      /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/\n        .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      'front-matter-block': {\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^---|---$/,\n          'front-matter': {\n            pattern: /\\S+(?:\\s+\\S+)*/,\n            alias: ['yaml', 'language-yaml'],\n            inside: Prism.languages.yaml\n          }\n        }\n      },\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern:\n            /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern:\n          /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string:\n            /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        // eslint-disable-next-line regexp/strict\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      'code-snippet': {\n        // `code`\n        // ``code``\n        pattern:\n          /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n        lookbehind: true,\n        greedy: true,\n        alias: ['code', 'keyword']\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          operator: /^!/,\n          content: {\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          variable: {\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          url: {\n            pattern: /(^\\]\\()[^\\s)]+/,\n            lookbehind: true\n          },\n          string: {\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n            lookbehind: true\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (\n        inside\n      ) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content\n              .replace(/\\b#/g, 'sharp')\n              .replace(/\\b\\+\\+/g, 'pp') // only use the first word\n\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase()\n            var alias = 'language-' + lang // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n\n      var codeLang = ''\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n\n      var grammar = Prism.languages[codeLang]\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id)\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        env.content = Prism.highlight(\n          textContent(env.content.value),\n          grammar,\n          codeLang\n        )\n      }\n    })\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi')\n    /**\n     * A list of known entity names.\n     *\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n     *\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n     */\n\n    var KNOWN_ENTITY_NAMES = {\n      amp: '&',\n      lt: '<',\n      gt: '>',\n      quot: '\"'\n    } // IE 11 doesn't support `String.fromCodePoint`\n\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode\n    /**\n     * Returns the text content of a given HTML source code string.\n     *\n     * @param {string} html\n     * @returns {string}\n     */\n\n    function textContent(html) {\n      // remove all tags\n      var text = html.replace(tagPattern, '') // decode known entities\n\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n        code = code.toLowerCase()\n\n        if (code[0] === '#') {\n          var value\n\n          if (code[1] === 'x') {\n            value = parseInt(code.slice(2), 16)\n          } else {\n            value = Number(code.slice(1))\n          }\n\n          return fromCodePoint(value)\n        } else {\n          var known = KNOWN_ENTITY_NAMES[code]\n\n          if (known) {\n            return known\n          } // unable to decode\n\n          return m\n        }\n      })\n      return text\n    }\n\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}