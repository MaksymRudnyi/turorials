{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"value\", \"commands\", \"commandsFilter\", \"extraCommands\", \"height\", \"enableScroll\", \"visibleDragbar\", \"highlightEnable\", \"preview\", \"fullscreen\", \"overflow\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"defaultTabEnable\", \"onChange\", \"onHeightChange\", \"hideToolbar\", \"toolbarBottom\", \"components\", \"renderTextarea\"];\nimport React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands } from './commands';\nimport { reducer, EditorContext } from './Context';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction setGroupPopFalse(data) {\n  if (data === void 0) {\n    data = {};\n  }\n\n  Object.keys(data).forEach(keyname => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nvar InternalMDEditor = (props, ref) => {\n  var _ref = props || {},\n      {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    commandsFilter,\n    extraCommands = getExtraCommands(),\n    height = 200,\n    enableScroll = true,\n    visibleDragbar = typeof props.visiableDragbar === 'boolean' ? props.visiableDragbar : true,\n    highlightEnable = true,\n    preview: previewType = 'live',\n    fullscreen = false,\n    overflow = true,\n    previewOptions = {},\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    defaultTabEnable = false,\n    onChange: _onChange,\n    onHeightChange,\n    hideToolbar,\n    toolbarBottom = false,\n    components,\n    renderTextarea\n  } = _ref,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var cmds = commands.map(item => commandsFilter ? commandsFilter(item, false) : item).filter(Boolean);\n  var extraCmds = extraCommands.map(item => commandsFilter ? commandsFilter(item, true) : item).filter(Boolean);\n  var [state, dispatch] = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    components,\n    height,\n    highlightEnable,\n    tabSize,\n    defaultTabEnable,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands: cmds,\n    extraCommands: extraCmds,\n    fullscreen,\n    barPopup: {}\n  });\n  var container = useRef(null);\n  var previewRef = useRef(null);\n  var enableScrollRef = useRef(enableScroll);\n  useImperativeHandle(ref, () => _extends({}, state));\n  useMemo(() => enableScrollRef.current = enableScroll, [enableScroll]);\n  useEffect(() => {\n    var stateInit = {};\n\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n\n    if (dispatch) {\n      dispatch(_extends({}, state, stateInit));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var cls = [className, 'wmde-markdown-var', prefixCls, state.preview ? prefixCls + \"-show-\" + state.preview : null, state.fullscreen ? prefixCls + \"-fullscreen\" : null].filter(Boolean).join(' ').trim();\n  useMemo(() => propsValue !== state.markdown && dispatch({\n    markdown: propsValue || ''\n  }), [propsValue, state.markdown]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(() => previewType !== state.preview && dispatch({\n    preview: previewType\n  }), [previewType]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(() => tabSize !== state.tabSize && dispatch({\n    tabSize\n  }), [tabSize]);\n  useMemo(() => highlightEnable !== state.highlightEnable && dispatch({\n    highlightEnable\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [highlightEnable]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(() => autoFocus !== state.autoFocus && dispatch({\n    autoFocus: autoFocus\n  }), [autoFocus]);\n  useMemo(() => fullscreen !== state.fullscreen && dispatch({\n    fullscreen: fullscreen\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [fullscreen]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(() => height !== state.height && dispatch({\n    height: height\n  }), [height]);\n  useMemo(() => height !== state.height && onHeightChange && onHeightChange(state.height, height, state), [height, onHeightChange, state]);\n  var textareaDomRef = useRef();\n  var active = useRef('preview');\n  var initScroll = useRef(false);\n  useMemo(() => {\n    textareaDomRef.current = state.textareaWarp;\n\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', () => {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', () => {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  var handleScroll = (e, type) => {\n    if (!enableScrollRef.current) return;\n    var textareaDom = textareaDomRef.current;\n    var previewDom = previewRef.current ? previewRef.current : undefined;\n\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n\n      var scrollTop = 0;\n\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n\n      dispatch({\n        scrollTop\n      });\n    }\n  };\n\n  var previewClassName = prefixCls + \"-preview \" + (previewOptions.className || '');\n\n  var handlePreviewScroll = e => handleScroll(e, 'preview');\n\n  var mdPreview = useMemo(() => /*#__PURE__*/_jsx(\"div\", {\n    ref: previewRef,\n    className: previewClassName,\n    children: /*#__PURE__*/_jsx(MarkdownPreview, _extends({}, previewOptions, {\n      onScroll: handlePreviewScroll,\n      source: state.markdown || ''\n    }))\n  }), [previewClassName, previewOptions, state.markdown]);\n  var preview = (components == null ? void 0 : components.preview) && (components == null ? void 0 : components.preview(state.markdown || '', state, dispatch));\n\n  if (preview && /*#__PURE__*/React.isValidElement(preview)) {\n    mdPreview = /*#__PURE__*/_jsx(\"div\", {\n      className: previewClassName,\n      ref: previewRef,\n      onScroll: handlePreviewScroll,\n      children: preview\n    });\n  }\n\n  var containerStyle = _extends({}, other.style, {\n    height: state.height || '100%'\n  });\n\n  var containerClick = () => dispatch({\n    barPopup: _extends({}, setGroupPopFalse(state.barPopup))\n  });\n\n  var dragBarChange = newHeight => dispatch({\n    height: newHeight\n  });\n\n  return /*#__PURE__*/_jsx(EditorContext.Provider, {\n    value: _extends({}, state, {\n      dispatch\n    }),\n    children: /*#__PURE__*/_jsxs(\"div\", _extends({\n      ref: container,\n      className: cls\n    }, other, {\n      onClick: containerClick,\n      style: containerStyle,\n      children: [!hideToolbar && !toolbarBottom && /*#__PURE__*/_jsx(Toolbar, {\n        prefixCls: prefixCls,\n        overflow: overflow,\n        toolbarBottom: toolbarBottom\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: prefixCls + \"-content\",\n        children: [/(edit|live)/.test(state.preview || '') && /*#__PURE__*/_jsx(TextArea, _extends({\n          className: prefixCls + \"-input\",\n          prefixCls: prefixCls,\n          autoFocus: autoFocus\n        }, textareaProps, {\n          onChange: evn => {\n            _onChange && _onChange(evn.target.value, evn, state);\n\n            if (textareaProps && textareaProps.onChange) {\n              textareaProps.onChange(evn);\n            }\n          },\n          renderTextarea: (components == null ? void 0 : components.textarea) || renderTextarea,\n          onScroll: e => handleScroll(e, 'text')\n        })), /(live|preview)/.test(state.preview || '') && mdPreview]\n      }), visibleDragbar && !state.fullscreen && /*#__PURE__*/_jsx(DragBar, {\n        prefixCls: prefixCls,\n        height: state.height,\n        maxHeight: maxHeight,\n        minHeight: minHeight,\n        onChange: dragBarChange\n      }), !hideToolbar && toolbarBottom && /*#__PURE__*/_jsx(Toolbar, {\n        prefixCls: prefixCls,\n        overflow: overflow,\n        toolbarBottom: toolbarBottom\n      })]\n    }))\n  });\n};\n\nvar mdEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nmdEditor.Markdown = MarkdownPreview;\nexport default mdEditor;","map":{"version":3,"sources":["../src/Editor.tsx"],"names":["data","Object","keyname","InternalMDEditor","prefixCls","value","commands","getCommands","extraCommands","getExtraCommands","height","enableScroll","visibleDragbar","props","highlightEnable","preview","previewType","fullscreen","overflow","previewOptions","maxHeight","minHeight","tabSize","defaultTabEnable","onChange","toolbarBottom","renderTextarea","other","cmds","item","commandsFilter","extraCmds","useReducer","markdown","scrollTop","scrollTopPreview","barPopup","container","useRef","previewRef","enableScrollRef","useImperativeHandle","useMemo","useEffect","stateInit","propsValue","dispatch","cls","state","autoFocus","onHeightChange","textareaDomRef","active","initScroll","handleScroll","textareaDom","previewDom","scale","e","previewClassName","handlePreviewScroll","mdPreview","components","React","containerStyle","containerClick","setGroupPopFalse","dragBarChange","newHeight","evn","textareaProps","mdEditor"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle, CSSProperties, PropsWithRef } from 'react';\nimport MarkdownPreview, { MarkdownPreviewProps } from '@uiw/react-markdown-preview';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands, ICommand } from './commands';\nimport { reducer, EditorContext, ContextStore, PreviewType } from './Context';\nimport './index.less';\n\nexport interface IProps {\n  prefixCls?: string;\n  className?: string;\n}\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string, event?: React.ChangeEvent<HTMLTextAreaElement>, state?: ContextStore) => void;\n  /**\n   * editor height change listener\n   */\n  onHeightChange?: (value?: CSSProperties['height'], oldValue?: CSSProperties['height'], state?: ContextStore) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   * ⚠️ `Dragbar` is invalid when **`height`** parameter percentage.\n   */\n  height?: CSSProperties['height'];\n  /**\n   * Custom toolbar heigth\n   * @default 29px\n   *\n   * @deprecated toolbar height adaptive: https://github.com/uiwjs/react-md-editor/issues/427\n   *\n   */\n  toolbarHeight?: number;\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visibleDragbar?: boolean;\n  /**\n   * @deprecated use `visibleDragbar`\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  /**\n   * Full screen display editor.\n   */\n  fullscreen?: boolean;\n  /**\n   * Disable `fullscreen` setting body styles\n   */\n  overflow?: boolean;\n  /**\n   * Maximum drag height. `visibleDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visibleDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * Use div to replace TextArea or re-render TextArea\n   * @deprecated Please use ~~`renderTextarea`~~ -> `components`\n   */\n  renderTextarea?: ITextAreaProps['renderTextarea'];\n  /**\n   * re-render element\n   */\n  components?: {\n    /** Use div to replace TextArea or re-render TextArea */\n    textarea?: ITextAreaProps['renderTextarea'];\n    /**\n     * Override the default command element\n     * _`toolbar`_ < _`command[].render`_\n     */\n    toolbar?: ICommand['render'];\n    /** Custom markdown preview */\n    preview?: (source: string, state: ContextStore, dispath: React.Dispatch<ContextStore>) => JSX.Element;\n  };\n  /**\n   * Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n   * @default true\n   */\n  highlightEnable?: boolean;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * If `false`, the `tab` key inserts a tab character into the textarea. If `true`, the `tab` key executes default behavior e.g. focus shifts to next element.\n   */\n  defaultTabEnable?: boolean;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Filter or modify your commands.\n   * https://github.com/uiwjs/react-md-editor/issues/296\n   */\n  commandsFilter?: (command: ICommand, isExtra: boolean) => false | ICommand;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  extraCommands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n  /** Whether to enable scrolling */\n  enableScroll?: boolean;\n  /** Toolbar on bottom */\n  toolbarBottom?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean> = {}) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: ContextStore) => void) | React.RefObject<ContextStore> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    commandsFilter,\n    extraCommands = getExtraCommands(),\n    height = 200,\n    enableScroll = true,\n    visibleDragbar = typeof props.visiableDragbar === 'boolean' ? props.visiableDragbar : true,\n    highlightEnable = true,\n    preview: previewType = 'live',\n    fullscreen = false,\n    overflow = true,\n    previewOptions = {},\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    defaultTabEnable = false,\n    onChange,\n    onHeightChange,\n    hideToolbar,\n    toolbarBottom = false,\n    components,\n    renderTextarea,\n    ...other\n  } = props || {};\n  const cmds = commands\n    .map((item) => (commandsFilter ? commandsFilter(item, false) : item))\n    .filter(Boolean) as ICommand[];\n  const extraCmds = extraCommands\n    .map((item) => (commandsFilter ? commandsFilter(item, true) : item))\n    .filter(Boolean) as ICommand[];\n  let [state, dispatch] = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    components,\n    height,\n    highlightEnable,\n    tabSize,\n    defaultTabEnable,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands: cmds,\n    extraCommands: extraCmds,\n    fullscreen,\n    barPopup: {},\n  });\n  const container = useRef<HTMLDivElement>(null);\n  const previewRef = useRef<HTMLDivElement>(null);\n  const enableScrollRef = useRef(enableScroll);\n\n  useImperativeHandle(ref, () => ({ ...state }));\n  useMemo(() => (enableScrollRef.current = enableScroll), [enableScroll]);\n  useEffect(() => {\n    const stateInit: ContextStore = {};\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n    if (dispatch) {\n      dispatch({ ...state, ...stateInit });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cls = [\n    className,\n    'wmde-markdown-var',\n    prefixCls,\n    state.preview ? `${prefixCls}-show-${state.preview}` : null,\n    state.fullscreen ? `${prefixCls}-fullscreen` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  useMemo(\n    () => propsValue !== state.markdown && dispatch({ markdown: propsValue || '' }),\n    [propsValue, state.markdown],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => previewType !== state.preview && dispatch({ preview: previewType }), [previewType]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => tabSize !== state.tabSize && dispatch({ tabSize }), [tabSize]);\n  useMemo(\n    () => highlightEnable !== state.highlightEnable && dispatch({ highlightEnable }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [highlightEnable],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => autoFocus !== state.autoFocus && dispatch({ autoFocus: autoFocus }), [autoFocus]);\n  useMemo(\n    () => fullscreen !== state.fullscreen && dispatch({ fullscreen: fullscreen }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [fullscreen],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => height !== state.height && dispatch({ height: height }), [height]);\n  useMemo(\n    () => height !== state.height && onHeightChange && onHeightChange(state.height, height, state),\n    [height, onHeightChange, state],\n  );\n\n  const textareaDomRef = useRef<HTMLDivElement>();\n  const active = useRef<'text' | 'preview'>('preview');\n  const initScroll = useRef(false);\n\n  useMemo(() => {\n    textareaDomRef.current = state.textareaWarp;\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', () => {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', () => {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>, type: 'text' | 'preview') => {\n    if (!enableScrollRef.current) return;\n    const textareaDom = textareaDomRef.current;\n    const previewDom = previewRef.current ? previewRef.current : undefined;\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n      let scrollTop = 0;\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n      dispatch({ scrollTop });\n    }\n  };\n\n  const previewClassName = `${prefixCls}-preview ${previewOptions.className || ''}`;\n  const handlePreviewScroll = (e: React.UIEvent<HTMLDivElement, UIEvent>) => handleScroll(e, 'preview');\n  let mdPreview = useMemo(\n    () => (\n      <div ref={previewRef} className={previewClassName}>\n        <MarkdownPreview {...previewOptions} onScroll={handlePreviewScroll} source={state.markdown || ''} />\n      </div>\n    ),\n    [previewClassName, previewOptions, state.markdown],\n  );\n  const preview = components?.preview && components?.preview(state.markdown || '', state, dispatch);\n  if (preview && React.isValidElement(preview)) {\n    mdPreview = (\n      <div className={previewClassName} ref={previewRef} onScroll={handlePreviewScroll}>\n        {preview}\n      </div>\n    );\n  }\n\n  const containerStyle = { ...other.style, height: state.height || '100%' };\n  const containerClick = () => dispatch({ barPopup: { ...setGroupPopFalse(state.barPopup) } });\n  const dragBarChange = (newHeight: number) => dispatch({ height: newHeight });\n\n  return (\n    <EditorContext.Provider value={{ ...state, dispatch }}>\n      <div ref={container} className={cls} {...other} onClick={containerClick} style={containerStyle}>\n        {!hideToolbar && !toolbarBottom && (\n          <Toolbar prefixCls={prefixCls} overflow={overflow} toolbarBottom={toolbarBottom} />\n        )}\n        <div className={`${prefixCls}-content`}>\n          {/(edit|live)/.test(state.preview || '') && (\n            <TextArea\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onChange={(evn) => {\n                onChange && onChange(evn.target.value, evn, state);\n                if (textareaProps && textareaProps.onChange) {\n                  textareaProps.onChange(evn);\n                }\n              }}\n              renderTextarea={components?.textarea || renderTextarea}\n              onScroll={(e) => handleScroll(e, 'text')}\n            />\n          )}\n          {/(live|preview)/.test(state.preview || '') && mdPreview}\n        </div>\n        {visibleDragbar && !state.fullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={state.height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={dragBarChange}\n          />\n        )}\n        {!hideToolbar && toolbarBottom && (\n          <Toolbar prefixCls={prefixCls} overflow={overflow} toolbarBottom={toolbarBottom} />\n        )}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\ntype Editor = React.FC<PropsWithRef<MDEditorProps>> & { Markdown: typeof MarkdownPreview };\n\nconst mdEditor: Editor = React.forwardRef(InternalMDEditor) as unknown as Editor;\n\nmdEditor.Markdown = MarkdownPreview;\n\nexport default mdEditor;\n"]},"metadata":{},"sourceType":"module"}