{"ast":null,"code":"import React, { useContext, useEffect, useMemo } from 'react';\nimport { rehype } from 'rehype';\nimport rehypePrism from 'rehype-prism-plus';\nimport { EditorContext } from '../../Context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction html2Escape(sHtml) {\n  return sHtml.replace(/```(tsx?|jsx?|html|xml)(.*)\\s+([\\s\\S]*?)(\\s.+)?```/g, str => {\n    return str.replace(/[<&\"]/g, c => ({\n      '<': '&lt;',\n      '>': '&gt;',\n      '&': '&amp;',\n      '\"': '&quot;'\n    })[c]);\n  }).replace(/[<&\"]/g, c => ({\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;'\n  })[c]);\n}\n\nexport default function Markdown(props) {\n  var {\n    prefixCls\n  } = props;\n  var {\n    markdown = '',\n    highlightEnable,\n    dispatch\n  } = useContext(EditorContext);\n  var preRef = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({\n        textareaPre: preRef.current\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return useMemo(() => {\n    if (!markdown) {\n      return /*#__PURE__*/_jsx(\"pre\", {\n        ref: preRef,\n        className: prefixCls + \"-text-pre wmde-markdown-color\"\n      });\n    }\n\n    var mdStr = \"<pre class=\\\"language-markdown \" + prefixCls + \"-text-pre wmde-markdown-color\\\"><code class=\\\"language-markdown\\\">\" + html2Escape(markdown) + \"\\n</code></pre>\";\n\n    if (highlightEnable) {\n      try {\n        mdStr = rehype().data('settings', {\n          fragment: true\n        }).use(rehypePrism, {\n          ignoreMissing: true\n        }).processSync(mdStr).toString();\n      } catch (error) {}\n    }\n\n    return /*#__PURE__*/React.createElement('div', {\n      className: 'wmde-markdown-color',\n      dangerouslySetInnerHTML: {\n        __html: mdStr || ''\n      }\n    });\n  }, [markdown, preRef, prefixCls]);\n}","map":{"version":3,"sources":["../../../src/components/TextArea/Markdown.tsx"],"names":["str","c","prefixCls","markdown","dispatch","useContext","preRef","React","useEffect","textareaPre","current","useMemo","mdStr","html2Escape","fragment","ignoreMissing","className","dangerouslySetInnerHTML","__html"],"mappings":"AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,SAAA,EAAA,OAAA,QAAA,OAAA;AACA,SAAA,MAAA,QAAA,QAAA;AACA,OAAA,WAAA,MAAA,mBAAA;AAEA,SAAA,aAAA,QAAA,eAAA;;;AAEA,SAAA,WAAA,CAAA,KAAA,EAAoC;EAClC,OAAO,KAAK,CAAL,OAAA,CAAA,qDAAA,EAC4DA,GAAD,IAAiB;IAC/E,OAAO,GAAG,CAAH,OAAA,CAAA,QAAA,EAEJC,CAAD,IAAgB,CAAC;MAAE,KAAF,MAAA;MAAe,KAAf,MAAA;MAA4B,KAA5B,OAAA;MAA0C,KAAK;IAA/C,CAAD,EAFlB,CAEkB,CAFX,CAAP;EAFG,CAAA,EAAA,OAAA,CAAA,QAAA,EASFA,CAAD,IAAgB,CAAC;IAAE,KAAF,MAAA;IAAe,KAAf,MAAA;IAA4B,KAA5B,OAAA;IAA0C,KAAK;EAA/C,CAAD,EATpB,CASoB,CATb,CAAP;AAWD;;AAID,eAAe,SAAA,QAAA,CAAA,KAAA,EAAwC;EACrD,IAAM;IAAEC;EAAF,IAAN,KAAA;EACA,IAAM;IAAEC,QAAQ,GAAV,EAAA;IAAA,eAAA;IAAkCC;EAAlC,IAA+CC,UAAU,CAA/D,aAA+D,CAA/D;EACA,IAAMC,MAAM,GAAA,aAAGC,KAAK,CAApB,SAAeA,EAAf;EACAC,SAAS,CAAC,MAAM;IACd,IAAIF,MAAM,CAANA,OAAAA,IAAJ,QAAA,EAAgC;MAC9BF,QAAQ,CAAC;QAAEK,WAAW,EAAEH,MAAM,CAACI;MAAtB,CAAD,CAARN;IAFY,CAAA,CAId;;EAJO,CAAA,EAATI,EAAS,CAATA;EAOA,OAAOG,OAAO,CAAC,MAAM;IACnB,IAAI,CAAJ,QAAA,EAAe;MACb,OAAA,aAAO,IAAA,CAAA,KAAA,EAAA;QAAK,GAAG,EAAR,MAAA;QAAkB,SAAS,EAAKT,SAAL,GAAA;MAA3B,CAAA,CAAP;IACD;;IACD,IAAIU,KAAK,GAAA,oCAAA,SAAA,GAAA,oEAAA,GAA+GC,WAAW,CAA1H,QAA0H,CAA1H,GAAT,iBAAA;;IAIA,IAAA,eAAA,EAAqB;MACnB,IAAI;QACFD,KAAK,GAAG,MAAM,GAAN,IAAA,CAAA,UAAA,EACY;UAAEE,QAAQ,EAAE;QAAZ,CADZ,EAAA,GAAA,CAAA,WAAA,EAEY;UAAEC,aAAa,EAAE;QAAjB,CAFZ,EAAA,WAAA,CAAA,KAAA,EAARH,QAAQ,EAARA;MADF,CAAA,CAME,OAAA,KAAA,EAAc,CAAE;IACnB;;IAED,OAAA,aAAO,KAAK,CAAL,aAAA,CAAA,KAAA,EAA2B;MAChCI,SAAS,EADuB,qBAAA;MAEhCC,uBAAuB,EAAE;QAAEC,MAAM,EAAEN,KAAK,IAAI;MAAnB;IAFO,CAA3B,CAAP;EAlBY,CAAA,EAsBX,CAAA,QAAA,EAAA,MAAA,EAtBH,SAsBG,CAtBW,CAAd;AAuBD","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport { rehype } from 'rehype';\nimport rehypePrism from 'rehype-prism-plus';\nimport { IProps } from '../../Editor';\nimport { EditorContext } from '../../Context';\n\nfunction html2Escape(sHtml: string) {\n  return sHtml\n    .replace(/```(tsx?|jsx?|html|xml)(.*)\\s+([\\s\\S]*?)(\\s.+)?```/g, (str: string) => {\n      return str.replace(\n        /[<&\"]/g,\n        (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n      );\n    })\n    .replace(\n      /[<&\"]/g,\n      (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n    );\n}\n\nexport interface MarkdownProps extends IProps, React.HTMLAttributes<HTMLPreElement> {}\n\nexport default function Markdown(props: MarkdownProps) {\n  const { prefixCls } = props;\n  const { markdown = '', highlightEnable, dispatch } = useContext(EditorContext);\n  const preRef = React.createRef<HTMLPreElement>();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({ textareaPre: preRef.current });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return useMemo(() => {\n    if (!markdown) {\n      return <pre ref={preRef} className={`${prefixCls}-text-pre wmde-markdown-color`} />;\n    }\n    let mdStr = `<pre class=\"language-markdown ${prefixCls}-text-pre wmde-markdown-color\"><code class=\"language-markdown\">${html2Escape(\n      markdown,\n    )}\\n</code></pre>`;\n\n    if (highlightEnable) {\n      try {\n        mdStr = rehype()\n          .data('settings', { fragment: true })\n          .use(rehypePrism, { ignoreMissing: true })\n          .processSync(mdStr)\n          .toString();\n      } catch (error) {}\n    }\n\n    return React.createElement('div', {\n      className: 'wmde-markdown-color',\n      dangerouslySetInnerHTML: { __html: mdStr || '' },\n    });\n  }, [markdown, preRef, prefixCls]);\n}\n"]},"metadata":{},"sourceType":"module"}