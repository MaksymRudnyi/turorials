{"ast":null,"code":"import { bold } from './bold';\nimport { code, codeBlock } from './code';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { unorderedListCommand, orderedListCommand, checkedListCommand } from './list';\nimport { quote } from './quote';\nimport { hr } from './hr';\nimport { title } from './title';\nimport { title1 } from './title1';\nimport { title2 } from './title2';\nimport { title3 } from './title3';\nimport { title4 } from './title4';\nimport { title5 } from './title5';\nimport { title6 } from './title6';\nimport { comment } from './comment';\nimport { group } from './group';\nimport { divider } from './divider';\nimport { codePreview, codeEdit, codeLive } from './preview';\nimport { fullscreen } from './fullscreen';\nimport { image } from './image';\nimport { strikethrough } from './strikeThrough';\nimport { insertTextAtPosition } from '../utils/InsertTextAtPosition';\n\nvar getCommands = () => [comment, bold, italic, strikethrough, hr, title, divider, link, quote, code, codeBlock, image, divider, unorderedListCommand, orderedListCommand, checkedListCommand];\n\nvar getExtraCommands = () => [codeEdit, codeLive, codePreview, divider, fullscreen];\n\nfunction getStateFromTextArea(textArea) {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\n\nclass TextAreaTextApi {\n  constructor(textArea) {\n    this.textArea = void 0;\n    this.textArea = textArea;\n  }\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n\n\n  replaceSelection(text) {\n    insertTextAtPosition(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n\n\n  setSelectionRange(selection) {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n\n}\n\nclass TextAreaCommandOrchestrator {\n  constructor(textArea) {\n    this.textArea = void 0;\n    this.textApi = void 0;\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  getState() {\n    if (!this.textArea) return false;\n    return getStateFromTextArea(this.textArea);\n  }\n\n  executeCommand(command, dispatch, state) {\n    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi, dispatch, state);\n  }\n\n}\n\nexport { // Toolbars.\ntitle, title1, title2, title3, title4, title5, title6, bold, codeBlock, italic, strikethrough, hr, group, divider, link, quote, code, image, unorderedListCommand, orderedListCommand, checkedListCommand, codeEdit, codeLive, codePreview, fullscreen, // Tool method.\ngetCommands, getExtraCommands, getStateFromTextArea, TextAreaCommandOrchestrator, TextAreaTextApi };","map":{"version":3,"sources":["../../src/commands/index.ts"],"names":["getCommands","getExtraCommands","selection","start","textArea","end","selectionEnd","text","selectedText","constructor","replaceSelection","insertTextAtPosition","getStateFromTextArea","setSelectionRange","textApi","getState","executeCommand","command"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { bold } from './bold';\nimport { code, codeBlock } from './code';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { unorderedListCommand, orderedListCommand, checkedListCommand } from './list';\nimport { quote } from './quote';\nimport { hr } from './hr';\nimport { title } from './title';\nimport { title1 } from './title1';\nimport { title2 } from './title2';\nimport { title3 } from './title3';\nimport { title4 } from './title4';\nimport { title5 } from './title5';\nimport { title6 } from './title6';\nimport { comment } from './comment';\nimport { group } from './group';\nimport { divider } from './divider';\nimport { codePreview, codeEdit, codeLive } from './preview';\nimport { fullscreen } from './fullscreen';\nimport { image } from './image';\nimport { strikethrough } from './strikeThrough';\nimport { insertTextAtPosition } from '../utils/InsertTextAtPosition';\nimport { ContextStore, ExecuteCommandState } from '../Context';\n\nexport interface CommandOrchestrator {\n  executeCommand(command: ICommand): void;\n}\n\nexport interface ICommandChildHandle<T = string> extends ICommandBase<T> {\n  children?: (handle: {\n    close: () => void;\n    execute: () => void;\n    getState?: TextAreaCommandOrchestrator['getState'];\n    textApi?: TextAreaTextApi;\n  }) => React.ReactElement;\n}\n\nexport interface ICommandChildCommands<T = string> extends ICommandBase<T> {\n  children?: Array<ICommand<T>>;\n}\n\nexport interface ICommandBase<T> {\n  parent?: ICommand<any>;\n  keyCommand?: string;\n  name?: string;\n  shortcuts?: string;\n  groupName?: string;\n  icon?: React.ReactElement;\n  value?: T;\n  position?: 'right';\n  liProps?: React.LiHTMLAttributes<HTMLLIElement>;\n  buttonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | null;\n  render?: (\n    command: ICommand<T>,\n    disabled: boolean,\n    executeCommand: (command: ICommand<T>, name?: string) => void,\n    index: number,\n  ) => void | undefined | null | React.ReactElement;\n  execute?: (\n    state: TextState,\n    api: TextAreaTextApi,\n    dispatch?: React.Dispatch<ContextStore>,\n    executeCommandState?: ExecuteCommandState,\n  ) => void;\n}\n\nexport type ICommand<T = string> = ICommandChildCommands<T> | ICommandChildHandle<T>;\n\nexport interface TextRange {\n  start: number;\n  end: number;\n}\n\nexport interface TextState {\n  text: string;\n  selectedText: string;\n  selection: TextRange;\n}\n\nconst getCommands: () => ICommand[] = () => [\n  comment,\n  bold,\n  italic,\n  strikethrough,\n  hr,\n  title,\n  divider,\n  link,\n  quote,\n  code,\n  codeBlock,\n  image,\n  divider,\n  unorderedListCommand,\n  orderedListCommand,\n  checkedListCommand,\n];\n\nconst getExtraCommands: () => ICommand[] = () => [codeEdit, codeLive, codePreview, divider, fullscreen];\n\nfunction getStateFromTextArea(textArea: HTMLTextAreaElement): TextState {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd,\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd),\n  };\n}\n\nclass TextAreaTextApi {\n  textArea: HTMLTextAreaElement;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n  }\n\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n  replaceSelection(text: string): TextState {\n    insertTextAtPosition(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n  setSelectionRange(selection: TextRange): TextState {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n}\n\nclass TextAreaCommandOrchestrator implements CommandOrchestrator {\n  textArea: HTMLTextAreaElement;\n  textApi: TextAreaTextApi;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  getState() {\n    if (!this.textArea) return false;\n    return getStateFromTextArea(this.textArea);\n  }\n\n  executeCommand(\n    command: ICommand<string>,\n    dispatch?: React.Dispatch<ContextStore>,\n    state?: ExecuteCommandState,\n  ): void {\n    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi, dispatch, state);\n  }\n}\n\nexport {\n  // Toolbars.\n  title,\n  title1,\n  title2,\n  title3,\n  title4,\n  title5,\n  title6,\n  bold,\n  codeBlock,\n  italic,\n  strikethrough,\n  hr,\n  group,\n  divider,\n  link,\n  quote,\n  code,\n  image,\n  unorderedListCommand,\n  orderedListCommand,\n  checkedListCommand,\n  codeEdit,\n  codeLive,\n  codePreview,\n  fullscreen,\n  // Tool method.\n  getCommands,\n  getExtraCommands,\n  getStateFromTextArea,\n  TextAreaCommandOrchestrator,\n  TextAreaTextApi,\n};\n"]},"metadata":{},"sourceType":"module"}