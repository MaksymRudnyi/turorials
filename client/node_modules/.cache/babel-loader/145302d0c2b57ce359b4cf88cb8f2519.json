{"ast":null,"code":"/**\n * @typedef {import('./types.js').Rule} Rule\n * @typedef {import('./types.js').Element} Element\n */\n\n/**\n * @param {Rule} query\n * @param {Element} element\n * @returns {boolean}\n */\nexport function className(query, element) {\n  /** @type {Array<string>} */\n  // @ts-expect-error Assume array.\n  const value = element.properties.className || [];\n  let index = -1;\n\n  if (query.classNames) {\n    while (++index < query.classNames.length) {\n      if (!value.includes(query.classNames[index])) return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["className","query","element","value","properties","index","classNames","length","includes"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/hast-util-select/lib/class-name.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Rule} Rule\n * @typedef {import('./types.js').Element} Element\n */\n\n/**\n * @param {Rule} query\n * @param {Element} element\n * @returns {boolean}\n */\nexport function className(query, element) {\n  /** @type {Array<string>} */\n  // @ts-expect-error Assume array.\n  const value = element.properties.className || []\n  let index = -1\n\n  if (query.classNames) {\n    while (++index < query.classNames.length) {\n      if (!value.includes(query.classNames[index])) return false\n    }\n  }\n\n  return true\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;EACxC;EACA;EACA,MAAMC,KAAK,GAAGD,OAAO,CAACE,UAAR,CAAmBJ,SAAnB,IAAgC,EAA9C;EACA,IAAIK,KAAK,GAAG,CAAC,CAAb;;EAEA,IAAIJ,KAAK,CAACK,UAAV,EAAsB;IACpB,OAAO,EAAED,KAAF,GAAUJ,KAAK,CAACK,UAAN,CAAiBC,MAAlC,EAA0C;MACxC,IAAI,CAACJ,KAAK,CAACK,QAAN,CAAeP,KAAK,CAACK,UAAN,CAAiBD,KAAjB,CAAf,CAAL,EAA8C,OAAO,KAAP;IAC/C;EACF;;EAED,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}