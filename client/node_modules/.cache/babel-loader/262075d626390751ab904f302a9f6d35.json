{"ast":null,"code":"// @ts-nocheck\noz.displayName = 'oz';\noz.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function oz(Prism) {\n  Prism.languages.oz = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    atom: {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      alias: 'builtin'\n    },\n    keyword: /\\$|\\[\\]|\\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\n    function: [/\\b[a-z][A-Za-z\\d]*(?=\\()/, {\n      pattern: /(\\{)[A-Z][A-Za-z\\d]*\\b/,\n      lookbehind: true\n    }],\n    number: /\\b(?:0[bx][\\da-f]+|\\d+(?:\\.\\d*)?(?:e~?\\d+)?)\\b|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,\n    variable: /`(?:[^`\\\\]|\\\\.)+`/,\n    'attr-name': /\\b\\w+(?=[ \\t]*:(?![:=]))/,\n    operator: /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,\n    punctuation: /[\\[\\](){}.:;?]/\n  };\n}","map":{"version":3,"names":["oz","displayName","aliases","Prism","languages","comment","pattern","greedy","string","atom","alias","keyword","function","lookbehind","number","variable","operator","punctuation"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/oz.js"],"sourcesContent":["// @ts-nocheck\noz.displayName = 'oz'\noz.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function oz(Prism) {\n  Prism.languages.oz = {\n    comment: {\n      pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n      greedy: true\n    },\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    atom: {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      alias: 'builtin'\n    },\n    keyword:\n      /\\$|\\[\\]|\\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\n    function: [\n      /\\b[a-z][A-Za-z\\d]*(?=\\()/,\n      {\n        pattern: /(\\{)[A-Z][A-Za-z\\d]*\\b/,\n        lookbehind: true\n      }\n    ],\n    number:\n      /\\b(?:0[bx][\\da-f]+|\\d+(?:\\.\\d*)?(?:e~?\\d+)?)\\b|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,\n    variable: /`(?:[^`\\\\]|\\\\.)+`/,\n    'attr-name': /\\b\\w+(?=[ \\t]*:(?![:=]))/,\n    operator:\n      /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,\n    punctuation: /[\\[\\](){}.:;?]/\n  }\n}\n"],"mappings":"AAAA;AACAA,EAAE,CAACC,WAAH,GAAiB,IAAjB;AACAD,EAAE,CAACE,OAAH,GAAa,EAAb;AAEA;;AACA,eAAe,SAASF,EAAT,CAAYG,KAAZ,EAAmB;EAChCA,KAAK,CAACC,SAAN,CAAgBJ,EAAhB,GAAqB;IACnBK,OAAO,EAAE;MACPC,OAAO,EAAE,sBADF;MAEPC,MAAM,EAAE;IAFD,CADU;IAKnBC,MAAM,EAAE;MACNF,OAAO,EAAE,wBADH;MAENC,MAAM,EAAE;IAFF,CALW;IASnBE,IAAI,EAAE;MACJH,OAAO,EAAE,wBADL;MAEJC,MAAM,EAAE,IAFJ;MAGJG,KAAK,EAAE;IAHH,CATa;IAcnBC,OAAO,EACL,+PAfiB;IAgBnBC,QAAQ,EAAE,CACR,0BADQ,EAER;MACEN,OAAO,EAAE,wBADX;MAEEO,UAAU,EAAE;IAFd,CAFQ,CAhBS;IAuBnBC,MAAM,EACJ,0EAxBiB;IAyBnBC,QAAQ,EAAE,mBAzBS;IA0BnB,aAAa,0BA1BM;IA2BnBC,QAAQ,EACN,8FA5BiB;IA6BnBC,WAAW,EAAE;EA7BM,CAArB;AA+BD"},"metadata":{},"sourceType":"module"}