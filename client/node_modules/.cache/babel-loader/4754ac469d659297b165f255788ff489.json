{"ast":null,"code":"// @ts-nocheck\nimport refractorCss from './css.js';\nscss.displayName = 'scss';\nscss.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function scss(Prism) {\n  Prism.register(refractorCss);\n  Prism.languages.scss = Prism.languages.extend('css', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    atrule: {\n      pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n      inside: {\n        rule: /@[\\w-]+/ // See rest below\n\n      }\n    },\n    // url, compassified\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    selector: {\n      // Initial look-ahead is used to prevent matching of blank selectors\n      pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n      inside: {\n        parent: {\n          pattern: /&/,\n          alias: 'important'\n        },\n        placeholder: /%[-\\w]+/,\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    },\n    property: {\n      pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n      inside: {\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    }\n  });\n  Prism.languages.insertBefore('scss', 'atrule', {\n    keyword: [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n      pattern: /( )(?:from|through)(?= )/,\n      lookbehind: true\n    }]\n  });\n  Prism.languages.insertBefore('scss', 'important', {\n    // var and interpolated vars\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  });\n  Prism.languages.insertBefore('scss', 'function', {\n    'module-modifier': {\n      pattern: /\\b(?:as|hide|show|with)\\b/i,\n      alias: 'keyword'\n    },\n    placeholder: {\n      pattern: /%[-\\w]+/,\n      alias: 'selector'\n    },\n    statement: {\n      pattern: /\\B!(?:default|optional)\\b/i,\n      alias: 'keyword'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    operator: {\n      pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n}","map":{"version":3,"names":["refractorCss","scss","displayName","aliases","Prism","register","languages","extend","comment","pattern","lookbehind","atrule","inside","rule","url","selector","parent","alias","placeholder","variable","property","insertBefore","keyword","statement","boolean","null","operator","rest"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/scss.js"],"sourcesContent":["// @ts-nocheck\nimport refractorCss from './css.js'\nscss.displayName = 'scss'\nscss.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function scss(Prism) {\n  Prism.register(refractorCss)\n  Prism.languages.scss = Prism.languages.extend('css', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    atrule: {\n      pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n      inside: {\n        rule: /@[\\w-]+/ // See rest below\n      }\n    },\n    // url, compassified\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    selector: {\n      // Initial look-ahead is used to prevent matching of blank selectors\n      pattern:\n        /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n      inside: {\n        parent: {\n          pattern: /&/,\n          alias: 'important'\n        },\n        placeholder: /%[-\\w]+/,\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    },\n    property: {\n      pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n      inside: {\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    }\n  })\n  Prism.languages.insertBefore('scss', 'atrule', {\n    keyword: [\n      /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i,\n      {\n        pattern: /( )(?:from|through)(?= )/,\n        lookbehind: true\n      }\n    ]\n  })\n  Prism.languages.insertBefore('scss', 'important', {\n    // var and interpolated vars\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  })\n  Prism.languages.insertBefore('scss', 'function', {\n    'module-modifier': {\n      pattern: /\\b(?:as|hide|show|with)\\b/i,\n      alias: 'keyword'\n    },\n    placeholder: {\n      pattern: /%[-\\w]+/,\n      alias: 'selector'\n    },\n    statement: {\n      pattern: /\\B!(?:default|optional)\\b/i,\n      alias: 'keyword'\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    operator: {\n      pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss\n}\n"],"mappings":"AAAA;AACA,OAAOA,YAAP,MAAyB,UAAzB;AACAC,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;AAEA;;AACA,eAAe,SAASF,IAAT,CAAcG,KAAd,EAAqB;EAClCA,KAAK,CAACC,QAAN,CAAeL,YAAf;EACAI,KAAK,CAACE,SAAN,CAAgBL,IAAhB,GAAuBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,EAA8B;IACnDC,OAAO,EAAE;MACPC,OAAO,EAAE,sCADF;MAEPC,UAAU,EAAE;IAFL,CAD0C;IAKnDC,MAAM,EAAE;MACNF,OAAO,EAAE,qDADH;MAENG,MAAM,EAAE;QACNC,IAAI,EAAE,SADA,CACU;;MADV;IAFF,CAL2C;IAWnD;IACAC,GAAG,EAAE,yBAZ8C;IAanD;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,QAAQ,EAAE;MACR;MACAN,OAAO,EACL,gGAHM;MAIRG,MAAM,EAAE;QACNI,MAAM,EAAE;UACNP,OAAO,EAAE,GADH;UAENQ,KAAK,EAAE;QAFD,CADF;QAKNC,WAAW,EAAE,SALP;QAMNC,QAAQ,EAAE;MANJ;IAJA,CApByC;IAiCnDC,QAAQ,EAAE;MACRX,OAAO,EAAE,0CADD;MAERG,MAAM,EAAE;QACNO,QAAQ,EAAE;MADJ;IAFA;EAjCyC,CAA9B,CAAvB;EAwCAf,KAAK,CAACE,SAAN,CAAgBe,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;IAC7CC,OAAO,EAAE,CACP,mHADO,EAEP;MACEb,OAAO,EAAE,0BADX;MAEEC,UAAU,EAAE;IAFd,CAFO;EADoC,CAA/C;EASAN,KAAK,CAACE,SAAN,CAAgBe,YAAhB,CAA6B,MAA7B,EAAqC,WAArC,EAAkD;IAChD;IACAF,QAAQ,EAAE;EAFsC,CAAlD;EAIAf,KAAK,CAACE,SAAN,CAAgBe,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;IAC/C,mBAAmB;MACjBZ,OAAO,EAAE,4BADQ;MAEjBQ,KAAK,EAAE;IAFU,CAD4B;IAK/CC,WAAW,EAAE;MACXT,OAAO,EAAE,SADE;MAEXQ,KAAK,EAAE;IAFI,CALkC;IAS/CM,SAAS,EAAE;MACTd,OAAO,EAAE,4BADA;MAETQ,KAAK,EAAE;IAFE,CAToC;IAa/CO,OAAO,EAAE,oBAbsC;IAc/CC,IAAI,EAAE;MACJhB,OAAO,EAAE,UADL;MAEJQ,KAAK,EAAE;IAFH,CAdyC;IAkB/CS,QAAQ,EAAE;MACRjB,OAAO,EAAE,iDADD;MAERC,UAAU,EAAE;IAFJ;EAlBqC,CAAjD;EAuBAN,KAAK,CAACE,SAAN,CAAgBL,IAAhB,CAAqB,QAArB,EAA+BW,MAA/B,CAAsCe,IAAtC,GAA6CvB,KAAK,CAACE,SAAN,CAAgBL,IAA7D;AACD"},"metadata":{},"sourceType":"module"}