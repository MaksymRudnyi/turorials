{"ast":null,"code":"var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function (stream, state) {\n    if (operator == \"|\") stream.eat(/\\|/);else if (operator == \"&\") stream.eat(/\\&/);\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function (stream, state) {\n    var word = ch;\n\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word)) return \"operator\";else if (isNumber(word)) return \"number\";else if (stream.peek() == \":\") return \"propertyName\";else return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"') state.tokenize = tokenString(ch);else if (isOperatorChar.test(ch)) state.tokenize = tokenOperator(ch);else if (isStringChar.test(ch)) state.tokenize = tokenWord(ch);\n  return state.tokenize != tokenBase ? state.tokenize(stream, state) : null;\n}\n\nexport const solr = {\n  startState: function () {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};","map":{"version":3,"names":["isStringChar","isOperatorChar","isOperatorString","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","escaped","next","tokenize","tokenBase","tokenOperator","operator","eat","tokenWord","ch","peek","match","test","solr","startState","token","eatSpace"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/solr.js"],"sourcesContent":["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function(stream, state) {\n    if (operator == \"|\")\n      stream.eat(/\\|/);\n    else if (operator == \"&\")\n      stream.eat(/\\&/);\n\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function(stream, state) {\n    var word = ch;\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word))\n      return \"operator\";\n    else if (isNumber(word))\n      return \"number\";\n    else if (stream.peek() == \":\")\n      return \"propertyName\";\n    else\n      return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"')\n    state.tokenize = tokenString(ch);\n  else if (isOperatorChar.test(ch))\n    state.tokenize = tokenOperator(ch);\n  else if (isStringChar.test(ch))\n    state.tokenize = tokenWord(ch);\n\n  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n}\n\nexport const solr = {\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}