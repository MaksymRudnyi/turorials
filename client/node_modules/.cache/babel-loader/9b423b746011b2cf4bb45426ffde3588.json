{"ast":null,"code":"function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/; //               (Backwards-compatibility with old, cumbersome config system)\n\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/];\n\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1);\n\n  var hangingIndent = parserConf.hangingIndent;\n  var myKeywords = commonKeywords,\n      myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n  if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins); // tokenizers\n\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\";\n    if (sol) state.indent = stream.indentation(); // Handle scope changes\n\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset) pushPyScope(stream, state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null; // Handle Comments\n\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\"; // Handle Number Literals\n\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false; // Floats\n\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n\n      if (stream.match(/^[\\d_]+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n\n      if (stream.match(/^\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      } // Integers\n\n\n      var intLiteral = false; // Hex\n\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true; // Binary\n\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true; // Octal\n\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true; // Decimal\n\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n        intLiteral = true;\n      } // Zero by itself with no other piece of number.\n\n\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    } // Handle Strings\n\n\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++) if (stream.match(operators[i])) return \"operator\";\n\n    if (stream.match(delimiters)) return \"punctuation\";\n    if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n    if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n    if (stream.match(builtins)) return \"builtin\";\n    if (stream.match(/^(self|cls)\\b/)) return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n      return \"variable\";\n    } // Handle non-detected items\n\n\n    stream.next();\n    return inFormat ? null : ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function (stream, state) {\n        var inner = tokenBaseInner(stream, state, true);\n\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1);\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n          }\n        }\n\n        return inner;\n      };\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0);\n          if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n      }\n\n      return OUTCLASS;\n    }\n\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n      }\n\n      return OUTCLASS;\n    }\n\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop();\n\n    state.scopes.push({\n      offset: top(state).offset + stream.indentUnit,\n      type: \"py\",\n      align: null\n    });\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1;\n    state.scopes.push({\n      offset: state.indent + (hangingIndent || stream.indentUnit),\n      type: type,\n      align: align\n    });\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n\n    var style = state.tokenize(stream, state);\n    var current = stream.current(); // Handle decorators\n\n    if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n    if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\"; // Handle scope changes.\n\n    if (current == \"pass\" || current == \"return\") state.dedent = true;\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false)) pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n      delimiter_index = \"])}\".indexOf(current);\n\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);else return ERRORCLASS;\n      }\n    }\n\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1) state.scopes.pop();\n    return style;\n  }\n\n  return {\n    startState: function () {\n      return {\n        tokenize: tokenBase,\n        scopes: [{\n          offset: 0,\n          type: \"py\",\n          align: null\n        }],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n    token: function (stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n      if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n      if (stream.eol() && state.lambda) state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n    indent: function (state, textAfter, cx) {\n      if (state.tokenize != tokenBase) return state.tokenize.isString ? null : 0;\n      var scope = top(state);\n      var closing = scope.type == textAfter.charAt(0) || scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);\n      if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent || cx.unit : 0);\n    },\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {\n        line: \"#\"\n      },\n      closeBrackets: {\n        brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']\n      }\n    }\n  };\n}\n;\n\nvar words = function (str) {\n  return str.split(\" \");\n};\n\nexport const python = mkPython({});\nexport const cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n});","map":{"version":3,"names":["wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","mkPython","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","myKeywords","myBuiltins","extra_keywords","undefined","concat","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","isFmtString","current","toLowerCase","indexOf","tokenize","tokenStringFactory","formatStringFactory","next","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","push","indentUnit","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","startState","token","addErr","textAfter","cx","scope","closing","unit","languageData","autocomplete","indentOnInput","commentTokens","line","closeBrackets","brackets","str","split","python","cython"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/python.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                      \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                      \"for\", \"from\", \"global\", \"if\", \"import\",\n                      \"lambda\", \"pass\", \"raise\", \"return\",\n                      \"try\", \"while\", \"with\", \"yield\", \"in\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                      \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                      \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                      \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                      \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                      \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                      \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                      \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                      \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                      \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                      \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n  //               (Backwards-compatibility with old, cumbersome config system)\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                   parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n  var hangingIndent = parserConf.hangingIndent;\n\n  var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined)\n    myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n  if (parserConf.extra_builtins != undefined)\n    myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                    \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                    \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins);\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\"\n    if (sol) state.indent = stream.indentation()\n    // Handle scope changes\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset)\n          pushPyScope(stream, state);\n        else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n          state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state))\n          style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null;\n\n    // Handle Comments\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n      if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n      // Binary\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n      // Octal\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n      // Decimal\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        // TODO - Can you have imaginary longs?\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++)\n      if (stream.match(operators[i])) return \"operator\"\n\n    if (stream.match(delimiters)) return \"punctuation\";\n\n    if (state.lastToken == \".\" && stream.match(identifiers))\n      return \"property\";\n\n    if (stream.match(keywords) || stream.match(wordOperators))\n      return \"keyword\";\n\n    if (stream.match(builtins))\n      return \"builtin\";\n\n    if (stream.match(/^(self|cls)\\b/))\n      return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\")\n        return \"def\";\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return inFormat ? null :ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function(stream, state) {\n        var inner = tokenBaseInner(stream, state, true)\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1)\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n            else state.tokenize = tokenString\n          }\n        }\n        return inner\n      }\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0)\n          if (stream.current()) return OUTCLASS;\n          else return state.tokenize(stream, state)\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop()\n    state.scopes.push({offset: top(state).offset + stream.indentUnit,\n                       type: \"py\",\n                       align: null})\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n    state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),\n                       type: type,\n                       align: align})\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n \n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle decorators\n    if (state.beginningOfLine && current == \"@\")\n      return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n\n    if ((style == \"variable\" || style == \"builtin\")\n        && state.lastToken == \"meta\")\n      style = \"meta\";\n\n    // Handle scope changes.\n    if (current == \"pass\" || current == \"return\")\n      state.dedent = true;\n\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n      pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit)\n        else return ERRORCLASS;\n      }\n    }\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n      state.scopes.pop();\n\n    return style;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{offset: 0, type: \"py\", align: null}],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n\n      if (style && style != \"comment\")\n        state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n\n      if (stream.eol() && state.lambda)\n        state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase)\n        return state.tokenize.isString ? null : 0;\n\n      var scope = top(state)\n      var closing = scope.type == textAfter.charAt(0) ||\n          scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n      if (scope.align != null)\n        return scope.align - (closing ? 1 : 0)\n      else\n        return scope.offset - (closing ? hangingIndent || cx.unit : 0)\n    },\n\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {line: \"#\"},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n    }\n  };\n};\n\nvar words = function(str) { return str.split(\" \"); };\n\nexport const python = mkPython({})\n\nexport const cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                        \"extern gil include nogil property public \"+\n                        \"readonly struct union DEF IF ELIF ELSE\")\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}