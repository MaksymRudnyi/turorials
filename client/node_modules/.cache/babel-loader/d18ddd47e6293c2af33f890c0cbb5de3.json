{"ast":null,"code":"// @ts-nocheck\ncooklang.displayName = 'cooklang';\ncooklang.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function cooklang(Prism) {\n  ;\n\n  (function (Prism) {\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\n    var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source;\n    var multi_token_infix = /[^{}@#]+/.source;\n    var multi_token_suffix = /\\{[^}#@]*\\}/.source;\n    var multi_token = multi_token_infix + multi_token_suffix;\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source;\n    var amount_group_impl = {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        amount: {\n          pattern: /([\\{|])[^{}|*%]+/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        unit: {\n          pattern: /(%)[^}]+/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        'servings-scaler': {\n          pattern: /\\*/,\n          alias: 'operator'\n        },\n        'servings-alternative-separator': {\n          pattern: /\\|/,\n          alias: 'operator'\n        },\n        'unit-separator': {\n          pattern: /(?:%|(\\*)%)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        punctuation: /[{}]/\n      }\n    };\n    Prism.languages.cooklang = {\n      comment: {\n        // [- comment -]\n        // -- comment\n        pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n        greedy: true\n      },\n      meta: {\n        // >> key: value\n        pattern: />>.*:.*/,\n        inside: {\n          property: {\n            // key:\n            pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n            lookbehind: true\n          }\n        }\n      },\n      'cookware-group': {\n        // #...{...}, #...\n        pattern: new RegExp('#(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          cookware: {\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'cookware-keyword': {\n            pattern: /^#/,\n            alias: 'keyword'\n          },\n          'quantity-group': {\n            pattern: new RegExp(/\\{[^{}@#]*\\}/),\n            inside: {\n              quantity: {\n                pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n                lookbehind: true,\n                alias: 'number'\n              },\n              punctuation: /[{}]/\n            }\n          }\n        }\n      },\n      'ingredient-group': {\n        // @...{...}, @...\n        pattern: new RegExp('@(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          ingredient: {\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'ingredient-keyword': {\n            pattern: /^@/,\n            alias: 'keyword'\n          },\n          'amount-group': amount_group_impl\n        }\n      },\n      'timer-group': {\n        // ~timer{...}\n        // eslint-disable-next-line regexp/sort-alternatives\n        pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n        inside: {\n          timer: {\n            pattern: /(^~)[^{]+/,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'duration-group': {\n            // {...}\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n              punctuation: /[{}]/,\n              unit: {\n                pattern: new RegExp(/(%\\s*)/.source + timer_units + /\\b/.source),\n                lookbehind: true,\n                alias: 'symbol'\n              },\n              operator: /%/,\n              duration: {\n                pattern: /\\d+/,\n                alias: 'number'\n              }\n            }\n          },\n          'timer-keyword': {\n            pattern: /^~/,\n            alias: 'keyword'\n          }\n        }\n      }\n    };\n  })(Prism);\n}","map":{"version":3,"names":["cooklang","displayName","aliases","Prism","single_token_suffix","source","multi_token_infix","multi_token_suffix","multi_token","timer_units","amount_group_impl","pattern","inside","amount","lookbehind","alias","unit","punctuation","languages","comment","greedy","meta","property","RegExp","cookware","quantity","ingredient","timer","operator","duration"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/cooklang.js"],"sourcesContent":["// @ts-nocheck\ncooklang.displayName = 'cooklang'\ncooklang.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function cooklang(Prism) {\n  ;(function (Prism) {\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\n    var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source\n    var multi_token_infix = /[^{}@#]+/.source\n    var multi_token_suffix = /\\{[^}#@]*\\}/.source\n    var multi_token = multi_token_infix + multi_token_suffix\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source\n    var amount_group_impl = {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        amount: {\n          pattern: /([\\{|])[^{}|*%]+/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        unit: {\n          pattern: /(%)[^}]+/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        'servings-scaler': {\n          pattern: /\\*/,\n          alias: 'operator'\n        },\n        'servings-alternative-separator': {\n          pattern: /\\|/,\n          alias: 'operator'\n        },\n        'unit-separator': {\n          pattern: /(?:%|(\\*)%)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        punctuation: /[{}]/\n      }\n    }\n    Prism.languages.cooklang = {\n      comment: {\n        // [- comment -]\n        // -- comment\n        pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n        greedy: true\n      },\n      meta: {\n        // >> key: value\n        pattern: />>.*:.*/,\n        inside: {\n          property: {\n            // key:\n            pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n            lookbehind: true\n          }\n        }\n      },\n      'cookware-group': {\n        // #...{...}, #...\n        pattern: new RegExp(\n          '#(?:' + multi_token + '|' + single_token_suffix + ')'\n        ),\n        inside: {\n          cookware: {\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'cookware-keyword': {\n            pattern: /^#/,\n            alias: 'keyword'\n          },\n          'quantity-group': {\n            pattern: new RegExp(/\\{[^{}@#]*\\}/),\n            inside: {\n              quantity: {\n                pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n                lookbehind: true,\n                alias: 'number'\n              },\n              punctuation: /[{}]/\n            }\n          }\n        }\n      },\n      'ingredient-group': {\n        // @...{...}, @...\n        pattern: new RegExp(\n          '@(?:' + multi_token + '|' + single_token_suffix + ')'\n        ),\n        inside: {\n          ingredient: {\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'ingredient-keyword': {\n            pattern: /^@/,\n            alias: 'keyword'\n          },\n          'amount-group': amount_group_impl\n        }\n      },\n      'timer-group': {\n        // ~timer{...}\n        // eslint-disable-next-line regexp/sort-alternatives\n        pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n        inside: {\n          timer: {\n            pattern: /(^~)[^{]+/,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'duration-group': {\n            // {...}\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n              punctuation: /[{}]/,\n              unit: {\n                pattern: new RegExp(\n                  /(%\\s*)/.source + timer_units + /\\b/.source\n                ),\n                lookbehind: true,\n                alias: 'symbol'\n              },\n              operator: /%/,\n              duration: {\n                pattern: /\\d+/,\n                alias: 'number'\n              }\n            }\n          },\n          'timer-keyword': {\n            pattern: /^~/,\n            alias: 'keyword'\n          }\n        }\n      }\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA;AACAA,QAAQ,CAACC,WAAT,GAAuB,UAAvB;AACAD,QAAQ,CAACE,OAAT,GAAmB,EAAnB;AAEA;;AACA,eAAe,SAASF,QAAT,CAAkBG,KAAlB,EAAyB;EACtC;;EAAC,CAAC,UAAUA,KAAV,EAAiB;IACjB;IACA,IAAIC,mBAAmB,GAAG,uCAAuCC,MAAjE;IACA,IAAIC,iBAAiB,GAAG,WAAWD,MAAnC;IACA,IAAIE,kBAAkB,GAAG,cAAcF,MAAvC;IACA,IAAIG,WAAW,GAAGF,iBAAiB,GAAGC,kBAAtC;IACA,IAAIE,WAAW,GAAG,gCAAgCJ,MAAlD;IACA,IAAIK,iBAAiB,GAAG;MACtBC,OAAO,EAAE,YADa;MAEtBC,MAAM,EAAE;QACNC,MAAM,EAAE;UACNF,OAAO,EAAE,kBADH;UAENG,UAAU,EAAE,IAFN;UAGNC,KAAK,EAAE;QAHD,CADF;QAMNC,IAAI,EAAE;UACJL,OAAO,EAAE,UADL;UAEJG,UAAU,EAAE,IAFR;UAGJC,KAAK,EAAE;QAHH,CANA;QAWN,mBAAmB;UACjBJ,OAAO,EAAE,IADQ;UAEjBI,KAAK,EAAE;QAFU,CAXb;QAeN,kCAAkC;UAChCJ,OAAO,EAAE,IADuB;UAEhCI,KAAK,EAAE;QAFyB,CAf5B;QAmBN,kBAAkB;UAChBJ,OAAO,EAAE,aADO;UAEhBG,UAAU,EAAE,IAFI;UAGhBC,KAAK,EAAE;QAHS,CAnBZ;QAwBNE,WAAW,EAAE;MAxBP;IAFc,CAAxB;IA6BAd,KAAK,CAACe,SAAN,CAAgBlB,QAAhB,GAA2B;MACzBmB,OAAO,EAAE;QACP;QACA;QACAR,OAAO,EAAE,qBAHF;QAIPS,MAAM,EAAE;MAJD,CADgB;MAOzBC,IAAI,EAAE;QACJ;QACAV,OAAO,EAAE,SAFL;QAGJC,MAAM,EAAE;UACNU,QAAQ,EAAE;YACR;YACAX,OAAO,EAAE,+BAFD;YAGRG,UAAU,EAAE;UAHJ;QADJ;MAHJ,CAPmB;MAkBzB,kBAAkB;QAChB;QACAH,OAAO,EAAE,IAAIY,MAAJ,CACP,SAASf,WAAT,GAAuB,GAAvB,GAA6BJ,mBAA7B,GAAmD,GAD5C,CAFO;QAKhBQ,MAAM,EAAE;UACNY,QAAQ,EAAE;YACRb,OAAO,EAAE,IAAIY,MAAJ,CAAW,YAAYjB,iBAAZ,GAAgC,GAA3C,CADD;YAERQ,UAAU,EAAE,IAFJ;YAGRC,KAAK,EAAE;UAHC,CADJ;UAMN,oBAAoB;YAClBJ,OAAO,EAAE,IADS;YAElBI,KAAK,EAAE;UAFW,CANd;UAUN,kBAAkB;YAChBJ,OAAO,EAAE,IAAIY,MAAJ,CAAW,cAAX,CADO;YAEhBX,MAAM,EAAE;cACNa,QAAQ,EAAE;gBACRd,OAAO,EAAE,IAAIY,MAAJ,CAAW,QAAQlB,MAAR,GAAiBC,iBAA5B,CADD;gBAERQ,UAAU,EAAE,IAFJ;gBAGRC,KAAK,EAAE;cAHC,CADJ;cAMNE,WAAW,EAAE;YANP;UAFQ;QAVZ;MALQ,CAlBO;MA8CzB,oBAAoB;QAClB;QACAN,OAAO,EAAE,IAAIY,MAAJ,CACP,SAASf,WAAT,GAAuB,GAAvB,GAA6BJ,mBAA7B,GAAmD,GAD5C,CAFS;QAKlBQ,MAAM,EAAE;UACNc,UAAU,EAAE;YACVf,OAAO,EAAE,IAAIY,MAAJ,CAAW,YAAYjB,iBAAZ,GAAgC,GAA3C,CADC;YAEVQ,UAAU,EAAE,IAFF;YAGVC,KAAK,EAAE;UAHG,CADN;UAMN,sBAAsB;YACpBJ,OAAO,EAAE,IADW;YAEpBI,KAAK,EAAE;UAFa,CANhB;UAUN,gBAAgBL;QAVV;MALU,CA9CK;MAgEzB,eAAe;QACb;QACA;QACAC,OAAO,EAAE,4BAHI;QAIbC,MAAM,EAAE;UACNe,KAAK,EAAE;YACLhB,OAAO,EAAE,WADJ;YAELG,UAAU,EAAE,IAFP;YAGLC,KAAK,EAAE;UAHF,CADD;UAMN,kBAAkB;YAChB;YACAJ,OAAO,EAAE,YAFO;YAGhBC,MAAM,EAAE;cACNK,WAAW,EAAE,MADP;cAEND,IAAI,EAAE;gBACJL,OAAO,EAAE,IAAIY,MAAJ,CACP,SAASlB,MAAT,GAAkBI,WAAlB,GAAgC,KAAKJ,MAD9B,CADL;gBAIJS,UAAU,EAAE,IAJR;gBAKJC,KAAK,EAAE;cALH,CAFA;cASNa,QAAQ,EAAE,GATJ;cAUNC,QAAQ,EAAE;gBACRlB,OAAO,EAAE,KADD;gBAERI,KAAK,EAAE;cAFC;YAVJ;UAHQ,CANZ;UAyBN,iBAAiB;YACfJ,OAAO,EAAE,IADM;YAEfI,KAAK,EAAE;UAFQ;QAzBX;MAJK;IAhEU,CAA3B;EAoGD,CAxIA,EAwIEZ,KAxIF;AAyIF"},"metadata":{},"sourceType":"module"}