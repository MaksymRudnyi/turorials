{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Fragment, useContext, useEffect, useRef } from 'react';\nimport { EditorContext } from '../../Context';\nimport Child from './Child';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ToolbarItems(props) {\n  var {\n    prefixCls,\n    overflow\n  } = props;\n  var {\n    fullscreen,\n    preview,\n    barPopup = {},\n    components,\n    commandOrchestrator,\n    dispatch\n  } = useContext(EditorContext);\n  var originalOverflow = useRef('');\n\n  function handleClick(command, name) {\n    if (!dispatch) return;\n    var state = {\n      barPopup: _extends({}, barPopup)\n    };\n\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value;\n    }\n\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n    }\n\n    if (props.commands && command.keyCommand === 'group') {\n      props.commands.forEach(item => {\n        if (name === item.groupName) {\n          state.barPopup[name] = true;\n        } else if (item.keyCommand) {\n          state.barPopup[item.groupName] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach(keyName => {\n        state.barPopup[keyName] = false;\n      });\n    }\n\n    if (Object.keys(state).length) {\n      dispatch(_extends({}, state));\n    }\n\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n\n  useEffect(() => {\n    if (document && overflow) {\n      if (fullscreen) {\n        // prevent scroll on fullscreen\n        document.body.style.overflow = 'hidden';\n      } else {\n        // get the original overflow only the first time\n        if (!originalOverflow.current) {\n          originalOverflow.current = window.getComputedStyle(document.body, null).overflow;\n        } // reset to the original overflow\n\n\n        document.body.style.overflow = originalOverflow.current;\n      }\n    }\n  }, [fullscreen, originalOverflow, overflow]);\n  return /*#__PURE__*/_jsx(\"ul\", {\n    children: (props.commands || []).map((item, idx) => {\n      if (item.keyCommand === 'divider') {\n        return /*#__PURE__*/_jsx(\"li\", _extends({}, item.liProps, {\n          className: prefixCls + \"-toolbar-divider\"\n        }), idx);\n      }\n\n      if (!item.keyCommand) return /*#__PURE__*/_jsx(Fragment, {}, idx);\n      var activeBtn = fullscreen && item.keyCommand === 'fullscreen' || item.keyCommand === 'preview' && preview === item.value;\n      var childNode = item.children && typeof item.children === 'function' ? item.children({\n        getState: () => commandOrchestrator.getState(),\n        textApi: commandOrchestrator ? commandOrchestrator.textApi : undefined,\n        close: () => handleClick({}, item.groupName),\n        execute: () => handleClick({\n          execute: item.execute\n        })\n      }) : undefined;\n      var disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n      var render = (components == null ? void 0 : components.toolbar) || item.render;\n      var com = render && typeof render === 'function' ? render(item, !!disabled, handleClick, idx) : null;\n      return /*#__PURE__*/_jsxs(\"li\", _extends({}, item.liProps, {\n        className: activeBtn ? \"active\" : '',\n        children: [com && /*#__PURE__*/React.isValidElement(com) && com, !com && !item.buttonProps && item.icon, !com && item.buttonProps && /*#__PURE__*/React.createElement('button', _extends({\n          type: 'button',\n          key: idx,\n          disabled,\n          'data-name': item.name\n        }, item.buttonProps, {\n          onClick: evn => {\n            evn.stopPropagation();\n            handleClick(item, item.groupName);\n          }\n        }), item.icon), item.children && /*#__PURE__*/_jsx(Child, {\n          overflow: overflow,\n          groupName: item.groupName,\n          prefixCls: prefixCls,\n          children: childNode,\n          commands: Array.isArray(item.children) ? item.children : undefined\n        })]\n      }), idx);\n    })\n  });\n}\nexport default function Toolbar(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    prefixCls,\n    toolbarBottom,\n    isChild\n  } = props;\n  var {\n    commands,\n    extraCommands\n  } = useContext(EditorContext);\n  var bottomClassName = toolbarBottom ? 'bottom' : '';\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: prefixCls + \"-toolbar \" + bottomClassName,\n    children: [/*#__PURE__*/_jsx(ToolbarItems, _extends({}, props, {\n      commands: props.commands || commands || []\n    })), !isChild && /*#__PURE__*/_jsx(ToolbarItems, _extends({}, props, {\n      commands: extraCommands || []\n    }))]\n  });\n}","map":{"version":3,"sources":["../../../src/components/Toolbar/index.tsx"],"names":["overflow","barPopup","dispatch","useContext","originalOverflow","useRef","state","command","props","item","name","Object","keyName","commandOrchestrator","useEffect","document","window","prefixCls","activeBtn","fullscreen","preview","childNode","getState","textApi","close","handleClick","execute","disabled","render","com","React","type","key","onClick","evn","Array","undefined","isChild","extraCommands","bottomClassName","toolbarBottom"],"mappings":";AAAA,OAAA,KAAA,IAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,MAAA,QAAA,OAAA;AAEA,SAAA,aAAA,QAAA,eAAA;AAEA,OAAA,KAAA,MAAA,SAAA;AACA,OAAA,aAAA;;;AAUA,OAAO,SAAA,YAAA,CAAA,KAAA,EAA4C;EACjD,IAAM;IAAA,SAAA;IAAaA;EAAb,IAAN,KAAA;EACA,IAAM;IAAA,UAAA;IAAA,OAAA;IAAuBC,QAAQ,GAA/B,EAAA;IAAA,UAAA;IAAA,mBAAA;IAAuEC;EAAvE,IAAoFC,UAAU,CAApG,aAAoG,CAApG;EACA,IAAMC,gBAAgB,GAAGC,MAAM,CAA/B,EAA+B,CAA/B;;EAEA,SAAA,WAAA,CAAA,OAAA,EAAA,IAAA,EAA+D;IAC7D,IAAI,CAAJ,QAAA,EAAe;IACf,IAAMC,KAAmB,GAAG;MAAEL,QAAQ,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA;IAAV,CAA5B;;IACA,IAAIM,OAAO,CAAPA,UAAAA,KAAJ,SAAA,EAAsC;MACpCD,KAAK,CAALA,OAAAA,GAAgBC,OAAO,CAAvBD,KAAAA;IACD;;IACD,IAAIC,OAAO,CAAPA,UAAAA,KAAJ,YAAA,EAAyC;MACvCD,KAAK,CAALA,UAAAA,GAAmB,CAAnBA,UAAAA;IACD;;IACD,IAAIE,KAAK,CAALA,QAAAA,IAAkBD,OAAO,CAAPA,UAAAA,KAAtB,OAAA,EAAsD;MACpDC,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAwBC,IAAD,IAAU;QAC/B,IAAIC,IAAI,KAAKD,IAAI,CAAjB,SAAA,EAA6B;UAC3BH,KAAK,CAALA,QAAAA,CAAAA,IAAAA,IAAAA,IAAAA;QADF,CAAA,MAEO,IAAIG,IAAI,CAAR,UAAA,EAAqB;UAC1BH,KAAK,CAALA,QAAAA,CAAgBG,IAAI,CAApBH,SAAAA,IAAAA,KAAAA;QACD;MALHE,CAAAA;IADF,CAAA,MAQO,IAAIE,IAAI,IAAIH,OAAO,CAAnB,MAAA,EAA4B;MACjCI,MAAM,CAANA,IAAAA,CAAYL,KAAK,CAALA,QAAAA,IAAZK,EAAAA,EAAAA,OAAAA,CAA2CC,OAAD,IAAa;QACrDN,KAAK,CAALA,QAAAA,CAAAA,OAAAA,IAAAA,KAAAA;MADFK,CAAAA;IAGD;;IAED,IAAIA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAAJ,MAAA,EAA+B;MAC7BT,QAAQ,CAAA,QAAA,CAAA,EAAA,EAARA,KAAQ,CAAA,CAARA;IACD;;IACDW,mBAAmB,IAAIA,mBAAmB,CAAnBA,cAAAA,CAAvBA,OAAuBA,CAAvBA;EACD;;EAEDC,SAAS,CAAC,MAAM;IACd,IAAIC,QAAQ,IAAZ,QAAA,EAA0B;MACxB,IAAA,UAAA,EAAgB;QACd;QACAA,QAAQ,CAARA,IAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GAAAA,QAAAA;MAFF,CAAA,MAGO;QACL;QACA,IAAI,CAACX,gBAAgB,CAArB,OAAA,EAA+B;UAC7BA,gBAAgB,CAAhBA,OAAAA,GAA2BY,MAAM,CAANA,gBAAAA,CAAwBD,QAAQ,CAAhCC,IAAAA,EAAAA,IAAAA,EAA3BZ,QAAAA;QAHG,CAAA,CAKL;;;QACAW,QAAQ,CAARA,IAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GAA+BX,gBAAgB,CAA/CW,OAAAA;MACD;IACF;EAbM,CAAA,EAcN,CAAA,UAAA,EAAA,gBAAA,EAdHD,QAcG,CAdM,CAATA;EAgBA,OAAA,aACE,IAAA,CAAA,IAAA,EAAA;IAAA,QAAA,EACG,CAACN,KAAK,CAALA,QAAAA,IAAD,EAAA,EAAA,GAAA,CAA2B,CAAA,IAAA,EAAA,GAAA,KAAe;MACzC,IAAIC,IAAI,CAAJA,UAAAA,KAAJ,SAAA,EAAmC;QACjC,OAAA,aAAO,IAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAkBA,IAAI,CAAtB,OAAA,EAAA;UAAgC,SAAS,EAAKQ,SAAL,GAAA;QAAzC,CAAA,CAAA,EAAP,GAAO,CAAP;MACD;;MACD,IAAI,CAACR,IAAI,CAAT,UAAA,EAAsB,OAAA,aAAO,IAAA,CAAA,QAAA,EAAA,EAAA,EAAP,GAAO,CAAP;MACtB,IAAMS,SAAS,GACZC,UAAU,IAAIV,IAAI,CAAJA,UAAAA,KAAf,YAACU,IAAoDV,IAAI,CAAJA,UAAAA,KAAAA,SAAAA,IAAiCW,OAAO,KAAKX,IAAI,CADxG,KAAA;MAEA,IAAMY,SAAS,GACb,IAAI,CAAJ,QAAA,IAAiB,OAAOZ,IAAI,CAAX,QAAA,KAAjB,UAAA,GACI,IAAI,CAAJ,QAAA,CAAc;QACZa,QAAQ,EAAE,MAAMT,mBAAmB,CADvB,QACIA,EADJ;QAEZU,OAAO,EAAEV,mBAAmB,GAAGA,mBAAmB,CAAtB,OAAA,GAFhB,SAAA;QAGZW,KAAK,EAAE,MAAMC,WAAW,CAAA,EAAA,EAAKhB,IAAI,CAHrB,SAGY,CAHZ;QAIZiB,OAAO,EAAE,MAAMD,WAAW,CAAC;UAAEC,OAAO,EAAEjB,IAAI,CAACiB;QAAhB,CAAD;MAJd,CAAd,CADJ,GADF,SAAA;MASA,IAAMC,QAAQ,GAAG1B,QAAQ,IAARA,OAAAA,IAAuBmB,OAAO,KAA9BnB,SAAAA,IAAgD,CAAC,uBAAA,IAAA,CAA4BQ,IAAI,CAAlG,UAAkE,CAAlE;MACA,IAAMmB,MAAM,GAAG,CAAA,UAAU,IAAV,IAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,OAAA,KAAuBnB,IAAI,CAA1C,MAAA;MACA,IAAMoB,GAAG,GACPD,MAAM,IAAI,OAAA,MAAA,KAAVA,UAAAA,GAAyCA,MAAM,CAAA,IAAA,EAAO,CAAC,CAAR,QAAA,EAAA,WAAA,EAA/CA,GAA+C,CAA/CA,GADF,IAAA;MAGA,OAAA,aACE,KAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAkBnB,IAAI,CAAtB,OAAA,EAAA;QAAgC,SAAS,EAAES,SAAS,GAAA,QAAA,GAApD,EAAA;QAAA,QAAA,EAAA,CACGW,GAAG,IAAA,aAAIC,KAAK,CAALA,cAAAA,CAAPD,GAAOC,CAAPD,IADH,GAAA,EAEG,CAAA,GAAA,IAAQ,CAACpB,IAAI,CAAb,WAAA,IAA6BA,IAAI,CAFpC,IAAA,EAGG,CAAA,GAAA,IACCA,IAAI,CADL,WAAA,IAAA,aAEC,KAAK,CAAL,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;UAGIsB,IAAI,EAHR,QAAA;UAIIC,GAAG,EAJP,GAAA;UAAA,QAAA;UAMI,aAAavB,IAAI,CAACC;QANtB,CAAA,EAOOD,IAAI,CAPX,WAAA,EAAA;UAQIwB,OAAO,EAAGC,GAAD,IAA0D;YACjEA,GAAG,CAAHA,eAAAA;YACAT,WAAW,CAAA,IAAA,EAAOhB,IAAI,CAAtBgB,SAAW,CAAXA;UACD;QAXL,CAAA,CAAA,EAaEhB,IAAI,CAlBV,IAKI,CALJ,EAoBGA,IAAI,CAAJA,QAAAA,IAAAA,aACC,IAAA,CAAA,KAAA,EAAA;UACE,QAAQ,EADV,QAAA;UAEE,SAAS,EAAEA,IAAI,CAFjB,SAAA;UAGE,SAAS,EAHX,SAAA;UAIE,QAAQ,EAJV,SAAA;UAKE,QAAQ,EAAE0B,KAAK,CAALA,OAAAA,CAAc1B,IAAI,CAAlB0B,QAAAA,IAA+B1B,IAAI,CAAnC0B,QAAAA,GAA+CC;QAL3D,CAAA,CArBJ;MAAA,CAAA,CAAA,EADF,GACE,CADF;IArBD,CAAA;EADH,CAAA,CADF;AA0DD;AAED,eAAe,SAAA,OAAA,CAAA,KAAA,EAA4C;EAAA,IAA3B5B,KAA2B,KAAA,KAAA,CAAA,EAAA;IAA3BA,KAA2B,GAAJ,EAAvBA;EAA2B;;EACzD,IAAM;IAAA,SAAA;IAAA,aAAA;IAA4B6B;EAA5B,IAAN,KAAA;EACA,IAAM;IAAA,QAAA;IAAYC;EAAZ,IAA8BnC,UAAU,CAA9C,aAA8C,CAA9C;EACA,IAAMoC,eAAe,GAAGC,aAAa,GAAA,QAAA,GAArC,EAAA;EACA,OAAA,aACE,KAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAKvB,SAAL,GAAA,WAAKA,GAAnB,eAAA;IAAA,QAAA,EAAA,CAAA,aACE,IAAA,CAAA,YAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;MAAyB,QAAQ,EAAET,KAAK,CAALA,QAAAA,IAAAA,QAAAA,IAA8B;IAAjE,CAAA,CAAA,CADF,EAEG,CAAA,OAAA,IAAA,aAAY,IAAA,CAAA,YAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;MAAyB,QAAQ,EAAE8B,aAAa,IAAI;IAApD,CAAA,CAAA,CAFf;EAAA,CAAA,CADF;AAMD","sourcesContent":["import React, { Fragment, useContext, useEffect, useRef } from 'react';\nimport { IProps } from '../../Editor';\nimport { EditorContext, PreviewType, ContextStore } from '../../Context';\nimport { ICommand } from '../../commands';\nimport Child from './Child';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  overflow?: boolean;\n  toolbarBottom?: boolean;\n  onCommand?: (command: ICommand<string>, groupName?: string) => void;\n  commands?: ICommand<string>[];\n  isChild?: boolean;\n}\n\nexport function ToolbarItems(props: IToolbarProps) {\n  const { prefixCls, overflow } = props;\n  const { fullscreen, preview, barPopup = {}, components, commandOrchestrator, dispatch } = useContext(EditorContext);\n  const originalOverflow = useRef('');\n\n  function handleClick(command: ICommand<string>, name?: string) {\n    if (!dispatch) return;\n    const state: ContextStore = { barPopup: { ...barPopup } };\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value as PreviewType;\n    }\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n    }\n    if (props.commands && command.keyCommand === 'group') {\n      props.commands.forEach((item) => {\n        if (name === item.groupName) {\n          state.barPopup![name!] = true;\n        } else if (item.keyCommand) {\n          state.barPopup![item.groupName!] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach((keyName) => {\n        state.barPopup![keyName] = false;\n      });\n    }\n\n    if (Object.keys(state).length) {\n      dispatch({ ...state });\n    }\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n\n  useEffect(() => {\n    if (document && overflow) {\n      if (fullscreen) {\n        // prevent scroll on fullscreen\n        document.body.style.overflow = 'hidden';\n      } else {\n        // get the original overflow only the first time\n        if (!originalOverflow.current) {\n          originalOverflow.current = window.getComputedStyle(document.body, null).overflow;\n        }\n        // reset to the original overflow\n        document.body.style.overflow = originalOverflow.current;\n      }\n    }\n  }, [fullscreen, originalOverflow, overflow]);\n\n  return (\n    <ul>\n      {(props.commands || []).map((item, idx) => {\n        if (item.keyCommand === 'divider') {\n          return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />;\n        }\n        if (!item.keyCommand) return <Fragment key={idx} />;\n        const activeBtn =\n          (fullscreen && item.keyCommand === 'fullscreen') || (item.keyCommand === 'preview' && preview === item.value);\n        const childNode =\n          item.children && typeof item.children === 'function'\n            ? item.children({\n                getState: () => commandOrchestrator!.getState(),\n                textApi: commandOrchestrator ? commandOrchestrator!.textApi : undefined,\n                close: () => handleClick({}, item.groupName),\n                execute: () => handleClick({ execute: item.execute }),\n              })\n            : undefined;\n        const disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n        const render = components?.toolbar || item.render;\n        const com = (\n          render && typeof render === 'function' ? render(item, !!disabled, handleClick, idx) : null\n        ) as React.ReactElement;\n        return (\n          <li key={idx} {...item.liProps} className={activeBtn ? `active` : ''}>\n            {com && React.isValidElement(com) && com}\n            {!com && !item.buttonProps && item.icon}\n            {!com &&\n              item.buttonProps &&\n              React.createElement(\n                'button',\n                {\n                  type: 'button',\n                  key: idx,\n                  disabled,\n                  'data-name': item.name,\n                  ...item.buttonProps,\n                  onClick: (evn: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                    evn.stopPropagation();\n                    handleClick(item, item.groupName);\n                  },\n                },\n                item.icon,\n              )}\n            {item.children && (\n              <Child\n                overflow={overflow}\n                groupName={item.groupName}\n                prefixCls={prefixCls}\n                children={childNode}\n                commands={Array.isArray(item.children) ? item.children : undefined}\n              />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls, toolbarBottom, isChild } = props;\n  const { commands, extraCommands } = useContext(EditorContext);\n  const bottomClassName = toolbarBottom ? 'bottom' : '';\n  return (\n    <div className={`${prefixCls}-toolbar ${bottomClassName}`}>\n      <ToolbarItems {...props} commands={props.commands || commands || []} />\n      {!isChild && <ToolbarItems {...props} commands={extraCommands || []} />}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}