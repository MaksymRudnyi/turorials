{"ast":null,"code":"const characterReferences = {\n  '\"': 'quot',\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt'\n};\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace);\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';';\n  }\n}","map":{"version":3,"names":["characterReferences","encode","value","replace"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-util-encode/index.js"],"sourcesContent":["const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG;EAAC,KAAK,MAAN;EAAc,KAAK,KAAnB;EAA0B,KAAK,IAA/B;EAAqC,KAAK;AAA1C,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;EAC5B,OAAOA,KAAK,CAACC,OAAN,CAAc,SAAd,EAAyBA,OAAzB,CAAP;EAEA;AACF;AACA;AACA;;EACE,SAASA,OAAT,CAAiBD,KAAjB,EAAwB;IACtB;IACA,OAAO,MAAMF,mBAAmB,CAACE,KAAD,CAAzB,GAAmC,GAA1C;EACD;AACF"},"metadata":{},"sourceType":"module"}