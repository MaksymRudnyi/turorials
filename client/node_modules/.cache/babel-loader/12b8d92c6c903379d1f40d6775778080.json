{"ast":null,"code":"function parseWords(str) {\n  var obj = {},\n      words = str.split(\" \");\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nvar keywords = parseWords(\"#end #else #break #stop #[[ #]] \" + \"#{end} #{else} #{break} #{stop}\");\nvar functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" + \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\nvar specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\nvar isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next(); // start of unparsed string?\n\n  if (ch == \"'\" && !state.inString && state.inParams) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenString(ch));\n  } // start of parsed string?\n  else if (ch == '\"') {\n    state.lastTokenWasBuiltin = false;\n\n    if (state.inString) {\n      state.inString = false;\n      return \"string\";\n    } else if (state.inParams) return chain(stream, state, tokenString(ch));\n  } // is it one of the special signs []{}().,;? Separator?\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") {\n      state.inParams = false;\n      state.lastTokenWasBuiltin = true;\n    }\n    return null;\n  } // start of a number value?\n  else if (/\\d/.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } // multi line comment?\n  else if (ch == \"#\" && stream.eat(\"*\")) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenComment);\n  } // unparsed content?\n  else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenUnparsed);\n  } // single line comment?\n  else if (ch == \"#\" && stream.eat(\"#\")) {\n    state.lastTokenWasBuiltin = false;\n    stream.skipToEnd();\n    return \"comment\";\n  } // variable?\n  else if (ch == \"$\") {\n    stream.eat(\"!\");\n    stream.eatWhile(/[\\w\\d\\$_\\.{}-]/); // is it one of the specials?\n\n    if (specials && specials.propertyIsEnumerable(stream.current())) {\n      return \"keyword\";\n    } else {\n      state.lastTokenWasBuiltin = true;\n      state.beforeParams = true;\n      return \"builtin\";\n    }\n  } // is it a operator?\n  else if (isOperatorChar.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  } else {\n    // get the whole word\n    stream.eatWhile(/[\\w\\$_{}@]/);\n    var word = stream.current(); // is it one of the listed keywords?\n\n    if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\"; // is it one of the listed functions?\n\n    if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n      state.beforeParams = true;\n      state.lastTokenWasBuiltin = false;\n      return \"keyword\";\n    }\n\n    if (state.inString) {\n      state.lastTokenWasBuiltin = false;\n      return \"string\";\n    }\n\n    if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\"; // default: just a \"word\"\n\n    state.lastTokenWasBuiltin = false;\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n        next,\n        end = false;\n\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n\n      if (quote == '\"' && stream.peek() == '$' && !escaped) {\n        state.inString = true;\n        end = true;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    maybeEnd = ch == \"*\";\n  }\n\n  return \"comment\";\n}\n\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0,\n      ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n\n    if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n  }\n\n  return \"meta\";\n} // Interface\n\n\nexport const velocity = {\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false,\n      inString: false,\n      lastTokenWasBuiltin: false\n    };\n  },\n  token: function (stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"##\",\n      block: {\n        open: \"#*\",\n        close: \"*#\"\n      }\n    }\n  }\n};","map":{"version":3,"names":["parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","velocity","startState","token","eatSpace","languageData","commentTokens","line","block","open","close"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/velocity.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                          \"#{end} #{else} #{break} #{stop}\");\nvar functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                           \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\nvar specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\nvar isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  // start of unparsed string?\n  if ((ch == \"'\") && !state.inString && state.inParams) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenString(ch));\n  }\n  // start of parsed string?\n  else if ((ch == '\"')) {\n    state.lastTokenWasBuiltin = false;\n    if (state.inString) {\n      state.inString = false;\n      return \"string\";\n    }\n    else if (state.inParams)\n      return chain(stream, state, tokenString(ch));\n  }\n  // is it one of the special signs []{}().,;? Separator?\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams)\n      state.inParams = true;\n    else if (ch == \")\") {\n      state.inParams = false;\n      state.lastTokenWasBuiltin = true;\n    }\n    return null;\n  }\n  // start of a number value?\n  else if (/\\d/.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment?\n  else if (ch == \"#\" && stream.eat(\"*\")) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenComment);\n  }\n  // unparsed content?\n  else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n    state.lastTokenWasBuiltin = false;\n    return chain(stream, state, tokenUnparsed);\n  }\n  // single line comment?\n  else if (ch == \"#\" && stream.eat(\"#\")) {\n    state.lastTokenWasBuiltin = false;\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // variable?\n  else if (ch == \"$\") {\n    stream.eat(\"!\");\n    stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n    // is it one of the specials?\n    if (specials && specials.propertyIsEnumerable(stream.current())) {\n      return \"keyword\";\n    }\n    else {\n      state.lastTokenWasBuiltin = true;\n      state.beforeParams = true;\n      return \"builtin\";\n    }\n  }\n  // is it a operator?\n  else if (isOperatorChar.test(ch)) {\n    state.lastTokenWasBuiltin = false;\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  else {\n    // get the whole word\n    stream.eatWhile(/[\\w\\$_{}@]/);\n    var word = stream.current();\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    // is it one of the listed functions?\n    if (functions && functions.propertyIsEnumerable(word) ||\n        (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n        !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n      state.beforeParams = true;\n      state.lastTokenWasBuiltin = false;\n      return \"keyword\";\n    }\n    if (state.inString) {\n      state.lastTokenWasBuiltin = false;\n      return \"string\";\n    }\n    if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n      return \"builtin\";\n    // default: just a \"word\"\n    state.lastTokenWasBuiltin = false;\n    return null;\n  }\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if ((next == quote) && !escaped) {\n        end = true;\n        break;\n      }\n      if (quote=='\"' && stream.peek() == '$' && !escaped) {\n        state.inString = true;\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\n// Interface\n\nexport const velocity = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false,\n      inString: false,\n      lastTokenWasBuiltin: false\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"##\", block: {open: \"#*\", close: \"*#\"}}\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}