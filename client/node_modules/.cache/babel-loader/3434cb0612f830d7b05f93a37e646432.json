{"ast":null,"code":"// @ts-nocheck\nimport refractorRuby from './ruby.js';\ncrystal.displayName = 'crystal';\ncrystal.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function crystal(Prism) {\n  Prism.register(refractorRuby);\n\n  (function (Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [/\\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\\b/, {\n        pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n        lookbehind: true\n      }],\n      number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/,\n      operator: [/->/, Prism.languages.ruby.operator],\n      punctuation: /[(){}[\\].,;\\\\]/\n    });\n    Prism.languages.insertBefore('crystal', 'string-literal', {\n      attribute: {\n        pattern: /@\\[.*?\\]/,\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          attribute: {\n            pattern: /^(\\s*)\\w+/,\n            lookbehind: true,\n            alias: 'class-name'\n          },\n          args: {\n            pattern: /\\S(?:[\\s\\S]*\\S)?/,\n            inside: Prism.languages.crystal\n          }\n        }\n      },\n      expansion: {\n        pattern: /\\{(?:\\{.*?\\}|%.*?%)\\}/,\n        inside: {\n          content: {\n            pattern: /^(\\{.)[\\s\\S]+(?=.\\}$)/,\n            lookbehind: true,\n            inside: Prism.languages.crystal\n          },\n          delimiter: {\n            pattern: /^\\{[\\{%]|[\\}%]\\}$/,\n            alias: 'operator'\n          }\n        }\n      },\n      char: {\n        pattern: /'(?:[^\\\\\\r\\n]{1,2}|\\\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\\{[A-Fa-f0-9]{1,6}\\})))'/,\n        greedy: true\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorRuby","crystal","displayName","aliases","Prism","register","languages","extend","keyword","pattern","lookbehind","number","operator","ruby","punctuation","insertBefore","attribute","inside","delimiter","alias","args","expansion","content","char","greedy"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/crystal.js"],"sourcesContent":["// @ts-nocheck\nimport refractorRuby from './ruby.js'\ncrystal.displayName = 'crystal'\ncrystal.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function crystal(Prism) {\n  Prism.register(refractorRuby)\n  ;(function (Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [\n        /\\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\\b/,\n        {\n          pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/,\n      operator: [/->/, Prism.languages.ruby.operator],\n      punctuation: /[(){}[\\].,;\\\\]/\n    })\n    Prism.languages.insertBefore('crystal', 'string-literal', {\n      attribute: {\n        pattern: /@\\[.*?\\]/,\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'punctuation'\n          },\n          attribute: {\n            pattern: /^(\\s*)\\w+/,\n            lookbehind: true,\n            alias: 'class-name'\n          },\n          args: {\n            pattern: /\\S(?:[\\s\\S]*\\S)?/,\n            inside: Prism.languages.crystal\n          }\n        }\n      },\n      expansion: {\n        pattern: /\\{(?:\\{.*?\\}|%.*?%)\\}/,\n        inside: {\n          content: {\n            pattern: /^(\\{.)[\\s\\S]+(?=.\\}$)/,\n            lookbehind: true,\n            inside: Prism.languages.crystal\n          },\n          delimiter: {\n            pattern: /^\\{[\\{%]|[\\}%]\\}$/,\n            alias: 'operator'\n          }\n        }\n      },\n      char: {\n        pattern:\n          /'(?:[^\\\\\\r\\n]{1,2}|\\\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\\{[A-Fa-f0-9]{1,6}\\})))'/,\n        greedy: true\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;AACA,OAAOA,aAAP,MAA0B,WAA1B;AACAC,OAAO,CAACC,WAAR,GAAsB,SAAtB;AACAD,OAAO,CAACE,OAAR,GAAkB,EAAlB;AAEA;;AACA,eAAe,SAASF,OAAT,CAAiBG,KAAjB,EAAwB;EACrCA,KAAK,CAACC,QAAN,CAAeL,aAAf;;EACC,CAAC,UAAUI,KAAV,EAAiB;IACjBA,KAAK,CAACE,SAAN,CAAgBL,OAAhB,GAA0BG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,MAAvB,EAA+B;MACvDC,OAAO,EAAE,CACP,2XADO,EAEP;QACEC,OAAO,EAAE,+BADX;QAEEC,UAAU,EAAE;MAFd,CAFO,CAD8C;MAQvDC,MAAM,EACJ,qJATqD;MAUvDC,QAAQ,EAAE,CAAC,IAAD,EAAOR,KAAK,CAACE,SAAN,CAAgBO,IAAhB,CAAqBD,QAA5B,CAV6C;MAWvDE,WAAW,EAAE;IAX0C,CAA/B,CAA1B;IAaAV,KAAK,CAACE,SAAN,CAAgBS,YAAhB,CAA6B,SAA7B,EAAwC,gBAAxC,EAA0D;MACxDC,SAAS,EAAE;QACTP,OAAO,EAAE,UADA;QAETQ,MAAM,EAAE;UACNC,SAAS,EAAE;YACTT,OAAO,EAAE,UADA;YAETU,KAAK,EAAE;UAFE,CADL;UAKNH,SAAS,EAAE;YACTP,OAAO,EAAE,WADA;YAETC,UAAU,EAAE,IAFH;YAGTS,KAAK,EAAE;UAHE,CALL;UAUNC,IAAI,EAAE;YACJX,OAAO,EAAE,kBADL;YAEJQ,MAAM,EAAEb,KAAK,CAACE,SAAN,CAAgBL;UAFpB;QAVA;MAFC,CAD6C;MAmBxDoB,SAAS,EAAE;QACTZ,OAAO,EAAE,uBADA;QAETQ,MAAM,EAAE;UACNK,OAAO,EAAE;YACPb,OAAO,EAAE,uBADF;YAEPC,UAAU,EAAE,IAFL;YAGPO,MAAM,EAAEb,KAAK,CAACE,SAAN,CAAgBL;UAHjB,CADH;UAMNiB,SAAS,EAAE;YACTT,OAAO,EAAE,mBADA;YAETU,KAAK,EAAE;UAFE;QANL;MAFC,CAnB6C;MAiCxDI,IAAI,EAAE;QACJd,OAAO,EACL,yEAFE;QAGJe,MAAM,EAAE;MAHJ;IAjCkD,CAA1D;EAuCD,CArDA,EAqDEpB,KArDF;AAsDF"},"metadata":{},"sourceType":"module"}