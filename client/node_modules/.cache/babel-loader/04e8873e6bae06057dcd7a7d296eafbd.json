{"ast":null,"code":"var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();else if (!symbol.test(ch)) {\n      stream.backUp(1);\n      break;\n    }\n  }\n\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {\n    type = \"ws\";\n    return null;\n  }\n\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);else if (ch == \"(\") {\n    type = \"open\";\n    return \"bracket\";\n  } else if (ch == \")\" || ch == \"]\") {\n    type = \"close\";\n    return \"bracket\";\n  } else if (ch == \";\") {\n    stream.skipToEnd();\n    type = \"ws\";\n    return \"comment\";\n  } else if (/['`,@]/.test(ch)) return null;else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) {\n      stream.next();\n      return \"variableName\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n\n    if (ch == \"(\") {\n      type = \"open\";\n      return \"bracket\";\n    } else if (/[+\\-=\\.']/.test(ch)) return null;else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);else if (ch == \":\") {\n      readSym(stream);\n      return \"meta\";\n    } else if (ch == \"\\\\\") {\n      stream.next();\n      readSym(stream);\n      return \"string.special\";\n    } else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false,\n      next;\n\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) {\n      state.tokenize = base;\n      break;\n    }\n\n    escaped = !escaped && next == \"\\\\\";\n  }\n\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") {\n      state.tokenize = base;\n      break;\n    }\n\n    last = next;\n  }\n\n  type = \"ws\";\n  return \"comment\";\n}\n\nexport const commonLisp = {\n  startState: function () {\n    return {\n      ctx: {\n        prev: null,\n        start: 0,\n        indentTo: 0\n      },\n      lastType: null,\n      tokenize: base\n    };\n  },\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\") state.ctx.indentTo = state.ctx.start + 1;\n    type = null;\n    var style = state.tokenize(stream, state);\n\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current())) state.ctx.indentTo = state.ctx.start + stream.indentUnit;else state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n\n      state.lastType = type;\n    }\n\n    if (type == \"open\") state.ctx = {\n      prev: state.ctx,\n      start: stream.column(),\n      indentTo: null\n    };else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n  languageData: {\n    commentTokens: {\n      line: \";;\",\n      block: {\n        open: \"#|\",\n        close: \"|#\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    }\n  }\n};","map":{"version":3,"names":["specialForm","assumeBody","numLiteral","symbol","type","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","commonLisp","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","i","languageData","commentTokens","line","block","open","close","closeBrackets","brackets"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/commonlisp.js"],"sourcesContent":["var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();\n    else if (!symbol.test(ch)) { stream.backUp(1); break; }\n  }\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {type = \"ws\"; return null;}\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);\n  else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n  else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n  else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n  else if (/['`,@]/.test(ch)) return null;\n  else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) { stream.next(); return \"variableName\"; }\n    else { stream.skipToEnd(); return \"error\"; }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n    if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (/[+\\-=\\.']/.test(ch)) return null;\n    else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n    else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n    else if (ch == \":\") { readSym(stream); return \"meta\"; }\n    else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string.special\" }\n    else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) { state.tokenize = base; break; }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n    last = next;\n  }\n  type = \"ws\";\n  return \"comment\";\n}\n\nexport const commonLisp = {\n  startState: function () {\n    return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    type = null;\n    var style = state.tokenize(stream, state);\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current()))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else\n          state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastType = type;\n    }\n    if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n\n  languageData: {\n    commentTokens: {line: \";;\", block: {open: \"#|\", close: \"|#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']}\n  }\n};\n\n"],"mappings":"AAAA,IAAIA,WAAW,GAAG,6NAAlB;AACA,IAAIC,UAAU,GAAG,uDAAjB;AACA,IAAIC,UAAU,GAAG,wHAAjB;AACA,IAAIC,MAAM,GAAG,mBAAb;AACA,IAAIC,IAAJ;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;EACvB,IAAIC,EAAJ;;EACA,OAAOA,EAAE,GAAGD,MAAM,CAACE,IAAP,EAAZ,EAA2B;IACzB,IAAID,EAAE,IAAI,IAAV,EAAgBD,MAAM,CAACE,IAAP,GAAhB,KACK,IAAI,CAACL,MAAM,CAACM,IAAP,CAAYF,EAAZ,CAAL,EAAsB;MAAED,MAAM,CAACI,MAAP,CAAc,CAAd;MAAkB;IAAQ;EACxD;;EACD,OAAOJ,MAAM,CAACK,OAAP,EAAP;AACD;;AAED,SAASC,IAAT,CAAcN,MAAd,EAAsBO,KAAtB,EAA6B;EAC3B,IAAIP,MAAM,CAACQ,QAAP,EAAJ,EAAuB;IAACV,IAAI,GAAG,IAAP;IAAa,OAAO,IAAP;EAAa;;EAClD,IAAIE,MAAM,CAACS,KAAP,CAAab,UAAb,CAAJ,EAA8B,OAAO,QAAP;EAC9B,IAAIK,EAAE,GAAGD,MAAM,CAACE,IAAP,EAAT;EACA,IAAID,EAAE,IAAI,IAAV,EAAgBA,EAAE,GAAGD,MAAM,CAACE,IAAP,EAAL;EAEhB,IAAID,EAAE,IAAI,GAAV,EAAe,OAAO,CAACM,KAAK,CAACG,QAAN,GAAiBC,QAAlB,EAA4BX,MAA5B,EAAoCO,KAApC,CAAP,CAAf,KACK,IAAIN,EAAE,IAAI,GAAV,EAAe;IAAEH,IAAI,GAAG,MAAP;IAAe,OAAO,SAAP;EAAmB,CAAnD,MACA,IAAIG,EAAE,IAAI,GAAN,IAAaA,EAAE,IAAI,GAAvB,EAA4B;IAAEH,IAAI,GAAG,OAAP;IAAgB,OAAO,SAAP;EAAmB,CAAjE,MACA,IAAIG,EAAE,IAAI,GAAV,EAAe;IAAED,MAAM,CAACY,SAAP;IAAoBd,IAAI,GAAG,IAAP;IAAa,OAAO,SAAP;EAAmB,CAArE,MACA,IAAI,SAASK,IAAT,CAAcF,EAAd,CAAJ,EAAuB,OAAO,IAAP,CAAvB,KACA,IAAIA,EAAE,IAAI,GAAV,EAAe;IAClB,IAAID,MAAM,CAACa,MAAP,CAAc,GAAd,CAAJ,EAAwB;MAAEb,MAAM,CAACE,IAAP;MAAe,OAAO,cAAP;IAAwB,CAAjE,MACK;MAAEF,MAAM,CAACY,SAAP;MAAoB,OAAO,OAAP;IAAiB;EAC7C,CAHI,MAGE,IAAIX,EAAE,IAAI,GAAV,EAAe;IACpB,IAAIA,EAAE,GAAGD,MAAM,CAACE,IAAP,EAAT;;IACA,IAAID,EAAE,IAAI,GAAV,EAAe;MAAEH,IAAI,GAAG,MAAP;MAAe,OAAO,SAAP;IAAmB,CAAnD,MACK,IAAI,YAAYK,IAAZ,CAAiBF,EAAjB,CAAJ,EAA0B,OAAO,IAAP,CAA1B,KACA,IAAI,KAAKE,IAAL,CAAUF,EAAV,KAAiBD,MAAM,CAACS,KAAP,CAAa,OAAb,CAArB,EAA4C,OAAO,IAAP,CAA5C,KACA,IAAIR,EAAE,IAAI,GAAV,EAAe,OAAO,CAACM,KAAK,CAACG,QAAN,GAAiBI,SAAlB,EAA6Bd,MAA7B,EAAqCO,KAArC,CAAP,CAAf,KACA,IAAIN,EAAE,IAAI,GAAV,EAAe;MAAEF,OAAO,CAACC,MAAD,CAAP;MAAiB,OAAO,MAAP;IAAgB,CAAlD,MACA,IAAIC,EAAE,IAAI,IAAV,EAAgB;MAAED,MAAM,CAACE,IAAP;MAAeH,OAAO,CAACC,MAAD,CAAP;MAAiB,OAAO,gBAAP;IAAyB,CAA3E,MACA,OAAO,OAAP;EACN,CATM,MASA;IACL,IAAIe,IAAI,GAAGhB,OAAO,CAACC,MAAD,CAAlB;IACA,IAAIe,IAAI,IAAI,GAAZ,EAAiB,OAAO,IAAP;IACjBjB,IAAI,GAAG,QAAP;IACA,IAAIiB,IAAI,IAAI,KAAR,IAAiBA,IAAI,IAAI,GAAzB,IAAgCA,IAAI,CAACC,MAAL,CAAY,CAAZ,KAAkB,GAAtD,EAA2D,OAAO,MAAP;IAC3D,IAAIT,KAAK,CAACU,QAAN,IAAkB,MAAlB,KAA6BvB,WAAW,CAACS,IAAZ,CAAiBY,IAAjB,KAA0BpB,UAAU,CAACQ,IAAX,CAAgBY,IAAhB,CAAvD,CAAJ,EAAmF,OAAO,SAAP;IACnF,IAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,KAAkB,GAAtB,EAA2B,OAAO,sBAAP;IAC3B,OAAO,cAAP;EACD;AACF;;AAED,SAASL,QAAT,CAAkBX,MAAlB,EAA0BO,KAA1B,EAAiC;EAC/B,IAAIW,OAAO,GAAG,KAAd;EAAA,IAAqBhB,IAArB;;EACA,OAAOA,IAAI,GAAGF,MAAM,CAACE,IAAP,EAAd,EAA6B;IAC3B,IAAIA,IAAI,IAAI,GAAR,IAAe,CAACgB,OAApB,EAA6B;MAAEX,KAAK,CAACG,QAAN,GAAiBJ,IAAjB;MAAuB;IAAQ;;IAC9DY,OAAO,GAAG,CAACA,OAAD,IAAYhB,IAAI,IAAI,IAA9B;EACD;;EACD,OAAO,QAAP;AACD;;AAED,SAASY,SAAT,CAAmBd,MAAnB,EAA2BO,KAA3B,EAAkC;EAChC,IAAIL,IAAJ,EAAUiB,IAAV;;EACA,OAAOjB,IAAI,GAAGF,MAAM,CAACE,IAAP,EAAd,EAA6B;IAC3B,IAAIA,IAAI,IAAI,GAAR,IAAeiB,IAAI,IAAI,GAA3B,EAAgC;MAAEZ,KAAK,CAACG,QAAN,GAAiBJ,IAAjB;MAAuB;IAAQ;;IACjEa,IAAI,GAAGjB,IAAP;EACD;;EACDJ,IAAI,GAAG,IAAP;EACA,OAAO,SAAP;AACD;;AAED,OAAO,MAAMsB,UAAU,GAAG;EACxBC,UAAU,EAAE,YAAY;IACtB,OAAO;MAACC,GAAG,EAAE;QAACC,IAAI,EAAE,IAAP;QAAaC,KAAK,EAAE,CAApB;QAAuBC,QAAQ,EAAE;MAAjC,CAAN;MAA2CR,QAAQ,EAAE,IAArD;MAA2DP,QAAQ,EAAEJ;IAArE,CAAP;EACD,CAHuB;EAKxBoB,KAAK,EAAE,UAAU1B,MAAV,EAAkBO,KAAlB,EAAyB;IAC9B,IAAIP,MAAM,CAAC2B,GAAP,MAAgB,OAAOpB,KAAK,CAACe,GAAN,CAAUG,QAAjB,IAA6B,QAAjD,EACElB,KAAK,CAACe,GAAN,CAAUG,QAAV,GAAqBlB,KAAK,CAACe,GAAN,CAAUE,KAAV,GAAkB,CAAvC;IAEF1B,IAAI,GAAG,IAAP;IACA,IAAI8B,KAAK,GAAGrB,KAAK,CAACG,QAAN,CAAeV,MAAf,EAAuBO,KAAvB,CAAZ;;IACA,IAAIT,IAAI,IAAI,IAAZ,EAAkB;MAChB,IAAIS,KAAK,CAACe,GAAN,CAAUG,QAAV,IAAsB,IAA1B,EAAgC;QAC9B,IAAI3B,IAAI,IAAI,QAAR,IAAoBH,UAAU,CAACQ,IAAX,CAAgBH,MAAM,CAACK,OAAP,EAAhB,CAAxB,EACEE,KAAK,CAACe,GAAN,CAAUG,QAAV,GAAqBlB,KAAK,CAACe,GAAN,CAAUE,KAAV,GAAkBxB,MAAM,CAAC6B,UAA9C,CADF,KAGEtB,KAAK,CAACe,GAAN,CAAUG,QAAV,GAAqB,MAArB;MACH,CALD,MAKO,IAAIlB,KAAK,CAACe,GAAN,CAAUG,QAAV,IAAsB,MAA1B,EAAkC;QACvClB,KAAK,CAACe,GAAN,CAAUG,QAAV,GAAqBzB,MAAM,CAAC8B,MAAP,EAArB;MACD;;MACDvB,KAAK,CAACU,QAAN,GAAiBnB,IAAjB;IACD;;IACD,IAAIA,IAAI,IAAI,MAAZ,EAAoBS,KAAK,CAACe,GAAN,GAAY;MAACC,IAAI,EAAEhB,KAAK,CAACe,GAAb;MAAkBE,KAAK,EAAExB,MAAM,CAAC8B,MAAP,EAAzB;MAA0CL,QAAQ,EAAE;IAApD,CAAZ,CAApB,KACK,IAAI3B,IAAI,IAAI,OAAZ,EAAqBS,KAAK,CAACe,GAAN,GAAYf,KAAK,CAACe,GAAN,CAAUC,IAAV,IAAkBhB,KAAK,CAACe,GAApC;IAC1B,OAAOM,KAAP;EACD,CAzBuB;EA2BxBG,MAAM,EAAE,UAAUxB,KAAV,EAAiB;IACvB,IAAIyB,CAAC,GAAGzB,KAAK,CAACe,GAAN,CAAUG,QAAlB;IACA,OAAO,OAAOO,CAAP,IAAY,QAAZ,GAAuBA,CAAvB,GAA2BzB,KAAK,CAACe,GAAN,CAAUE,KAAV,GAAkB,CAApD;EACD,CA9BuB;EAgCxBS,YAAY,EAAE;IACZC,aAAa,EAAE;MAACC,IAAI,EAAE,IAAP;MAAaC,KAAK,EAAE;QAACC,IAAI,EAAE,IAAP;QAAaC,KAAK,EAAE;MAApB;IAApB,CADH;IAEZC,aAAa,EAAE;MAACC,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB;IAAX;EAFH;AAhCU,CAAnB"},"metadata":{},"sourceType":"module"}