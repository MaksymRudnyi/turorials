{"ast":null,"code":"/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Context} Context\n */\nimport { track } from './track.js';\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\n\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack;\n  const children = parent.children || [];\n  /** @type {Array<string>} */\n\n  const results = [];\n  let index = -1;\n  let before = safeOptions.before;\n  indexStack.push(-1);\n  let tracker = track(safeOptions);\n\n  while (++index < children.length) {\n    const child = children[index];\n    /** @type {string} */\n\n    let after;\n    indexStack[indexStack.length - 1] = index;\n\n    if (index + 1 < children.length) {\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type];\n      if (handle && handle.peek) handle = handle.peek;\n      after = handle ? handle(children[index + 1], parent, context, {\n        before: '',\n        after: '',\n        ...tracker.current()\n      }).charAt(0) : '';\n    } else {\n      after = safeOptions.after;\n    } // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n\n\n    if (results.length > 0 && (before === '\\r' || before === '\\n') && child.type === 'html') {\n      results[results.length - 1] = results[results.length - 1].replace(/(\\r?\\n|\\r)$/, ' ');\n      before = ' '; // To do: does this work to reset tracker?\n\n      tracker = track(safeOptions);\n      tracker.move(results.join(''));\n    }\n\n    results.push(tracker.move(context.handle(child, parent, context, { ...tracker.current(),\n      before,\n      after\n    })));\n    before = results[results.length - 1].slice(-1);\n  }\n\n  indexStack.pop();\n  return results.join('');\n}","map":{"version":3,"names":["track","containerPhrasing","parent","context","safeOptions","indexStack","children","results","index","before","push","tracker","length","child","after","handle","handlers","type","peek","current","charAt","replace","move","join","slice","pop"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = safeOptions.before\n\n  indexStack.push(-1)\n  let tracker = track(safeOptions)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type]\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, context, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = safeOptions.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = track(safeOptions)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,QAAoB,YAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,OAAnC,EAA4CC,WAA5C,EAAyD;EAC9D,MAAMC,UAAU,GAAGF,OAAO,CAACE,UAA3B;EACA,MAAMC,QAAQ,GAAGJ,MAAM,CAACI,QAAP,IAAmB,EAApC;EACA;;EACA,MAAMC,OAAO,GAAG,EAAhB;EACA,IAAIC,KAAK,GAAG,CAAC,CAAb;EACA,IAAIC,MAAM,GAAGL,WAAW,CAACK,MAAzB;EAEAJ,UAAU,CAACK,IAAX,CAAgB,CAAC,CAAjB;EACA,IAAIC,OAAO,GAAGX,KAAK,CAACI,WAAD,CAAnB;;EAEA,OAAO,EAAEI,KAAF,GAAUF,QAAQ,CAACM,MAA1B,EAAkC;IAChC,MAAMC,KAAK,GAAGP,QAAQ,CAACE,KAAD,CAAtB;IACA;;IACA,IAAIM,KAAJ;IAEAT,UAAU,CAACA,UAAU,CAACO,MAAX,GAAoB,CAArB,CAAV,GAAoCJ,KAApC;;IAEA,IAAIA,KAAK,GAAG,CAAR,GAAYF,QAAQ,CAACM,MAAzB,EAAiC;MAC/B;MACA,IAAIG,MAAM,GAAGZ,OAAO,CAACY,MAAR,CAAeC,QAAf,CAAwBV,QAAQ,CAACE,KAAK,GAAG,CAAT,CAAR,CAAoBS,IAA5C,CAAb;MACA,IAAIF,MAAM,IAAIA,MAAM,CAACG,IAArB,EAA2BH,MAAM,GAAGA,MAAM,CAACG,IAAhB;MAC3BJ,KAAK,GAAGC,MAAM,GACVA,MAAM,CAACT,QAAQ,CAACE,KAAK,GAAG,CAAT,CAAT,EAAsBN,MAAtB,EAA8BC,OAA9B,EAAuC;QAC3CM,MAAM,EAAE,EADmC;QAE3CK,KAAK,EAAE,EAFoC;QAG3C,GAAGH,OAAO,CAACQ,OAAR;MAHwC,CAAvC,CAAN,CAIGC,MAJH,CAIU,CAJV,CADU,GAMV,EANJ;IAOD,CAXD,MAWO;MACLN,KAAK,GAAGV,WAAW,CAACU,KAApB;IACD,CApB+B,CAsBhC;IACA;IACA;IACA;IACA;IACA;;;IACA,IACEP,OAAO,CAACK,MAAR,GAAiB,CAAjB,KACCH,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,IAD/B,KAEAI,KAAK,CAACI,IAAN,KAAe,MAHjB,EAIE;MACAV,OAAO,CAACA,OAAO,CAACK,MAAR,GAAiB,CAAlB,CAAP,GAA8BL,OAAO,CAACA,OAAO,CAACK,MAAR,GAAiB,CAAlB,CAAP,CAA4BS,OAA5B,CAC5B,aAD4B,EAE5B,GAF4B,CAA9B;MAIAZ,MAAM,GAAG,GAAT,CALA,CAOA;;MACAE,OAAO,GAAGX,KAAK,CAACI,WAAD,CAAf;MACAO,OAAO,CAACW,IAAR,CAAaf,OAAO,CAACgB,IAAR,CAAa,EAAb,CAAb;IACD;;IAEDhB,OAAO,CAACG,IAAR,CACEC,OAAO,CAACW,IAAR,CACEnB,OAAO,CAACY,MAAR,CAAeF,KAAf,EAAsBX,MAAtB,EAA8BC,OAA9B,EAAuC,EACrC,GAAGQ,OAAO,CAACQ,OAAR,EADkC;MAErCV,MAFqC;MAGrCK;IAHqC,CAAvC,CADF,CADF;IAUAL,MAAM,GAAGF,OAAO,CAACA,OAAO,CAACK,MAAR,GAAiB,CAAlB,CAAP,CAA4BY,KAA5B,CAAkC,CAAC,CAAnC,CAAT;EACD;;EAEDnB,UAAU,CAACoB,GAAX;EAEA,OAAOlB,OAAO,CAACgB,IAAR,CAAa,EAAb,CAAP;AACD"},"metadata":{},"sourceType":"module"}