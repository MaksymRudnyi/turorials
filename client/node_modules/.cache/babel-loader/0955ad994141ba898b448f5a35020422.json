{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types.js').Action} Action\n * @typedef {import('./complex-types.js').Index} Index\n * @typedef {import('./complex-types.js').ActionTuple} ActionTuple\n * @typedef {import('./complex-types.js').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\nimport { convert } from 'unist-util-is';\nimport { color } from './color.js';\n/**\n * Continue traversing as normal\n */\n\nexport const CONTINUE = true;\n/**\n * Do not traverse this node’s children\n */\n\nexport const SKIP = 'skip';\n/**\n * Stop traversing immediately\n */\n\nexport const EXIT = false;\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param [reverse=false]\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\n\nexport const visitParents =\n/**\n * @type {(\n *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Test} test\n * @param {import('./complex-types.js').Visitor<Node>} visitor\n * @param {boolean} [reverse=false]\n */\nfunction (tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor; // @ts-expect-error no visitor given, so `visitor` is test.\n\n    visitor = test;\n    test = null;\n  }\n\n  const is = convert(test);\n  const step = reverse ? -1 : 1;\n  factory(tree, null, [])();\n  /**\n   * @param {Node} node\n   * @param {number?} index\n   * @param {Array<Parent>} parents\n   */\n\n  function factory(node, index, parents) {\n    /** @type {Record<string, unknown>} */\n    // @ts-expect-error: hush\n    const value = typeof node === 'object' && node !== null ? node : {};\n    /** @type {string|undefined} */\n\n    let name;\n\n    if (typeof value.type === 'string') {\n      name = typeof value.tagName === 'string' ? value.tagName : typeof value.name === 'string' ? value.name : undefined;\n      Object.defineProperty(visit, 'name', {\n        value: 'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')'\n      });\n    }\n\n    return visit;\n\n    function visit() {\n      /** @type {ActionTuple} */\n      let result = [];\n      /** @type {ActionTuple} */\n\n      let subresult;\n      /** @type {number} */\n\n      let offset;\n      /** @type {Array<Parent>} */\n\n      let grandparents;\n\n      if (!test || is(node, index, parents[parents.length - 1] || null)) {\n        result = toResult(visitor(node, parents));\n\n        if (result[0] === EXIT) {\n          return result;\n        }\n      } // @ts-expect-error looks like a parent.\n\n\n      if (node.children && result[0] !== SKIP) {\n        // @ts-expect-error looks like a parent.\n        offset = (reverse ? node.children.length : -1) + step; // @ts-expect-error looks like a parent.\n\n        grandparents = parents.concat(node); // @ts-expect-error looks like a parent.\n\n        while (offset > -1 && offset < node.children.length) {\n          // @ts-expect-error looks like a parent.\n          subresult = factory(node.children[offset], offset, grandparents)();\n\n          if (subresult[0] === EXIT) {\n            return subresult;\n          }\n\n          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;\n        }\n      }\n\n      return result;\n    }\n  }\n};\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\n\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value];\n  }\n\n  return [value];\n}","map":{"version":3,"names":["convert","color","CONTINUE","SKIP","EXIT","visitParents","tree","test","visitor","reverse","is","step","factory","node","index","parents","value","name","type","tagName","undefined","Object","defineProperty","visit","result","subresult","offset","grandparents","length","toResult","children","concat","Array","isArray"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/unist-util-visit-parents/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types.js').Action} Action\n * @typedef {import('./complex-types.js').Index} Index\n * @typedef {import('./complex-types.js').ActionTuple} ActionTuple\n * @typedef {import('./complex-types.js').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param [reverse=false]\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor<Node>} visitor\n     * @param {boolean} [reverse=false]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string|undefined} */\n        let name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}