{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Chunk[]}\n */\nconst search = /[\\0\\t\\n\\r]/g;\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean|undefined} */\n\n  let start = true;\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn;\n  return preprocessor;\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Chunk[]} */\n    const chunks = [];\n    /** @type {RegExpMatchArray|null} */\n\n    let match;\n    /** @type {number} */\n\n    let next;\n    /** @type {number} */\n\n    let startPosition;\n    /** @type {number} */\n\n    let endPosition;\n    /** @type {Code} */\n\n    let code; // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n\n      start = undefined;\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n\n              while (column++ < next) chunks.push(-1);\n\n              break;\n            }\n\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n\n      startPosition = endPosition + 1;\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n\n    return chunks;\n  }\n}","map":{"version":3,"names":["search","preprocess","column","buffer","start","atCarriageReturn","preprocessor","value","encoding","end","chunks","match","next","startPosition","endPosition","code","toString","charCodeAt","undefined","length","lastIndex","exec","index","slice","push","Math","ceil"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark/lib/preprocess.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Chunk[]}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Chunk[]} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,GAAG,aAAf;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,GAAsB;EAC3B,IAAIC,MAAM,GAAG,CAAb;EACA,IAAIC,MAAM,GAAG,EAAb;EACA;;EAEA,IAAIC,KAAK,GAAG,IAAZ;EACA;;EAEA,IAAIC,gBAAJ;EACA,OAAOC,YAAP;EACA;;EAEA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,GAAvC,EAA4C;IAC1C;IACA,MAAMC,MAAM,GAAG,EAAf;IACA;;IAEA,IAAIC,KAAJ;IACA;;IAEA,IAAIC,IAAJ;IACA;;IAEA,IAAIC,aAAJ;IACA;;IAEA,IAAIC,WAAJ;IACA;;IAEA,IAAIC,IAAJ,CAjB0C,CAiBjC;;IAETR,KAAK,GAAGJ,MAAM,GAAGI,KAAK,CAACS,QAAN,CAAeR,QAAf,CAAjB;IACAK,aAAa,GAAG,CAAhB;IACAV,MAAM,GAAG,EAAT;;IAEA,IAAIC,KAAJ,EAAW;MACT,IAAIG,KAAK,CAACU,UAAN,CAAiB,CAAjB,MAAwB,KAA5B,EAAmC;QACjCJ,aAAa;MACd;;MAEDT,KAAK,GAAGc,SAAR;IACD;;IAED,OAAOL,aAAa,GAAGN,KAAK,CAACY,MAA7B,EAAqC;MACnCnB,MAAM,CAACoB,SAAP,GAAmBP,aAAnB;MACAF,KAAK,GAAGX,MAAM,CAACqB,IAAP,CAAYd,KAAZ,CAAR;MACAO,WAAW,GACTH,KAAK,IAAIA,KAAK,CAACW,KAAN,KAAgBJ,SAAzB,GAAqCP,KAAK,CAACW,KAA3C,GAAmDf,KAAK,CAACY,MAD3D;MAEAJ,IAAI,GAAGR,KAAK,CAACU,UAAN,CAAiBH,WAAjB,CAAP;;MAEA,IAAI,CAACH,KAAL,EAAY;QACVR,MAAM,GAAGI,KAAK,CAACgB,KAAN,CAAYV,aAAZ,CAAT;QACA;MACD;;MAED,IAAIE,IAAI,KAAK,EAAT,IAAeF,aAAa,KAAKC,WAAjC,IAAgDT,gBAApD,EAAsE;QACpEK,MAAM,CAACc,IAAP,CAAY,CAAC,CAAb;QACAnB,gBAAgB,GAAGa,SAAnB;MACD,CAHD,MAGO;QACL,IAAIb,gBAAJ,EAAsB;UACpBK,MAAM,CAACc,IAAP,CAAY,CAAC,CAAb;UACAnB,gBAAgB,GAAGa,SAAnB;QACD;;QAED,IAAIL,aAAa,GAAGC,WAApB,EAAiC;UAC/BJ,MAAM,CAACc,IAAP,CAAYjB,KAAK,CAACgB,KAAN,CAAYV,aAAZ,EAA2BC,WAA3B,CAAZ;UACAZ,MAAM,IAAIY,WAAW,GAAGD,aAAxB;QACD;;QAED,QAAQE,IAAR;UACE,KAAK,CAAL;YAAQ;cACNL,MAAM,CAACc,IAAP,CAAY,KAAZ;cACAtB,MAAM;cACN;YACD;;UAED,KAAK,CAAL;YAAQ;cACNU,IAAI,GAAGa,IAAI,CAACC,IAAL,CAAUxB,MAAM,GAAG,CAAnB,IAAwB,CAA/B;cACAQ,MAAM,CAACc,IAAP,CAAY,CAAC,CAAb;;cAEA,OAAOtB,MAAM,KAAKU,IAAlB,EAAwBF,MAAM,CAACc,IAAP,CAAY,CAAC,CAAb;;cAExB;YACD;;UAED,KAAK,EAAL;YAAS;cACPd,MAAM,CAACc,IAAP,CAAY,CAAC,CAAb;cACAtB,MAAM,GAAG,CAAT;cACA;YACD;;UAED;YAAS;cACPG,gBAAgB,GAAG,IAAnB;cACAH,MAAM,GAAG,CAAT;YACD;QAzBH;MA2BD;;MAEDW,aAAa,GAAGC,WAAW,GAAG,CAA9B;IACD;;IAED,IAAIL,GAAJ,EAAS;MACP,IAAIJ,gBAAJ,EAAsBK,MAAM,CAACc,IAAP,CAAY,CAAC,CAAb;MACtB,IAAIrB,MAAJ,EAAYO,MAAM,CAACc,IAAP,CAAYrB,MAAZ;MACZO,MAAM,CAACc,IAAP,CAAY,IAAZ;IACD;;IAED,OAAOd,MAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}