{"ast":null,"code":"import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\n\nconst jsonParseLinter = () => view => {\n  try {\n    JSON.parse(view.state.doc.toString());\n  } catch (e) {\n    if (!(e instanceof SyntaxError)) throw e;\n    const pos = getErrorPosition(e, view.state.doc);\n    return [{\n      from: pos,\n      message: e.message,\n      severity: 'error',\n      to: pos\n    }];\n  }\n\n  return [];\n};\n\nfunction getErrorPosition(error, doc) {\n  let m;\n  if (m = error.message.match(/at position (\\d+)/)) return Math.min(+m[1], doc.length);\n  if (m = error.message.match(/at line (\\d+) column (\\d+)/)) return Math.min(doc.line(+m[1]).from + +m[2] - 1, doc.length);\n  return 0;\n}\n/**\nA language provider that provides JSON parsing.\n*/\n\n\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      Object: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\}/\n      }),\n      Array: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\]/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Object Array\": foldInside\n    })]\n  }),\n  languageData: {\n    closeBrackets: {\n      brackets: [\"[\", \"{\", '\"']\n    },\n    indentOnInput: /^\\s*[\\}\\]]$/\n  }\n});\n/**\nJSON language support.\n*/\n\nfunction json() {\n  return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","foldNodeProp","foldInside","LanguageSupport","jsonParseLinter","view","JSON","parse","state","doc","toString","e","SyntaxError","pos","getErrorPosition","from","message","severity","to","error","m","match","Math","min","length","line","jsonLanguage","define","configure","props","add","Object","except","Array","languageData","closeBrackets","brackets","indentOnInput","json"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/lang-json/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\nconst jsonParseLinter = () => (view) => {\n    try {\n        JSON.parse(view.state.doc.toString());\n    }\n    catch (e) {\n        if (!(e instanceof SyntaxError))\n            throw e;\n        const pos = getErrorPosition(e, view.state.doc);\n        return [{\n                from: pos,\n                message: e.message,\n                severity: 'error',\n                to: pos\n            }];\n    }\n    return [];\n};\nfunction getErrorPosition(error, doc) {\n    let m;\n    if (m = error.message.match(/at position (\\d+)/))\n        return Math.min(+m[1], doc.length);\n    if (m = error.message.match(/at line (\\d+) column (\\d+)/))\n        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);\n    return 0;\n}\n\n/**\nA language provider that provides JSON parsing.\n*/\nconst jsonLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                Object: /*@__PURE__*/continuedIndent({ except: /^\\s*\\}/ }),\n                Array: /*@__PURE__*/continuedIndent({ except: /^\\s*\\]/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Object Array\": foldInside\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"[\", \"{\", '\"'] },\n        indentOnInput: /^\\s*[\\}\\]]$/\n    }\n});\n/**\nJSON language support.\n*/\nfunction json() {\n    return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,eAArC,EAAsDC,YAAtD,EAAoEC,UAApE,EAAgFC,eAAhF,QAAuG,sBAAvG;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,MAAOC,IAAD,IAAU;EACpC,IAAI;IACAC,IAAI,CAACC,KAAL,CAAWF,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAeC,QAAf,EAAX;EACH,CAFD,CAGA,OAAOC,CAAP,EAAU;IACN,IAAI,EAAEA,CAAC,YAAYC,WAAf,CAAJ,EACI,MAAMD,CAAN;IACJ,MAAME,GAAG,GAAGC,gBAAgB,CAACH,CAAD,EAAIN,IAAI,CAACG,KAAL,CAAWC,GAAf,CAA5B;IACA,OAAO,CAAC;MACAM,IAAI,EAAEF,GADN;MAEAG,OAAO,EAAEL,CAAC,CAACK,OAFX;MAGAC,QAAQ,EAAE,OAHV;MAIAC,EAAE,EAAEL;IAJJ,CAAD,CAAP;EAMH;;EACD,OAAO,EAAP;AACH,CAhBD;;AAiBA,SAASC,gBAAT,CAA0BK,KAA1B,EAAiCV,GAAjC,EAAsC;EAClC,IAAIW,CAAJ;EACA,IAAIA,CAAC,GAAGD,KAAK,CAACH,OAAN,CAAcK,KAAd,CAAoB,mBAApB,CAAR,EACI,OAAOC,IAAI,CAACC,GAAL,CAAS,CAACH,CAAC,CAAC,CAAD,CAAX,EAAgBX,GAAG,CAACe,MAApB,CAAP;EACJ,IAAIJ,CAAC,GAAGD,KAAK,CAACH,OAAN,CAAcK,KAAd,CAAoB,4BAApB,CAAR,EACI,OAAOC,IAAI,CAACC,GAAL,CAASd,GAAG,CAACgB,IAAJ,CAAS,CAACL,CAAC,CAAC,CAAD,CAAX,EAAgBL,IAAhB,GAAwB,CAACK,CAAC,CAAC,CAAD,CAA1B,GAAiC,CAA1C,EAA6CX,GAAG,CAACe,MAAjD,CAAP;EACJ,OAAO,CAAP;AACH;AAED;AACA;AACA;;;AACA,MAAME,YAAY,GAAG,aAAa5B,UAAU,CAAC6B,MAAX,CAAkB;EAChD9B,MAAM,EAAE,aAAaA,MAAM,CAAC+B,SAAP,CAAiB;IAClCC,KAAK,EAAE,CACH,aAAa9B,cAAc,CAAC+B,GAAf,CAAmB;MAC5BC,MAAM,EAAE,aAAa/B,eAAe,CAAC;QAAEgC,MAAM,EAAE;MAAV,CAAD,CADR;MAE5BC,KAAK,EAAE,aAAajC,eAAe,CAAC;QAAEgC,MAAM,EAAE;MAAV,CAAD;IAFP,CAAnB,CADV,EAKH,aAAa/B,YAAY,CAAC6B,GAAb,CAAiB;MAC1B,gBAAgB5B;IADU,CAAjB,CALV;EAD2B,CAAjB,CAD2B;EAYhDgC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;IAAZ,CADL;IAEVC,aAAa,EAAE;EAFL;AAZkC,CAAlB,CAAlC;AAiBA;AACA;AACA;;AACA,SAASC,IAAT,GAAgB;EACZ,OAAO,IAAInC,eAAJ,CAAoBuB,YAApB,CAAP;AACH;;AAED,SAASY,IAAT,EAAeZ,YAAf,EAA6BtB,eAA7B"},"metadata":{},"sourceType":"module"}