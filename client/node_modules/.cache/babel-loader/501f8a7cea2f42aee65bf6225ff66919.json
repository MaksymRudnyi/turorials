{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { getStatistics } from './utils';\nexport function useCodeMirror(props) {\n  var {\n    value,\n    selection,\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    extensions = [],\n    autoFocus,\n    theme = 'light',\n    height = '',\n    minHeight = '',\n    maxHeight = '',\n    placeholder: placeholderStr = '',\n    width = '',\n    minWidth = '',\n    maxWidth = '',\n    editable = true,\n    readOnly = false,\n    indentWithTab: defaultIndentWithTab = true,\n    basicSetup: defaultBasicSetup = true,\n    root,\n    initialState\n  } = props;\n  var [container, setContainer] = useState();\n  var [view, setView] = useState();\n  var [state, setState] = useState();\n  var defaultLightThemeOption = EditorView.theme({\n    '&': {\n      backgroundColor: '#fff'\n    }\n  }, {\n    dark: false\n  });\n  var defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth\n    }\n  });\n  var updateListener = EditorView.updateListener.of(vu => {\n    if (vu.docChanged && typeof onChange === 'function') {\n      var doc = vu.state.doc;\n\n      var _value = doc.toString();\n\n      onChange(_value, vu);\n    }\n\n    onStatistics && onStatistics(getStatistics(vu));\n  });\n  var getExtensions = [updateListener, defaultThemeOption];\n\n  if (defaultIndentWithTab) {\n    getExtensions.unshift(keymap.of([indentWithTab]));\n  }\n\n  if (defaultBasicSetup) {\n    if (typeof defaultBasicSetup === 'boolean') {\n      getExtensions.unshift(basicSetup());\n    } else {\n      getExtensions.unshift(basicSetup(defaultBasicSetup));\n    }\n  }\n\n  if (placeholderStr) {\n    getExtensions.unshift(placeholder(placeholderStr));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n\n  if (readOnly) {\n    getExtensions.push(EditorState.readOnly.of(true));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n\n  getExtensions = getExtensions.concat(extensions);\n  useEffect(() => {\n    if (container && !state) {\n      var config = {\n        doc: value,\n        selection,\n        extensions: getExtensions\n      };\n      var stateCurrent = initialState ? EditorState.fromJSON(initialState.json, config, initialState.fields) : EditorState.create(config);\n      setState(stateCurrent);\n\n      if (!view) {\n        var viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root\n        });\n        setView(viewCurrent);\n        onCreateEditor && onCreateEditor(viewCurrent, stateCurrent);\n      }\n    }\n\n    return () => {\n      if (view) {\n        setState(undefined);\n        setView(undefined);\n      }\n    };\n  }, [container, state]);\n  useEffect(() => setContainer(props.container), [props.container]);\n  useEffect(() => () => {\n    if (view) {\n      view.destroy();\n      setView(undefined);\n    }\n  }, [view]);\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n  useEffect(() => {\n    if (view) {\n      view.dispatch({\n        effects: StateEffect.reconfigure.of(getExtensions)\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [theme, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);\n  useEffect(() => {\n    var currentValue = view ? view.state.doc.toString() : '';\n\n    if (view && value !== currentValue) {\n      view.dispatch({\n        changes: {\n          from: 0,\n          to: currentValue.length,\n          insert: value || ''\n        }\n      });\n    }\n  }, [value, view]);\n  return {\n    state,\n    setState,\n    view,\n    setView,\n    container,\n    setContainer\n  };\n}","map":{"version":3,"sources":["../src/useCodeMirror.ts"],"names":["extensions","theme","height","minHeight","maxHeight","placeholder","placeholderStr","width","minWidth","maxWidth","editable","readOnly","indentWithTab","defaultIndentWithTab","basicSetup","defaultBasicSetup","initialState","useState","defaultLightThemeOption","backgroundColor","dark","defaultThemeOption","updateListener","vu","doc","value","onChange","onStatistics","getStatistics","getExtensions","keymap","EditorView","EditorState","onUpdate","useEffect","container","config","stateCurrent","setState","viewCurrent","state","parent","root","setView","onCreateEditor","setContainer","props","view","autoFocus","effects","StateEffect","currentValue","changes","from","to","insert"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, ViewUpdate, placeholder } from '@codemirror/view';\nimport { basicSetup } from '@uiw/codemirror-extensions-basic-setup';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { getStatistics } from './utils';\nimport { ReactCodeMirrorProps } from '.';\n\nexport interface UseCodeMirror extends ReactCodeMirrorProps {\n  container?: HTMLDivElement | null;\n}\n\nexport function useCodeMirror(props: UseCodeMirror) {\n  const {\n    value,\n    selection,\n    onChange,\n    onStatistics,\n    onCreateEditor,\n    onUpdate,\n    extensions = [],\n    autoFocus,\n    theme = 'light',\n    height = '',\n    minHeight = '',\n    maxHeight = '',\n    placeholder: placeholderStr = '',\n    width = '',\n    minWidth = '',\n    maxWidth = '',\n    editable = true,\n    readOnly = false,\n    indentWithTab: defaultIndentWithTab = true,\n    basicSetup: defaultBasicSetup = true,\n    root,\n    initialState,\n  } = props;\n  const [container, setContainer] = useState<HTMLDivElement>();\n  const [view, setView] = useState<EditorView>();\n  const [state, setState] = useState<EditorState>();\n  const defaultLightThemeOption = EditorView.theme(\n    {\n      '&': {\n        backgroundColor: '#fff',\n      },\n    },\n    {\n      dark: false,\n    },\n  );\n  const defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth,\n    },\n  });\n  const updateListener = EditorView.updateListener.of((vu: ViewUpdate) => {\n    if (vu.docChanged && typeof onChange === 'function') {\n      const doc = vu.state.doc;\n      const value = doc.toString();\n      onChange(value, vu);\n    }\n    onStatistics && onStatistics(getStatistics(vu));\n  });\n\n  let getExtensions = [updateListener, defaultThemeOption];\n  if (defaultIndentWithTab) {\n    getExtensions.unshift(keymap.of([indentWithTab]));\n  }\n  if (defaultBasicSetup) {\n    if (typeof defaultBasicSetup === 'boolean') {\n      getExtensions.unshift(basicSetup());\n    } else {\n      getExtensions.unshift(basicSetup(defaultBasicSetup));\n    }\n  }\n\n  if (placeholderStr) {\n    getExtensions.unshift(placeholder(placeholderStr));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n  if (readOnly) {\n    getExtensions.push(EditorState.readOnly.of(true));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n  getExtensions = getExtensions.concat(extensions);\n\n  useEffect(() => {\n    if (container && !state) {\n      const config = {\n        doc: value,\n        selection,\n        extensions: getExtensions,\n      };\n      const stateCurrent = initialState\n        ? EditorState.fromJSON(initialState.json, config, initialState.fields)\n        : EditorState.create(config);\n      setState(stateCurrent);\n      if (!view) {\n        const viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root,\n        });\n        setView(viewCurrent);\n        onCreateEditor && onCreateEditor(viewCurrent, stateCurrent);\n      }\n    }\n    return () => {\n      if (view) {\n        setState(undefined);\n        setView(undefined);\n      }\n    };\n  }, [container, state]);\n\n  useEffect(() => setContainer(props.container!), [props.container]);\n\n  useEffect(\n    () => () => {\n      if (view) {\n        view.destroy();\n        setView(undefined);\n      }\n    },\n    [view],\n  );\n\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n\n  useEffect(() => {\n    if (view) {\n      view.dispatch({ effects: StateEffect.reconfigure.of(getExtensions) });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    theme,\n    extensions,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    minWidth,\n    maxWidth,\n    placeholderStr,\n    editable,\n    readOnly,\n    defaultIndentWithTab,\n    defaultBasicSetup,\n    onChange,\n    onUpdate,\n  ]);\n\n  useEffect(() => {\n    const currentValue = view ? view.state.doc.toString() : '';\n    if (view && value !== currentValue) {\n      view.dispatch({\n        changes: { from: 0, to: currentValue.length, insert: value || '' },\n      });\n    }\n  }, [value, view]);\n\n  return { state, setState, view, setView, container, setContainer };\n}\n"]},"metadata":{},"sourceType":"module"}