{"ast":null,"code":"function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/; // Tokenizer\n\n  var keywords = function () {\n    function kw(type) {\n      return {\n        type: type,\n        style: \"keyword\"\n      };\n    }\n\n    var A = kw(\"keyword a\"),\n        B = kw(\"keyword b\"),\n        C = kw(\"keyword c\"),\n        D = kw(\"keyword d\");\n    var operator = kw(\"operator\"),\n        atom = {\n      type: \"atom\",\n      style: \"atom\"\n    };\n    return {\n      \"if\": kw(\"if\"),\n      \"while\": A,\n      \"with\": A,\n      \"else\": B,\n      \"do\": B,\n      \"try\": B,\n      \"finally\": B,\n      \"return\": D,\n      \"break\": D,\n      \"continue\": D,\n      \"new\": kw(\"new\"),\n      \"delete\": C,\n      \"void\": C,\n      \"throw\": C,\n      \"debugger\": kw(\"debugger\"),\n      \"var\": kw(\"var\"),\n      \"const\": kw(\"var\"),\n      \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"),\n      \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"),\n      \"switch\": kw(\"switch\"),\n      \"case\": kw(\"case\"),\n      \"default\": kw(\"default\"),\n      \"in\": operator,\n      \"typeof\": operator,\n      \"instanceof\": operator,\n      \"true\": atom,\n      \"false\": atom,\n      \"null\": atom,\n      \"undefined\": atom,\n      \"NaN\": atom,\n      \"Infinity\": atom,\n      \"this\": kw(\"this\"),\n      \"class\": kw(\"class\"),\n      \"super\": kw(\"atom\"),\n      \"yield\": C,\n      \"export\": kw(\"export\"),\n      \"import\": kw(\"import\"),\n      \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false,\n        next,\n        inSet = false;\n\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;else if (inSet && next == \"]\") inSet = false;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n  } // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n\n\n  var type, content;\n\n  function ret(tp, style, cont) {\n    type = tp;\n    content = cont;\n    return style;\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\");\n    } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n      stream.skipToEnd();\n      return ret(\"comment\", \"comment\");\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\");\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch);\n          if (ch == \">\") stream.eat(ch);\n        }\n      }\n\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\");\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current();\n\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word];\n          return ret(kw.type, kw.style, word);\n        }\n\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false)) return ret(\"async\", \"keyword\", word);\n      }\n\n      return ret(\"variable\", \"variable\", word);\n    }\n  }\n\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false,\n          next;\n\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)) {\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false,\n        ch;\n\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n\n      maybeEnd = ch == \"*\";\n    }\n\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false,\n        next;\n\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\"; // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) {\n      // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n      if (m) arrow = m.index;\n    }\n\n    var depth = 0,\n        sawSomething = false;\n\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) {\n          ++pos;\n          break;\n        }\n\n        if (--depth == 0) {\n          if (ch == \"(\") sawSomething = true;\n          break;\n        }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return;\n          var next = stream.string.charAt(pos - 1);\n\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") {\n            pos--;\n            break;\n          }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  } // Parser\n\n\n  var atomicTypes = {\n    \"atom\": true,\n    \"number\": true,\n    \"variable\": true,\n    \"string\": true,\n    \"regexp\": true,\n    \"this\": true,\n    \"import\": true,\n    \"jsonld-keyword\": true\n  };\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next) if (v.name == varname) return true;\n\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next) if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc; // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n\n    cx.state = state;\n    cx.stream = stream;\n    cx.marked = null;\n    cx.cc = cc;\n    cx.style = style;\n    if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n    while (true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n\n      if (combinator(type, content)) {\n        while (cc.length && cc[cc.length - 1].lex) cc.pop()();\n\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  } // Combinator utils\n\n\n  var cx = {\n    state: null,\n    column: null,\n    marked: null,\n    cc: null\n  };\n\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true;\n\n    return false;\n  }\n\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context);\n\n        if (newContext != null) {\n          state.context = newContext;\n          return;\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars);\n        return;\n      }\n    } // Fall through means this is global\n\n\n    if (parserConfig.globalVars && !inList(varname, state.globalVars)) state.globalVars = new Var(varname, state.globalVars);\n  }\n\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null;\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev);\n      if (!inner) return null;\n      if (inner == context.prev) return context;\n      return new Context(inner, context.vars, true);\n    } else if (inList(varname, context.vars)) {\n      return context;\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false);\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\";\n  } // Combinators\n\n\n  function Context(prev, vars, block) {\n    this.prev = prev;\n    this.vars = vars;\n    this.block = block;\n  }\n\n  function Var(name, next) {\n    this.name = name;\n    this.next = next;\n  }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null));\n\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n    cx.state.localVars = defaultVars;\n  }\n\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n    cx.state.localVars = null;\n  }\n\n  pushcontext.lex = pushblockcontext.lex = true;\n\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars;\n    cx.state.context = cx.state.context.prev;\n  }\n\n  popcontext.lex = true;\n\n  function pushlex(type, info) {\n    var result = function () {\n      var state = cx.state,\n          indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev) indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n\n    result.lex = true;\n    return result;\n  }\n\n  function poplex() {\n    var state = cx.state;\n\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();else return cont(exp);\n    }\n\n    ;\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex) cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n\n    if (type == \"class\" || isTS && value == \"interface\") {\n      cx.marked = \"keyword\";\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex);\n    }\n\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\";\n        return cont(statement);\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\";\n        if (value == \"enum\") return cont(enumdef);else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex);\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\";\n        return cont(pushlex(\"form\"), expression, statement, poplex);\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\";\n        return cont(statement);\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext, block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement);\n    if (value == \"@\") return cont(expression, statement);\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"));\n  }\n\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n\n  function parenExpr(type) {\n    if (type != \"(\") return pass();\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex);\n  }\n\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n\n    if (type == \"class\" || isTS && value == \"interface\") {\n      cx.marked = \"keyword\";\n      return cont(pushlex(\"form\"), classExpression, poplex);\n    }\n\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false)) return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n\n    if (type == \"quasi\") {\n      return pass(quasi, me);\n    }\n\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n\n    if (isTS && value == \"as\") {\n      cx.marked = \"keyword\";\n      return cont(typeexpr, me);\n    }\n\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\";\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n      return cont(expr);\n    }\n  }\n\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n\n  function maybeTarget(noComma) {\n    return function (type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n\n  function target(_, value) {\n    if (value == \"target\") {\n      cx.marked = \"keyword\";\n      return cont(maybeoperatorComma);\n    }\n  }\n\n  function targetNoComma(_, value) {\n    if (value == \"target\") {\n      cx.marked = \"keyword\";\n      return cont(maybeoperatorNoComma);\n    }\n  }\n\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n\n  function property(type) {\n    if (type == \"variable\") {\n      cx.marked = \"property\";\n      return cont();\n    }\n  }\n\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false))) cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : cx.style + \" property\";\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop);\n    }\n  }\n\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function (type, value) {\n          if (type == end || value == end) return pass();\n          return pass(what);\n        }, proceed);\n      }\n\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what);\n      return cont(expect(end));\n    }\n\n    return function (type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++) cx.cc.push(arguments[i]);\n\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr);\n  }\n\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr);else return cont(typeexpr);\n    }\n  }\n\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\";\n      return cont();\n    }\n  }\n\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\";\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr);\n    }\n\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\";\n      return cont(afterType);\n    }\n\n    if (value == \"|\" || value == \"&\") return cont(typeexpr);\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType);\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType);\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType);\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr);\n    if (type == \"quasi\") return pass(quasiType, afterType);\n  }\n\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr);\n  }\n\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont();\n    if (type == \",\" || type == \";\") return cont(typeprops);\n    return pass(typeprop, typeprops);\n  }\n\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(typeprop);\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop);\n    } else if (type == \":\") {\n      return cont(typeexpr);\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop);\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop);\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont();\n    }\n  }\n\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg);\n    if (type == \":\") return cont(typeexpr);\n    if (type == \"spread\") return cont(typearg);\n    return pass(typeexpr);\n  }\n\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr);\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType);\n\n    if (value == \"extends\" || value == \"implements\") {\n      cx.marked = \"keyword\";\n      return cont(typeexpr);\n    }\n\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr);\n  }\n\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType);\n  }\n\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault);\n  }\n\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr);\n  }\n\n  function vardef(_, value) {\n    if (value == \"enum\") {\n      cx.marked = \"keyword\";\n      return cont(enumdef);\n    }\n\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\";\n      return cont(pattern);\n    }\n\n    if (type == \"variable\") {\n      register(value);\n      return cont();\n    }\n\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n\n  function eltpattern() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2);\n  }\n\n  function forspec2(type, value) {\n    if (type == \")\") return cont();\n    if (type == \";\") return cont(forspec2);\n\n    if (value == \"in\" || value == \"of\") {\n      cx.marked = \"keyword\";\n      return cont(expression, forspec2);\n    }\n\n    return pass(expression, forspec2);\n  }\n\n  function functiondef(type, value) {\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(functiondef);\n    }\n\n    if (type == \"variable\") {\n      register(value);\n      return cont(functiondef);\n    }\n\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef);\n  }\n\n  function functiondecl(type, value) {\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(functiondecl);\n    }\n\n    if (type == \"variable\") {\n      register(value);\n      return cont(functiondecl);\n    }\n\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl);\n  }\n\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\";\n      return cont(typename);\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex);\n    }\n  }\n\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg);\n    if (type == \"spread\") return cont(funarg);\n\n    if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\";\n      return cont(funarg);\n    }\n\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign);\n    return pass(pattern, maybetype, maybeAssign);\n  }\n\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n\n  function className(type, value) {\n    if (type == \"variable\") {\n      register(value);\n      return cont(classNameAfter);\n    }\n  }\n\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter);\n\n    if (value == \"extends\" || value == \"implements\" || isTS && type == \",\") {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n\n  function classBody(type, value) {\n    if (type == \"async\" || type == \"variable\" && (value == \"static\" || value == \"get\" || value == \"set\" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\") return cont(expression, maybetype, expect(\"]\"), classfield, classBody);\n\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n\n    if (isTS && type == \"(\") return pass(functiondecl, classBody);\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody);\n  }\n\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield);\n    if (type == \":\") return cont(typeexpr, maybeAssign);\n    if (value == \"=\") return cont(expressionNoComma);\n    var context = cx.state.lexical.prev,\n        isInterface = context && context.info == \"interface\";\n    return pass(isInterface ? functiondecl : functiondef);\n  }\n\n  function afterExport(type, value) {\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(maybeFrom, expect(\";\"));\n    }\n\n    if (value == \"default\") {\n      cx.marked = \"keyword\";\n      return cont(expression, expect(\";\"));\n    }\n\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n\n  function exportField(type, value) {\n    if (value == \"as\") {\n      cx.marked = \"keyword\";\n      return cont(expect(\"variable\"));\n    }\n\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports);\n  }\n\n  function maybeAs(_type, value) {\n    if (value == \"as\") {\n      cx.marked = \"keyword\";\n      return cont(importSpec);\n    }\n  }\n\n  function maybeFrom(_type, value) {\n    if (value == \"from\") {\n      cx.marked = \"keyword\";\n      return cont(expression);\n    }\n  }\n\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex);\n  }\n\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n  } // Interface\n\n\n  return {\n    startState: function (indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n    token: function (stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n    indent: function (state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0),\n          lexical = state.lexical,\n          top; // Kludge to prevent 'maybelse' from blocking lexical scope pops\n\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;else if (c != maybeelse && c != popcontext) break;\n      }\n\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") && (firstChar == \"}\" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))) lexical = lexical.prev;\n\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\") lexical = lexical.prev;\n      var type = lexical.type,\n          closing = firstChar == type;\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"form\") return lexical.indented + cx.unit;else if (type == \"stat\") return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {\n        line: \"//\",\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      },\n      closeBrackets: {\n        brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]\n      },\n      wordChars: \"$\"\n    }\n  };\n}\n\n;\nexport const javascript = mkJavaScript({});\nexport const json = mkJavaScript({\n  json: true\n});\nexport const jsonld = mkJavaScript({\n  jsonld: true\n});\nexport const typescript = mkJavaScript({\n  typescript: true\n});","map":{"version":3,"names":["mkJavaScript","parserConfig","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","type","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","readRegexp","stream","escaped","next","inSet","content","ret","tp","cont","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","indentUnit","token","sol","indentation","eatSpace","firstChar","top","c","closing","unit","doubleIndentSwitch","languageData","indentOnInput","commentTokens","undefined","line","open","close","closeBrackets","wordChars","javascript"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/javascript.js"],"sourcesContent":["function mkJavaScript(parserConfig) {\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string.special\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string.special\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string.special\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") return pass(quasiType, afterType)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n   if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\" || value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical(-indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + cx.unit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n      commentTokens: jsonMode ? undefined : {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]},\n      wordChars: \"$\"\n    }\n  };\n};\n\nexport const javascript = mkJavaScript({})\nexport const json = mkJavaScript({json: true})\nexport const jsonld = mkJavaScript({jsonld: true})\nexport const typescript = mkJavaScript({typescript: true})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}