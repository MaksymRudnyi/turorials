{"ast":null,"code":"import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\nconst basicNormalize = typeof String.prototype.normalize == \"function\" ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\n\nclass SearchCursor {\n  /**\n  Create a text cursor. The query is the search string, `from` to\n  `to` provides the region to search.\n  \n  When `normalize` is given, it will be called, on both the query\n  string and the content it is matched against, before comparing.\n  You can, for example, create a case-insensitive search by\n  passing `s => s.toLowerCase()`.\n  \n  Text is always normalized with\n  [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n  (when supported).\n  */\n  constructor(text, query) {\n    let from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : text.length;\n    let normalize = arguments.length > 4 ? arguments[4] : undefined;\n    let test = arguments.length > 5 ? arguments[5] : undefined;\n    this.test = test;\n    /**\n    The current match (only holds a meaningful value after\n    [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n    `done` is false).\n    */\n\n    this.value = {\n      from: 0,\n      to: 0\n    };\n    /**\n    Whether the end of the iterated region has been reached.\n    */\n\n    this.done = false;\n    this.matches = [];\n    this.buffer = \"\";\n    this.bufferPos = 0;\n    this.iter = text.iterRange(from, to);\n    this.bufferStart = from;\n    this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n    this.query = this.normalize(query);\n  }\n\n  peek() {\n    if (this.bufferPos == this.buffer.length) {\n      this.bufferStart += this.buffer.length;\n      this.iter.next();\n      if (this.iter.done) return -1;\n      this.bufferPos = 0;\n      this.buffer = this.iter.value;\n    }\n\n    return codePointAt(this.buffer, this.bufferPos);\n  }\n  /**\n  Look for the next match. Updates the iterator's\n  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n  at least once before using the cursor.\n  */\n\n\n  next() {\n    while (this.matches.length) this.matches.pop();\n\n    return this.nextOverlapping();\n  }\n  /**\n  The `next` method will ignore matches that partially overlap a\n  previous match. This method behaves like `next`, but includes\n  such matches.\n  */\n\n\n  nextOverlapping() {\n    for (;;) {\n      let next = this.peek();\n\n      if (next < 0) {\n        this.done = true;\n        return this;\n      }\n\n      let str = fromCodePoint(next),\n          start = this.bufferStart + this.bufferPos;\n      this.bufferPos += codePointSize(next);\n      let norm = this.normalize(str);\n\n      for (let i = 0, pos = start;; i++) {\n        let code = norm.charCodeAt(i);\n        let match = this.match(code, pos);\n\n        if (match) {\n          this.value = match;\n          return this;\n        }\n\n        if (i == norm.length - 1) break;\n        if (pos == start && i < str.length && str.charCodeAt(i) == code) pos++;\n      }\n    }\n  }\n\n  match(code, pos) {\n    let match = null;\n\n    for (let i = 0; i < this.matches.length; i += 2) {\n      let index = this.matches[i],\n          keep = false;\n\n      if (this.query.charCodeAt(index) == code) {\n        if (index == this.query.length - 1) {\n          match = {\n            from: this.matches[i + 1],\n            to: pos + 1\n          };\n        } else {\n          this.matches[i]++;\n          keep = true;\n        }\n      }\n\n      if (!keep) {\n        this.matches.splice(i, 2);\n        i -= 2;\n      }\n    }\n\n    if (this.query.charCodeAt(0) == code) {\n      if (this.query.length == 1) match = {\n        from: pos,\n        to: pos + 1\n      };else this.matches.push(1, pos);\n    }\n\n    if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos)) match = null;\n    return match;\n  }\n\n}\n\nif (typeof Symbol != \"undefined\") SearchCursor.prototype[Symbol.iterator] = function () {\n  return this;\n};\nconst empty = {\n  from: -1,\n  to: -1,\n  match: /*@__PURE__*/ /.*/.exec(\"\")\n};\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\n\nclass RegExpCursor {\n  /**\n  Create a cursor that will search the given range in the given\n  document. `query` should be the raw pattern (as you'd pass it to\n  `new RegExp`).\n  */\n  constructor(text, query, options) {\n    let from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : text.length;\n    this.text = text;\n    this.to = to;\n    this.curLine = \"\";\n    /**\n    Set to `true` when the cursor has reached the end of the search\n    range.\n    */\n\n    this.done = false;\n    /**\n    Will contain an object with the extent of the match and the\n    match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n    sucessfully finds a match.\n    */\n\n    this.value = empty;\n    if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query)) return new MultilineRegExpCursor(text, query, options, from, to);\n    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n    this.test = options === null || options === void 0 ? void 0 : options.test;\n    this.iter = text.iter();\n    let startLine = text.lineAt(from);\n    this.curLineStart = startLine.from;\n    this.matchPos = toCharEnd(text, from);\n    this.getLine(this.curLineStart);\n  }\n\n  getLine(skip) {\n    this.iter.next(skip);\n\n    if (this.iter.lineBreak) {\n      this.curLine = \"\";\n    } else {\n      this.curLine = this.iter.value;\n      if (this.curLineStart + this.curLine.length > this.to) this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n      this.iter.next();\n    }\n  }\n\n  nextLine() {\n    this.curLineStart = this.curLineStart + this.curLine.length + 1;\n    if (this.curLineStart > this.to) this.curLine = \"\";else this.getLine(0);\n  }\n  /**\n  Move to the next match, if there is one.\n  */\n\n\n  next() {\n    for (let off = this.matchPos - this.curLineStart;;) {\n      this.re.lastIndex = off;\n      let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n\n      if (match) {\n        let from = this.curLineStart + match.index,\n            to = from + match[0].length;\n        this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n        if (from == this.curLine.length) this.nextLine();\n\n        if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n          this.value = {\n            from,\n            to,\n            match\n          };\n          return this;\n        }\n\n        off = this.matchPos - this.curLineStart;\n      } else if (this.curLineStart + this.curLine.length < this.to) {\n        this.nextLine();\n        off = 0;\n      } else {\n        this.done = true;\n        return this;\n      }\n    }\n  }\n\n}\n\nconst flattened = /*@__PURE__*/new WeakMap(); // Reusable (partially) flattened document strings\n\nclass FlattenedDoc {\n  constructor(from, text) {\n    this.from = from;\n    this.text = text;\n  }\n\n  get to() {\n    return this.from + this.text.length;\n  }\n\n  static get(doc, from, to) {\n    let cached = flattened.get(doc);\n\n    if (!cached || cached.from >= to || cached.to <= from) {\n      let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n      flattened.set(doc, flat);\n      return flat;\n    }\n\n    if (cached.from == from && cached.to == to) return cached;\n    let {\n      text,\n      from: cachedFrom\n    } = cached;\n\n    if (cachedFrom > from) {\n      text = doc.sliceString(from, cachedFrom) + text;\n      cachedFrom = from;\n    }\n\n    if (cached.to < to) text += doc.sliceString(cached.to, to);\n    flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n    return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n  }\n\n}\n\nclass MultilineRegExpCursor {\n  constructor(text, query, options, from, to) {\n    this.text = text;\n    this.to = to;\n    this.done = false;\n    this.value = empty;\n    this.matchPos = toCharEnd(text, from);\n    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n    this.test = options === null || options === void 0 ? void 0 : options.test;\n    this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000\n    /* Base */\n    ));\n  }\n\n  chunkEnd(pos) {\n    return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n  }\n\n  next() {\n    for (;;) {\n      let off = this.re.lastIndex = this.matchPos - this.flat.from;\n      let match = this.re.exec(this.flat.text); // Skip empty matches directly after the last match\n\n      if (match && !match[0] && match.index == off) {\n        this.re.lastIndex = off + 1;\n        match = this.re.exec(this.flat.text);\n      }\n\n      if (match) {\n        let from = this.flat.from + match.index,\n            to = from + match[0].length; // If a match goes almost to the end of a noncomplete chunk, try\n        // again, since it'll likely be able to match more\n\n        if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from, to, match))) {\n          this.value = {\n            from,\n            to,\n            match\n          };\n          this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n          return this;\n        }\n      }\n\n      if (this.flat.to == this.to) {\n        this.done = true;\n        return this;\n      } // Grow the flattened doc\n\n\n      this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n    }\n  }\n\n}\n\nif (typeof Symbol != \"undefined\") {\n  RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n}\n\nfunction validRegExp(source) {\n  try {\n    new RegExp(source, baseFlags);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nfunction toCharEnd(text, pos) {\n  if (pos >= text.length) return pos;\n  let line = text.lineAt(pos),\n      next;\n\n  while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000) pos++;\n\n  return pos;\n}\n\nfunction createLineDialog(view) {\n  let input = elt(\"input\", {\n    class: \"cm-textfield\",\n    name: \"line\"\n  });\n  let dom = elt(\"form\", {\n    class: \"cm-gotoLine\",\n    onkeydown: event => {\n      if (event.keyCode == 27) {\n        // Escape\n        event.preventDefault();\n        view.dispatch({\n          effects: dialogEffect.of(false)\n        });\n        view.focus();\n      } else if (event.keyCode == 13) {\n        // Enter\n        event.preventDefault();\n        go();\n      }\n    },\n    onsubmit: event => {\n      event.preventDefault();\n      go();\n    }\n  }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", {\n    class: \"cm-button\",\n    type: \"submit\"\n  }, view.state.phrase(\"go\")));\n\n  function go() {\n    let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n    if (!match) return;\n    let {\n      state\n    } = view,\n        startLine = state.doc.lineAt(state.selection.main.head);\n    let [, sign, ln, cl, percent] = match;\n    let col = cl ? +cl.slice(1) : 0;\n    let line = ln ? +ln : startLine.number;\n\n    if (ln && percent) {\n      let pc = line / 100;\n      if (sign) pc = pc * (sign == \"-\" ? -1 : 1) + startLine.number / state.doc.lines;\n      line = Math.round(state.doc.lines * pc);\n    } else if (ln && sign) {\n      line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n    }\n\n    let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n    view.dispatch({\n      effects: dialogEffect.of(false),\n      selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\n      scrollIntoView: true\n    });\n    view.focus();\n  }\n\n  return {\n    dom\n  };\n}\n\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n  create() {\n    return true;\n  },\n\n  update(value, tr) {\n    for (let e of tr.effects) if (e.is(dialogEffect)) value = e.value;\n\n    return value;\n  },\n\n  provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n\nThe dialog can be styled with the `panel.gotoLine` theme\nselector.\n*/\n\nconst gotoLine = view => {\n  let panel = getPanel(view, createLineDialog);\n\n  if (!panel) {\n    let effects = [dialogEffect.of(true)];\n    if (view.state.field(dialogField, false) == null) effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n    view.dispatch({\n      effects\n    });\n    panel = getPanel(view, createLineDialog);\n  }\n\n  if (panel) panel.dom.querySelector(\"input\").focus();\n  return true;\n};\n\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-panel.cm-gotoLine\": {\n    padding: \"2px 6px 4px\",\n    \"& label\": {\n      fontSize: \"80%\"\n    }\n  }\n});\nconst defaultHighlightOptions = {\n  highlightWordAroundCursor: false,\n  minSelectionLength: 1,\n  maxMatches: 100,\n  wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n  combine(options) {\n    return combineConfig(options, defaultHighlightOptions, {\n      highlightWordAroundCursor: (a, b) => a || b,\n      minSelectionLength: Math.min,\n      maxMatches: Math.min\n    });\n  }\n\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\n\nfunction highlightSelectionMatches(options) {\n  let ext = [defaultTheme, matchHighlighter];\n  if (options) ext.push(highlightConfig.of(options));\n  return ext;\n}\n\nconst matchDeco = /*@__PURE__*/Decoration.mark({\n  class: \"cm-selectionMatch\"\n});\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({\n  class: \"cm-selectionMatch cm-selectionMatch-main\"\n}); // Whether the characters directly outside the given positions are non-word characters\n\nfunction insideWordBoundaries(check, state, from, to) {\n  return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n} // Whether the characters directly at the given positions are word characters\n\n\nfunction insideWord(check, state, from, to) {\n  return check(state.sliceDoc(from, from + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\n\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.decorations = this.getDeco(view);\n  }\n\n  update(update) {\n    if (update.selectionSet || update.docChanged || update.viewportChanged) this.decorations = this.getDeco(update.view);\n  }\n\n  getDeco(view) {\n    let conf = view.state.facet(highlightConfig);\n    let {\n      state\n    } = view,\n        sel = state.selection;\n    if (sel.ranges.length > 1) return Decoration.none;\n    let range = sel.main,\n        query,\n        check = null;\n\n    if (range.empty) {\n      if (!conf.highlightWordAroundCursor) return Decoration.none;\n      let word = state.wordAt(range.head);\n      if (!word) return Decoration.none;\n      check = state.charCategorizer(range.head);\n      query = state.sliceDoc(word.from, word.to);\n    } else {\n      let len = range.to - range.from;\n      if (len < conf.minSelectionLength || len > 200) return Decoration.none;\n\n      if (conf.wholeWords) {\n        query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n\n        check = state.charCategorizer(range.head);\n        if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to))) return Decoration.none;\n      } else {\n        query = state.sliceDoc(range.from, range.to).trim();\n        if (!query) return Decoration.none;\n      }\n    }\n\n    let deco = [];\n\n    for (let part of view.visibleRanges) {\n      let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n\n      while (!cursor.next().done) {\n        let {\n          from,\n          to\n        } = cursor.value;\n\n        if (!check || insideWordBoundaries(check, state, from, to)) {\n          if (range.empty && from <= range.from && to >= range.to) deco.push(mainMatchDeco.range(from, to));else if (from >= range.to || to <= range.from) deco.push(matchDeco.range(from, to));\n          if (deco.length > conf.maxMatches) return Decoration.none;\n        }\n      }\n    }\n\n    return Decoration.set(deco);\n  }\n\n}, {\n  decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-selectionMatch\": {\n    backgroundColor: \"#99ff7780\"\n  },\n  \".cm-searchMatch .cm-selectionMatch\": {\n    backgroundColor: \"transparent\"\n  }\n}); // Select the words around the cursors.\n\nconst selectWord = _ref => {\n  let {\n    state,\n    dispatch\n  } = _ref;\n  let {\n    selection\n  } = state;\n  let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n  if (newSel.eq(selection)) return false;\n  dispatch(state.update({\n    selection: newSel\n  }));\n  return true;\n}; // Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\n\n\nfunction findNextOccurrence(state, query) {\n  let {\n    main,\n    ranges\n  } = state.selection;\n  let word = state.wordAt(main.head),\n      fullWord = word && word.from == main.from && word.to == main.to;\n\n  for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n    cursor.next();\n\n    if (cursor.done) {\n      if (cycled) return null;\n      cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n      cycled = true;\n    } else {\n      if (cycled && ranges.some(r => r.from == cursor.value.from)) continue;\n\n      if (fullWord) {\n        let word = state.wordAt(cursor.value.from);\n        if (!word || word.from != cursor.value.from || word.to != cursor.value.to) continue;\n      }\n\n      return cursor.value;\n    }\n  }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\n\n\nconst selectNextOccurrence = _ref2 => {\n  let {\n    state,\n    dispatch\n  } = _ref2;\n  let {\n    ranges\n  } = state.selection;\n  if (ranges.some(sel => sel.from === sel.to)) return selectWord({\n    state,\n    dispatch\n  });\n  let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n  if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText)) return false;\n  let range = findNextOccurrence(state, searchedText);\n  if (!range) return false;\n  dispatch(state.update({\n    selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n    effects: EditorView.scrollIntoView(range.to)\n  }));\n  return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n  combine(configs) {\n    return combineConfig(configs, {\n      top: false,\n      caseSensitive: false,\n      literal: false,\n      wholeWord: false,\n      createPanel: view => new SearchPanel(view)\n    });\n  }\n\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\n\nfunction search(config) {\n  return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\n\n\nclass SearchQuery {\n  /**\n  Create a query object.\n  */\n  constructor(config) {\n    this.search = config.search;\n    this.caseSensitive = !!config.caseSensitive;\n    this.literal = !!config.literal;\n    this.regexp = !!config.regexp;\n    this.replace = config.replace || \"\";\n    this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n    this.unquoted = this.literal ? this.search : this.search.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    this.wholeWord = !!config.wholeWord;\n  }\n  /**\n  Compare this query to another query.\n  */\n\n\n  eq(other) {\n    return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;\n  }\n  /**\n  @internal\n  */\n\n\n  create() {\n    return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n  }\n  /**\n  Get a search cursor for this query, searching through the given\n  range in the given state.\n  */\n\n\n  getCursor(state) {\n    let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let to = arguments.length > 2 ? arguments[2] : undefined;\n    let st = state.doc ? state : EditorState.create({\n      doc: state\n    });\n    if (to == null) to = st.doc.length;\n    return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n  }\n\n}\n\nclass QueryType {\n  constructor(spec) {\n    this.spec = spec;\n  }\n\n}\n\nfunction stringCursor(spec, state, from, to) {\n  return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\n\nfunction stringWordTest(doc, categorizer) {\n  return (from, to, buf, bufPos) => {\n    if (bufPos > from || bufPos + buf.length < to) {\n      bufPos = Math.max(0, from - 2);\n      buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n    }\n\n    return categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word && categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word;\n  };\n}\n\nclass StringQuery extends QueryType {\n  constructor(spec) {\n    super(spec);\n  }\n\n  nextMatch(state, curFrom, curTo) {\n    let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n    if (cursor.done) cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n    return cursor.done ? null : cursor.value;\n  } // Searching in reverse is, rather than implementing inverted search\n  // cursor, done by scanning chunk after chunk forward.\n\n\n  prevMatchInRange(state, from, to) {\n    for (let pos = to;;) {\n      let start = Math.max(from, pos - 10000\n      /* ChunkSize */\n      - this.spec.unquoted.length);\n      let cursor = stringCursor(this.spec, state, start, pos),\n          range = null;\n\n      while (!cursor.nextOverlapping().done) range = cursor.value;\n\n      if (range) return range;\n      if (start == from) return null;\n      pos -= 10000\n      /* ChunkSize */\n      ;\n    }\n  }\n\n  prevMatch(state, curFrom, curTo) {\n    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);\n  }\n\n  getReplacement(_result) {\n    return this.spec.replace;\n  }\n\n  matchAll(state, limit) {\n    let cursor = stringCursor(this.spec, state, 0, state.doc.length),\n        ranges = [];\n\n    while (!cursor.next().done) {\n      if (ranges.length >= limit) return null;\n      ranges.push(cursor.value);\n    }\n\n    return ranges;\n  }\n\n  highlight(state, from, to, add) {\n    let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n\n    while (!cursor.next().done) add(cursor.value.from, cursor.value.to);\n  }\n\n}\n\nfunction regexpCursor(spec, state, from, to) {\n  return new RegExpCursor(state.doc, spec.search, {\n    ignoreCase: !spec.caseSensitive,\n    test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n  }, from, to);\n}\n\nfunction charBefore(str, index) {\n  return str.slice(findClusterBreak(str, index, false), index);\n}\n\nfunction charAfter(str, index) {\n  return str.slice(index, findClusterBreak(str, index));\n}\n\nfunction regexpWordTest(categorizer) {\n  return (_from, _to, match) => !match[0].length || categorizer(charAfter(match.input, match.index)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index)) != CharCategory.Word && categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word;\n}\n\nclass RegExpQuery extends QueryType {\n  nextMatch(state, curFrom, curTo) {\n    let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n    if (cursor.done) cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n    return cursor.done ? null : cursor.value;\n  }\n\n  prevMatchInRange(state, from, to) {\n    for (let size = 1;; size++) {\n      let start = Math.max(from, to - size * 10000\n      /* ChunkSize */\n      );\n      let cursor = regexpCursor(this.spec, state, start, to),\n          range = null;\n\n      while (!cursor.next().done) range = cursor.value;\n\n      if (range && (start == from || range.from > start + 10)) return range;\n      if (start == from) return null;\n    }\n  }\n\n  prevMatch(state, curFrom, curTo) {\n    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);\n  }\n\n  getReplacement(result) {\n    return this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\" : i == \"&\" ? result.match[0] : i != \"0\" && +i < result.match.length ? result.match[i] : m);\n  }\n\n  matchAll(state, limit) {\n    let cursor = regexpCursor(this.spec, state, 0, state.doc.length),\n        ranges = [];\n\n    while (!cursor.next().done) {\n      if (ranges.length >= limit) return null;\n      ranges.push(cursor.value);\n    }\n\n    return ranges;\n  }\n\n  highlight(state, from, to, add) {\n    let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250\n    /* HighlightMargin */\n    ), Math.min(to + 250\n    /* HighlightMargin */\n    , state.doc.length));\n\n    while (!cursor.next().done) add(cursor.value.from, cursor.value.to);\n  }\n\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\n\n\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n  create(state) {\n    return new SearchState(defaultQuery(state).create(), null);\n  },\n\n  update(value, tr) {\n    for (let effect of tr.effects) {\n      if (effect.is(setSearchQuery)) value = new SearchState(effect.value.create(), value.panel);else if (effect.is(togglePanel)) value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n    }\n\n    return value;\n  },\n\n  provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\n\nfunction getSearchQuery(state) {\n  let curState = state.field(searchState, false);\n  return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\n\n\nfunction searchPanelOpen(state) {\n  var _a;\n\n  return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\n\nclass SearchState {\n  constructor(query, panel) {\n    this.query = query;\n    this.panel = panel;\n  }\n\n}\n\nconst matchMark = /*@__PURE__*/Decoration.mark({\n  class: \"cm-searchMatch\"\n}),\n      selectedMatchMark = /*@__PURE__*/Decoration.mark({\n  class: \"cm-searchMatch cm-searchMatch-selected\"\n});\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.view = view;\n    this.decorations = this.highlight(view.state.field(searchState));\n  }\n\n  update(update) {\n    let state = update.state.field(searchState);\n    if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged) this.decorations = this.highlight(state);\n  }\n\n  highlight(_ref3) {\n    let {\n      query,\n      panel\n    } = _ref3;\n    if (!panel || !query.spec.valid) return Decoration.none;\n    let {\n      view\n    } = this;\n    let builder = new RangeSetBuilder();\n\n    for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n      let {\n        from,\n        to\n      } = ranges[i];\n\n      while (i < l - 1 && to > ranges[i + 1].from - 2 * 250\n      /* HighlightMargin */\n      ) to = ranges[++i].to;\n\n      query.highlight(view.state, from, to, (from, to) => {\n        let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n        builder.add(from, to, selected ? selectedMatchMark : matchMark);\n      });\n    }\n\n    return builder.finish();\n  }\n\n}, {\n  decorations: v => v.decorations\n});\n\nfunction searchCommand(f) {\n  return view => {\n    let state = view.state.field(searchState, false);\n    return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n  };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\n\n\nconst findNext = /*@__PURE__*/searchCommand((view, _ref4) => {\n  let {\n    query\n  } = _ref4;\n  let {\n    to\n  } = view.state.selection.main;\n  let next = query.nextMatch(view.state, to, to);\n  if (!next) return false;\n  view.dispatch({\n    selection: {\n      anchor: next.from,\n      head: next.to\n    },\n    scrollIntoView: true,\n    effects: announceMatch(view, next),\n    userEvent: \"select.search\"\n  });\n  return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\n\nconst findPrevious = /*@__PURE__*/searchCommand((view, _ref5) => {\n  let {\n    query\n  } = _ref5;\n  let {\n    state\n  } = view,\n      {\n    from\n  } = state.selection.main;\n  let range = query.prevMatch(state, from, from);\n  if (!range) return false;\n  view.dispatch({\n    selection: {\n      anchor: range.from,\n      head: range.to\n    },\n    scrollIntoView: true,\n    effects: announceMatch(view, range),\n    userEvent: \"select.search\"\n  });\n  return true;\n});\n/**\nSelect all instances of the search query.\n*/\n\nconst selectMatches = /*@__PURE__*/searchCommand((view, _ref6) => {\n  let {\n    query\n  } = _ref6;\n  let ranges = query.matchAll(view.state, 1000);\n  if (!ranges || !ranges.length) return false;\n  view.dispatch({\n    selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n    userEvent: \"select.search.matches\"\n  });\n  return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\n\nconst selectSelectionMatches = _ref7 => {\n  let {\n    state,\n    dispatch\n  } = _ref7;\n  let sel = state.selection;\n  if (sel.ranges.length > 1 || sel.main.empty) return false;\n  let {\n    from,\n    to\n  } = sel.main;\n  let ranges = [],\n      main = 0;\n\n  for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n    if (ranges.length > 1000) return false;\n    if (cur.value.from == from) main = ranges.length;\n    ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n  }\n\n  dispatch(state.update({\n    selection: EditorSelection.create(ranges, main),\n    userEvent: \"select.search.matches\"\n  }));\n  return true;\n};\n/**\nReplace the current match of the search query.\n*/\n\n\nconst replaceNext = /*@__PURE__*/searchCommand((view, _ref8) => {\n  let {\n    query\n  } = _ref8;\n  let {\n    state\n  } = view,\n      {\n    from,\n    to\n  } = state.selection.main;\n  if (state.readOnly) return false;\n  let next = query.nextMatch(state, from, from);\n  if (!next) return false;\n  let changes = [],\n      selection,\n      replacement;\n  let announce = [];\n\n  if (next.from == from && next.to == to) {\n    replacement = state.toText(query.getReplacement(next));\n    changes.push({\n      from: next.from,\n      to: next.to,\n      insert: replacement\n    });\n    next = query.nextMatch(state, next.from, next.to);\n    announce.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n  }\n\n  if (next) {\n    let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n    selection = {\n      anchor: next.from - off,\n      head: next.to - off\n    };\n    announce.push(announceMatch(view, next));\n  }\n\n  view.dispatch({\n    changes,\n    selection,\n    scrollIntoView: !!selection,\n    effects: announce,\n    userEvent: \"input.replace\"\n  });\n  return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\n\nconst replaceAll = /*@__PURE__*/searchCommand((view, _ref9) => {\n  let {\n    query\n  } = _ref9;\n  if (view.state.readOnly) return false;\n  let changes = query.matchAll(view.state, 1e9).map(match => {\n    let {\n      from,\n      to\n    } = match;\n    return {\n      from,\n      to,\n      insert: query.getReplacement(match)\n    };\n  });\n  if (!changes.length) return false;\n  let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n  view.dispatch({\n    changes,\n    effects: EditorView.announce.of(announceText),\n    userEvent: \"input.replace.all\"\n  });\n  return true;\n});\n\nfunction createSearchPanel(view) {\n  return view.state.facet(searchConfigFacet).createPanel(view);\n}\n\nfunction defaultQuery(state, fallback) {\n  var _a, _b, _c, _d;\n\n  let sel = state.selection.main;\n  let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n  if (fallback && !selText) return fallback;\n  let config = state.facet(searchConfigFacet);\n  return new SearchQuery({\n    search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n    caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n    literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n    wholeWord: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _d !== void 0 ? _d : config.wholeWord\n  });\n}\n/**\nMake sure the search panel is open and focused.\n*/\n\n\nconst openSearchPanel = view => {\n  let state = view.state.field(searchState, false);\n\n  if (state && state.panel) {\n    let panel = getPanel(view, createSearchPanel);\n    if (!panel) return false;\n    let searchInput = panel.dom.querySelector(\"[main-field]\");\n\n    if (searchInput && searchInput != view.root.activeElement) {\n      let query = defaultQuery(view.state, state.query.spec);\n      if (query.valid) view.dispatch({\n        effects: setSearchQuery.of(query)\n      });\n      searchInput.focus();\n      searchInput.select();\n    }\n  } else {\n    view.dispatch({\n      effects: [togglePanel.of(true), state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)]\n    });\n  }\n\n  return true;\n};\n/**\nClose the search panel.\n*/\n\n\nconst closeSearchPanel = view => {\n  let state = view.state.field(searchState, false);\n  if (!state || !state.panel) return false;\n  let panel = getPanel(view, createSearchPanel);\n  if (panel && panel.dom.contains(view.root.activeElement)) view.focus();\n  view.dispatch({\n    effects: togglePanel.of(false)\n  });\n  return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\n\n\nconst searchKeymap = [{\n  key: \"Mod-f\",\n  run: openSearchPanel,\n  scope: \"editor search-panel\"\n}, {\n  key: \"F3\",\n  run: findNext,\n  shift: findPrevious,\n  scope: \"editor search-panel\",\n  preventDefault: true\n}, {\n  key: \"Mod-g\",\n  run: findNext,\n  shift: findPrevious,\n  scope: \"editor search-panel\",\n  preventDefault: true\n}, {\n  key: \"Escape\",\n  run: closeSearchPanel,\n  scope: \"editor search-panel\"\n}, {\n  key: \"Mod-Shift-l\",\n  run: selectSelectionMatches\n}, {\n  key: \"Alt-g\",\n  run: gotoLine\n}, {\n  key: \"Mod-d\",\n  run: selectNextOccurrence,\n  preventDefault: true\n}];\n\nclass SearchPanel {\n  constructor(view) {\n    this.view = view;\n    let query = this.query = view.state.field(searchState).query.spec;\n    this.commit = this.commit.bind(this);\n    this.searchField = elt(\"input\", {\n      value: query.search,\n      placeholder: phrase(view, \"Find\"),\n      \"aria-label\": phrase(view, \"Find\"),\n      class: \"cm-textfield\",\n      name: \"search\",\n      \"main-field\": \"true\",\n      onchange: this.commit,\n      onkeyup: this.commit\n    });\n    this.replaceField = elt(\"input\", {\n      value: query.replace,\n      placeholder: phrase(view, \"Replace\"),\n      \"aria-label\": phrase(view, \"Replace\"),\n      class: \"cm-textfield\",\n      name: \"replace\",\n      onchange: this.commit,\n      onkeyup: this.commit\n    });\n    this.caseField = elt(\"input\", {\n      type: \"checkbox\",\n      name: \"case\",\n      checked: query.caseSensitive,\n      onchange: this.commit\n    });\n    this.reField = elt(\"input\", {\n      type: \"checkbox\",\n      name: \"re\",\n      checked: query.regexp,\n      onchange: this.commit\n    });\n    this.wordField = elt(\"input\", {\n      type: \"checkbox\",\n      name: \"word\",\n      checked: query.wholeWord,\n      onchange: this.commit\n    });\n\n    function button(name, onclick, content) {\n      return elt(\"button\", {\n        class: \"cm-button\",\n        name,\n        onclick,\n        type: \"button\"\n      }, content);\n    }\n\n    this.dom = elt(\"div\", {\n      onkeydown: e => this.keydown(e),\n      class: \"cm-search\"\n    }, [this.searchField, button(\"next\", () => findNext(view), [phrase(view, \"next\")]), button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]), button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]), elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]), elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]), elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]), ...(view.state.readOnly ? [] : [elt(\"br\"), this.replaceField, button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]), button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")]), elt(\"button\", {\n      name: \"close\",\n      onclick: () => closeSearchPanel(view),\n      \"aria-label\": phrase(view, \"close\"),\n      type: \"button\"\n    }, [\"×\"])])]);\n  }\n\n  commit() {\n    let query = new SearchQuery({\n      search: this.searchField.value,\n      caseSensitive: this.caseField.checked,\n      regexp: this.reField.checked,\n      wholeWord: this.wordField.checked,\n      replace: this.replaceField.value\n    });\n\n    if (!query.eq(this.query)) {\n      this.query = query;\n      this.view.dispatch({\n        effects: setSearchQuery.of(query)\n      });\n    }\n  }\n\n  keydown(e) {\n    if (runScopeHandlers(this.view, e, \"search-panel\")) {\n      e.preventDefault();\n    } else if (e.keyCode == 13 && e.target == this.searchField) {\n      e.preventDefault();\n      (e.shiftKey ? findPrevious : findNext)(this.view);\n    } else if (e.keyCode == 13 && e.target == this.replaceField) {\n      e.preventDefault();\n      replaceNext(this.view);\n    }\n  }\n\n  update(update) {\n    for (let tr of update.transactions) for (let effect of tr.effects) {\n      if (effect.is(setSearchQuery) && !effect.value.eq(this.query)) this.setQuery(effect.value);\n    }\n  }\n\n  setQuery(query) {\n    this.query = query;\n    this.searchField.value = query.search;\n    this.replaceField.value = query.replace;\n    this.caseField.checked = query.caseSensitive;\n    this.reField.checked = query.regexp;\n    this.wordField.checked = query.wholeWord;\n  }\n\n  mount() {\n    this.searchField.select();\n  }\n\n  get pos() {\n    return 80;\n  }\n\n  get top() {\n    return this.view.state.facet(searchConfigFacet).top;\n  }\n\n}\n\nfunction phrase(view, phrase) {\n  return view.state.phrase(phrase);\n}\n\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\n\nfunction announceMatch(view, _ref10) {\n  let {\n    from,\n    to\n  } = _ref10;\n  let line = view.state.doc.lineAt(from),\n      lineEnd = view.state.doc.lineAt(to).to;\n  let start = Math.max(line.from, from - AnnounceMargin),\n      end = Math.min(lineEnd, to + AnnounceMargin);\n  let text = view.state.sliceDoc(start, end);\n\n  if (start != line.from) {\n    for (let i = 0; i < AnnounceMargin; i++) if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n      text = text.slice(i);\n      break;\n    }\n  }\n\n  if (end != lineEnd) {\n    for (let i = text.length - 1; i > text.length - AnnounceMargin; i--) if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n      text = text.slice(0, i);\n      break;\n    }\n  }\n\n  return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-panel.cm-search\": {\n    padding: \"2px 6px 4px\",\n    position: \"relative\",\n    \"& [name=close]\": {\n      position: \"absolute\",\n      top: \"0\",\n      right: \"4px\",\n      backgroundColor: \"inherit\",\n      border: \"none\",\n      font: \"inherit\",\n      padding: 0,\n      margin: 0\n    },\n    \"& input, & button, & label\": {\n      margin: \".2em .6em .2em 0\"\n    },\n    \"& input[type=checkbox]\": {\n      marginRight: \".2em\"\n    },\n    \"& label\": {\n      fontSize: \"80%\",\n      whiteSpace: \"pre\"\n    }\n  },\n  \"&light .cm-searchMatch\": {\n    backgroundColor: \"#ffff0054\"\n  },\n  \"&dark .cm-searchMatch\": {\n    backgroundColor: \"#00ffff8a\"\n  },\n  \"&light .cm-searchMatch-selected\": {\n    backgroundColor: \"#ff6a0054\"\n  },\n  \"&dark .cm-searchMatch-selected\": {\n    backgroundColor: \"#ff00ff8a\"\n  }\n});\nconst searchExtensions = [searchState, /*@__PURE__*/Prec.lowest(searchHighlighter), baseTheme];\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };","map":{"version":3,"names":["showPanel","EditorView","getPanel","Decoration","ViewPlugin","runScopeHandlers","codePointAt","fromCodePoint","codePointSize","StateEffect","StateField","EditorSelection","Facet","combineConfig","CharCategory","RangeSetBuilder","Prec","EditorState","findClusterBreak","elt","basicNormalize","String","prototype","normalize","x","SearchCursor","constructor","text","query","from","to","length","test","value","done","matches","buffer","bufferPos","iter","iterRange","bufferStart","peek","next","pop","nextOverlapping","str","start","norm","i","pos","code","charCodeAt","match","index","keep","splice","push","Symbol","iterator","empty","exec","baseFlags","unicode","RegExpCursor","options","curLine","MultilineRegExpCursor","re","RegExp","ignoreCase","startLine","lineAt","curLineStart","matchPos","toCharEnd","getLine","skip","lineBreak","slice","nextLine","off","lastIndex","flattened","WeakMap","FlattenedDoc","get","doc","cached","flat","sliceString","set","cachedFrom","chunkEnd","validRegExp","source","_a","line","createLineDialog","view","input","class","name","dom","onkeydown","event","keyCode","preventDefault","dispatch","effects","dialogEffect","of","focus","go","onsubmit","state","phrase","type","selection","main","head","sign","ln","cl","percent","col","number","pc","lines","Math","round","docLine","max","min","cursor","scrollIntoView","define","dialogField","create","update","tr","e","is","provide","f","val","gotoLine","panel","field","appendConfig","baseTheme$1","querySelector","baseTheme","padding","fontSize","defaultHighlightOptions","highlightWordAroundCursor","minSelectionLength","maxMatches","wholeWords","highlightConfig","combine","a","b","highlightSelectionMatches","ext","defaultTheme","matchHighlighter","matchDeco","mark","mainMatchDeco","insideWordBoundaries","check","sliceDoc","Word","insideWord","fromClass","decorations","getDeco","selectionSet","docChanged","viewportChanged","conf","facet","sel","ranges","none","range","word","wordAt","charCategorizer","len","trim","deco","part","visibleRanges","v","backgroundColor","selectWord","newSel","map","mainIndex","eq","findNextOccurrence","fullWord","cycled","some","r","selectNextOccurrence","searchedText","addRange","searchConfigFacet","configs","top","caseSensitive","literal","wholeWord","createPanel","SearchPanel","search","config","searchExtensions","SearchQuery","regexp","replace","valid","unquoted","_","ch","other","RegExpQuery","StringQuery","getCursor","st","regexpCursor","stringCursor","QueryType","spec","undefined","toLowerCase","stringWordTest","categorizer","buf","bufPos","charAfter","charBefore","nextMatch","curFrom","curTo","prevMatchInRange","prevMatch","getReplacement","_result","matchAll","limit","highlight","add","regexpWordTest","_from","_to","size","result","m","setSearchQuery","togglePanel","searchState","SearchState","defaultQuery","effect","createSearchPanel","getSearchQuery","curState","searchPanelOpen","matchMark","selectedMatchMark","searchHighlighter","startState","builder","l","selected","finish","searchCommand","openSearchPanel","findNext","anchor","announceMatch","userEvent","findPrevious","selectMatches","selectSelectionMatches","cur","replaceNext","readOnly","changes","replacement","announce","toText","insert","replaceAll","announceText","fallback","_b","_c","_d","selText","searchInput","root","activeElement","select","closeSearchPanel","contains","searchKeymap","key","run","scope","shift","commit","bind","searchField","placeholder","onchange","onkeyup","replaceField","caseField","checked","reField","wordField","button","onclick","content","keydown","target","shiftKey","transactions","setQuery","mount","AnnounceMargin","Break","lineEnd","end","position","right","border","font","margin","marginRight","whiteSpace","lowest"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/search/dist/index.js"],"sourcesContent":["import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            for (let i = 0, pos = start;; i++) {\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos);\n                if (match) {\n                    this.value = match;\n                    return this;\n                }\n                if (i == norm.length - 1)\n                    break;\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                    pos++;\n            }\n        }\n    }\n    match(code, pos) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: pos + 1 };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: pos + 1 };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\" });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        view.dispatch({\n            effects: dialogEffect.of(false),\n            selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),\n            scrollIntoView: true\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n\nThe dialog can be styled with the `panel.gotoLine` theme\nselector.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").focus();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to)\n                    && insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to).trim();\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.literal ? this.search : this.search.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word ||\n            (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word &&\n                categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done)\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) { return this.spec.replace; }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        categorizer(charAfter(match.input, match.index)) != CharCategory.Word ||\n        categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word &&\n            categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.replace.replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m);\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    view.dispatch({\n        selection: { anchor: next.from, head: next.to },\n        scrollIntoView: true,\n        effects: announceMatch(view, next),\n        userEvent: \"select.search\"\n    });\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let range = query.prevMatch(state, from, from);\n    if (!range)\n        return false;\n    view.dispatch({\n        selection: { anchor: range.from, head: range.to },\n        scrollIntoView: true,\n        effects: announceMatch(view, range),\n        userEvent: \"select.search\"\n    });\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next)\n        return false;\n    let changes = [], selection, replacement;\n    let announce = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        announce.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = { anchor: next.from - off, head: next.to - off };\n        announce.push(announceMatch(view, next));\n    }\n    view.dispatch({\n        changes, selection,\n        scrollIntoView: !!selection,\n        effects: announce,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        wholeWord: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _d !== void 0 ? _d : config.wholeWord\n    });\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let panel = getPanel(view, createSearchPanel);\n        if (!panel)\n            return false;\n        let searchInput = panel.dom.querySelector(\"[main-field]\");\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")]),\n                elt(\"button\", {\n                    name: \"close\",\n                    onclick: () => closeSearchPanel(view),\n                    \"aria-label\": phrase(view, \"close\"),\n                    type: \"button\"\n                }, [\"×\"])\n            ]\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.lowest(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}