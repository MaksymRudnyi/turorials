{"ast":null,"code":"// @ts-nocheck\nimport refractorMarkup from './markup.js';\nmarkupTemplating.displayName = 'markup-templating';\nmarkupTemplating.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function markupTemplating(Prism) {\n  Prism.register(refractorMarkup);\n\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n\n\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n\n\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n\n              var token = tokens[i];\n\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n\n                  replacement.push(middle);\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content);\n              }\n            }\n\n            return tokens;\n          }\n\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkup","markupTemplating","displayName","aliases","Prism","register","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","i","length","placeholder","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["// @ts-nocheck\nimport refractorMarkup from './markup.js'\nmarkupTemplating.displayName = 'markup-templating'\nmarkupTemplating.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function markupTemplating(Prism) {\n  Prism.register(refractorMarkup)\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n\n              var token = tokens[i]\n\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n\n                  replacement.push(middle)\n\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n\n            return tokens\n          }\n\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}