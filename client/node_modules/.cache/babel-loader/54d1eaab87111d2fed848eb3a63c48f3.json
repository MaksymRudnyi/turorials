{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"onScroll\", \"renderTextarea\"];\nimport React, { useEffect, Fragment, useContext } from 'react';\nimport { EditorContext } from '../../Context';\nimport shortcuts from './shortcuts';\nimport Markdown from './Markdown';\nimport Textarea from './Textarea';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TextArea(props) {\n  var _ref = props || {},\n      {\n    prefixCls,\n    className,\n    onScroll,\n    renderTextarea\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var {\n    markdown,\n    scrollTop,\n    commands,\n    highlightEnable,\n    extraCommands,\n    dispatch\n  } = useContext(EditorContext);\n  var textRef = React.useRef(null);\n  var executeRef = React.useRef();\n  var warp = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    var state = {};\n\n    if (warp.current) {\n      state.textareaWarp = warp.current || undefined;\n      warp.current.scrollTop = scrollTop || 0;\n    }\n\n    if (dispatch) {\n      dispatch(_extends({}, state));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      var _commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n\n      executeRef.current = _commandOrchestrator;\n      dispatch({\n        textarea: textRef.current,\n        commandOrchestrator: _commandOrchestrator\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var textStyle = highlightEnable ? {} : {\n    WebkitTextFillColor: 'initial',\n    overflow: 'auto'\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: warp,\n    className: prefixCls + \"-aree \" + (className || ''),\n    onScroll: onScroll,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: prefixCls + \"-text\",\n      children: renderTextarea ? /*#__PURE__*/React.cloneElement(renderTextarea(_extends({}, otherProps, {\n        value: markdown,\n        autoComplete: 'off',\n        autoCorrect: 'off',\n        spellCheck: 'false',\n        autoCapitalize: 'off',\n        className: prefixCls + \"-text-input\",\n        style: {\n          WebkitTextFillColor: 'inherit',\n          overflow: 'auto'\n        }\n      }), {\n        dispatch,\n        onChange: otherProps.onChange,\n        shortcuts,\n        useContext: {\n          commands,\n          extraCommands,\n          commandOrchestrator: executeRef.current\n        }\n      }), {\n        ref: textRef\n      }) : /*#__PURE__*/_jsxs(Fragment, {\n        children: [highlightEnable && /*#__PURE__*/_jsx(Markdown, {\n          prefixCls: prefixCls\n        }), /*#__PURE__*/_jsx(Textarea, _extends({\n          prefixCls: prefixCls\n        }, otherProps, {\n          style: textStyle\n        }))]\n      })\n    })\n  });\n}","map":{"version":3,"sources":["../../../src/components/TextArea/index.tsx"],"names":["renderTextarea","otherProps","props","dispatch","useContext","textRef","React","executeRef","warp","useEffect","state","scrollTop","commandOrchestrator","textarea","textStyle","highlightEnable","WebkitTextFillColor","overflow","prefixCls","className","value","autoComplete","autoCorrect","spellCheck","autoCapitalize","style","onChange","current","ref"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useContext } from 'react';\nimport { EditorContext, ContextStore, ExecuteCommandState } from '../../Context';\nimport shortcuts from './shortcuts';\nimport Markdown from './Markdown';\nimport Textarea, { TextAreaProps } from './Textarea';\nimport { IProps } from '../../Editor';\nimport { TextAreaCommandOrchestrator, ICommand } from '../../commands';\nimport './index.less';\n\ntype RenderTextareaHandle = {\n  dispatch: ContextStore['dispatch'];\n  onChange?: TextAreaProps['onChange'];\n  useContext?: {\n    commands: ContextStore['commands'];\n    extraCommands: ContextStore['extraCommands'];\n    commandOrchestrator?: TextAreaCommandOrchestrator;\n  };\n  shortcuts?: (\n    e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>,\n    commands: ICommand[],\n    commandOrchestrator?: TextAreaCommandOrchestrator,\n    dispatch?: React.Dispatch<ContextStore>,\n    state?: ExecuteCommandState,\n  ) => void;\n};\n\nexport interface ITextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onScroll'>,\n    IProps {\n  value?: string;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  renderTextarea?: (\n    props: React.TextareaHTMLAttributes<HTMLTextAreaElement> | React.HTMLAttributes<HTMLDivElement>,\n    opts: RenderTextareaHandle,\n  ) => JSX.Element;\n}\n\nexport type TextAreaRef = {\n  text?: HTMLTextAreaElement;\n  warp?: HTMLDivElement;\n};\n\nexport default function TextArea(props: ITextAreaProps) {\n  const { prefixCls, className, onScroll, renderTextarea, ...otherProps } = props || {};\n  const { markdown, scrollTop, commands, highlightEnable, extraCommands, dispatch } = useContext(EditorContext);\n  const textRef = React.useRef<HTMLTextAreaElement>(null);\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  const warp = React.createRef<HTMLDivElement>();\n  useEffect(() => {\n    const state: ContextStore = {};\n    if (warp.current) {\n      state.textareaWarp = warp.current || undefined;\n      warp.current.scrollTop = scrollTop || 0;\n    }\n    if (dispatch) {\n      dispatch({ ...state });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const textStyle: React.CSSProperties = highlightEnable ? {} : { WebkitTextFillColor: 'initial', overflow: 'auto' };\n\n  return (\n    <div ref={warp} className={`${prefixCls}-aree ${className || ''}`} onScroll={onScroll}>\n      <div className={`${prefixCls}-text`}>\n        {renderTextarea ? (\n          React.cloneElement(\n            renderTextarea(\n              {\n                ...otherProps,\n                value: markdown,\n                autoComplete: 'off',\n                autoCorrect: 'off',\n                spellCheck: 'false',\n                autoCapitalize: 'off',\n                className: `${prefixCls}-text-input`,\n                style: {\n                  WebkitTextFillColor: 'inherit',\n                  overflow: 'auto',\n                },\n              },\n              {\n                dispatch,\n                onChange: otherProps.onChange,\n                shortcuts,\n                useContext: { commands, extraCommands, commandOrchestrator: executeRef.current },\n              },\n            ),\n            {\n              ref: textRef,\n            },\n          )\n        ) : (\n          <Fragment>\n            {highlightEnable && <Markdown prefixCls={prefixCls} />}\n            <Textarea prefixCls={prefixCls} {...otherProps} style={textStyle} />\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}