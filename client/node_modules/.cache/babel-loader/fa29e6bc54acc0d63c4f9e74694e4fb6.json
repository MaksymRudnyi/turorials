{"ast":null,"code":"import { parser } from '@lezer/php';\nimport { parseMixed } from '@lezer/common';\nimport { html } from '@codemirror/lang-html';\nimport { LRLanguage, indentNodeProp, continuedIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n/**\nA language provider based on the [Lezer PHP\nparser](https://github.com/lezer-parser/php), extended with\nhighlighting and indentation information.\n*/\n\nconst phpLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b|elseif\\b|endif\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch\\b|finally\\b)/\n      }),\n      SwitchBody: context => {\n        let after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      ColonBlock: cx => cx.baseIndent + cx.unit,\n      \"Block EnumBody DeclarationList\": /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      ArrowFunction: cx => cx.baseIndent + cx.unit,\n      \"String BlockComment\": () => -1,\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^({|end(for|foreach|switch|while)\\b)/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList\": foldInside,\n\n      ColonBlock(tree) {\n        return {\n          from: tree.from + 1,\n          to: tree.to\n        };\n      },\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      },\n      line: \"//\"\n    },\n    indentOnInput: /^\\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\\{|\\})$/,\n    wordChars: \"$\"\n  }\n});\n/**\nPHP language support.\n*/\n\nfunction php() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let support = [],\n      base;\n  if (config.baseLanguage === null) ;else if (config.baseLanguage) {\n    base = config.baseLanguage;\n  } else {\n    let htmlSupport = html({\n      matchClosingTags: false\n    });\n    support.push(htmlSupport.support);\n    base = htmlSupport.language;\n  }\n  return new LanguageSupport(phpLanguage.configure({\n    wrap: base && parseMixed(node => {\n      if (!node.type.isTop) return null;\n      return {\n        parser: base.parser,\n        overlay: node => node.name == \"Text\"\n      };\n    }),\n    top: config.plain ? \"Program\" : \"Template\"\n  }), support);\n}\n\nexport { php, phpLanguage };","map":{"version":3,"names":["parser","parseMixed","html","LRLanguage","indentNodeProp","continuedIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","phpLanguage","define","configure","props","add","IfStatement","except","TryStatement","SwitchBody","context","after","textAfter","closed","test","isCase","baseIndent","unit","ColonBlock","cx","closing","ArrowFunction","Statement","tree","from","to","BlockComment","languageData","commentTokens","block","open","close","line","indentOnInput","wordChars","php","config","support","base","baseLanguage","htmlSupport","matchClosingTags","push","language","wrap","node","type","isTop","overlay","name","top","plain"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/lang-php/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/php';\nimport { parseMixed } from '@lezer/common';\nimport { html } from '@codemirror/lang-html';\nimport { LRLanguage, indentNodeProp, continuedIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer PHP\nparser](https://github.com/lezer-parser/php), extended with\nhighlighting and indentation information.\n*/\nconst phpLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b|elseif\\b|endif\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                ColonBlock: cx => cx.baseIndent + cx.unit,\n                \"Block EnumBody DeclarationList\": /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"String BlockComment\": () => -1,\n                Statement: /*@__PURE__*/continuedIndent({ except: /^({|end(for|foreach|switch|while)\\b)/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList\": foldInside,\n                ColonBlock(tree) { return { from: tree.from + 1, to: tree.to }; },\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { block: { open: \"/*\", close: \"*/\" }, line: \"//\" },\n        indentOnInput: /^\\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\\{|\\})$/,\n        wordChars: \"$\"\n    }\n});\n/**\nPHP language support.\n*/\nfunction php(config = {}) {\n    let support = [], base;\n    if (config.baseLanguage === null) ;\n    else if (config.baseLanguage) {\n        base = config.baseLanguage;\n    }\n    else {\n        let htmlSupport = html({ matchClosingTags: false });\n        support.push(htmlSupport.support);\n        base = htmlSupport.language;\n    }\n    return new LanguageSupport(phpLanguage.configure({\n        wrap: base && parseMixed(node => {\n            if (!node.type.isTop)\n                return null;\n            return {\n                parser: base.parser,\n                overlay: node => node.name == \"Text\"\n            };\n        }),\n        top: config.plain ? \"Program\" : \"Template\"\n    }), support);\n}\n\nexport { php, phpLanguage };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,eAArC,EAAsDC,eAAtD,EAAuEC,YAAvE,EAAqFC,UAArF,EAAiGC,eAAjG,QAAwH,sBAAxH;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,aAAaP,UAAU,CAACQ,MAAX,CAAkB;EAC/CX,MAAM,EAAE,aAAaA,MAAM,CAACY,SAAP,CAAiB;IAClCC,KAAK,EAAE,CACH,aAAaT,cAAc,CAACU,GAAf,CAAmB;MAC5BC,WAAW,EAAE,aAAaV,eAAe,CAAC;QAAEW,MAAM,EAAE;MAAV,CAAD,CADb;MAE5BC,YAAY,EAAE,aAAaZ,eAAe,CAAC;QAAEW,MAAM,EAAE;MAAV,CAAD,CAFd;MAG5BE,UAAU,EAAEC,OAAO,IAAI;QACnB,IAAIC,KAAK,GAAGD,OAAO,CAACE,SAApB;QAAA,IAA+BC,MAAM,GAAG,SAASC,IAAT,CAAcH,KAAd,CAAxC;QAAA,IAA8DI,MAAM,GAAG,uBAAuBD,IAAvB,CAA4BH,KAA5B,CAAvE;QACA,OAAOD,OAAO,CAACM,UAAR,GAAqB,CAACH,MAAM,GAAG,CAAH,GAAOE,MAAM,GAAG,CAAH,GAAO,CAA3B,IAAgCL,OAAO,CAACO,IAApE;MACH,CAN2B;MAO5BC,UAAU,EAAEC,EAAE,IAAIA,EAAE,CAACH,UAAH,GAAgBG,EAAE,CAACF,IAPT;MAQ5B,kCAAkC,aAAapB,eAAe,CAAC;QAAEuB,OAAO,EAAE;MAAX,CAAD,CARlC;MAS5BC,aAAa,EAAEF,EAAE,IAAIA,EAAE,CAACH,UAAH,GAAgBG,EAAE,CAACF,IATZ;MAU5B,uBAAuB,MAAM,CAAC,CAVF;MAW5BK,SAAS,EAAE,aAAa1B,eAAe,CAAC;QAAEW,MAAM,EAAE;MAAV,CAAD;IAXX,CAAnB,CADV,EAcH,aAAaT,YAAY,CAACO,GAAb,CAAiB;MAC1B,uEAAuEN,UAD7C;;MAE1BmB,UAAU,CAACK,IAAD,EAAO;QAAE,OAAO;UAAEC,IAAI,EAAED,IAAI,CAACC,IAAL,GAAY,CAApB;UAAuBC,EAAE,EAAEF,IAAI,CAACE;QAAhC,CAAP;MAA8C,CAFvC;;MAG1BC,YAAY,CAACH,IAAD,EAAO;QAAE,OAAO;UAAEC,IAAI,EAAED,IAAI,CAACC,IAAL,GAAY,CAApB;UAAuBC,EAAE,EAAEF,IAAI,CAACE,EAAL,GAAU;QAArC,CAAP;MAAkD;;IAH7C,CAAjB,CAdV;EAD2B,CAAjB,CAD0B;EAuB/CE,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAR;QAAcC,KAAK,EAAE;MAArB,CAAT;MAAsCC,IAAI,EAAE;IAA5C,CADL;IAEVC,aAAa,EAAE,+EAFL;IAGVC,SAAS,EAAE;EAHD;AAvBiC,CAAlB,CAAjC;AA6BA;AACA;AACA;;AACA,SAASC,GAAT,GAA0B;EAAA,IAAbC,MAAa,uEAAJ,EAAI;EACtB,IAAIC,OAAO,GAAG,EAAd;EAAA,IAAkBC,IAAlB;EACA,IAAIF,MAAM,CAACG,YAAP,KAAwB,IAA5B,EAAkC,CAAlC,KACK,IAAIH,MAAM,CAACG,YAAX,EAAyB;IAC1BD,IAAI,GAAGF,MAAM,CAACG,YAAd;EACH,CAFI,MAGA;IACD,IAAIC,WAAW,GAAG/C,IAAI,CAAC;MAAEgD,gBAAgB,EAAE;IAApB,CAAD,CAAtB;IACAJ,OAAO,CAACK,IAAR,CAAaF,WAAW,CAACH,OAAzB;IACAC,IAAI,GAAGE,WAAW,CAACG,QAAnB;EACH;EACD,OAAO,IAAI3C,eAAJ,CAAoBC,WAAW,CAACE,SAAZ,CAAsB;IAC7CyC,IAAI,EAAEN,IAAI,IAAI9C,UAAU,CAACqD,IAAI,IAAI;MAC7B,IAAI,CAACA,IAAI,CAACC,IAAL,CAAUC,KAAf,EACI,OAAO,IAAP;MACJ,OAAO;QACHxD,MAAM,EAAE+C,IAAI,CAAC/C,MADV;QAEHyD,OAAO,EAAEH,IAAI,IAAIA,IAAI,CAACI,IAAL,IAAa;MAF3B,CAAP;IAIH,CAPuB,CADqB;IAS7CC,GAAG,EAAEd,MAAM,CAACe,KAAP,GAAe,SAAf,GAA2B;EATa,CAAtB,CAApB,EAUHd,OAVG,CAAP;AAWH;;AAED,SAASF,GAAT,EAAclC,WAAd"},"metadata":{},"sourceType":"module"}