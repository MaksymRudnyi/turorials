{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\n\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak');\n    marker = code;\n    return atBreak(code);\n  }\n  /** @type {State} */\n\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code);\n    }\n\n    if (size < 3 || code !== null && !markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    effects.exit('thematicBreak');\n    return ok(code);\n  }\n  /** @type {State} */\n\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n\n    effects.exit('thematicBreakSequence');\n    return atBreak(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","thematicBreak","name","tokenize","tokenizeThematicBreak","effects","ok","nok","size","marker","start","code","enter","atBreak","sequence","exit","consume"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark-core-commonmark/lib/thematic-break.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,EAA4BC,aAA5B,QAAgD,0BAAhD;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,IAAI,EAAE,eADqB;EAE3BC,QAAQ,EAAEC;AAFiB,CAAtB;AAIP;;AAEA,SAASA,qBAAT,CAA+BC,OAA/B,EAAwCC,EAAxC,EAA4CC,GAA5C,EAAiD;EAC/C,IAAIC,IAAI,GAAG,CAAX;EACA;;EAEA,IAAIC,MAAJ;EACA,OAAOC,KAAP;EACA;;EAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;IACnBN,OAAO,CAACO,KAAR,CAAc,eAAd;IACAH,MAAM,GAAGE,IAAT;IACA,OAAOE,OAAO,CAACF,IAAD,CAAd;EACD;EACD;;;EAEA,SAASE,OAAT,CAAiBF,IAAjB,EAAuB;IACrB,IAAIA,IAAI,KAAKF,MAAb,EAAqB;MACnBJ,OAAO,CAACO,KAAR,CAAc,uBAAd;MACA,OAAOE,QAAQ,CAACH,IAAD,CAAf;IACD;;IAED,IAAIX,aAAa,CAACW,IAAD,CAAjB,EAAyB;MACvB,OAAOb,YAAY,CAACO,OAAD,EAAUQ,OAAV,EAAmB,YAAnB,CAAZ,CAA6CF,IAA7C,CAAP;IACD;;IAED,IAAIH,IAAI,GAAG,CAAP,IAAaG,IAAI,KAAK,IAAT,IAAiB,CAACZ,kBAAkB,CAACY,IAAD,CAArD,EAA8D;MAC5D,OAAOJ,GAAG,CAACI,IAAD,CAAV;IACD;;IAEDN,OAAO,CAACU,IAAR,CAAa,eAAb;IACA,OAAOT,EAAE,CAACK,IAAD,CAAT;EACD;EACD;;;EAEA,SAASG,QAAT,CAAkBH,IAAlB,EAAwB;IACtB,IAAIA,IAAI,KAAKF,MAAb,EAAqB;MACnBJ,OAAO,CAACW,OAAR,CAAgBL,IAAhB;MACAH,IAAI;MACJ,OAAOM,QAAP;IACD;;IAEDT,OAAO,CAACU,IAAR,CAAa,uBAAb;IACA,OAAOF,OAAO,CAACF,IAAD,CAAd;EACD;AACF"},"metadata":{},"sourceType":"module"}