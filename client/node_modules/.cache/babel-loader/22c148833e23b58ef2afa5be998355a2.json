{"ast":null,"code":"const express = require('express');\n\nconst multer = require('multer');\n\nconst cors = require('cors');\n\nconst fs = require('fs');\n\nconst fsPromises = require(\"fs/promises\");\n\nvar nodePandoc = require('node-pandoc');\n\nconst app = express();\n/*\r\napp.use(express.static('public'));\r\n*/\n\napp.use(cors());\nexport const deleteFile = async filePath => {\n  try {\n    await fsPromises.unlink(filePath);\n    console.log('Successfully removed file!');\n  } catch (err) {\n    console.log(err);\n  }\n}; //deleteFile('../server3/markdown.md');\n\n/*\r\n//------------UPLOAD document----\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, 'public')\r\n    },\r\n    filename:(req, file, cb) => {\r\n        console.log(filename);\r\n        filename = \"markdown.md\";\r\n        cb(null, filename);\r\n    }\r\n});\r\n\r\n*/\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'public');\n  },\n  filename: (req, file, cb) => {\n    cb(null, \"markdown.docx\");\n  }\n});\nconst upload = multer({\n  storage\n}).single('file'); ///// PANDOC ////////\n\nvar src, args, callback;\nsrc = \"./public/markdown.docx\"; // Arguments can be either a single string:\n\nargs = '-f docx -t markdown -o ./markdown.md'; // Or in an array of strings -- careful no spaces are present:\n\nargs = ['-f', 'docx', '-t', 'markdown', '-o', 'markdown.md']; // Set your callback function\n\ncallback = function (err, result) {\n  if (err) {\n    console.error('Oh Nos: ', err);\n  } // For output to files, the 'result' will be a boolean 'true'.\n  // Otherwise, the converted value will be returned.\n\n\n  console.log(result);\n  return result;\n};\n\napp.post('/upload', (req, res) => {\n  //  deleteFile(\"../../../fileupload8/server/markdown.md\")\n  upload(req, res, err => {\n    if (err) {\n      return res.status(500).json(err);\n    } else {\n      function send() {\n        res.status(200).send(req.file), fs.copyFile('./public/markdown.docx', './markdown.docx', console.log('file copied'), err => {\n          if (err) throw err;\n          console.log('error');\n        });\n      }\n    }\n\n    return send();\n  });\n  nodePandoc(src, args, callback);\n});\napp.listen(8000, () => {\n  console.log('App is running on port 8000');\n});","map":{"version":3,"names":["express","require","multer","cors","fs","fsPromises","nodePandoc","app","use","deleteFile","filePath","unlink","console","log","err","storage","diskStorage","destination","req","file","cb","filename","upload","single","src","args","callback","result","error","post","res","status","json","send","copyFile","listen"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/server.js"],"sourcesContent":["const express = require('express');\r\nconst multer = require('multer');\r\nconst cors = require('cors');\r\nconst fs = require('fs');\r\nconst fsPromises = require(\"fs/promises\");\r\nvar nodePandoc = require('node-pandoc');\r\n\r\nconst app = express();\r\n/*\r\napp.use(express.static('public'));\r\n*/\r\napp.use(cors());\r\n\r\n\r\n\r\nexport const deleteFile = async (filePath) => {\r\n    try {\r\n      await fsPromises.unlink(filePath);\r\n      console.log('Successfully removed file!');\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n//deleteFile('../server3/markdown.md');\r\n/*\r\n//------------UPLOAD document----\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, 'public')\r\n    },\r\n    filename:(req, file, cb) => {\r\n        console.log(filename);\r\n        filename = \"markdown.md\";\r\n        cb(null, filename);\r\n    }\r\n});\r\n\r\n*/\r\n\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, 'public')\r\n    },\r\n    filename:(req, file, cb) => {\r\n        cb(null, \"markdown.docx\")\r\n    }\r\n});\r\n\r\nconst upload = multer({storage}).single('file')\r\n\r\n///// PANDOC ////////\r\n\r\nvar src, args, callback;\r\n \r\nsrc = (\"./public/markdown.docx\");\r\n \r\n// Arguments can be either a single string:\r\nargs = '-f docx -t markdown -o ./markdown.md';\r\n// Or in an array of strings -- careful no spaces are present:\r\nargs = ['-f','docx','-t','markdown','-o','markdown.md'];\r\n\r\n// Set your callback function\r\ncallback = function (err, result) {\r\n \r\n  if (err) {\r\n    console.error('Oh Nos: ',err);\r\n  }\r\n \r\n  // For output to files, the 'result' will be a boolean 'true'.\r\n  // Otherwise, the converted value will be returned.\r\n  console.log(result);\r\n  return result;\r\n};\r\n \r\n\r\n\r\napp.post('/upload', (req, res) => {\r\n    //  deleteFile(\"../../../fileupload8/server/markdown.md\")\r\n    upload(req,res, (err) => {\r\n        if (err) {\r\n            return res.status(500).json(err)\r\n        }else{\r\n            function send(){\r\n                res.status(200).send(req.file),\r\n                fs.copyFile('./public/markdown.docx', './markdown.docx', \r\n                console.log('file copied'),\r\n                (err) => { \r\n                    if (err) throw err;\r\n                    console.log('error');\r\n                  }); \r\n            }\r\n        }\r\n        \r\n        return send();\r\n    })\r\n\r\n    nodePandoc(src, args, callback);\r\n});\r\n\r\n\r\n\r\napp.listen(8000, () => {\r\n    console.log('App is running on port 8000')\r\n});\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}