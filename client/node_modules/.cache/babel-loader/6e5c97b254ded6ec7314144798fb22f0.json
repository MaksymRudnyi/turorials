{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\n\nexport const content = {\n  tokenize: initializeContent\n};\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n\n  let previous;\n  return contentStart;\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, contentStart, 'linePrefix');\n  }\n  /** @type {State} */\n\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n  /** @type {State} */\n\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    });\n\n    if (previous) {\n      previous.next = token;\n    }\n\n    previous = token;\n    return data(code);\n  }\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    } // Data.\n\n\n    effects.consume(code);\n    return data;\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","content","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","consume","enter","exit","lineStart","token","contentType","next","data"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/micromark/lib/initialize/content.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AAEA;;AACA,OAAO,MAAMC,OAAO,GAAG;EACrBC,QAAQ,EAAEC;AADW,CAAhB;AAGP;;AAEA,SAASA,iBAAT,CAA2BC,OAA3B,EAAoC;EAClC,MAAMC,YAAY,GAAGD,OAAO,CAACE,OAAR,CACnB,KAAKC,MAAL,CAAYC,UAAZ,CAAuBC,cADJ,EAEnBC,0BAFmB,EAGnBC,gBAHmB,CAArB;EAKA;;EAEA,IAAIC,QAAJ;EACA,OAAOP,YAAP;EACA;;EAEA,SAASK,0BAAT,CAAoCG,IAApC,EAA0C;IACxC,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjBT,OAAO,CAACU,OAAR,CAAgBD,IAAhB;MACA;IACD;;IAEDT,OAAO,CAACW,KAAR,CAAc,YAAd;IACAX,OAAO,CAACU,OAAR,CAAgBD,IAAhB;IACAT,OAAO,CAACY,IAAR,CAAa,YAAb;IACA,OAAOjB,YAAY,CAACK,OAAD,EAAUC,YAAV,EAAwB,YAAxB,CAAnB;EACD;EACD;;;EAEA,SAASM,gBAAT,CAA0BE,IAA1B,EAAgC;IAC9BT,OAAO,CAACW,KAAR,CAAc,WAAd;IACA,OAAOE,SAAS,CAACJ,IAAD,CAAhB;EACD;EACD;;;EAEA,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;IACvB,MAAMK,KAAK,GAAGd,OAAO,CAACW,KAAR,CAAc,WAAd,EAA2B;MACvCI,WAAW,EAAE,MAD0B;MAEvCP;IAFuC,CAA3B,CAAd;;IAKA,IAAIA,QAAJ,EAAc;MACZA,QAAQ,CAACQ,IAAT,GAAgBF,KAAhB;IACD;;IAEDN,QAAQ,GAAGM,KAAX;IACA,OAAOG,IAAI,CAACR,IAAD,CAAX;EACD;EACD;;;EAEA,SAASQ,IAAT,CAAcR,IAAd,EAAoB;IAClB,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjBT,OAAO,CAACY,IAAR,CAAa,WAAb;MACAZ,OAAO,CAACY,IAAR,CAAa,WAAb;MACAZ,OAAO,CAACU,OAAR,CAAgBD,IAAhB;MACA;IACD;;IAED,IAAIb,kBAAkB,CAACa,IAAD,CAAtB,EAA8B;MAC5BT,OAAO,CAACU,OAAR,CAAgBD,IAAhB;MACAT,OAAO,CAACY,IAAR,CAAa,WAAb;MACA,OAAOC,SAAP;IACD,CAZiB,CAYhB;;;IAEFb,OAAO,CAACU,OAAR,CAAgBD,IAAhB;IACA,OAAOQ,IAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}