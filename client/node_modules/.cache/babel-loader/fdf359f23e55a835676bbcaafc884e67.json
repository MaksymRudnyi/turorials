{"ast":null,"code":"// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction look(stream, c) {\n  return stream.string.charAt(stream.pos + (c || 0));\n} // return a part of prefix of current stream from current position\n\n\nfunction prefix(stream, c) {\n  if (c) {\n    var x = stream.pos - c;\n    return stream.string.substr(x >= 0 ? x : 0, c);\n  } else {\n    return stream.string.substr(0, stream.pos - 1);\n  }\n} // return a part of suffix of current stream from current position\n\n\nfunction suffix(stream, c) {\n  var y = stream.string.length;\n  var x = y - stream.pos + 1;\n  return stream.string.substr(stream.pos, c && c < y ? c : x);\n} // eating and vomiting a part of stream from current position\n\n\nfunction eatSuffix(stream, c) {\n  var x = stream.pos + c;\n  var y;\n  if (x <= 0) stream.pos = 0;else if (x >= (y = stream.string.length - 1)) stream.pos = y;else stream.pos = x;\n} // http://perldoc.perl.org\n\n\nvar PERL = {\n  //   null - magic touch\n  //   1 - keyword\n  //   2 - def\n  //   3 - atom\n  //   4 - operator\n  //   5 - builtin (predefined)\n  //   [x,y] - x=1,2,3; y=must be defined if x{...}\n  //      PERL operators\n  '->': 4,\n  '++': 4,\n  '--': 4,\n  '**': 4,\n  //   ! ~ \\ and unary + and -\n  '=~': 4,\n  '!~': 4,\n  '*': 4,\n  '/': 4,\n  '%': 4,\n  'x': 4,\n  '+': 4,\n  '-': 4,\n  '.': 4,\n  '<<': 4,\n  '>>': 4,\n  //   named unary operators\n  '<': 4,\n  '>': 4,\n  '<=': 4,\n  '>=': 4,\n  'lt': 4,\n  'gt': 4,\n  'le': 4,\n  'ge': 4,\n  '==': 4,\n  '!=': 4,\n  '<=>': 4,\n  'eq': 4,\n  'ne': 4,\n  'cmp': 4,\n  '~~': 4,\n  '&': 4,\n  '|': 4,\n  '^': 4,\n  '&&': 4,\n  '||': 4,\n  '//': 4,\n  '..': 4,\n  '...': 4,\n  '?': 4,\n  ':': 4,\n  '=': 4,\n  '+=': 4,\n  '-=': 4,\n  '*=': 4,\n  //   etc. ???\n  ',': 4,\n  '=>': 4,\n  '::': 4,\n  //   list operators (rightward)\n  'not': 4,\n  'and': 4,\n  'or': 4,\n  'xor': 4,\n  //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n  'BEGIN': [5, 1],\n  'END': [5, 1],\n  'PRINT': [5, 1],\n  'PRINTF': [5, 1],\n  'GETC': [5, 1],\n  'READ': [5, 1],\n  'READLINE': [5, 1],\n  'DESTROY': [5, 1],\n  'TIE': [5, 1],\n  'TIEHANDLE': [5, 1],\n  'UNTIE': [5, 1],\n  'STDIN': 5,\n  'STDIN_TOP': 5,\n  'STDOUT': 5,\n  'STDOUT_TOP': 5,\n  'STDERR': 5,\n  'STDERR_TOP': 5,\n  '$ARG': 5,\n  '$_': 5,\n  '@ARG': 5,\n  '@_': 5,\n  '$LIST_SEPARATOR': 5,\n  '$\"': 5,\n  '$PROCESS_ID': 5,\n  '$PID': 5,\n  '$$': 5,\n  '$REAL_GROUP_ID': 5,\n  '$GID': 5,\n  '$(': 5,\n  '$EFFECTIVE_GROUP_ID': 5,\n  '$EGID': 5,\n  '$)': 5,\n  '$PROGRAM_NAME': 5,\n  '$0': 5,\n  '$SUBSCRIPT_SEPARATOR': 5,\n  '$SUBSEP': 5,\n  '$;': 5,\n  '$REAL_USER_ID': 5,\n  '$UID': 5,\n  '$<': 5,\n  '$EFFECTIVE_USER_ID': 5,\n  '$EUID': 5,\n  '$>': 5,\n  '$a': 5,\n  '$b': 5,\n  '$COMPILING': 5,\n  '$^C': 5,\n  '$DEBUGGING': 5,\n  '$^D': 5,\n  '${^ENCODING}': 5,\n  '$ENV': 5,\n  '%ENV': 5,\n  '$SYSTEM_FD_MAX': 5,\n  '$^F': 5,\n  '@F': 5,\n  '${^GLOBAL_PHASE}': 5,\n  '$^H': 5,\n  '%^H': 5,\n  '@INC': 5,\n  '%INC': 5,\n  '$INPLACE_EDIT': 5,\n  '$^I': 5,\n  '$^M': 5,\n  '$OSNAME': 5,\n  '$^O': 5,\n  '${^OPEN}': 5,\n  '$PERLDB': 5,\n  '$^P': 5,\n  '$SIG': 5,\n  '%SIG': 5,\n  '$BASETIME': 5,\n  '$^T': 5,\n  '${^TAINT}': 5,\n  '${^UNICODE}': 5,\n  '${^UTF8CACHE}': 5,\n  '${^UTF8LOCALE}': 5,\n  '$PERL_VERSION': 5,\n  '$^V': 5,\n  '${^WIN32_SLOPPY_STAT}': 5,\n  '$EXECUTABLE_NAME': 5,\n  '$^X': 5,\n  '$1': 5,\n  // - regexp $1, $2...\n  '$MATCH': 5,\n  '$&': 5,\n  '${^MATCH}': 5,\n  '$PREMATCH': 5,\n  '$`': 5,\n  '${^PREMATCH}': 5,\n  '$POSTMATCH': 5,\n  \"$'\": 5,\n  '${^POSTMATCH}': 5,\n  '$LAST_PAREN_MATCH': 5,\n  '$+': 5,\n  '$LAST_SUBMATCH_RESULT': 5,\n  '$^N': 5,\n  '@LAST_MATCH_END': 5,\n  '@+': 5,\n  '%LAST_PAREN_MATCH': 5,\n  '%+': 5,\n  '@LAST_MATCH_START': 5,\n  '@-': 5,\n  '%LAST_MATCH_START': 5,\n  '%-': 5,\n  '$LAST_REGEXP_CODE_RESULT': 5,\n  '$^R': 5,\n  '${^RE_DEBUG_FLAGS}': 5,\n  '${^RE_TRIE_MAXBUF}': 5,\n  '$ARGV': 5,\n  '@ARGV': 5,\n  'ARGV': 5,\n  'ARGVOUT': 5,\n  '$OUTPUT_FIELD_SEPARATOR': 5,\n  '$OFS': 5,\n  '$,': 5,\n  '$INPUT_LINE_NUMBER': 5,\n  '$NR': 5,\n  '$.': 5,\n  '$INPUT_RECORD_SEPARATOR': 5,\n  '$RS': 5,\n  '$/': 5,\n  '$OUTPUT_RECORD_SEPARATOR': 5,\n  '$ORS': 5,\n  '$\\\\': 5,\n  '$OUTPUT_AUTOFLUSH': 5,\n  '$|': 5,\n  '$ACCUMULATOR': 5,\n  '$^A': 5,\n  '$FORMAT_FORMFEED': 5,\n  '$^L': 5,\n  '$FORMAT_PAGE_NUMBER': 5,\n  '$%': 5,\n  '$FORMAT_LINES_LEFT': 5,\n  '$-': 5,\n  '$FORMAT_LINE_BREAK_CHARACTERS': 5,\n  '$:': 5,\n  '$FORMAT_LINES_PER_PAGE': 5,\n  '$=': 5,\n  '$FORMAT_TOP_NAME': 5,\n  '$^': 5,\n  '$FORMAT_NAME': 5,\n  '$~': 5,\n  '${^CHILD_ERROR_NATIVE}': 5,\n  '$EXTENDED_OS_ERROR': 5,\n  '$^E': 5,\n  '$EXCEPTIONS_BEING_CAUGHT': 5,\n  '$^S': 5,\n  '$WARNING': 5,\n  '$^W': 5,\n  '${^WARNING_BITS}': 5,\n  '$OS_ERROR': 5,\n  '$ERRNO': 5,\n  '$!': 5,\n  '%OS_ERROR': 5,\n  '%ERRNO': 5,\n  '%!': 5,\n  '$CHILD_ERROR': 5,\n  '$?': 5,\n  '$EVAL_ERROR': 5,\n  '$@': 5,\n  '$OFMT': 5,\n  '$#': 5,\n  '$*': 5,\n  '$ARRAY_BASE': 5,\n  '$[': 5,\n  '$OLD_PERL_VERSION': 5,\n  '$]': 5,\n  //      PERL blocks\n  'if': [1, 1],\n  elsif: [1, 1],\n  'else': [1, 1],\n  'while': [1, 1],\n  unless: [1, 1],\n  'for': [1, 1],\n  foreach: [1, 1],\n  //      PERL functions\n  'abs': 1,\n  // - absolute value function\n  accept: 1,\n  // - accept an incoming socket connect\n  alarm: 1,\n  // - schedule a SIGALRM\n  'atan2': 1,\n  // - arctangent of Y/X in the range -PI to PI\n  bind: 1,\n  // - binds an address to a socket\n  binmode: 1,\n  // - prepare binary files for I/O\n  bless: 1,\n  // - create an object\n  bootstrap: 1,\n  //\n  'break': 1,\n  // - break out of a \"given\" block\n  caller: 1,\n  // - get context of the current subroutine call\n  chdir: 1,\n  // - change your current working directory\n  chmod: 1,\n  // - changes the permissions on a list of files\n  chomp: 1,\n  // - remove a trailing record separator from a string\n  chop: 1,\n  // - remove the last character from a string\n  chown: 1,\n  // - change the ownership on a list of files\n  chr: 1,\n  // - get character this number represents\n  chroot: 1,\n  // - make directory new root for path lookups\n  close: 1,\n  // - close file (or pipe or socket) handle\n  closedir: 1,\n  // - close directory handle\n  connect: 1,\n  // - connect to a remote socket\n  'continue': [1, 1],\n  // - optional trailing block in a while or foreach\n  'cos': 1,\n  // - cosine function\n  crypt: 1,\n  // - one-way passwd-style encryption\n  dbmclose: 1,\n  // - breaks binding on a tied dbm file\n  dbmopen: 1,\n  // - create binding on a tied dbm file\n  'default': 1,\n  //\n  defined: 1,\n  // - test whether a value, variable, or function is defined\n  'delete': 1,\n  // - deletes a value from a hash\n  die: 1,\n  // - raise an exception or bail out\n  'do': 1,\n  // - turn a BLOCK into a TERM\n  dump: 1,\n  // - create an immediate core dump\n  each: 1,\n  // - retrieve the next key/value pair from a hash\n  endgrent: 1,\n  // - be done using group file\n  endhostent: 1,\n  // - be done using hosts file\n  endnetent: 1,\n  // - be done using networks file\n  endprotoent: 1,\n  // - be done using protocols file\n  endpwent: 1,\n  // - be done using passwd file\n  endservent: 1,\n  // - be done using services file\n  eof: 1,\n  // - test a filehandle for its end\n  'eval': 1,\n  // - catch exceptions or compile and run code\n  'exec': 1,\n  // - abandon this program to run another\n  exists: 1,\n  // - test whether a hash key is present\n  exit: 1,\n  // - terminate this program\n  'exp': 1,\n  // - raise I to a power\n  fcntl: 1,\n  // - file control system call\n  fileno: 1,\n  // - return file descriptor from filehandle\n  flock: 1,\n  // - lock an entire file with an advisory lock\n  fork: 1,\n  // - create a new process just like this one\n  format: 1,\n  // - declare a picture format with use by the write() function\n  formline: 1,\n  // - internal function used for formats\n  getc: 1,\n  // - get the next character from the filehandle\n  getgrent: 1,\n  // - get next group record\n  getgrgid: 1,\n  // - get group record given group user ID\n  getgrnam: 1,\n  // - get group record given group name\n  gethostbyaddr: 1,\n  // - get host record given its address\n  gethostbyname: 1,\n  // - get host record given name\n  gethostent: 1,\n  // - get next hosts record\n  getlogin: 1,\n  // - return who logged in at this tty\n  getnetbyaddr: 1,\n  // - get network record given its address\n  getnetbyname: 1,\n  // - get networks record given name\n  getnetent: 1,\n  // - get next networks record\n  getpeername: 1,\n  // - find the other end of a socket connection\n  getpgrp: 1,\n  // - get process group\n  getppid: 1,\n  // - get parent process ID\n  getpriority: 1,\n  // - get current nice value\n  getprotobyname: 1,\n  // - get protocol record given name\n  getprotobynumber: 1,\n  // - get protocol record numeric protocol\n  getprotoent: 1,\n  // - get next protocols record\n  getpwent: 1,\n  // - get next passwd record\n  getpwnam: 1,\n  // - get passwd record given user login name\n  getpwuid: 1,\n  // - get passwd record given user ID\n  getservbyname: 1,\n  // - get services record given its name\n  getservbyport: 1,\n  // - get services record given numeric port\n  getservent: 1,\n  // - get next services record\n  getsockname: 1,\n  // - retrieve the sockaddr for a given socket\n  getsockopt: 1,\n  // - get socket options on a given socket\n  given: 1,\n  //\n  glob: 1,\n  // - expand filenames using wildcards\n  gmtime: 1,\n  // - convert UNIX time into record or string using Greenwich time\n  'goto': 1,\n  // - create spaghetti code\n  grep: 1,\n  // - locate elements in a list test true against a given criterion\n  hex: 1,\n  // - convert a string to a hexadecimal number\n  'import': 1,\n  // - patch a module's namespace into your own\n  index: 1,\n  // - find a substring within a string\n  'int': 1,\n  // - get the integer portion of a number\n  ioctl: 1,\n  // - system-dependent device control system call\n  'join': 1,\n  // - join a list into a string using a separator\n  keys: 1,\n  // - retrieve list of indices from a hash\n  kill: 1,\n  // - send a signal to a process or process group\n  last: 1,\n  // - exit a block prematurely\n  lc: 1,\n  // - return lower-case version of a string\n  lcfirst: 1,\n  // - return a string with just the next letter in lower case\n  length: 1,\n  // - return the number of bytes in a string\n  'link': 1,\n  // - create a hard link in the filesystem\n  listen: 1,\n  // - register your socket as a server\n  local: 2,\n  // - create a temporary value for a global variable (dynamic scoping)\n  localtime: 1,\n  // - convert UNIX time into record or string using local time\n  lock: 1,\n  // - get a thread lock on a variable, subroutine, or method\n  'log': 1,\n  // - retrieve the natural logarithm for a number\n  lstat: 1,\n  // - stat a symbolic link\n  m: null,\n  // - match a string with a regular expression pattern\n  map: 1,\n  // - apply a change to a list to get back a new list with the changes\n  mkdir: 1,\n  // - create a directory\n  msgctl: 1,\n  // - SysV IPC message control operations\n  msgget: 1,\n  // - get SysV IPC message queue\n  msgrcv: 1,\n  // - receive a SysV IPC message from a message queue\n  msgsnd: 1,\n  // - send a SysV IPC message to a message queue\n  my: 2,\n  // - declare and assign a local variable (lexical scoping)\n  'new': 1,\n  //\n  next: 1,\n  // - iterate a block prematurely\n  no: 1,\n  // - unimport some module symbols or semantics at compile time\n  oct: 1,\n  // - convert a string to an octal number\n  open: 1,\n  // - open a file, pipe, or descriptor\n  opendir: 1,\n  // - open a directory\n  ord: 1,\n  // - find a character's numeric representation\n  our: 2,\n  // - declare and assign a package variable (lexical scoping)\n  pack: 1,\n  // - convert a list into a binary representation\n  'package': 1,\n  // - declare a separate global namespace\n  pipe: 1,\n  // - open a pair of connected filehandles\n  pop: 1,\n  // - remove the last element from an array and return it\n  pos: 1,\n  // - find or set the offset for the last/next m//g search\n  print: 1,\n  // - output a list to a filehandle\n  printf: 1,\n  // - output a formatted list to a filehandle\n  prototype: 1,\n  // - get the prototype (if any) of a subroutine\n  push: 1,\n  // - append one or more elements to an array\n  q: null,\n  // - singly quote a string\n  qq: null,\n  // - doubly quote a string\n  qr: null,\n  // - Compile pattern\n  quotemeta: null,\n  // - quote regular expression magic characters\n  qw: null,\n  // - quote a list of words\n  qx: null,\n  // - backquote quote a string\n  rand: 1,\n  // - retrieve the next pseudorandom number\n  read: 1,\n  // - fixed-length buffered input from a filehandle\n  readdir: 1,\n  // - get a directory from a directory handle\n  readline: 1,\n  // - fetch a record from a file\n  readlink: 1,\n  // - determine where a symbolic link is pointing\n  readpipe: 1,\n  // - execute a system command and collect standard output\n  recv: 1,\n  // - receive a message over a Socket\n  redo: 1,\n  // - start this loop iteration over again\n  ref: 1,\n  // - find out the type of thing being referenced\n  rename: 1,\n  // - change a filename\n  require: 1,\n  // - load in external functions from a library at runtime\n  reset: 1,\n  // - clear all variables of a given name\n  'return': 1,\n  // - get out of a function early\n  reverse: 1,\n  // - flip a string or a list\n  rewinddir: 1,\n  // - reset directory handle\n  rindex: 1,\n  // - right-to-left substring search\n  rmdir: 1,\n  // - remove a directory\n  s: null,\n  // - replace a pattern with a string\n  say: 1,\n  // - print with newline\n  scalar: 1,\n  // - force a scalar context\n  seek: 1,\n  // - reposition file pointer for random-access I/O\n  seekdir: 1,\n  // - reposition directory pointer\n  select: 1,\n  // - reset default output or do I/O multiplexing\n  semctl: 1,\n  // - SysV semaphore control operations\n  semget: 1,\n  // - get set of SysV semaphores\n  semop: 1,\n  // - SysV semaphore operations\n  send: 1,\n  // - send a message over a socket\n  setgrent: 1,\n  // - prepare group file for use\n  sethostent: 1,\n  // - prepare hosts file for use\n  setnetent: 1,\n  // - prepare networks file for use\n  setpgrp: 1,\n  // - set the process group of a process\n  setpriority: 1,\n  // - set a process's nice value\n  setprotoent: 1,\n  // - prepare protocols file for use\n  setpwent: 1,\n  // - prepare passwd file for use\n  setservent: 1,\n  // - prepare services file for use\n  setsockopt: 1,\n  // - set some socket options\n  shift: 1,\n  // - remove the first element of an array, and return it\n  shmctl: 1,\n  // - SysV shared memory operations\n  shmget: 1,\n  // - get SysV shared memory segment identifier\n  shmread: 1,\n  // - read SysV shared memory\n  shmwrite: 1,\n  // - write SysV shared memory\n  shutdown: 1,\n  // - close down just half of a socket connection\n  'sin': 1,\n  // - return the sine of a number\n  sleep: 1,\n  // - block for some number of seconds\n  socket: 1,\n  // - create a socket\n  socketpair: 1,\n  // - create a pair of sockets\n  'sort': 1,\n  // - sort a list of values\n  splice: 1,\n  // - add or remove elements anywhere in an array\n  'split': 1,\n  // - split up a string using a regexp delimiter\n  sprintf: 1,\n  // - formatted print into a string\n  'sqrt': 1,\n  // - square root function\n  srand: 1,\n  // - seed the random number generator\n  stat: 1,\n  // - get a file's status information\n  state: 1,\n  // - declare and assign a state variable (persistent lexical scoping)\n  study: 1,\n  // - optimize input data for repeated searches\n  'sub': 1,\n  // - declare a subroutine, possibly anonymously\n  'substr': 1,\n  // - get or alter a portion of a string\n  symlink: 1,\n  // - create a symbolic link to a file\n  syscall: 1,\n  // - execute an arbitrary system call\n  sysopen: 1,\n  // - open a file, pipe, or descriptor\n  sysread: 1,\n  // - fixed-length unbuffered input from a filehandle\n  sysseek: 1,\n  // - position I/O pointer on handle used with sysread and syswrite\n  system: 1,\n  // - run a separate program\n  syswrite: 1,\n  // - fixed-length unbuffered output to a filehandle\n  tell: 1,\n  // - get current seekpointer on a filehandle\n  telldir: 1,\n  // - get current seekpointer on a directory handle\n  tie: 1,\n  // - bind a variable to an object class\n  tied: 1,\n  // - get a reference to the object underlying a tied variable\n  time: 1,\n  // - return number of seconds since 1970\n  times: 1,\n  // - return elapsed time for self and child processes\n  tr: null,\n  // - transliterate a string\n  truncate: 1,\n  // - shorten a file\n  uc: 1,\n  // - return upper-case version of a string\n  ucfirst: 1,\n  // - return a string with just the next letter in upper case\n  umask: 1,\n  // - set file creation mode mask\n  undef: 1,\n  // - remove a variable or function definition\n  unlink: 1,\n  // - remove one link to a file\n  unpack: 1,\n  // - convert binary structure into normal perl variables\n  unshift: 1,\n  // - prepend more elements to the beginning of a list\n  untie: 1,\n  // - break a tie binding to a variable\n  use: 1,\n  // - load in a module at compile time\n  utime: 1,\n  // - set a file's last access and modify times\n  values: 1,\n  // - return a list of the values in a hash\n  vec: 1,\n  // - test or set particular bits in a string\n  wait: 1,\n  // - wait for any child process to die\n  waitpid: 1,\n  // - wait for a particular child process to die\n  wantarray: 1,\n  // - get void vs scalar vs list context of current subroutine call\n  warn: 1,\n  // - print debugging info\n  when: 1,\n  //\n  write: 1,\n  // - print a picture record\n  y: null\n}; // - transliterate a string\n\nvar RXstyle = \"string.special\";\nvar RXmodifiers = /[goseximacplud]/; // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\nfunction tokenChain(stream, state, chain, style, tail) {\n  // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n  state.chain = null; //                                                          12   3tail\n\n  state.style = null;\n  state.tail = null;\n\n  state.tokenize = function (stream, state) {\n    var e = false,\n        c,\n        i = 0;\n\n    while (c = stream.next()) {\n      if (c === chain[i] && !e) {\n        if (chain[++i] !== undefined) {\n          state.chain = chain[i];\n          state.style = style;\n          state.tail = tail;\n        } else if (tail) stream.eatWhile(tail);\n\n        state.tokenize = tokenPerl;\n        return style;\n      }\n\n      e = !e && c == \"\\\\\";\n    }\n\n    return style;\n  };\n\n  return state.tokenize(stream, state);\n}\n\nfunction tokenSOMETHING(stream, state, string) {\n  state.tokenize = function (stream, state) {\n    if (stream.string == string) state.tokenize = tokenPerl;\n    stream.skipToEnd();\n    return \"string\";\n  };\n\n  return state.tokenize(stream, state);\n}\n\nfunction tokenPerl(stream, state) {\n  if (stream.eatSpace()) return null;\n  if (state.chain) return tokenChain(stream, state, state.chain, state.style, state.tail);\n  if (stream.match(/^(\\-?((\\d[\\d_]*)?\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F_]+|0b[01_]+|\\d[\\d_]*(e[+-]?\\d+)?)/)) return 'number';\n\n  if (stream.match(/^<<(?=[_a-zA-Z])/)) {\n    // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n    stream.eatWhile(/\\w/);\n    return tokenSOMETHING(stream, state, stream.current().substr(2));\n  }\n\n  if (stream.sol() && stream.match(/^\\=item(?!\\w)/)) {\n    // NOTE: \\n=item...\\n=cut\\n\n    return tokenSOMETHING(stream, state, '=cut');\n  }\n\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n    if (prefix(stream, 3) == \"<<\" + ch) {\n      var p = stream.pos;\n      stream.eatWhile(/\\w/);\n      var n = stream.current().substr(1);\n      if (n && stream.eat(ch)) return tokenSOMETHING(stream, state, n);\n      stream.pos = p;\n    }\n\n    return tokenChain(stream, state, [ch], \"string\");\n  }\n\n  if (ch == \"q\") {\n    var c = look(stream, -2);\n\n    if (!(c && /\\w/.test(c))) {\n      c = look(stream, 0);\n\n      if (c == \"x\") {\n        c = look(stream, 1);\n\n        if (c == \"(\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"[\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"{\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"<\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n        }\n\n        if (/[\\^'\"!~\\/]/.test(c)) {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);\n        }\n      } else if (c == \"q\") {\n        c = look(stream, 1);\n\n        if (c == \"(\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\")\"], \"string\");\n        }\n\n        if (c == \"[\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"]\"], \"string\");\n        }\n\n        if (c == \"{\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"}\"], \"string\");\n        }\n\n        if (c == \"<\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\">\"], \"string\");\n        }\n\n        if (/[\\^'\"!~\\/]/.test(c)) {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [stream.eat(c)], \"string\");\n        }\n      } else if (c == \"w\") {\n        c = look(stream, 1);\n\n        if (c == \"(\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\")\"], \"bracket\");\n        }\n\n        if (c == \"[\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"]\"], \"bracket\");\n        }\n\n        if (c == \"{\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"}\"], \"bracket\");\n        }\n\n        if (c == \"<\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\">\"], \"bracket\");\n        }\n\n        if (/[\\^'\"!~\\/]/.test(c)) {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [stream.eat(c)], \"bracket\");\n        }\n      } else if (c == \"r\") {\n        c = look(stream, 1);\n\n        if (c == \"(\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"[\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"{\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"<\") {\n          eatSuffix(stream, 2);\n          return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n        }\n\n        if (/[\\^'\"!~\\/]/.test(c)) {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [stream.eat(c)], RXstyle, RXmodifiers);\n        }\n      } else if (/[\\^'\"!~\\/(\\[{<]/.test(c)) {\n        if (c == \"(\") {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [\")\"], \"string\");\n        }\n\n        if (c == \"[\") {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [\"]\"], \"string\");\n        }\n\n        if (c == \"{\") {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [\"}\"], \"string\");\n        }\n\n        if (c == \"<\") {\n          eatSuffix(stream, 1);\n          return tokenChain(stream, state, [\">\"], \"string\");\n        }\n\n        if (/[\\^'\"!~\\/]/.test(c)) {\n          return tokenChain(stream, state, [stream.eat(c)], \"string\");\n        }\n      }\n    }\n  }\n\n  if (ch == \"m\") {\n    var c = look(stream, -2);\n\n    if (!(c && /\\w/.test(c))) {\n      c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n      if (c) {\n        if (/[\\^'\"!~\\/]/.test(c)) {\n          return tokenChain(stream, state, [c], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"(\") {\n          return tokenChain(stream, state, [\")\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"[\") {\n          return tokenChain(stream, state, [\"]\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"{\") {\n          return tokenChain(stream, state, [\"}\"], RXstyle, RXmodifiers);\n        }\n\n        if (c == \"<\") {\n          return tokenChain(stream, state, [\">\"], RXstyle, RXmodifiers);\n        }\n      }\n    }\n  }\n\n  if (ch == \"s\") {\n    var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n    if (!c) {\n      c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n      if (c) {\n        if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n        if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n        if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n        if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n        return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n      }\n    }\n  }\n\n  if (ch == \"y\") {\n    var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n    if (!c) {\n      c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n      if (c) {\n        if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n        if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n        if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n        if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n        return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n      }\n    }\n  }\n\n  if (ch == \"t\") {\n    var c = /[\\/>\\]})\\w]/.test(look(stream, -2));\n\n    if (!c) {\n      c = stream.eat(\"r\");\n\n      if (c) {\n        c = stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n\n        if (c) {\n          if (c == \"[\") return tokenChain(stream, state, [\"]\", \"]\"], RXstyle, RXmodifiers);\n          if (c == \"{\") return tokenChain(stream, state, [\"}\", \"}\"], RXstyle, RXmodifiers);\n          if (c == \"<\") return tokenChain(stream, state, [\">\", \">\"], RXstyle, RXmodifiers);\n          if (c == \"(\") return tokenChain(stream, state, [\")\", \")\"], RXstyle, RXmodifiers);\n          return tokenChain(stream, state, [c, c], RXstyle, RXmodifiers);\n        }\n      }\n    }\n  }\n\n  if (ch == \"`\") {\n    return tokenChain(stream, state, [ch], \"builtin\");\n  }\n\n  if (ch == \"/\") {\n    if (!/~\\s*$/.test(prefix(stream))) return \"operator\";else return tokenChain(stream, state, [ch], RXstyle, RXmodifiers);\n  }\n\n  if (ch == \"$\") {\n    var p = stream.pos;\n    if (stream.eatWhile(/\\d/) || stream.eat(\"{\") && stream.eatWhile(/\\d/) && stream.eat(\"}\")) return \"builtin\";else stream.pos = p;\n  }\n\n  if (/[$@%]/.test(ch)) {\n    var p = stream.pos;\n\n    if (stream.eat(\"^\") && stream.eat(/[A-Z]/) || !/[@$%&]/.test(look(stream, -2)) && stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)) {\n      var c = stream.current();\n      if (PERL[c]) return \"builtin\";\n    }\n\n    stream.pos = p;\n  }\n\n  if (/[$@%&]/.test(ch)) {\n    if (stream.eatWhile(/[\\w$]/) || stream.eat(\"{\") && stream.eatWhile(/[\\w$]/) && stream.eat(\"}\")) {\n      var c = stream.current();\n      if (PERL[c]) return \"builtin\";else return \"variable\";\n    }\n  }\n\n  if (ch == \"#\") {\n    if (look(stream, -2) != \"$\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n\n  if (/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)) {\n    var p = stream.pos;\n    stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n    if (PERL[stream.current()]) return \"operator\";else stream.pos = p;\n  }\n\n  if (ch == \"_\") {\n    if (stream.pos == 1) {\n      if (suffix(stream, 6) == \"_END__\") {\n        return tokenChain(stream, state, ['\\0'], \"comment\");\n      } else if (suffix(stream, 7) == \"_DATA__\") {\n        return tokenChain(stream, state, ['\\0'], \"builtin\");\n      } else if (suffix(stream, 7) == \"_C__\") {\n        return tokenChain(stream, state, ['\\0'], \"string\");\n      }\n    }\n  }\n\n  if (/\\w/.test(ch)) {\n    var p = stream.pos;\n    if (look(stream, -2) == \"{\" && (look(stream, 0) == \"}\" || stream.eatWhile(/\\w/) && look(stream, 0) == \"}\")) return \"string\";else stream.pos = p;\n  }\n\n  if (/[A-Z]/.test(ch)) {\n    var l = look(stream, -2);\n    var p = stream.pos;\n    stream.eatWhile(/[A-Z_]/);\n\n    if (/[\\da-z]/.test(look(stream, 0))) {\n      stream.pos = p;\n    } else {\n      var c = PERL[stream.current()];\n      if (!c) return \"meta\";\n      if (c[1]) c = c[0];\n\n      if (l != \":\") {\n        if (c == 1) return \"keyword\";else if (c == 2) return \"def\";else if (c == 3) return \"atom\";else if (c == 4) return \"operator\";else if (c == 5) return \"builtin\";else return \"meta\";\n      } else return \"meta\";\n    }\n  }\n\n  if (/[a-zA-Z_]/.test(ch)) {\n    var l = look(stream, -2);\n    stream.eatWhile(/\\w/);\n    var c = PERL[stream.current()];\n    if (!c) return \"meta\";\n    if (c[1]) c = c[0];\n\n    if (l != \":\") {\n      if (c == 1) return \"keyword\";else if (c == 2) return \"def\";else if (c == 3) return \"atom\";else if (c == 4) return \"operator\";else if (c == 5) return \"builtin\";else return \"meta\";\n    } else return \"meta\";\n  }\n\n  return null;\n}\n\nexport const perl = {\n  startState: function () {\n    return {\n      tokenize: tokenPerl,\n      chain: null,\n      style: null,\n      tail: null\n    };\n  },\n  token: function (stream, state) {\n    return (state.tokenize || tokenPerl)(stream, state);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    },\n    wordChars: \"$\"\n  }\n};","map":{"version":3,"names":["look","stream","c","string","charAt","pos","prefix","x","substr","suffix","y","length","eatSuffix","PERL","elsif","unless","foreach","accept","alarm","bind","binmode","bless","bootstrap","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","crypt","dbmclose","dbmopen","defined","die","dump","each","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","exists","exit","fcntl","fileno","flock","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getppid","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","grep","hex","index","ioctl","keys","kill","last","lc","lcfirst","listen","local","localtime","lock","lstat","m","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","next","no","oct","open","opendir","ord","our","pack","pipe","pop","print","printf","prototype","push","q","qq","qr","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","require","reset","reverse","rewinddir","rindex","rmdir","s","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sleep","socket","socketpair","splice","sprintf","srand","stat","state","study","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unlink","unpack","unshift","untie","use","utime","values","vec","wait","waitpid","wantarray","warn","when","write","RXstyle","RXmodifiers","tokenChain","chain","style","tail","tokenize","e","i","undefined","eatWhile","tokenPerl","tokenSOMETHING","skipToEnd","eatSpace","match","current","sol","ch","p","n","eat","test","l","perl","startState","token","languageData","commentTokens","line","wordChars"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/legacy-modes/mode/perl.js"],"sourcesContent":["\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction look(stream, c){\n  return stream.string.charAt(stream.pos+(c||0));\n}\n\n// return a part of prefix of current stream from current position\nfunction prefix(stream, c){\n  if(c){\n    var x=stream.pos-c;\n    return stream.string.substr((x>=0?x:0),c);}\n  else{\n    return stream.string.substr(0,stream.pos-1);\n  }\n}\n\n// return a part of suffix of current stream from current position\nfunction suffix(stream, c){\n  var y=stream.string.length;\n  var x=y-stream.pos+1;\n  return stream.string.substr(stream.pos,(c&&c<y?c:x));\n}\n\n// eating and vomiting a part of stream from current position\nfunction eatSuffix(stream, c){\n  var x=stream.pos+c;\n  var y;\n  if(x<=0)\n    stream.pos=0;\n  else if(x>=(y=stream.string.length-1))\n    stream.pos=y;\n  else\n    stream.pos=x;\n}\n\n// http://perldoc.perl.org\nvar PERL={                                      //   null - magic touch\n  //   1 - keyword\n  //   2 - def\n  //   3 - atom\n  //   4 - operator\n  //   5 - builtin (predefined)\n  //   [x,y] - x=1,2,3; y=must be defined if x{...}\n  //      PERL operators\n  '->':   4,\n  '++':   4,\n  '--':   4,\n  '**':   4,\n  //   ! ~ \\ and unary + and -\n  '=~':   4,\n  '!~':   4,\n  '*':   4,\n  '/':   4,\n  '%':   4,\n  'x':   4,\n  '+':   4,\n  '-':   4,\n  '.':   4,\n  '<<':   4,\n  '>>':   4,\n  //   named unary operators\n  '<':   4,\n  '>':   4,\n  '<=':   4,\n  '>=':   4,\n  'lt':   4,\n  'gt':   4,\n  'le':   4,\n  'ge':   4,\n  '==':   4,\n  '!=':   4,\n  '<=>':   4,\n  'eq':   4,\n  'ne':   4,\n  'cmp':   4,\n  '~~':   4,\n  '&':   4,\n  '|':   4,\n  '^':   4,\n  '&&':   4,\n  '||':   4,\n  '//':   4,\n  '..':   4,\n  '...':   4,\n  '?':   4,\n  ':':   4,\n  '=':   4,\n  '+=':   4,\n  '-=':   4,\n  '*=':   4,  //   etc. ???\n  ',':   4,\n  '=>':   4,\n  '::':   4,\n  //   list operators (rightward)\n  'not':   4,\n  'and':   4,\n  'or':   4,\n  'xor':   4,\n  //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n  'BEGIN':   [5,1],\n  'END':   [5,1],\n  'PRINT':   [5,1],\n  'PRINTF':   [5,1],\n  'GETC':   [5,1],\n  'READ':   [5,1],\n  'READLINE':   [5,1],\n  'DESTROY':   [5,1],\n  'TIE':   [5,1],\n  'TIEHANDLE':   [5,1],\n  'UNTIE':   [5,1],\n  'STDIN':    5,\n  'STDIN_TOP':    5,\n  'STDOUT':    5,\n  'STDOUT_TOP':    5,\n  'STDERR':    5,\n  'STDERR_TOP':    5,\n  '$ARG':    5,\n  '$_':    5,\n  '@ARG':    5,\n  '@_':    5,\n  '$LIST_SEPARATOR':    5,\n  '$\"':    5,\n  '$PROCESS_ID':    5,\n  '$PID':    5,\n  '$$':    5,\n  '$REAL_GROUP_ID':    5,\n  '$GID':    5,\n  '$(':    5,\n  '$EFFECTIVE_GROUP_ID':    5,\n  '$EGID':    5,\n  '$)':    5,\n  '$PROGRAM_NAME':    5,\n  '$0':    5,\n  '$SUBSCRIPT_SEPARATOR':    5,\n  '$SUBSEP':    5,\n  '$;':    5,\n  '$REAL_USER_ID':    5,\n  '$UID':    5,\n  '$<':    5,\n  '$EFFECTIVE_USER_ID':    5,\n  '$EUID':    5,\n  '$>':    5,\n  '$a':    5,\n  '$b':    5,\n  '$COMPILING':    5,\n  '$^C':    5,\n  '$DEBUGGING':    5,\n  '$^D':    5,\n  '${^ENCODING}':    5,\n  '$ENV':    5,\n  '%ENV':    5,\n  '$SYSTEM_FD_MAX':    5,\n  '$^F':    5,\n  '@F':    5,\n  '${^GLOBAL_PHASE}':    5,\n  '$^H':    5,\n  '%^H':    5,\n  '@INC':    5,\n  '%INC':    5,\n  '$INPLACE_EDIT':    5,\n  '$^I':    5,\n  '$^M':    5,\n  '$OSNAME':    5,\n  '$^O':    5,\n  '${^OPEN}':    5,\n  '$PERLDB':    5,\n  '$^P':    5,\n  '$SIG':    5,\n  '%SIG':    5,\n  '$BASETIME':    5,\n  '$^T':    5,\n  '${^TAINT}':    5,\n  '${^UNICODE}':    5,\n  '${^UTF8CACHE}':    5,\n  '${^UTF8LOCALE}':    5,\n  '$PERL_VERSION':    5,\n  '$^V':    5,\n  '${^WIN32_SLOPPY_STAT}':    5,\n  '$EXECUTABLE_NAME':    5,\n  '$^X':    5,\n  '$1':    5, // - regexp $1, $2...\n  '$MATCH':    5,\n  '$&':    5,\n  '${^MATCH}':    5,\n  '$PREMATCH':    5,\n  '$`':    5,\n  '${^PREMATCH}':    5,\n  '$POSTMATCH':    5,\n  \"$'\":    5,\n  '${^POSTMATCH}':    5,\n  '$LAST_PAREN_MATCH':    5,\n  '$+':    5,\n  '$LAST_SUBMATCH_RESULT':    5,\n  '$^N':    5,\n  '@LAST_MATCH_END':    5,\n  '@+':    5,\n  '%LAST_PAREN_MATCH':    5,\n  '%+':    5,\n  '@LAST_MATCH_START':    5,\n  '@-':    5,\n  '%LAST_MATCH_START':    5,\n  '%-':    5,\n  '$LAST_REGEXP_CODE_RESULT':    5,\n  '$^R':    5,\n  '${^RE_DEBUG_FLAGS}':    5,\n  '${^RE_TRIE_MAXBUF}':    5,\n  '$ARGV':    5,\n  '@ARGV':    5,\n  'ARGV':    5,\n  'ARGVOUT':    5,\n  '$OUTPUT_FIELD_SEPARATOR':    5,\n  '$OFS':    5,\n  '$,':    5,\n  '$INPUT_LINE_NUMBER':    5,\n  '$NR':    5,\n  '$.':    5,\n  '$INPUT_RECORD_SEPARATOR':    5,\n  '$RS':    5,\n  '$/':    5,\n  '$OUTPUT_RECORD_SEPARATOR':    5,\n  '$ORS':    5,\n  '$\\\\':    5,\n  '$OUTPUT_AUTOFLUSH':    5,\n  '$|':    5,\n  '$ACCUMULATOR':    5,\n  '$^A':    5,\n  '$FORMAT_FORMFEED':    5,\n  '$^L':    5,\n  '$FORMAT_PAGE_NUMBER':    5,\n  '$%':    5,\n  '$FORMAT_LINES_LEFT':    5,\n  '$-':    5,\n  '$FORMAT_LINE_BREAK_CHARACTERS':    5,\n  '$:':    5,\n  '$FORMAT_LINES_PER_PAGE':    5,\n  '$=':    5,\n  '$FORMAT_TOP_NAME':    5,\n  '$^':    5,\n  '$FORMAT_NAME':    5,\n  '$~':    5,\n  '${^CHILD_ERROR_NATIVE}':    5,\n  '$EXTENDED_OS_ERROR':    5,\n  '$^E':    5,\n  '$EXCEPTIONS_BEING_CAUGHT':    5,\n  '$^S':    5,\n  '$WARNING':    5,\n  '$^W':    5,\n  '${^WARNING_BITS}':    5,\n  '$OS_ERROR':    5,\n  '$ERRNO':    5,\n  '$!':    5,\n  '%OS_ERROR':    5,\n  '%ERRNO':    5,\n  '%!':    5,\n  '$CHILD_ERROR':    5,\n  '$?':    5,\n  '$EVAL_ERROR':    5,\n  '$@':    5,\n  '$OFMT':    5,\n  '$#':    5,\n  '$*':    5,\n  '$ARRAY_BASE':    5,\n  '$[':    5,\n  '$OLD_PERL_VERSION':    5,\n  '$]':    5,\n  //      PERL blocks\n  'if':[1,1],\n  elsif:[1,1],\n  'else':[1,1],\n  'while':[1,1],\n  unless:[1,1],\n  'for':[1,1],\n  foreach:[1,1],\n  //      PERL functions\n  'abs':1,     // - absolute value function\n  accept:1,     // - accept an incoming socket connect\n  alarm:1,     // - schedule a SIGALRM\n  'atan2':1,     // - arctangent of Y/X in the range -PI to PI\n  bind:1,     // - binds an address to a socket\n  binmode:1,     // - prepare binary files for I/O\n  bless:1,     // - create an object\n  bootstrap:1,     //\n  'break':1,     // - break out of a \"given\" block\n  caller:1,     // - get context of the current subroutine call\n  chdir:1,     // - change your current working directory\n  chmod:1,     // - changes the permissions on a list of files\n  chomp:1,     // - remove a trailing record separator from a string\n  chop:1,     // - remove the last character from a string\n  chown:1,     // - change the ownership on a list of files\n  chr:1,     // - get character this number represents\n  chroot:1,     // - make directory new root for path lookups\n  close:1,     // - close file (or pipe or socket) handle\n  closedir:1,     // - close directory handle\n  connect:1,     // - connect to a remote socket\n  'continue':[1,1], // - optional trailing block in a while or foreach\n  'cos':1,     // - cosine function\n  crypt:1,     // - one-way passwd-style encryption\n  dbmclose:1,     // - breaks binding on a tied dbm file\n  dbmopen:1,     // - create binding on a tied dbm file\n  'default':1,     //\n  defined:1,     // - test whether a value, variable, or function is defined\n  'delete':1,     // - deletes a value from a hash\n  die:1,     // - raise an exception or bail out\n  'do':1,     // - turn a BLOCK into a TERM\n  dump:1,     // - create an immediate core dump\n  each:1,     // - retrieve the next key/value pair from a hash\n  endgrent:1,     // - be done using group file\n  endhostent:1,     // - be done using hosts file\n  endnetent:1,     // - be done using networks file\n  endprotoent:1,     // - be done using protocols file\n  endpwent:1,     // - be done using passwd file\n  endservent:1,     // - be done using services file\n  eof:1,     // - test a filehandle for its end\n  'eval':1,     // - catch exceptions or compile and run code\n  'exec':1,     // - abandon this program to run another\n  exists:1,     // - test whether a hash key is present\n  exit:1,     // - terminate this program\n  'exp':1,     // - raise I to a power\n  fcntl:1,     // - file control system call\n  fileno:1,     // - return file descriptor from filehandle\n  flock:1,     // - lock an entire file with an advisory lock\n  fork:1,     // - create a new process just like this one\n  format:1,     // - declare a picture format with use by the write() function\n  formline:1,     // - internal function used for formats\n  getc:1,     // - get the next character from the filehandle\n  getgrent:1,     // - get next group record\n  getgrgid:1,     // - get group record given group user ID\n  getgrnam:1,     // - get group record given group name\n  gethostbyaddr:1,     // - get host record given its address\n  gethostbyname:1,     // - get host record given name\n  gethostent:1,     // - get next hosts record\n  getlogin:1,     // - return who logged in at this tty\n  getnetbyaddr:1,     // - get network record given its address\n  getnetbyname:1,     // - get networks record given name\n  getnetent:1,     // - get next networks record\n  getpeername:1,     // - find the other end of a socket connection\n  getpgrp:1,     // - get process group\n  getppid:1,     // - get parent process ID\n  getpriority:1,     // - get current nice value\n  getprotobyname:1,     // - get protocol record given name\n  getprotobynumber:1,     // - get protocol record numeric protocol\n  getprotoent:1,     // - get next protocols record\n  getpwent:1,     // - get next passwd record\n  getpwnam:1,     // - get passwd record given user login name\n  getpwuid:1,     // - get passwd record given user ID\n  getservbyname:1,     // - get services record given its name\n  getservbyport:1,     // - get services record given numeric port\n  getservent:1,     // - get next services record\n  getsockname:1,     // - retrieve the sockaddr for a given socket\n  getsockopt:1,     // - get socket options on a given socket\n  given:1,     //\n  glob:1,     // - expand filenames using wildcards\n  gmtime:1,     // - convert UNIX time into record or string using Greenwich time\n  'goto':1,     // - create spaghetti code\n  grep:1,     // - locate elements in a list test true against a given criterion\n  hex:1,     // - convert a string to a hexadecimal number\n  'import':1,     // - patch a module's namespace into your own\n  index:1,     // - find a substring within a string\n  'int':1,     // - get the integer portion of a number\n  ioctl:1,     // - system-dependent device control system call\n  'join':1,     // - join a list into a string using a separator\n  keys:1,     // - retrieve list of indices from a hash\n  kill:1,     // - send a signal to a process or process group\n  last:1,     // - exit a block prematurely\n  lc:1,     // - return lower-case version of a string\n  lcfirst:1,     // - return a string with just the next letter in lower case\n  length:1,     // - return the number of bytes in a string\n  'link':1,     // - create a hard link in the filesystem\n  listen:1,     // - register your socket as a server\n  local: 2,    // - create a temporary value for a global variable (dynamic scoping)\n  localtime:1,     // - convert UNIX time into record or string using local time\n  lock:1,     // - get a thread lock on a variable, subroutine, or method\n  'log':1,     // - retrieve the natural logarithm for a number\n  lstat:1,     // - stat a symbolic link\n  m:null,  // - match a string with a regular expression pattern\n  map:1,     // - apply a change to a list to get back a new list with the changes\n  mkdir:1,     // - create a directory\n  msgctl:1,     // - SysV IPC message control operations\n  msgget:1,     // - get SysV IPC message queue\n  msgrcv:1,     // - receive a SysV IPC message from a message queue\n  msgsnd:1,     // - send a SysV IPC message to a message queue\n  my: 2,    // - declare and assign a local variable (lexical scoping)\n  'new':1,     //\n  next:1,     // - iterate a block prematurely\n  no:1,     // - unimport some module symbols or semantics at compile time\n  oct:1,     // - convert a string to an octal number\n  open:1,     // - open a file, pipe, or descriptor\n  opendir:1,     // - open a directory\n  ord:1,     // - find a character's numeric representation\n  our: 2,    // - declare and assign a package variable (lexical scoping)\n  pack:1,     // - convert a list into a binary representation\n  'package':1,     // - declare a separate global namespace\n  pipe:1,     // - open a pair of connected filehandles\n  pop:1,     // - remove the last element from an array and return it\n  pos:1,     // - find or set the offset for the last/next m//g search\n  print:1,     // - output a list to a filehandle\n  printf:1,     // - output a formatted list to a filehandle\n  prototype:1,     // - get the prototype (if any) of a subroutine\n  push:1,     // - append one or more elements to an array\n  q:null,  // - singly quote a string\n  qq:null,  // - doubly quote a string\n  qr:null,  // - Compile pattern\n  quotemeta:null,  // - quote regular expression magic characters\n  qw:null,  // - quote a list of words\n  qx:null,  // - backquote quote a string\n  rand:1,     // - retrieve the next pseudorandom number\n  read:1,     // - fixed-length buffered input from a filehandle\n  readdir:1,     // - get a directory from a directory handle\n  readline:1,     // - fetch a record from a file\n  readlink:1,     // - determine where a symbolic link is pointing\n  readpipe:1,     // - execute a system command and collect standard output\n  recv:1,     // - receive a message over a Socket\n  redo:1,     // - start this loop iteration over again\n  ref:1,     // - find out the type of thing being referenced\n  rename:1,     // - change a filename\n  require:1,     // - load in external functions from a library at runtime\n  reset:1,     // - clear all variables of a given name\n  'return':1,     // - get out of a function early\n  reverse:1,     // - flip a string or a list\n  rewinddir:1,     // - reset directory handle\n  rindex:1,     // - right-to-left substring search\n  rmdir:1,     // - remove a directory\n  s:null,  // - replace a pattern with a string\n  say:1,     // - print with newline\n  scalar:1,     // - force a scalar context\n  seek:1,     // - reposition file pointer for random-access I/O\n  seekdir:1,     // - reposition directory pointer\n  select:1,     // - reset default output or do I/O multiplexing\n  semctl:1,     // - SysV semaphore control operations\n  semget:1,     // - get set of SysV semaphores\n  semop:1,     // - SysV semaphore operations\n  send:1,     // - send a message over a socket\n  setgrent:1,     // - prepare group file for use\n  sethostent:1,     // - prepare hosts file for use\n  setnetent:1,     // - prepare networks file for use\n  setpgrp:1,     // - set the process group of a process\n  setpriority:1,     // - set a process's nice value\n  setprotoent:1,     // - prepare protocols file for use\n  setpwent:1,     // - prepare passwd file for use\n  setservent:1,     // - prepare services file for use\n  setsockopt:1,     // - set some socket options\n  shift:1,     // - remove the first element of an array, and return it\n  shmctl:1,     // - SysV shared memory operations\n  shmget:1,     // - get SysV shared memory segment identifier\n  shmread:1,     // - read SysV shared memory\n  shmwrite:1,     // - write SysV shared memory\n  shutdown:1,     // - close down just half of a socket connection\n  'sin':1,     // - return the sine of a number\n  sleep:1,     // - block for some number of seconds\n  socket:1,     // - create a socket\n  socketpair:1,     // - create a pair of sockets\n  'sort':1,     // - sort a list of values\n  splice:1,     // - add or remove elements anywhere in an array\n  'split':1,     // - split up a string using a regexp delimiter\n  sprintf:1,     // - formatted print into a string\n  'sqrt':1,     // - square root function\n  srand:1,     // - seed the random number generator\n  stat:1,     // - get a file's status information\n  state:1,     // - declare and assign a state variable (persistent lexical scoping)\n  study:1,     // - optimize input data for repeated searches\n  'sub':1,     // - declare a subroutine, possibly anonymously\n  'substr':1,     // - get or alter a portion of a string\n  symlink:1,     // - create a symbolic link to a file\n  syscall:1,     // - execute an arbitrary system call\n  sysopen:1,     // - open a file, pipe, or descriptor\n  sysread:1,     // - fixed-length unbuffered input from a filehandle\n  sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite\n  system:1,     // - run a separate program\n  syswrite:1,     // - fixed-length unbuffered output to a filehandle\n  tell:1,     // - get current seekpointer on a filehandle\n  telldir:1,     // - get current seekpointer on a directory handle\n  tie:1,     // - bind a variable to an object class\n  tied:1,     // - get a reference to the object underlying a tied variable\n  time:1,     // - return number of seconds since 1970\n  times:1,     // - return elapsed time for self and child processes\n  tr:null,  // - transliterate a string\n  truncate:1,     // - shorten a file\n  uc:1,     // - return upper-case version of a string\n  ucfirst:1,     // - return a string with just the next letter in upper case\n  umask:1,     // - set file creation mode mask\n  undef:1,     // - remove a variable or function definition\n  unlink:1,     // - remove one link to a file\n  unpack:1,     // - convert binary structure into normal perl variables\n  unshift:1,     // - prepend more elements to the beginning of a list\n  untie:1,     // - break a tie binding to a variable\n  use:1,     // - load in a module at compile time\n  utime:1,     // - set a file's last access and modify times\n  values:1,     // - return a list of the values in a hash\n  vec:1,     // - test or set particular bits in a string\n  wait:1,     // - wait for any child process to die\n  waitpid:1,     // - wait for a particular child process to die\n  wantarray:1,     // - get void vs scalar vs list context of current subroutine call\n  warn:1,     // - print debugging info\n  when:1,     //\n  write:1,     // - print a picture record\n  y:null}; // - transliterate a string\n\nvar RXstyle=\"string.special\";\nvar RXmodifiers=/[goseximacplud]/;              // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\nfunction tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n  state.chain=null;                               //                                                          12   3tail\n  state.style=null;\n  state.tail=null;\n  state.tokenize=function(stream,state){\n    var e=false,c,i=0;\n    while(c=stream.next()){\n      if(c===chain[i]&&!e){\n        if(chain[++i]!==undefined){\n          state.chain=chain[i];\n          state.style=style;\n          state.tail=tail;}\n        else if(tail)\n          stream.eatWhile(tail);\n        state.tokenize=tokenPerl;\n        return style;}\n      e=!e&&c==\"\\\\\";}\n    return style;};\n  return state.tokenize(stream,state);}\n\nfunction tokenSOMETHING(stream,state,string){\n  state.tokenize=function(stream,state){\n    if(stream.string==string)\n      state.tokenize=tokenPerl;\n    stream.skipToEnd();\n    return \"string\";};\n  return state.tokenize(stream,state);}\n\nfunction tokenPerl(stream,state){\n  if(stream.eatSpace())\n    return null;\n  if(state.chain)\n    return tokenChain(stream,state,state.chain,state.style,state.tail);\n  if(stream.match(/^(\\-?((\\d[\\d_]*)?\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F_]+|0b[01_]+|\\d[\\d_]*(e[+-]?\\d+)?)/))\n    return 'number';\n  if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n    stream.eatWhile(/\\w/);\n    return tokenSOMETHING(stream,state,stream.current().substr(2));}\n  if(stream.sol()&&stream.match(/^\\=item(?!\\w)/)){// NOTE: \\n=item...\\n=cut\\n\n    return tokenSOMETHING(stream,state,'=cut');}\n  var ch=stream.next();\n  if(ch=='\"'||ch==\"'\"){                           // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n    if(prefix(stream, 3)==\"<<\"+ch){\n      var p=stream.pos;\n      stream.eatWhile(/\\w/);\n      var n=stream.current().substr(1);\n      if(n&&stream.eat(ch))\n        return tokenSOMETHING(stream,state,n);\n      stream.pos=p;}\n    return tokenChain(stream,state,[ch],\"string\");}\n  if(ch==\"q\"){\n    var c=look(stream, -2);\n    if(!(c&&/\\w/.test(c))){\n      c=look(stream, 0);\n      if(c==\"x\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n      else if(c==\"q\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],\"string\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],\"string\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],\"string\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],\"string\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}\n      else if(c==\"w\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],\"bracket\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],\"bracket\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],\"bracket\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],\"bracket\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],\"bracket\");}}\n      else if(c==\"r\"){\n        c=look(stream, 1);\n        if(c==\"(\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          eatSuffix(stream, 2);\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n      else if(/[\\^'\"!~\\/(\\[{<]/.test(c)){\n        if(c==\"(\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\")\"],\"string\");}\n        if(c==\"[\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\"]\"],\"string\");}\n        if(c==\"{\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\"}\"],\"string\");}\n        if(c==\"<\"){\n          eatSuffix(stream, 1);\n          return tokenChain(stream,state,[\">\"],\"string\");}\n        if(/[\\^'\"!~\\/]/.test(c)){\n          return tokenChain(stream,state,[stream.eat(c)],\"string\");}}}}\n  if(ch==\"m\"){\n    var c=look(stream, -2);\n    if(!(c&&/\\w/.test(c))){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(/[\\^'\"!~\\/]/.test(c)){\n          return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}\n        if(c==\"(\"){\n          return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n        if(c==\"[\"){\n          return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n        if(c==\"{\"){\n          return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n        if(c==\"<\"){\n          return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}}}}\n  if(ch==\"s\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(c==\"[\")\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n        if(c==\"{\")\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n        if(c==\"<\")\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n        if(c==\"(\")\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n  if(ch==\"y\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n      if(c){\n        if(c==\"[\")\n          return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n        if(c==\"{\")\n          return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n        if(c==\"<\")\n          return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n        if(c==\"(\")\n          return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n  if(ch==\"t\"){\n    var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n    if(!c){\n      c=stream.eat(\"r\");if(c){\n        c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n        if(c){\n          if(c==\"[\")\n            return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n          if(c==\"{\")\n            return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n          if(c==\"<\")\n            return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n          if(c==\"(\")\n            return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n          return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}\n  if(ch==\"`\"){\n    return tokenChain(stream,state,[ch],\"builtin\");}\n  if(ch==\"/\"){\n    if(!/~\\s*$/.test(prefix(stream)))\n      return \"operator\";\n    else\n      return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}\n  if(ch==\"$\"){\n    var p=stream.pos;\n    if(stream.eatWhile(/\\d/)||stream.eat(\"{\")&&stream.eatWhile(/\\d/)&&stream.eat(\"}\"))\n      return \"builtin\";\n    else\n      stream.pos=p;}\n  if(/[$@%]/.test(ch)){\n    var p=stream.pos;\n    if(stream.eat(\"^\")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)){\n      var c=stream.current();\n      if(PERL[c])\n        return \"builtin\";}\n    stream.pos=p;}\n  if(/[$@%&]/.test(ch)){\n    if(stream.eatWhile(/[\\w$]/)||stream.eat(\"{\")&&stream.eatWhile(/[\\w$]/)&&stream.eat(\"}\")){\n      var c=stream.current();\n      if(PERL[c])\n        return \"builtin\";\n      else\n        return \"variable\";}}\n  if(ch==\"#\"){\n    if(look(stream, -2)!=\"$\"){\n      stream.skipToEnd();\n      return \"comment\";}}\n  if(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)){\n    var p=stream.pos;\n    stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n    if(PERL[stream.current()])\n      return \"operator\";\n    else\n      stream.pos=p;}\n  if(ch==\"_\"){\n    if(stream.pos==1){\n      if(suffix(stream, 6)==\"_END__\"){\n        return tokenChain(stream,state,['\\0'],\"comment\");}\n      else if(suffix(stream, 7)==\"_DATA__\"){\n        return tokenChain(stream,state,['\\0'],\"builtin\");}\n      else if(suffix(stream, 7)==\"_C__\"){\n        return tokenChain(stream,state,['\\0'],\"string\");}}}\n  if(/\\w/.test(ch)){\n    var p=stream.pos;\n    if(look(stream, -2)==\"{\"&&(look(stream, 0)==\"}\"||stream.eatWhile(/\\w/)&&look(stream, 0)==\"}\"))\n      return \"string\";\n    else\n      stream.pos=p;}\n  if(/[A-Z]/.test(ch)){\n    var l=look(stream, -2);\n    var p=stream.pos;\n    stream.eatWhile(/[A-Z_]/);\n    if(/[\\da-z]/.test(look(stream, 0))){\n      stream.pos=p;}\n    else{\n      var c=PERL[stream.current()];\n      if(!c)\n        return \"meta\";\n      if(c[1])\n        c=c[0];\n      if(l!=\":\"){\n        if(c==1)\n          return \"keyword\";\n        else if(c==2)\n          return \"def\";\n        else if(c==3)\n          return \"atom\";\n        else if(c==4)\n          return \"operator\";\n        else if(c==5)\n          return \"builtin\";\n        else\n          return \"meta\";}\n      else\n        return \"meta\";}}\n  if(/[a-zA-Z_]/.test(ch)){\n    var l=look(stream, -2);\n    stream.eatWhile(/\\w/);\n    var c=PERL[stream.current()];\n    if(!c)\n      return \"meta\";\n    if(c[1])\n      c=c[0];\n    if(l!=\":\"){\n      if(c==1)\n        return \"keyword\";\n      else if(c==2)\n        return \"def\";\n      else if(c==3)\n        return \"atom\";\n      else if(c==4)\n        return \"operator\";\n      else if(c==5)\n        return \"builtin\";\n      else\n        return \"meta\";}\n    else\n      return \"meta\";}\n  return null;}\n\nexport const perl = {\n  startState: function() {\n    return {\n      tokenize: tokenPerl,\n      chain: null,\n      style: null,\n      tail: null\n    };\n  },\n  token: function(stream, state) {\n    return (state.tokenize || tokenPerl)(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"},\n    wordChars: \"$\"\n  }\n};\n"],"mappings":"AACA;AACA,SAASA,IAAT,CAAcC,MAAd,EAAsBC,CAAtB,EAAwB;EACtB,OAAOD,MAAM,CAACE,MAAP,CAAcC,MAAd,CAAqBH,MAAM,CAACI,GAAP,IAAYH,CAAC,IAAE,CAAf,CAArB,CAAP;AACD,C,CAED;;;AACA,SAASI,MAAT,CAAgBL,MAAhB,EAAwBC,CAAxB,EAA0B;EACxB,IAAGA,CAAH,EAAK;IACH,IAAIK,CAAC,GAACN,MAAM,CAACI,GAAP,GAAWH,CAAjB;IACA,OAAOD,MAAM,CAACE,MAAP,CAAcK,MAAd,CAAsBD,CAAC,IAAE,CAAH,GAAKA,CAAL,GAAO,CAA7B,EAAgCL,CAAhC,CAAP;EAA2C,CAF7C,MAGI;IACF,OAAOD,MAAM,CAACE,MAAP,CAAcK,MAAd,CAAqB,CAArB,EAAuBP,MAAM,CAACI,GAAP,GAAW,CAAlC,CAAP;EACD;AACF,C,CAED;;;AACA,SAASI,MAAT,CAAgBR,MAAhB,EAAwBC,CAAxB,EAA0B;EACxB,IAAIQ,CAAC,GAACT,MAAM,CAACE,MAAP,CAAcQ,MAApB;EACA,IAAIJ,CAAC,GAACG,CAAC,GAACT,MAAM,CAACI,GAAT,GAAa,CAAnB;EACA,OAAOJ,MAAM,CAACE,MAAP,CAAcK,MAAd,CAAqBP,MAAM,CAACI,GAA5B,EAAiCH,CAAC,IAAEA,CAAC,GAACQ,CAAL,GAAOR,CAAP,GAASK,CAA1C,CAAP;AACD,C,CAED;;;AACA,SAASK,SAAT,CAAmBX,MAAnB,EAA2BC,CAA3B,EAA6B;EAC3B,IAAIK,CAAC,GAACN,MAAM,CAACI,GAAP,GAAWH,CAAjB;EACA,IAAIQ,CAAJ;EACA,IAAGH,CAAC,IAAE,CAAN,EACEN,MAAM,CAACI,GAAP,GAAW,CAAX,CADF,KAEK,IAAGE,CAAC,KAAGG,CAAC,GAACT,MAAM,CAACE,MAAP,CAAcQ,MAAd,GAAqB,CAA1B,CAAJ,EACHV,MAAM,CAACI,GAAP,GAAWK,CAAX,CADG,KAGHT,MAAM,CAACI,GAAP,GAAWE,CAAX;AACH,C,CAED;;;AACA,IAAIM,IAAI,GAAC;EAAuC;EAC9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAQ,CARD;EASP,MAAQ,CATD;EAUP,MAAQ,CAVD;EAWP,MAAQ,CAXD;EAYP;EACA,MAAQ,CAbD;EAcP,MAAQ,CAdD;EAeP,KAAO,CAfA;EAgBP,KAAO,CAhBA;EAiBP,KAAO,CAjBA;EAkBP,KAAO,CAlBA;EAmBP,KAAO,CAnBA;EAoBP,KAAO,CApBA;EAqBP,KAAO,CArBA;EAsBP,MAAQ,CAtBD;EAuBP,MAAQ,CAvBD;EAwBP;EACA,KAAO,CAzBA;EA0BP,KAAO,CA1BA;EA2BP,MAAQ,CA3BD;EA4BP,MAAQ,CA5BD;EA6BP,MAAQ,CA7BD;EA8BP,MAAQ,CA9BD;EA+BP,MAAQ,CA/BD;EAgCP,MAAQ,CAhCD;EAiCP,MAAQ,CAjCD;EAkCP,MAAQ,CAlCD;EAmCP,OAAS,CAnCF;EAoCP,MAAQ,CApCD;EAqCP,MAAQ,CArCD;EAsCP,OAAS,CAtCF;EAuCP,MAAQ,CAvCD;EAwCP,KAAO,CAxCA;EAyCP,KAAO,CAzCA;EA0CP,KAAO,CA1CA;EA2CP,MAAQ,CA3CD;EA4CP,MAAQ,CA5CD;EA6CP,MAAQ,CA7CD;EA8CP,MAAQ,CA9CD;EA+CP,OAAS,CA/CF;EAgDP,KAAO,CAhDA;EAiDP,KAAO,CAjDA;EAkDP,KAAO,CAlDA;EAmDP,MAAQ,CAnDD;EAoDP,MAAQ,CApDD;EAqDP,MAAQ,CArDD;EAqDK;EACZ,KAAO,CAtDA;EAuDP,MAAQ,CAvDD;EAwDP,MAAQ,CAxDD;EAyDP;EACA,OAAS,CA1DF;EA2DP,OAAS,CA3DF;EA4DP,MAAQ,CA5DD;EA6DP,OAAS,CA7DF;EA8DP;EACA,SAAW,CAAC,CAAD,EAAG,CAAH,CA/DJ;EAgEP,OAAS,CAAC,CAAD,EAAG,CAAH,CAhEF;EAiEP,SAAW,CAAC,CAAD,EAAG,CAAH,CAjEJ;EAkEP,UAAY,CAAC,CAAD,EAAG,CAAH,CAlEL;EAmEP,QAAU,CAAC,CAAD,EAAG,CAAH,CAnEH;EAoEP,QAAU,CAAC,CAAD,EAAG,CAAH,CApEH;EAqEP,YAAc,CAAC,CAAD,EAAG,CAAH,CArEP;EAsEP,WAAa,CAAC,CAAD,EAAG,CAAH,CAtEN;EAuEP,OAAS,CAAC,CAAD,EAAG,CAAH,CAvEF;EAwEP,aAAe,CAAC,CAAD,EAAG,CAAH,CAxER;EAyEP,SAAW,CAAC,CAAD,EAAG,CAAH,CAzEJ;EA0EP,SAAY,CA1EL;EA2EP,aAAgB,CA3ET;EA4EP,UAAa,CA5EN;EA6EP,cAAiB,CA7EV;EA8EP,UAAa,CA9EN;EA+EP,cAAiB,CA/EV;EAgFP,QAAW,CAhFJ;EAiFP,MAAS,CAjFF;EAkFP,QAAW,CAlFJ;EAmFP,MAAS,CAnFF;EAoFP,mBAAsB,CApFf;EAqFP,MAAS,CArFF;EAsFP,eAAkB,CAtFX;EAuFP,QAAW,CAvFJ;EAwFP,MAAS,CAxFF;EAyFP,kBAAqB,CAzFd;EA0FP,QAAW,CA1FJ;EA2FP,MAAS,CA3FF;EA4FP,uBAA0B,CA5FnB;EA6FP,SAAY,CA7FL;EA8FP,MAAS,CA9FF;EA+FP,iBAAoB,CA/Fb;EAgGP,MAAS,CAhGF;EAiGP,wBAA2B,CAjGpB;EAkGP,WAAc,CAlGP;EAmGP,MAAS,CAnGF;EAoGP,iBAAoB,CApGb;EAqGP,QAAW,CArGJ;EAsGP,MAAS,CAtGF;EAuGP,sBAAyB,CAvGlB;EAwGP,SAAY,CAxGL;EAyGP,MAAS,CAzGF;EA0GP,MAAS,CA1GF;EA2GP,MAAS,CA3GF;EA4GP,cAAiB,CA5GV;EA6GP,OAAU,CA7GH;EA8GP,cAAiB,CA9GV;EA+GP,OAAU,CA/GH;EAgHP,gBAAmB,CAhHZ;EAiHP,QAAW,CAjHJ;EAkHP,QAAW,CAlHJ;EAmHP,kBAAqB,CAnHd;EAoHP,OAAU,CApHH;EAqHP,MAAS,CArHF;EAsHP,oBAAuB,CAtHhB;EAuHP,OAAU,CAvHH;EAwHP,OAAU,CAxHH;EAyHP,QAAW,CAzHJ;EA0HP,QAAW,CA1HJ;EA2HP,iBAAoB,CA3Hb;EA4HP,OAAU,CA5HH;EA6HP,OAAU,CA7HH;EA8HP,WAAc,CA9HP;EA+HP,OAAU,CA/HH;EAgIP,YAAe,CAhIR;EAiIP,WAAc,CAjIP;EAkIP,OAAU,CAlIH;EAmIP,QAAW,CAnIJ;EAoIP,QAAW,CApIJ;EAqIP,aAAgB,CArIT;EAsIP,OAAU,CAtIH;EAuIP,aAAgB,CAvIT;EAwIP,eAAkB,CAxIX;EAyIP,iBAAoB,CAzIb;EA0IP,kBAAqB,CA1Id;EA2IP,iBAAoB,CA3Ib;EA4IP,OAAU,CA5IH;EA6IP,yBAA4B,CA7IrB;EA8IP,oBAAuB,CA9IhB;EA+IP,OAAU,CA/IH;EAgJP,MAAS,CAhJF;EAgJK;EACZ,UAAa,CAjJN;EAkJP,MAAS,CAlJF;EAmJP,aAAgB,CAnJT;EAoJP,aAAgB,CApJT;EAqJP,MAAS,CArJF;EAsJP,gBAAmB,CAtJZ;EAuJP,cAAiB,CAvJV;EAwJP,MAAS,CAxJF;EAyJP,iBAAoB,CAzJb;EA0JP,qBAAwB,CA1JjB;EA2JP,MAAS,CA3JF;EA4JP,yBAA4B,CA5JrB;EA6JP,OAAU,CA7JH;EA8JP,mBAAsB,CA9Jf;EA+JP,MAAS,CA/JF;EAgKP,qBAAwB,CAhKjB;EAiKP,MAAS,CAjKF;EAkKP,qBAAwB,CAlKjB;EAmKP,MAAS,CAnKF;EAoKP,qBAAwB,CApKjB;EAqKP,MAAS,CArKF;EAsKP,4BAA+B,CAtKxB;EAuKP,OAAU,CAvKH;EAwKP,sBAAyB,CAxKlB;EAyKP,sBAAyB,CAzKlB;EA0KP,SAAY,CA1KL;EA2KP,SAAY,CA3KL;EA4KP,QAAW,CA5KJ;EA6KP,WAAc,CA7KP;EA8KP,2BAA8B,CA9KvB;EA+KP,QAAW,CA/KJ;EAgLP,MAAS,CAhLF;EAiLP,sBAAyB,CAjLlB;EAkLP,OAAU,CAlLH;EAmLP,MAAS,CAnLF;EAoLP,2BAA8B,CApLvB;EAqLP,OAAU,CArLH;EAsLP,MAAS,CAtLF;EAuLP,4BAA+B,CAvLxB;EAwLP,QAAW,CAxLJ;EAyLP,OAAU,CAzLH;EA0LP,qBAAwB,CA1LjB;EA2LP,MAAS,CA3LF;EA4LP,gBAAmB,CA5LZ;EA6LP,OAAU,CA7LH;EA8LP,oBAAuB,CA9LhB;EA+LP,OAAU,CA/LH;EAgMP,uBAA0B,CAhMnB;EAiMP,MAAS,CAjMF;EAkMP,sBAAyB,CAlMlB;EAmMP,MAAS,CAnMF;EAoMP,iCAAoC,CApM7B;EAqMP,MAAS,CArMF;EAsMP,0BAA6B,CAtMtB;EAuMP,MAAS,CAvMF;EAwMP,oBAAuB,CAxMhB;EAyMP,MAAS,CAzMF;EA0MP,gBAAmB,CA1MZ;EA2MP,MAAS,CA3MF;EA4MP,0BAA6B,CA5MtB;EA6MP,sBAAyB,CA7MlB;EA8MP,OAAU,CA9MH;EA+MP,4BAA+B,CA/MxB;EAgNP,OAAU,CAhNH;EAiNP,YAAe,CAjNR;EAkNP,OAAU,CAlNH;EAmNP,oBAAuB,CAnNhB;EAoNP,aAAgB,CApNT;EAqNP,UAAa,CArNN;EAsNP,MAAS,CAtNF;EAuNP,aAAgB,CAvNT;EAwNP,UAAa,CAxNN;EAyNP,MAAS,CAzNF;EA0NP,gBAAmB,CA1NZ;EA2NP,MAAS,CA3NF;EA4NP,eAAkB,CA5NX;EA6NP,MAAS,CA7NF;EA8NP,SAAY,CA9NL;EA+NP,MAAS,CA/NF;EAgOP,MAAS,CAhOF;EAiOP,eAAkB,CAjOX;EAkOP,MAAS,CAlOF;EAmOP,qBAAwB,CAnOjB;EAoOP,MAAS,CApOF;EAqOP;EACA,MAAK,CAAC,CAAD,EAAG,CAAH,CAtOE;EAuOPC,KAAK,EAAC,CAAC,CAAD,EAAG,CAAH,CAvOC;EAwOP,QAAO,CAAC,CAAD,EAAG,CAAH,CAxOA;EAyOP,SAAQ,CAAC,CAAD,EAAG,CAAH,CAzOD;EA0OPC,MAAM,EAAC,CAAC,CAAD,EAAG,CAAH,CA1OA;EA2OP,OAAM,CAAC,CAAD,EAAG,CAAH,CA3OC;EA4OPC,OAAO,EAAC,CAAC,CAAD,EAAG,CAAH,CA5OD;EA6OP;EACA,OAAM,CA9OC;EA8OM;EACbC,MAAM,EAAC,CA/OA;EA+OO;EACdC,KAAK,EAAC,CAhPC;EAgPM;EACb,SAAQ,CAjPD;EAiPQ;EACfC,IAAI,EAAC,CAlPE;EAkPK;EACZC,OAAO,EAAC,CAnPD;EAmPQ;EACfC,KAAK,EAAC,CApPC;EAoPM;EACbC,SAAS,EAAC,CArPH;EAqPU;EACjB,SAAQ,CAtPD;EAsPQ;EACfC,MAAM,EAAC,CAvPA;EAuPO;EACdC,KAAK,EAAC,CAxPC;EAwPM;EACbC,KAAK,EAAC,CAzPC;EAyPM;EACbC,KAAK,EAAC,CA1PC;EA0PM;EACbC,IAAI,EAAC,CA3PE;EA2PK;EACZC,KAAK,EAAC,CA5PC;EA4PM;EACbC,GAAG,EAAC,CA7PG;EA6PI;EACXC,MAAM,EAAC,CA9PA;EA8PO;EACdC,KAAK,EAAC,CA/PC;EA+PM;EACbC,QAAQ,EAAC,CAhQF;EAgQS;EAChBC,OAAO,EAAC,CAjQD;EAiQQ;EACf,YAAW,CAAC,CAAD,EAAG,CAAH,CAlQJ;EAkQW;EAClB,OAAM,CAnQC;EAmQM;EACbC,KAAK,EAAC,CApQC;EAoQM;EACbC,QAAQ,EAAC,CArQF;EAqQS;EAChBC,OAAO,EAAC,CAtQD;EAsQQ;EACf,WAAU,CAvQH;EAuQU;EACjBC,OAAO,EAAC,CAxQD;EAwQQ;EACf,UAAS,CAzQF;EAyQS;EAChBC,GAAG,EAAC,CA1QG;EA0QI;EACX,MAAK,CA3QE;EA2QK;EACZC,IAAI,EAAC,CA5QE;EA4QK;EACZC,IAAI,EAAC,CA7QE;EA6QK;EACZC,QAAQ,EAAC,CA9QF;EA8QS;EAChBC,UAAU,EAAC,CA/QJ;EA+QW;EAClBC,SAAS,EAAC,CAhRH;EAgRU;EACjBC,WAAW,EAAC,CAjRL;EAiRY;EACnBC,QAAQ,EAAC,CAlRF;EAkRS;EAChBC,UAAU,EAAC,CAnRJ;EAmRW;EAClBC,GAAG,EAAC,CApRG;EAoRI;EACX,QAAO,CArRA;EAqRO;EACd,QAAO,CAtRA;EAsRO;EACdC,MAAM,EAAC,CAvRA;EAuRO;EACdC,IAAI,EAAC,CAxRE;EAwRK;EACZ,OAAM,CAzRC;EAyRM;EACbC,KAAK,EAAC,CA1RC;EA0RM;EACbC,MAAM,EAAC,CA3RA;EA2RO;EACdC,KAAK,EAAC,CA5RC;EA4RM;EACbC,IAAI,EAAC,CA7RE;EA6RK;EACZC,MAAM,EAAC,CA9RA;EA8RO;EACdC,QAAQ,EAAC,CA/RF;EA+RS;EAChBC,IAAI,EAAC,CAhSE;EAgSK;EACZC,QAAQ,EAAC,CAjSF;EAiSS;EAChBC,QAAQ,EAAC,CAlSF;EAkSS;EAChBC,QAAQ,EAAC,CAnSF;EAmSS;EAChBC,aAAa,EAAC,CApSP;EAoSc;EACrBC,aAAa,EAAC,CArSP;EAqSc;EACrBC,UAAU,EAAC,CAtSJ;EAsSW;EAClBC,QAAQ,EAAC,CAvSF;EAuSS;EAChBC,YAAY,EAAC,CAxSN;EAwSa;EACpBC,YAAY,EAAC,CAzSN;EAySa;EACpBC,SAAS,EAAC,CA1SH;EA0SU;EACjBC,WAAW,EAAC,CA3SL;EA2SY;EACnBC,OAAO,EAAC,CA5SD;EA4SQ;EACfC,OAAO,EAAC,CA7SD;EA6SQ;EACfC,WAAW,EAAC,CA9SL;EA8SY;EACnBC,cAAc,EAAC,CA/SR;EA+Se;EACtBC,gBAAgB,EAAC,CAhTV;EAgTiB;EACxBC,WAAW,EAAC,CAjTL;EAiTY;EACnBC,QAAQ,EAAC,CAlTF;EAkTS;EAChBC,QAAQ,EAAC,CAnTF;EAmTS;EAChBC,QAAQ,EAAC,CApTF;EAoTS;EAChBC,aAAa,EAAC,CArTP;EAqTc;EACrBC,aAAa,EAAC,CAtTP;EAsTc;EACrBC,UAAU,EAAC,CAvTJ;EAuTW;EAClBC,WAAW,EAAC,CAxTL;EAwTY;EACnBC,UAAU,EAAC,CAzTJ;EAyTW;EAClBC,KAAK,EAAC,CA1TC;EA0TM;EACbC,IAAI,EAAC,CA3TE;EA2TK;EACZC,MAAM,EAAC,CA5TA;EA4TO;EACd,QAAO,CA7TA;EA6TO;EACdC,IAAI,EAAC,CA9TE;EA8TK;EACZC,GAAG,EAAC,CA/TG;EA+TI;EACX,UAAS,CAhUF;EAgUS;EAChBC,KAAK,EAAC,CAjUC;EAiUM;EACb,OAAM,CAlUC;EAkUM;EACbC,KAAK,EAAC,CAnUC;EAmUM;EACb,QAAO,CApUA;EAoUO;EACdC,IAAI,EAAC,CArUE;EAqUK;EACZC,IAAI,EAAC,CAtUE;EAsUK;EACZC,IAAI,EAAC,CAvUE;EAuUK;EACZC,EAAE,EAAC,CAxUI;EAwUG;EACVC,OAAO,EAAC,CAzUD;EAyUQ;EACflF,MAAM,EAAC,CA1UA;EA0UO;EACd,QAAO,CA3UA;EA2UO;EACdmF,MAAM,EAAC,CA5UA;EA4UO;EACdC,KAAK,EAAE,CA7UA;EA6UM;EACbC,SAAS,EAAC,CA9UH;EA8UU;EACjBC,IAAI,EAAC,CA/UE;EA+UK;EACZ,OAAM,CAhVC;EAgVM;EACbC,KAAK,EAAC,CAjVC;EAiVM;EACbC,CAAC,EAAC,IAlVK;EAkVE;EACTC,GAAG,EAAC,CAnVG;EAmVI;EACXC,KAAK,EAAC,CApVC;EAoVM;EACbC,MAAM,EAAC,CArVA;EAqVO;EACdC,MAAM,EAAC,CAtVA;EAsVO;EACdC,MAAM,EAAC,CAvVA;EAuVO;EACdC,MAAM,EAAC,CAxVA;EAwVO;EACdC,EAAE,EAAE,CAzVG;EAyVG;EACV,OAAM,CA1VC;EA0VM;EACbC,IAAI,EAAC,CA3VE;EA2VK;EACZC,EAAE,EAAC,CA5VI;EA4VG;EACVC,GAAG,EAAC,CA7VG;EA6VI;EACXC,IAAI,EAAC,CA9VE;EA8VK;EACZC,OAAO,EAAC,CA/VD;EA+VQ;EACfC,GAAG,EAAC,CAhWG;EAgWI;EACXC,GAAG,EAAE,CAjWE;EAiWI;EACXC,IAAI,EAAC,CAlWE;EAkWK;EACZ,WAAU,CAnWH;EAmWU;EACjBC,IAAI,EAAC,CApWE;EAoWK;EACZC,GAAG,EAAC,CArWG;EAqWI;EACX/G,GAAG,EAAC,CAtWG;EAsWI;EACXgH,KAAK,EAAC,CAvWC;EAuWM;EACbC,MAAM,EAAC,CAxWA;EAwWO;EACdC,SAAS,EAAC,CAzWH;EAyWU;EACjBC,IAAI,EAAC,CA1WE;EA0WK;EACZC,CAAC,EAAC,IA3WK;EA2WE;EACTC,EAAE,EAAC,IA5WI;EA4WG;EACVC,EAAE,EAAC,IA7WI;EA6WG;EACVC,SAAS,EAAC,IA9WH;EA8WU;EACjBC,EAAE,EAAC,IA/WI;EA+WG;EACVC,EAAE,EAAC,IAhXI;EAgXG;EACVC,IAAI,EAAC,CAjXE;EAiXK;EACZC,IAAI,EAAC,CAlXE;EAkXK;EACZC,OAAO,EAAC,CAnXD;EAmXQ;EACfC,QAAQ,EAAC,CApXF;EAoXS;EAChBC,QAAQ,EAAC,CArXF;EAqXS;EAChBC,QAAQ,EAAC,CAtXF;EAsXS;EAChBC,IAAI,EAAC,CAvXE;EAuXK;EACZC,IAAI,EAAC,CAxXE;EAwXK;EACZC,GAAG,EAAC,CAzXG;EAyXI;EACXC,MAAM,EAAC,CA1XA;EA0XO;EACdC,OAAO,EAAC,CA3XD;EA2XQ;EACfC,KAAK,EAAC,CA5XC;EA4XM;EACb,UAAS,CA7XF;EA6XS;EAChBC,OAAO,EAAC,CA9XD;EA8XQ;EACfC,SAAS,EAAC,CA/XH;EA+XU;EACjBC,MAAM,EAAC,CAhYA;EAgYO;EACdC,KAAK,EAAC,CAjYC;EAiYM;EACbC,CAAC,EAAC,IAlYK;EAkYE;EACTC,GAAG,EAAC,CAnYG;EAmYI;EACXC,MAAM,EAAC,CApYA;EAoYO;EACdC,IAAI,EAAC,CArYE;EAqYK;EACZC,OAAO,EAAC,CAtYD;EAsYQ;EACfC,MAAM,EAAC,CAvYA;EAuYO;EACdC,MAAM,EAAC,CAxYA;EAwYO;EACdC,MAAM,EAAC,CAzYA;EAyYO;EACdC,KAAK,EAAC,CA1YC;EA0YM;EACbC,IAAI,EAAC,CA3YE;EA2YK;EACZC,QAAQ,EAAC,CA5YF;EA4YS;EAChBC,UAAU,EAAC,CA7YJ;EA6YW;EAClBC,SAAS,EAAC,CA9YH;EA8YU;EACjBC,OAAO,EAAC,CA/YD;EA+YQ;EACfC,WAAW,EAAC,CAhZL;EAgZY;EACnBC,WAAW,EAAC,CAjZL;EAiZY;EACnBC,QAAQ,EAAC,CAlZF;EAkZS;EAChBC,UAAU,EAAC,CAnZJ;EAmZW;EAClBC,UAAU,EAAC,CApZJ;EAoZW;EAClBC,KAAK,EAAC,CArZC;EAqZM;EACbC,MAAM,EAAC,CAtZA;EAsZO;EACdC,MAAM,EAAC,CAvZA;EAuZO;EACdC,OAAO,EAAC,CAxZD;EAwZQ;EACfC,QAAQ,EAAC,CAzZF;EAyZS;EAChBC,QAAQ,EAAC,CA1ZF;EA0ZS;EAChB,OAAM,CA3ZC;EA2ZM;EACbC,KAAK,EAAC,CA5ZC;EA4ZM;EACbC,MAAM,EAAC,CA7ZA;EA6ZO;EACdC,UAAU,EAAC,CA9ZJ;EA8ZW;EAClB,QAAO,CA/ZA;EA+ZO;EACdC,MAAM,EAAC,CAhaA;EAgaO;EACd,SAAQ,CAjaD;EAiaQ;EACfC,OAAO,EAAC,CAlaD;EAkaQ;EACf,QAAO,CAnaA;EAmaO;EACdC,KAAK,EAAC,CApaC;EAoaM;EACbC,IAAI,EAAC,CAraE;EAqaK;EACZC,KAAK,EAAC,CAtaC;EAsaM;EACbC,KAAK,EAAC,CAvaC;EAuaM;EACb,OAAM,CAxaC;EAwaM;EACb,UAAS,CAzaF;EAyaS;EAChBC,OAAO,EAAC,CA1aD;EA0aQ;EACfC,OAAO,EAAC,CA3aD;EA2aQ;EACfC,OAAO,EAAC,CA5aD;EA4aQ;EACfC,OAAO,EAAC,CA7aD;EA6aQ;EACfC,OAAO,EAAC,CA9aD;EA8aQ;EACfC,MAAM,EAAC,CA/aA;EA+aO;EACdC,QAAQ,EAAC,CAhbF;EAgbS;EAChBC,IAAI,EAAC,CAjbE;EAibK;EACZC,OAAO,EAAC,CAlbD;EAkbQ;EACfC,GAAG,EAAC,CAnbG;EAmbI;EACXC,IAAI,EAAC,CApbE;EAobK;EACZC,IAAI,EAAC,CArbE;EAqbK;EACZC,KAAK,EAAC,CAtbC;EAsbM;EACbC,EAAE,EAAC,IAvbI;EAubG;EACVC,QAAQ,EAAC,CAxbF;EAwbS;EAChBC,EAAE,EAAC,CAzbI;EAybG;EACVC,OAAO,EAAC,CA1bD;EA0bQ;EACfC,KAAK,EAAC,CA3bC;EA2bM;EACbC,KAAK,EAAC,CA5bC;EA4bM;EACbC,MAAM,EAAC,CA7bA;EA6bO;EACdC,MAAM,EAAC,CA9bA;EA8bO;EACdC,OAAO,EAAC,CA/bD;EA+bQ;EACfC,KAAK,EAAC,CAhcC;EAgcM;EACbC,GAAG,EAAC,CAjcG;EAicI;EACXC,KAAK,EAAC,CAlcC;EAkcM;EACbC,MAAM,EAAC,CAncA;EAmcO;EACdC,GAAG,EAAC,CApcG;EAocI;EACXC,IAAI,EAAC,CArcE;EAqcK;EACZC,OAAO,EAAC,CAtcD;EAscQ;EACfC,SAAS,EAAC,CAvcH;EAucU;EACjBC,IAAI,EAAC,CAxcE;EAwcK;EACZC,IAAI,EAAC,CAzcE;EAycK;EACZC,KAAK,EAAC,CA1cC;EA0cM;EACbvM,CAAC,EAAC;AA3cK,CAAT,C,CA2cW;;AAEX,IAAIwM,OAAO,GAAC,gBAAZ;AACA,IAAIC,WAAW,GAAC,iBAAhB,C,CAAgD;;AAEhD,SAASC,UAAT,CAAoBnN,MAApB,EAA2B8K,KAA3B,EAAiCsC,KAAjC,EAAuCC,KAAvC,EAA6CC,IAA7C,EAAkD;EAAM;EACtDxC,KAAK,CAACsC,KAAN,GAAY,IAAZ,CADgD,CACA;;EAChDtC,KAAK,CAACuC,KAAN,GAAY,IAAZ;EACAvC,KAAK,CAACwC,IAAN,GAAW,IAAX;;EACAxC,KAAK,CAACyC,QAAN,GAAe,UAASvN,MAAT,EAAgB8K,KAAhB,EAAsB;IACnC,IAAI0C,CAAC,GAAC,KAAN;IAAA,IAAYvN,CAAZ;IAAA,IAAcwN,CAAC,GAAC,CAAhB;;IACA,OAAMxN,CAAC,GAACD,MAAM,CAAC0G,IAAP,EAAR,EAAsB;MACpB,IAAGzG,CAAC,KAAGmN,KAAK,CAACK,CAAD,CAAT,IAAc,CAACD,CAAlB,EAAoB;QAClB,IAAGJ,KAAK,CAAC,EAAEK,CAAH,CAAL,KAAaC,SAAhB,EAA0B;UACxB5C,KAAK,CAACsC,KAAN,GAAYA,KAAK,CAACK,CAAD,CAAjB;UACA3C,KAAK,CAACuC,KAAN,GAAYA,KAAZ;UACAvC,KAAK,CAACwC,IAAN,GAAWA,IAAX;QAAiB,CAHnB,MAIK,IAAGA,IAAH,EACHtN,MAAM,CAAC2N,QAAP,CAAgBL,IAAhB;;QACFxC,KAAK,CAACyC,QAAN,GAAeK,SAAf;QACA,OAAOP,KAAP;MAAc;;MAChBG,CAAC,GAAC,CAACA,CAAD,IAAIvN,CAAC,IAAE,IAAT;IAAe;;IACjB,OAAOoN,KAAP;EAAc,CAbhB;;EAcA,OAAOvC,KAAK,CAACyC,QAAN,CAAevN,MAAf,EAAsB8K,KAAtB,CAAP;AAAqC;;AAEvC,SAAS+C,cAAT,CAAwB7N,MAAxB,EAA+B8K,KAA/B,EAAqC5K,MAArC,EAA4C;EAC1C4K,KAAK,CAACyC,QAAN,GAAe,UAASvN,MAAT,EAAgB8K,KAAhB,EAAsB;IACnC,IAAG9K,MAAM,CAACE,MAAP,IAAeA,MAAlB,EACE4K,KAAK,CAACyC,QAAN,GAAeK,SAAf;IACF5N,MAAM,CAAC8N,SAAP;IACA,OAAO,QAAP;EAAiB,CAJnB;;EAKA,OAAOhD,KAAK,CAACyC,QAAN,CAAevN,MAAf,EAAsB8K,KAAtB,CAAP;AAAqC;;AAEvC,SAAS8C,SAAT,CAAmB5N,MAAnB,EAA0B8K,KAA1B,EAAgC;EAC9B,IAAG9K,MAAM,CAAC+N,QAAP,EAAH,EACE,OAAO,IAAP;EACF,IAAGjD,KAAK,CAACsC,KAAT,EACE,OAAOD,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAcA,KAAK,CAACsC,KAApB,EAA0BtC,KAAK,CAACuC,KAAhC,EAAsCvC,KAAK,CAACwC,IAA5C,CAAjB;EACF,IAAGtN,MAAM,CAACgO,KAAP,CAAa,4FAAb,CAAH,EACE,OAAO,QAAP;;EACF,IAAGhO,MAAM,CAACgO,KAAP,CAAa,kBAAb,CAAH,EAAoC;IAAmB;IACrDhO,MAAM,CAAC2N,QAAP,CAAgB,IAAhB;IACA,OAAOE,cAAc,CAAC7N,MAAD,EAAQ8K,KAAR,EAAc9K,MAAM,CAACiO,OAAP,GAAiB1N,MAAjB,CAAwB,CAAxB,CAAd,CAArB;EAAgE;;EAClE,IAAGP,MAAM,CAACkO,GAAP,MAAclO,MAAM,CAACgO,KAAP,CAAa,eAAb,CAAjB,EAA+C;IAAC;IAC9C,OAAOH,cAAc,CAAC7N,MAAD,EAAQ8K,KAAR,EAAc,MAAd,CAArB;EAA4C;;EAC9C,IAAIqD,EAAE,GAACnO,MAAM,CAAC0G,IAAP,EAAP;;EACA,IAAGyH,EAAE,IAAE,GAAJ,IAASA,EAAE,IAAE,GAAhB,EAAoB;IAA4B;IAC9C,IAAG9N,MAAM,CAACL,MAAD,EAAS,CAAT,CAAN,IAAmB,OAAKmO,EAA3B,EAA8B;MAC5B,IAAIC,CAAC,GAACpO,MAAM,CAACI,GAAb;MACAJ,MAAM,CAAC2N,QAAP,CAAgB,IAAhB;MACA,IAAIU,CAAC,GAACrO,MAAM,CAACiO,OAAP,GAAiB1N,MAAjB,CAAwB,CAAxB,CAAN;MACA,IAAG8N,CAAC,IAAErO,MAAM,CAACsO,GAAP,CAAWH,EAAX,CAAN,EACE,OAAON,cAAc,CAAC7N,MAAD,EAAQ8K,KAAR,EAAcuD,CAAd,CAArB;MACFrO,MAAM,CAACI,GAAP,GAAWgO,CAAX;IAAc;;IAChB,OAAOjB,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAACqD,EAAD,CAAd,EAAmB,QAAnB,CAAjB;EAA+C;;EACjD,IAAGA,EAAE,IAAE,GAAP,EAAW;IACT,IAAIlO,CAAC,GAACF,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAV;;IACA,IAAG,EAAEC,CAAC,IAAE,KAAKsO,IAAL,CAAUtO,CAAV,CAAL,CAAH,EAAsB;MACpBA,CAAC,GAACF,IAAI,CAACC,MAAD,EAAS,CAAT,CAAN;;MACA,IAAGC,CAAC,IAAE,GAAN,EAAU;QACRA,CAAC,GAACF,IAAI,CAACC,MAAD,EAAS,CAAT,CAAN;;QACA,IAAGC,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAG,aAAaqB,IAAb,CAAkBtO,CAAlB,CAAH,EAAwB;UACtBU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC9K,MAAM,CAACsO,GAAP,CAAWrO,CAAX,CAAD,CAAd,EAA8BgN,OAA9B,EAAsCC,WAAtC,CAAjB;QAAqE;MAAC,CAhB1E,MAiBK,IAAGjN,CAAC,IAAE,GAAN,EAAU;QACbA,CAAC,GAACF,IAAI,CAACC,MAAD,EAAS,CAAT,CAAN;;QACA,IAAGC,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG,aAAayD,IAAb,CAAkBtO,CAAlB,CAAH,EAAwB;UACtBU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC9K,MAAM,CAACsO,GAAP,CAAWrO,CAAX,CAAD,CAAd,EAA8B,QAA9B,CAAjB;QAA0D;MAAC,CAhB1D,MAiBA,IAAGA,CAAC,IAAE,GAAN,EAAU;QACbA,CAAC,GAACF,IAAI,CAACC,MAAD,EAAS,CAAT,CAAN;;QACA,IAAGC,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;QAAiD;;QACnD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;QAAiD;;QACnD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;QAAiD;;QACnD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,SAApB,CAAjB;QAAiD;;QACnD,IAAG,aAAayD,IAAb,CAAkBtO,CAAlB,CAAH,EAAwB;UACtBU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC9K,MAAM,CAACsO,GAAP,CAAWrO,CAAX,CAAD,CAAd,EAA8B,SAA9B,CAAjB;QAA2D;MAAC,CAhB3D,MAiBA,IAAGA,CAAC,IAAE,GAAN,EAAU;QACbA,CAAC,GAACF,IAAI,CAACC,MAAD,EAAS,CAAT,CAAN;;QACA,IAAGC,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAG,aAAaqB,IAAb,CAAkBtO,CAAlB,CAAH,EAAwB;UACtBU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC9K,MAAM,CAACsO,GAAP,CAAWrO,CAAX,CAAD,CAAd,EAA8BgN,OAA9B,EAAsCC,WAAtC,CAAjB;QAAqE;MAAC,CAhBrE,MAiBA,IAAG,kBAAkBqB,IAAlB,CAAuBtO,CAAvB,CAAH,EAA6B;QAChC,IAAGA,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG7K,CAAC,IAAE,GAAN,EAAU;UACRU,SAAS,CAACX,MAAD,EAAS,CAAT,CAAT;UACA,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoB,QAApB,CAAjB;QAAgD;;QAClD,IAAG,aAAayD,IAAb,CAAkBtO,CAAlB,CAAH,EAAwB;UACtB,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC9K,MAAM,CAACsO,GAAP,CAAWrO,CAAX,CAAD,CAAd,EAA8B,QAA9B,CAAjB;QAA0D;MAAC;IAAC;EAAC;;EACrE,IAAGkO,EAAE,IAAE,GAAP,EAAW;IACT,IAAIlO,CAAC,GAACF,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAV;;IACA,IAAG,EAAEC,CAAC,IAAE,KAAKsO,IAAL,CAAUtO,CAAV,CAAL,CAAH,EAAsB;MACpBA,CAAC,GAACD,MAAM,CAACsO,GAAP,CAAW,iBAAX,CAAF;;MACA,IAAGrO,CAAH,EAAK;QACH,IAAG,aAAasO,IAAb,CAAkBtO,CAAlB,CAAH,EAAwB;UACtB,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC7K,CAAD,CAAd,EAAkBgN,OAAlB,EAA0BC,WAA1B,CAAjB;QAAyD;;QAC3D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACR,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACR,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACR,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;;QAC7D,IAAGjN,CAAC,IAAE,GAAN,EAAU;UACR,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,CAAd,EAAoBmC,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;MAAC;IAAC;EAAC;;EACtE,IAAGiB,EAAE,IAAE,GAAP,EAAW;IACT,IAAIlO,CAAC,GAAC,cAAcsO,IAAd,CAAmBxO,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAvB,CAAN;;IACA,IAAG,CAACC,CAAJ,EAAM;MACJA,CAAC,GAACD,MAAM,CAACsO,GAAP,CAAW,iBAAX,CAAF;;MACA,IAAGrO,CAAH,EAAK;QACH,IAAGA,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,OAAOC,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC7K,CAAD,EAAGA,CAAH,CAAd,EAAoBgN,OAApB,EAA4BC,WAA5B,CAAjB;MAA2D;IAAC;EAAC;;EACnE,IAAGiB,EAAE,IAAE,GAAP,EAAW;IACT,IAAIlO,CAAC,GAAC,cAAcsO,IAAd,CAAmBxO,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAvB,CAAN;;IACA,IAAG,CAACC,CAAJ,EAAM;MACJA,CAAC,GAACD,MAAM,CAACsO,GAAP,CAAW,iBAAX,CAAF;;MACA,IAAGrO,CAAH,EAAK;QACH,IAAGA,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;QACF,OAAOC,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC7K,CAAD,EAAGA,CAAH,CAAd,EAAoBgN,OAApB,EAA4BC,WAA5B,CAAjB;MAA2D;IAAC;EAAC;;EACnE,IAAGiB,EAAE,IAAE,GAAP,EAAW;IACT,IAAIlO,CAAC,GAAC,cAAcsO,IAAd,CAAmBxO,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAvB,CAAN;;IACA,IAAG,CAACC,CAAJ,EAAM;MACJA,CAAC,GAACD,MAAM,CAACsO,GAAP,CAAW,GAAX,CAAF;;MAAkB,IAAGrO,CAAH,EAAK;QACrBA,CAAC,GAACD,MAAM,CAACsO,GAAP,CAAW,iBAAX,CAAF;;QACA,IAAGrO,CAAH,EAAK;UACH,IAAGA,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;UACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;UACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;UACF,IAAGjN,CAAC,IAAE,GAAN,EACE,OAAOkN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,GAAD,EAAK,GAAL,CAAd,EAAwBmC,OAAxB,EAAgCC,WAAhC,CAAjB;UACF,OAAOC,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC7K,CAAD,EAAGA,CAAH,CAAd,EAAoBgN,OAApB,EAA4BC,WAA5B,CAAjB;QAA2D;MAAC;IAAC;EAAC;;EACtE,IAAGiB,EAAE,IAAE,GAAP,EAAW;IACT,OAAOhB,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAACqD,EAAD,CAAd,EAAmB,SAAnB,CAAjB;EAAgD;;EAClD,IAAGA,EAAE,IAAE,GAAP,EAAW;IACT,IAAG,CAAC,QAAQI,IAAR,CAAalO,MAAM,CAACL,MAAD,CAAnB,CAAJ,EACE,OAAO,UAAP,CADF,KAGE,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAACqD,EAAD,CAAd,EAAmBlB,OAAnB,EAA2BC,WAA3B,CAAjB;EAA0D;;EAC9D,IAAGiB,EAAE,IAAE,GAAP,EAAW;IACT,IAAIC,CAAC,GAACpO,MAAM,CAACI,GAAb;IACA,IAAGJ,MAAM,CAAC2N,QAAP,CAAgB,IAAhB,KAAuB3N,MAAM,CAACsO,GAAP,CAAW,GAAX,KAAiBtO,MAAM,CAAC2N,QAAP,CAAgB,IAAhB,CAAjB,IAAwC3N,MAAM,CAACsO,GAAP,CAAW,GAAX,CAAlE,EACE,OAAO,SAAP,CADF,KAGEtO,MAAM,CAACI,GAAP,GAAWgO,CAAX;EAAc;;EAClB,IAAG,QAAQG,IAAR,CAAaJ,EAAb,CAAH,EAAoB;IAClB,IAAIC,CAAC,GAACpO,MAAM,CAACI,GAAb;;IACA,IAAGJ,MAAM,CAACsO,GAAP,CAAW,GAAX,KAAiBtO,MAAM,CAACsO,GAAP,CAAW,OAAX,CAAjB,IAAsC,CAAC,SAASC,IAAT,CAAcxO,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAlB,CAAD,IAAkCA,MAAM,CAACsO,GAAP,CAAW,sCAAX,CAA3E,EAA8H;MAC5H,IAAIrO,CAAC,GAACD,MAAM,CAACiO,OAAP,EAAN;MACA,IAAGrN,IAAI,CAACX,CAAD,CAAP,EACE,OAAO,SAAP;IAAkB;;IACtBD,MAAM,CAACI,GAAP,GAAWgO,CAAX;EAAc;;EAChB,IAAG,SAASG,IAAT,CAAcJ,EAAd,CAAH,EAAqB;IACnB,IAAGnO,MAAM,CAAC2N,QAAP,CAAgB,OAAhB,KAA0B3N,MAAM,CAACsO,GAAP,CAAW,GAAX,KAAiBtO,MAAM,CAAC2N,QAAP,CAAgB,OAAhB,CAAjB,IAA2C3N,MAAM,CAACsO,GAAP,CAAW,GAAX,CAAxE,EAAwF;MACtF,IAAIrO,CAAC,GAACD,MAAM,CAACiO,OAAP,EAAN;MACA,IAAGrN,IAAI,CAACX,CAAD,CAAP,EACE,OAAO,SAAP,CADF,KAGE,OAAO,UAAP;IAAmB;EAAC;;EAC1B,IAAGkO,EAAE,IAAE,GAAP,EAAW;IACT,IAAGpO,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAJ,IAAkB,GAArB,EAAyB;MACvBA,MAAM,CAAC8N,SAAP;MACA,OAAO,SAAP;IAAkB;EAAC;;EACvB,IAAG,2BAA2BS,IAA3B,CAAgCJ,EAAhC,CAAH,EAAuC;IACrC,IAAIC,CAAC,GAACpO,MAAM,CAACI,GAAb;IACAJ,MAAM,CAAC2N,QAAP,CAAgB,0BAAhB;IACA,IAAG/M,IAAI,CAACZ,MAAM,CAACiO,OAAP,EAAD,CAAP,EACE,OAAO,UAAP,CADF,KAGEjO,MAAM,CAACI,GAAP,GAAWgO,CAAX;EAAc;;EAClB,IAAGD,EAAE,IAAE,GAAP,EAAW;IACT,IAAGnO,MAAM,CAACI,GAAP,IAAY,CAAf,EAAiB;MACf,IAAGI,MAAM,CAACR,MAAD,EAAS,CAAT,CAAN,IAAmB,QAAtB,EAA+B;QAC7B,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,IAAD,CAAd,EAAqB,SAArB,CAAjB;MAAkD,CADpD,MAEK,IAAGtK,MAAM,CAACR,MAAD,EAAS,CAAT,CAAN,IAAmB,SAAtB,EAAgC;QACnC,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,IAAD,CAAd,EAAqB,SAArB,CAAjB;MAAkD,CAD/C,MAEA,IAAGtK,MAAM,CAACR,MAAD,EAAS,CAAT,CAAN,IAAmB,MAAtB,EAA6B;QAChC,OAAOmN,UAAU,CAACnN,MAAD,EAAQ8K,KAAR,EAAc,CAAC,IAAD,CAAd,EAAqB,QAArB,CAAjB;MAAiD;IAAC;EAAC;;EACzD,IAAG,KAAKyD,IAAL,CAAUJ,EAAV,CAAH,EAAiB;IACf,IAAIC,CAAC,GAACpO,MAAM,CAACI,GAAb;IACA,IAAGL,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAJ,IAAkB,GAAlB,KAAwBD,IAAI,CAACC,MAAD,EAAS,CAAT,CAAJ,IAAiB,GAAjB,IAAsBA,MAAM,CAAC2N,QAAP,CAAgB,IAAhB,KAAuB5N,IAAI,CAACC,MAAD,EAAS,CAAT,CAAJ,IAAiB,GAAtF,CAAH,EACE,OAAO,QAAP,CADF,KAGEA,MAAM,CAACI,GAAP,GAAWgO,CAAX;EAAc;;EAClB,IAAG,QAAQG,IAAR,CAAaJ,EAAb,CAAH,EAAoB;IAClB,IAAIK,CAAC,GAACzO,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAV;IACA,IAAIoO,CAAC,GAACpO,MAAM,CAACI,GAAb;IACAJ,MAAM,CAAC2N,QAAP,CAAgB,QAAhB;;IACA,IAAG,UAAUY,IAAV,CAAexO,IAAI,CAACC,MAAD,EAAS,CAAT,CAAnB,CAAH,EAAmC;MACjCA,MAAM,CAACI,GAAP,GAAWgO,CAAX;IAAc,CADhB,MAEI;MACF,IAAInO,CAAC,GAACW,IAAI,CAACZ,MAAM,CAACiO,OAAP,EAAD,CAAV;MACA,IAAG,CAAChO,CAAJ,EACE,OAAO,MAAP;MACF,IAAGA,CAAC,CAAC,CAAD,CAAJ,EACEA,CAAC,GAACA,CAAC,CAAC,CAAD,CAAH;;MACF,IAAGuO,CAAC,IAAE,GAAN,EAAU;QACR,IAAGvO,CAAC,IAAE,CAAN,EACE,OAAO,SAAP,CADF,KAEK,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,KAAP,CADG,KAEA,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,MAAP,CADG,KAEA,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,UAAP,CADG,KAEA,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,SAAP,CADG,KAGH,OAAO,MAAP;MAAe,CAZnB,MAcE,OAAO,MAAP;IAAe;EAAC;;EACtB,IAAG,YAAYsO,IAAZ,CAAiBJ,EAAjB,CAAH,EAAwB;IACtB,IAAIK,CAAC,GAACzO,IAAI,CAACC,MAAD,EAAS,CAAC,CAAV,CAAV;IACAA,MAAM,CAAC2N,QAAP,CAAgB,IAAhB;IACA,IAAI1N,CAAC,GAACW,IAAI,CAACZ,MAAM,CAACiO,OAAP,EAAD,CAAV;IACA,IAAG,CAAChO,CAAJ,EACE,OAAO,MAAP;IACF,IAAGA,CAAC,CAAC,CAAD,CAAJ,EACEA,CAAC,GAACA,CAAC,CAAC,CAAD,CAAH;;IACF,IAAGuO,CAAC,IAAE,GAAN,EAAU;MACR,IAAGvO,CAAC,IAAE,CAAN,EACE,OAAO,SAAP,CADF,KAEK,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,KAAP,CADG,KAEA,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,MAAP,CADG,KAEA,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,UAAP,CADG,KAEA,IAAGA,CAAC,IAAE,CAAN,EACH,OAAO,SAAP,CADG,KAGH,OAAO,MAAP;IAAe,CAZnB,MAcE,OAAO,MAAP;EAAe;;EACnB,OAAO,IAAP;AAAa;;AAEf,OAAO,MAAMwO,IAAI,GAAG;EAClBC,UAAU,EAAE,YAAW;IACrB,OAAO;MACLnB,QAAQ,EAAEK,SADL;MAELR,KAAK,EAAE,IAFF;MAGLC,KAAK,EAAE,IAHF;MAILC,IAAI,EAAE;IAJD,CAAP;EAMD,CARiB;EASlBqB,KAAK,EAAE,UAAS3O,MAAT,EAAiB8K,KAAjB,EAAwB;IAC7B,OAAO,CAACA,KAAK,CAACyC,QAAN,IAAkBK,SAAnB,EAA8B5N,MAA9B,EAAsC8K,KAAtC,CAAP;EACD,CAXiB;EAYlB8D,YAAY,EAAE;IACZC,aAAa,EAAE;MAACC,IAAI,EAAE;IAAP,CADH;IAEZC,SAAS,EAAE;EAFC;AAZI,CAAb"},"metadata":{},"sourceType":"module"}