{"ast":null,"code":"// @ts-nocheck\nimport refractorJsx from './jsx.js';\nimport refractorTypescript from './typescript.js';\ntsx.displayName = 'tsx';\ntsx.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function tsx(Prism) {\n  Prism.register(refractorJsx);\n  Prism.register(refractorTypescript);\n\n  (function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript);\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n    delete Prism.languages.tsx['parameter'];\n    delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n    var tag = Prism.languages.tsx.tag;\n    tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n    tag.lookbehind = true;\n  })(Prism);\n}","map":{"version":3,"names":["refractorJsx","refractorTypescript","tsx","displayName","aliases","Prism","register","typescript","util","clone","languages","extend","tag","pattern","RegExp","source","flags","lookbehind"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/tsx.js"],"sourcesContent":["// @ts-nocheck\nimport refractorJsx from './jsx.js'\nimport refractorTypescript from './typescript.js'\ntsx.displayName = 'tsx'\ntsx.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function tsx(Prism) {\n  Prism.register(refractorJsx)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript)\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript) // doesn't work with TS because TS is too complex\n\n    delete Prism.languages.tsx['parameter']\n    delete Prism.languages.tsx['literal-property'] // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n    var tag = Prism.languages.tsx.tag\n    tag.pattern = RegExp(\n      /(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')',\n      tag.pattern.flags\n    )\n    tag.lookbehind = true\n  })(Prism)\n}\n"],"mappings":"AAAA;AACA,OAAOA,YAAP,MAAyB,UAAzB;AACA,OAAOC,mBAAP,MAAgC,iBAAhC;AACAC,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;AAEA;;AACA,eAAe,SAASF,GAAT,CAAaG,KAAb,EAAoB;EACjCA,KAAK,CAACC,QAAN,CAAeN,YAAf;EACAK,KAAK,CAACC,QAAN,CAAeL,mBAAf;;EACC,CAAC,UAAUI,KAAV,EAAiB;IACjB,IAAIE,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAWC,KAAX,CAAiBJ,KAAK,CAACK,SAAN,CAAgBH,UAAjC,CAAjB;IACAF,KAAK,CAACK,SAAN,CAAgBR,GAAhB,GAAsBG,KAAK,CAACK,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,EAA8BJ,UAA9B,CAAtB,CAFiB,CAE+C;;IAEhE,OAAOF,KAAK,CAACK,SAAN,CAAgBR,GAAhB,CAAoB,WAApB,CAAP;IACA,OAAOG,KAAK,CAACK,SAAN,CAAgBR,GAAhB,CAAoB,kBAApB,CAAP,CALiB,CAK8B;IAC/C;IACA;;IAEA,IAAIU,GAAG,GAAGP,KAAK,CAACK,SAAN,CAAgBR,GAAhB,CAAoBU,GAA9B;IACAA,GAAG,CAACC,OAAJ,GAAcC,MAAM,CAClB,qBAAqBC,MAArB,GAA8B,KAA9B,GAAsCH,GAAG,CAACC,OAAJ,CAAYE,MAAlD,GAA2D,GADzC,EAElBH,GAAG,CAACC,OAAJ,CAAYG,KAFM,CAApB;IAIAJ,GAAG,CAACK,UAAJ,GAAiB,IAAjB;EACD,CAfA,EAeEZ,KAfF;AAgBF"},"metadata":{},"sourceType":"module"}