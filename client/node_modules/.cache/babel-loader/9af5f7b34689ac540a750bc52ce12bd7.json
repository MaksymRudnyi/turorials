{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors');\n\nvar getBody = require('raw-body');\n\nvar iconv = require('iconv-lite');\n\nvar onFinished = require('on-finished');\n\nvar zlib = require('zlib');\n/**\n * Module exports.\n */\n\n\nmodule.exports = read;\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read(req, res, next, parse, debug, options) {\n  var length;\n  var opts = options;\n  var stream; // flag as parsed\n\n  req._body = true; // read options\n\n  var encoding = opts.encoding !== null ? opts.encoding : null;\n  var verify = opts.verify;\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate);\n    length = stream.length;\n    stream.length = undefined;\n  } catch (err) {\n    return next(err);\n  } // set raw-body options\n\n\n  opts.length = length;\n  opts.encoding = verify ? null : encoding; // assert charset is supported\n\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }));\n  } // read body\n\n\n  debug('read body');\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error;\n\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        });\n      } else {\n        // set status code on error\n        _error = createError(400, error);\n      } // read off entire request\n\n\n      stream.resume();\n      onFinished(req, function onfinished() {\n        next(createError(400, _error));\n      });\n      return;\n    } // verify\n\n\n    if (verify) {\n      try {\n        debug('verify body');\n        verify(req, res, body, encoding);\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }));\n        return;\n      }\n    } // parse\n\n\n    var str = body;\n\n    try {\n      debug('parse body');\n      str = typeof body !== 'string' && encoding !== null ? iconv.decode(body, encoding) : body;\n      req.body = parse(str);\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }));\n      return;\n    }\n\n    next();\n  });\n}\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\n\nfunction contentstream(req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();\n  var length = req.headers['content-length'];\n  var stream;\n  debug('content-encoding \"%s\"', encoding);\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    });\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate();\n      debug('inflate body');\n      req.pipe(stream);\n      break;\n\n    case 'gzip':\n      stream = zlib.createGunzip();\n      debug('gunzip body');\n      req.pipe(stream);\n      break;\n\n    case 'identity':\n      stream = req;\n      stream.length = length;\n      break;\n\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      });\n  }\n\n  return stream;\n}","map":{"version":3,"names":["createError","require","getBody","iconv","onFinished","zlib","module","exports","read","req","res","next","parse","debug","options","length","opts","stream","_body","encoding","verify","contentstream","inflate","undefined","err","encodingExists","toUpperCase","charset","toLowerCase","type","error","body","_error","resume","onfinished","str","decode","headers","createInflate","pipe","createGunzip"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/server/node_modules/body-parser/lib/read.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar getBody = require('raw-body')\nvar iconv = require('iconv-lite')\nvar onFinished = require('on-finished')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = read\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read (req, res, next, parse, debug, options) {\n  var length\n  var opts = options\n  var stream\n\n  // flag as parsed\n  req._body = true\n\n  // read options\n  var encoding = opts.encoding !== null\n    ? opts.encoding\n    : null\n  var verify = opts.verify\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate)\n    length = stream.length\n    stream.length = undefined\n  } catch (err) {\n    return next(err)\n  }\n\n  // set raw-body options\n  opts.length = length\n  opts.encoding = verify\n    ? null\n    : encoding\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }))\n  }\n\n  // read body\n  debug('read body')\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error\n\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        })\n      } else {\n        // set status code on error\n        _error = createError(400, error)\n      }\n\n      // read off entire request\n      stream.resume()\n      onFinished(req, function onfinished () {\n        next(createError(400, _error))\n      })\n      return\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body')\n        verify(req, res, body, encoding)\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }))\n        return\n      }\n    }\n\n    // parse\n    var str = body\n    try {\n      debug('parse body')\n      str = typeof body !== 'string' && encoding !== null\n        ? iconv.decode(body, encoding)\n        : body\n      req.body = parse(str)\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }))\n      return\n    }\n\n    next()\n  })\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream (req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  var length = req.headers['content-length']\n  var stream\n\n  debug('content-encoding \"%s\"', encoding)\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    })\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate()\n      debug('inflate body')\n      req.pipe(stream)\n      break\n    case 'gzip':\n      stream = zlib.createGunzip()\n      debug('gunzip body')\n      req.pipe(stream)\n      break\n    case 'identity':\n      stream = req\n      stream.length = length\n      break\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      })\n  }\n\n  return stream\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,OAA7C,EAAsD;EACpD,IAAIC,MAAJ;EACA,IAAIC,IAAI,GAAGF,OAAX;EACA,IAAIG,MAAJ,CAHoD,CAKpD;;EACAR,GAAG,CAACS,KAAJ,GAAY,IAAZ,CANoD,CAQpD;;EACA,IAAIC,QAAQ,GAAGH,IAAI,CAACG,QAAL,KAAkB,IAAlB,GACXH,IAAI,CAACG,QADM,GAEX,IAFJ;EAGA,IAAIC,MAAM,GAAGJ,IAAI,CAACI,MAAlB;;EAEA,IAAI;IACF;IACAH,MAAM,GAAGI,aAAa,CAACZ,GAAD,EAAMI,KAAN,EAAaG,IAAI,CAACM,OAAlB,CAAtB;IACAP,MAAM,GAAGE,MAAM,CAACF,MAAhB;IACAE,MAAM,CAACF,MAAP,GAAgBQ,SAAhB;EACD,CALD,CAKE,OAAOC,GAAP,EAAY;IACZ,OAAOb,IAAI,CAACa,GAAD,CAAX;EACD,CArBmD,CAuBpD;;;EACAR,IAAI,CAACD,MAAL,GAAcA,MAAd;EACAC,IAAI,CAACG,QAAL,GAAgBC,MAAM,GAClB,IADkB,GAElBD,QAFJ,CAzBoD,CA6BpD;;EACA,IAAIH,IAAI,CAACG,QAAL,KAAkB,IAAlB,IAA0BA,QAAQ,KAAK,IAAvC,IAA+C,CAAChB,KAAK,CAACsB,cAAN,CAAqBN,QAArB,CAApD,EAAoF;IAClF,OAAOR,IAAI,CAACX,WAAW,CAAC,GAAD,EAAM,0BAA0BmB,QAAQ,CAACO,WAAT,EAA1B,GAAmD,GAAzD,EAA8D;MACnFC,OAAO,EAAER,QAAQ,CAACS,WAAT,EAD0E;MAEnFC,IAAI,EAAE;IAF6E,CAA9D,CAAZ,CAAX;EAID,CAnCmD,CAqCpD;;;EACAhB,KAAK,CAAC,WAAD,CAAL;EACAX,OAAO,CAACe,MAAD,EAASD,IAAT,EAAe,UAAUc,KAAV,EAAiBC,IAAjB,EAAuB;IAC3C,IAAID,KAAJ,EAAW;MACT,IAAIE,MAAJ;;MAEA,IAAIF,KAAK,CAACD,IAAN,KAAe,sBAAnB,EAA2C;QACzC;QACAG,MAAM,GAAGhC,WAAW,CAAC,GAAD,EAAM,0BAA0BmB,QAAQ,CAACO,WAAT,EAA1B,GAAmD,GAAzD,EAA8D;UAChFC,OAAO,EAAER,QAAQ,CAACS,WAAT,EADuE;UAEhFC,IAAI,EAAE;QAF0E,CAA9D,CAApB;MAID,CAND,MAMO;QACL;QACAG,MAAM,GAAGhC,WAAW,CAAC,GAAD,EAAM8B,KAAN,CAApB;MACD,CAZQ,CAcT;;;MACAb,MAAM,CAACgB,MAAP;MACA7B,UAAU,CAACK,GAAD,EAAM,SAASyB,UAAT,GAAuB;QACrCvB,IAAI,CAACX,WAAW,CAAC,GAAD,EAAMgC,MAAN,CAAZ,CAAJ;MACD,CAFS,CAAV;MAGA;IACD,CArB0C,CAuB3C;;;IACA,IAAIZ,MAAJ,EAAY;MACV,IAAI;QACFP,KAAK,CAAC,aAAD,CAAL;QACAO,MAAM,CAACX,GAAD,EAAMC,GAAN,EAAWqB,IAAX,EAAiBZ,QAAjB,CAAN;MACD,CAHD,CAGE,OAAOK,GAAP,EAAY;QACZb,IAAI,CAACX,WAAW,CAAC,GAAD,EAAMwB,GAAN,EAAW;UACzBO,IAAI,EAAEA,IADmB;UAEzBF,IAAI,EAAEL,GAAG,CAACK,IAAJ,IAAY;QAFO,CAAX,CAAZ,CAAJ;QAIA;MACD;IACF,CAnC0C,CAqC3C;;;IACA,IAAIM,GAAG,GAAGJ,IAAV;;IACA,IAAI;MACFlB,KAAK,CAAC,YAAD,CAAL;MACAsB,GAAG,GAAG,OAAOJ,IAAP,KAAgB,QAAhB,IAA4BZ,QAAQ,KAAK,IAAzC,GACFhB,KAAK,CAACiC,MAAN,CAAaL,IAAb,EAAmBZ,QAAnB,CADE,GAEFY,IAFJ;MAGAtB,GAAG,CAACsB,IAAJ,GAAWnB,KAAK,CAACuB,GAAD,CAAhB;IACD,CAND,CAME,OAAOX,GAAP,EAAY;MACZb,IAAI,CAACX,WAAW,CAAC,GAAD,EAAMwB,GAAN,EAAW;QACzBO,IAAI,EAAEI,GADmB;QAEzBN,IAAI,EAAEL,GAAG,CAACK,IAAJ,IAAY;MAFO,CAAX,CAAZ,CAAJ;MAIA;IACD;;IAEDlB,IAAI;EACL,CAtDM,CAAP;AAuDD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASU,aAAT,CAAwBZ,GAAxB,EAA6BI,KAA7B,EAAoCS,OAApC,EAA6C;EAC3C,IAAIH,QAAQ,GAAG,CAACV,GAAG,CAAC4B,OAAJ,CAAY,kBAAZ,KAAmC,UAApC,EAAgDT,WAAhD,EAAf;EACA,IAAIb,MAAM,GAAGN,GAAG,CAAC4B,OAAJ,CAAY,gBAAZ,CAAb;EACA,IAAIpB,MAAJ;EAEAJ,KAAK,CAAC,uBAAD,EAA0BM,QAA1B,CAAL;;EAEA,IAAIG,OAAO,KAAK,KAAZ,IAAqBH,QAAQ,KAAK,UAAtC,EAAkD;IAChD,MAAMnB,WAAW,CAAC,GAAD,EAAM,8BAAN,EAAsC;MACrDmB,QAAQ,EAAEA,QAD2C;MAErDU,IAAI,EAAE;IAF+C,CAAtC,CAAjB;EAID;;EAED,QAAQV,QAAR;IACE,KAAK,SAAL;MACEF,MAAM,GAAGZ,IAAI,CAACiC,aAAL,EAAT;MACAzB,KAAK,CAAC,cAAD,CAAL;MACAJ,GAAG,CAAC8B,IAAJ,CAAStB,MAAT;MACA;;IACF,KAAK,MAAL;MACEA,MAAM,GAAGZ,IAAI,CAACmC,YAAL,EAAT;MACA3B,KAAK,CAAC,aAAD,CAAL;MACAJ,GAAG,CAAC8B,IAAJ,CAAStB,MAAT;MACA;;IACF,KAAK,UAAL;MACEA,MAAM,GAAGR,GAAT;MACAQ,MAAM,CAACF,MAAP,GAAgBA,MAAhB;MACA;;IACF;MACE,MAAMf,WAAW,CAAC,GAAD,EAAM,mCAAmCmB,QAAnC,GAA8C,GAApD,EAAyD;QACxEA,QAAQ,EAAEA,QAD8D;QAExEU,IAAI,EAAE;MAFkE,CAAzD,CAAjB;EAhBJ;;EAsBA,OAAOZ,MAAP;AACD"},"metadata":{},"sourceType":"script"}