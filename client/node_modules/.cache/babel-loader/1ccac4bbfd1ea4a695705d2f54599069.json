{"ast":null,"code":"// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/; // declaration\n\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/; // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\n\nvar TRIM_REGEX = /^\\s+|\\s+$/g; // strings\n\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = ''; // types\n\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\n\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n  options = options || {};\n  /**\n   * Positional.\n   */\n\n  var lineno = 1;\n  var column = 1;\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n\n\n  function position() {\n    var start = {\n      line: lineno,\n      column: column\n    };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n\n\n  function Position(start) {\n    this.start = start;\n    this.end = {\n      line: lineno,\n      column: column\n    };\n    this.source = options.source;\n  }\n  /**\n   * Non-enumerable source string.\n   */\n\n\n  Position.prototype.content = style;\n  var errorsList = [];\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n\n  function error(msg) {\n    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n\n\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n  /**\n   * Parse whitespace.\n   */\n\n\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n\n\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n\n    while (c = comment()) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n\n    return rules;\n  }\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n\n\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n    var i = 2;\n\n    while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {\n      ++i;\n    }\n\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n\n\n  function declaration() {\n    var pos = position(); // prop\n\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment(); // :\n\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\"); // val\n\n    var val = match(VALUE_REGEX);\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING\n    }); // ;\n\n    match(SEMICOLON_REGEX);\n    return ret;\n  }\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n\n\n  function declarations() {\n    var decls = [];\n    comments(decls); // declarations\n\n    var decl;\n\n    while (decl = declaration()) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\n\n\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}","map":{"version":3,"names":["COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","module","exports","style","options","TypeError","lineno","column","updatePosition","str","lines","match","length","i","lastIndexOf","position","start","line","node","Position","whitespace","end","source","prototype","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","trim","replace","value","declarations","decls","decl"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/inline-style-parser/index.js"],"sourcesContent":["// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}