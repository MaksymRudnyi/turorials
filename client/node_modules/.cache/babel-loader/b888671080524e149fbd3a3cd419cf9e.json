{"ast":null,"code":"import { visit as e } from \"unist-util-visit\";\nimport { toString as r } from \"hast-util-to-string\";\nimport { filter as t } from \"unist-util-filter\";\nimport n from \"parse-numeric-range\";\nimport { refractor as i } from \"refractor/lib/common.js\";\nimport { refractor as o } from \"refractor/lib/all.js\";\n\nfunction l() {\n  l = function (e, r) {\n    return new t(e, void 0, r);\n  };\n\n  var e = RegExp.prototype,\n      r = new WeakMap();\n\n  function t(e, n, i) {\n    var o = new RegExp(e, n);\n    return r.set(o, i || r.get(e)), a(o, t.prototype);\n  }\n\n  function n(e, t) {\n    var n = r.get(t);\n    return Object.keys(n).reduce(function (r, t) {\n      return r[t] = e[n[t]], r;\n    }, Object.create(null));\n  }\n\n  return s(t, RegExp), t.prototype.exec = function (r) {\n    var t = e.exec.call(this, r);\n    return t && (t.groups = n(t, this)), t;\n  }, t.prototype[Symbol.replace] = function (t, i) {\n    if (\"string\" == typeof i) {\n      var o = r.get(this);\n      return e[Symbol.replace].call(this, t, i.replace(/\\$<([^>]+)>/g, function (e, r) {\n        return \"$\" + o[r];\n      }));\n    }\n\n    if (\"function\" == typeof i) {\n      var l = this;\n      return e[Symbol.replace].call(this, t, function () {\n        var e = arguments;\n        return \"object\" != typeof e[e.length - 1] && (e = [].slice.call(e)).push(n(e, l)), i.apply(this, e);\n      });\n    }\n\n    return e[Symbol.replace].call(this, t, i);\n  }, l.apply(this, arguments);\n}\n\nfunction s(e, r) {\n  if (\"function\" != typeof r && null !== r) throw new TypeError(\"Super expression must either be null or a function\");\n  e.prototype = Object.create(r && r.prototype, {\n    constructor: {\n      value: e,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), r && a(e, r);\n}\n\nfunction a(e, r) {\n  return a = Object.setPrototypeOf || function (e, r) {\n    return e.__proto__ = r, e;\n  }, a(e, r);\n}\n\nfunction u(e, r) {\n  (null == r || r > e.length) && (r = e.length);\n\n  for (var t = 0, n = new Array(r); t < r; t++) n[t] = e[t];\n\n  return n;\n}\n\nfunction c(e, r) {\n  var t = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n  if (t) return (t = t.call(e)).next.bind(t);\n\n  if (Array.isArray(e) || (t = function (e, r) {\n    if (e) {\n      if (\"string\" == typeof e) return u(e, r);\n      var t = Object.prototype.toString.call(e).slice(8, -1);\n      return \"Object\" === t && e.constructor && (t = e.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(e) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? u(e, r) : void 0;\n    }\n  }(e)) || r && e && \"number\" == typeof e.length) {\n    t && (e = t);\n    var n = 0;\n    return function () {\n      return n >= e.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: e[n++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar p = function (i) {\n  return function (o) {\n    return void 0 === o && (o = {}), function (r) {\n      e(r, \"element\", s);\n    };\n\n    function s(e, s, a) {\n      if (a && \"pre\" === a.tagName && \"code\" === e.tagName) {\n        var u = e.data && e.data.meta ? e.data.meta : \"\";\n        e.properties.className ? \"boolean\" == typeof e.properties.className ? e.properties.className = [] : Array.isArray(e.properties.className) || (e.properties.className = [e.properties.className]) : e.properties.className = [], e.properties.className.push(\"code-highlight\");\n\n        var p,\n            f,\n            m = function (e) {\n          for (var r, t = c(e.properties.className); !(r = t()).done;) {\n            var n = r.value;\n            if (\"language-\" === n.slice(0, 9)) return n.slice(9).toLowerCase();\n          }\n\n          return null;\n        }(e);\n\n        if (m) try {\n          var h;\n          h = null != m && m.includes(\"diff-\") ? m.split(\"-\")[1] : m, p = i.highlight(r(e), h), a.properties.className = (a.properties.className || []).concat(\"language-\" + h);\n        } catch (r) {\n          if (!o.ignoreMissing || !/Unknown language/.test(r.message)) throw r;\n          p = e;\n        } else p = e;\n        p.children = (f = 1, function e(r) {\n          return r.reduce(function (r, t) {\n            if (\"text\" === t.type) {\n              var n = t.value,\n                  i = (n.match(/\\n/g) || \"\").length;\n              if (0 === i) t.position = {\n                start: {\n                  line: f,\n                  column: 1\n                },\n                end: {\n                  line: f,\n                  column: 1\n                }\n              }, r.push(t);else for (var o, l = n.split(\"\\n\"), s = c(l.entries()); !(o = s()).done;) {\n                var a = o.value,\n                    u = a[0],\n                    p = a[1];\n                r.push({\n                  type: \"text\",\n                  value: u === l.length - 1 ? p : p + \"\\n\",\n                  position: {\n                    start: {\n                      line: f + u,\n                      column: 1\n                    },\n                    end: {\n                      line: f + u,\n                      column: 1\n                    }\n                  }\n                });\n              }\n              return f += i, r;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(t, \"children\")) {\n              var m = f;\n              return t.children = e(t.children), r.push(t), t.position = {\n                start: {\n                  line: m,\n                  column: 1\n                },\n                end: {\n                  line: f,\n                  column: 1\n                }\n              }, r;\n            }\n\n            return r.push(t), r;\n          }, []);\n        })(p.children), p.position = p.children.length > 0 ? {\n          start: {\n            line: p.children[0].position.start.line,\n            column: 0\n          },\n          end: {\n            line: p.children[p.children.length - 1].position.end.line,\n            column: 0\n          }\n        } : {\n          start: {\n            line: 0,\n            column: 0\n          },\n          end: {\n            line: 0,\n            column: 0\n          }\n        };\n\n        for (var d, g = function (e) {\n          var r = /{([\\d,-]+)}/,\n              t = e.split(\",\").map(function (e) {\n            return e.trim();\n          }).join();\n\n          if (r.test(t)) {\n            var i = r.exec(t)[1],\n                o = n(i);\n            return function (e) {\n              return o.includes(e + 1);\n            };\n          }\n\n          return function () {\n            return !1;\n          };\n        }(u), y = function (e) {\n          var r = /*#__PURE__*/l(/showLineNumbers=([0-9]+)/i, {\n            lines: 1\n          });\n\n          if (r.test(e)) {\n            var t = r.exec(e);\n            return Number(t.groups.lines);\n          }\n\n          return 1;\n        }(u), v = function (e) {\n          for (var r = new Array(e), t = 0; t < e; t++) r[t] = {\n            type: \"element\",\n            tagName: \"span\",\n            properties: {\n              className: []\n            },\n            children: []\n          };\n\n          return r;\n        }(p.position.end.line), b = [\"showlinenumbers=false\", 'showlinenumbers=\"false\"', \"showlinenumbers={false}\"], w = function () {\n          var e = d.value,\n              n = e[0],\n              i = e[1];\n          i.properties.className = [\"code-line\"];\n          var l = t(p, function (e) {\n            return e.position.start.line <= n + 1 && e.position.end.line >= n + 1;\n          });\n          i.children = l.children, !u.toLowerCase().includes(\"showLineNumbers\".toLowerCase()) && !o.showLineNumbers || b.some(function (e) {\n            return u.toLowerCase().includes(e);\n          }) || (i.properties.line = [(n + y).toString()], i.properties.className.push(\"line-number\")), g(n) && i.properties.className.push(\"highlight-line\"), (\"diff\" === m || null != m && m.includes(\"diff-\")) && \"-\" === r(i).substring(0, 1) ? i.properties.className.push(\"deleted\") : (\"diff\" === m || null != m && m.includes(\"diff-\")) && \"+\" === r(i).substring(0, 1) && i.properties.className.push(\"inserted\");\n        }, N = c(v.entries()); !(d = N()).done;) w();\n\n        v.length > 0 && \"\" === r(v[v.length - 1]).trim() && v.pop(), e.children = v;\n      }\n    }\n  };\n},\n    f = p(i),\n    m = p(o);\n\nexport { m as default, f as rehypePrismCommon, p as rehypePrismGenerator };","map":{"version":3,"sources":["../src/generator.js","../src/common.js","../src/all.js"],"names":["node","properties","className","classListItem","slice","toLowerCase","meta","RE","parsedMeta","split","map","str","trim","join","test","strlineNumbers","exec","lineNumbers","rangeParser","index","includes","groups","lines","Number","number","a","Array","i","type","tagName","children","startLineNum","addNodePosition","ast","reduce","result","value","numLines","match","length","position","start","line","column","end","push","entries","Object","prototype","hasOwnProperty","call","initialLineNum","rehypePrismGenerator","refractor","options","tree","visit","visitor","parent","data","isArray","lang","getLanguage","refractorRoot","rootLang","highlight","toString","concat","err","ignoreMissing","message","shouldHighlightLine","calculateLinesToHighlight","startingLineNumber","calculateStartingLine","codeLineArray","createLineNodes","falseShowLineNumbersStr","treeExtract","filter","showLineNumbers","some","substring","pop","rehypePrismCommon","refractorCommon","rehypePrismAll","refractorAll"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { filter } from 'unist-util-filter'\nimport rangeParser from 'parse-numeric-range'\n\n/**\n * @param {Element} node\n * @return {string|null}\n */\nconst getLanguage = (node) => {\n  const className = node.properties.className\n  //@ts-ignore\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Create container AST for node lines\n *\n * @param {number} number\n * @return {Element[]}\n */\nconst createLineNodes = (number) => {\n  const a = new Array(number)\n  for (let i = 0; i < number; i++) {\n    a[i] = {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: [] },\n      children: [],\n    }\n  }\n  return a\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n * Add a node start and end line position information for each text node\n *\n * @return { (ast:Element['children']) => Element['children'] }\n *\n */\nconst addNodePositionClosure = () => {\n  let startLineNum = 1\n  /**\n   * @param {Element['children']} ast\n   * @return {Element['children']}\n   */\n  const addNodePosition = (ast) => {\n    return ast.reduce((result, node) => {\n      if (node.type === 'text') {\n        const value = /** @type {string} */ (node.value)\n        const numLines = (value.match(/\\n/g) || '').length\n        if (numLines === 0) {\n          node.position = {\n            // column: 1 is needed to avoid error with @next/mdx\n            // https://github.com/timlrx/rehype-prism-plus/issues/44\n            start: { line: startLineNum, column: 1 },\n            end: { line: startLineNum, column: 1 },\n          }\n          result.push(node)\n        } else {\n          const lines = value.split('\\n')\n          for (const [i, line] of lines.entries()) {\n            result.push({\n              type: 'text',\n              value: i === lines.length - 1 ? line : line + '\\n',\n              position: {\n                start: { line: startLineNum + i, column: 1 },\n                end: { line: startLineNum + i, column: 1 },\n              },\n            })\n          }\n        }\n        startLineNum = startLineNum + numLines\n\n        return result\n      }\n\n      if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n        const initialLineNum = startLineNum\n        // @ts-ignore\n        node.children = addNodePosition(node.children, startLineNum)\n        result.push(node)\n        node.position = {\n          start: { line: initialLineNum, column: 1 },\n          end: { line: startLineNum, column: 1 },\n        }\n        return result\n      }\n\n      result.push(node)\n      return result\n    }, [])\n  }\n  return addNodePosition\n}\n\n/**\n * Rehype prism plugin generator that highlights code blocks with refractor (prismjs)\n *\n * Pass in your own refractor object with the required languages registered:\n * https://github.com/wooorm/refractor#refractorregistersyntax\n *\n * @param {import('refractor/lib/core').Refractor} refractor\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrismGenerator = (refractor) => {\n  return (options = {}) => {\n    return (tree) => {\n      visit(tree, 'element', visitor)\n    }\n\n    /**\n     * @param {Element} node\n     * @param {number} index\n     * @param {Element} parent\n     */\n    function visitor(node, index, parent) {\n      if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n        return\n      }\n\n      let meta = node.data && node.data.meta ? /** @type {string} */ (node.data.meta) : ''\n      // Coerce className to array\n      if (node.properties.className) {\n        if (typeof node.properties.className === 'boolean') {\n          node.properties.className = []\n        } else if (!Array.isArray(node.properties.className)) {\n          node.properties.className = [node.properties.className]\n        }\n      } else {\n        node.properties.className = []\n      }\n      node.properties.className.push('code-highlight')\n      const lang = getLanguage(node)\n\n      /** @type {Element} */\n      let refractorRoot\n\n      // Syntax highlight\n      if (lang) {\n        try {\n          let rootLang\n          if (lang?.includes('diff-')){\n            rootLang=lang.split('-')[1]\n          } else{\n            rootLang=lang\n          }\n          // @ts-ignore\n          refractorRoot = refractor.highlight(toString(node), rootLang)\n          // @ts-ignore className is already an array\n          parent.properties.className = (parent.properties.className || []).concat(\n            'language-' + rootLang\n          )\n        } catch (err) {\n          if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n            refractorRoot = node\n          } else {\n            throw err\n          }\n        }\n      } else {\n        refractorRoot = node\n      }\n\n      refractorRoot.children = addNodePositionClosure()(refractorRoot.children)\n\n      // Add position info to root\n      if (refractorRoot.children.length > 0) {\n        refractorRoot.position = {\n          start: { line: refractorRoot.children[0].position.start.line, column: 0 },\n          end: {\n            line: refractorRoot.children[refractorRoot.children.length - 1].position.end.line,\n            column: 0,\n          },\n        }\n      } else {\n        refractorRoot.position = {\n          start: { line: 0, column: 0 },\n          end: { line: 0, column: 0 },\n        }\n      }\n\n      const shouldHighlightLine = calculateLinesToHighlight(meta)\n      const startingLineNumber = calculateStartingLine(meta)\n      const codeLineArray = createLineNodes(refractorRoot.position.end.line)\n\n      const falseShowLineNumbersStr = [\n        'showlinenumbers=false',\n        'showlinenumbers=\"false\"',\n        'showlinenumbers={false}',\n      ]\n      for (const [i, line] of codeLineArray.entries()) {\n        // Default class name for each line\n        line.properties.className = ['code-line']\n\n        // Syntax highlight\n        const treeExtract = filter(\n          refractorRoot,\n          (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n        )\n        line.children = treeExtract.children\n\n        // Line number\n        if (\n          (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) ||\n            options.showLineNumbers) &&\n          !falseShowLineNumbersStr.some((str) => meta.toLowerCase().includes(str))\n        ) {\n          line.properties.line = [(i + startingLineNumber).toString()]\n          line.properties.className.push('line-number')\n        }\n\n        // Line highlight\n        if (shouldHighlightLine(i)) {\n          line.properties.className.push('highlight-line')\n        }\n\n        // Diff classes\n        if ((lang === 'diff' || lang?.includes('diff-')) && toString(line).substring(0, 1) === '-') {\n          line.properties.className.push('deleted')\n        } else if ((lang === 'diff' || lang?.includes('diff-')) && toString(line).substring(0, 1) === '+') {\n          line.properties.className.push('inserted')\n        }\n      }\n\n      // Remove possible trailing line when splitting by \\n which results in empty array\n      if (\n        codeLineArray.length > 0 &&\n        toString(codeLineArray[codeLineArray.length - 1]).trim() === ''\n      ) {\n        codeLineArray.pop()\n      }\n\n      node.children = codeLineArray\n    }\n  }\n}\n\nexport default rehypePrismGenerator\n","import { refractor as refractorCommon } from 'refractor/lib/common.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * Supported languages: https://github.com/wooorm/refractor#data\n *\n * Consider using rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismCommon = rehypePrismGenerator(refractorCommon)\n\nexport default rehypePrismCommon\n","import { refractor as refractorAll } from 'refractor/lib/all.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * This supports all the languages and should be used on the server side.\n *\n * Consider using rehypePrismCommon or rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismAll = rehypePrismGenerator(refractorAll)\n\nexport default rehypePrismAll\n"]},"metadata":{},"sourceType":"module"}