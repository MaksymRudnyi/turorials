{"ast":null,"code":"// @ts-nocheck\nwebIdl.displayName = 'web-idl';\nwebIdl.aliases = ['webidl'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function webIdl(Prism) {\n  ;\n\n  (function (Prism) {\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source;\n    var type = '(?:' + /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source + '|' + /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source + '|' + /(?!(?:unrestricted|unsigned)\\b)/.source + id + /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source + ')' + /(?:\\s*\\?)?/.source;\n    var typeInside = {};\n    Prism.languages['web-idl'] = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      namespace: {\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n        lookbehind: true\n      },\n      'class-name': [{\n        pattern: /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        pattern: RegExp(/(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // callback return type\n        pattern: RegExp('(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        // typedef\n        pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n        lookbehind: true,\n        inside: typeInside\n      }, {\n        pattern: RegExp(/(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/.source + id),\n        lookbehind: true\n      }, {\n        // inheritance\n        pattern: RegExp(/(:\\s*)/.source + id),\n        lookbehind: true\n      }, // includes and implements\n      RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source), {\n        pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n        lookbehind: true\n      }, {\n        // function return type, parameter types, and dictionary members\n        pattern: RegExp(type + '(?=' + /\\s*(?:\\.{3}\\s*)?/.source + id + /\\s*[(),;=]/.source + ')'),\n        inside: typeInside\n      }],\n      builtin: /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n      keyword: [/\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\n      /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/],\n      boolean: /\\b(?:false|true)\\b/,\n      number: {\n        pattern: /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n        lookbehind: true\n      },\n      operator: /\\.{3}|[=:?<>-]/,\n      punctuation: /[(){}[\\].,;]/\n    };\n\n    for (var key in Prism.languages['web-idl']) {\n      if (key !== 'class-name') {\n        typeInside[key] = Prism.languages['web-idl'][key];\n      }\n    }\n\n    Prism.languages['webidl'] = Prism.languages['web-idl'];\n  })(Prism);\n}","map":{"version":3,"names":["webIdl","displayName","aliases","Prism","id","source","type","typeInside","languages","comment","pattern","greedy","string","namespace","RegExp","lookbehind","inside","builtin","keyword","boolean","number","operator","punctuation","key"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/refractor/lang/web-idl.js"],"sourcesContent":["// @ts-nocheck\nwebIdl.displayName = 'web-idl'\nwebIdl.aliases = ['webidl']\n\n/** @type {import('../core.js').Syntax} */\nexport default function webIdl(Prism) {\n  ;(function (Prism) {\n    var id = /(?:\\B-|\\b_|\\b)[A-Za-z][\\w-]*(?![\\w-])/.source\n    var type =\n      '(?:' +\n      /\\b(?:unsigned\\s+)?long\\s+long(?![\\w-])/.source +\n      '|' +\n      /\\b(?:unrestricted|unsigned)\\s+[a-z]+(?![\\w-])/.source +\n      '|' +\n      /(?!(?:unrestricted|unsigned)\\b)/.source +\n      id +\n      /(?:\\s*<(?:[^<>]|<[^<>]*>)*>)?/.source +\n      ')' +\n      /(?:\\s*\\?)?/.source\n    var typeInside = {}\n    Prism.languages['web-idl'] = {\n      comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      namespace: {\n        pattern: RegExp(/(\\bnamespace\\s+)/.source + id),\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:attribute|const|deleter|getter|optional|setter)\\s+)/.source +\n              type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // callback return type\n          pattern: RegExp(\n            '(' + /\\bcallback\\s+/.source + id + /\\s*=\\s*/.source + ')' + type\n          ),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          // typedef\n          pattern: RegExp(/(\\btypedef\\b\\s*)/.source + type),\n          lookbehind: true,\n          inside: typeInside\n        },\n        {\n          pattern: RegExp(\n            /(\\b(?:callback|dictionary|enum|interface(?:\\s+mixin)?)\\s+)(?!(?:interface|mixin)\\b)/\n              .source + id\n          ),\n          lookbehind: true\n        },\n        {\n          // inheritance\n          pattern: RegExp(/(:\\s*)/.source + id),\n          lookbehind: true\n        }, // includes and implements\n        RegExp(id + /(?=\\s+(?:implements|includes)\\b)/.source),\n        {\n          pattern: RegExp(/(\\b(?:implements|includes)\\s+)/.source + id),\n          lookbehind: true\n        },\n        {\n          // function return type, parameter types, and dictionary members\n          pattern: RegExp(\n            type +\n              '(?=' +\n              /\\s*(?:\\.{3}\\s*)?/.source +\n              id +\n              /\\s*[(),;=]/.source +\n              ')'\n          ),\n          inside: typeInside\n        }\n      ],\n      builtin:\n        /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n      keyword: [\n        /\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/, // type keywords\n        /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: {\n        pattern:\n          /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n        lookbehind: true\n      },\n      operator: /\\.{3}|[=:?<>-]/,\n      punctuation: /[(){}[\\].,;]/\n    }\n\n    for (var key in Prism.languages['web-idl']) {\n      if (key !== 'class-name') {\n        typeInside[key] = Prism.languages['web-idl'][key]\n      }\n    }\n\n    Prism.languages['webidl'] = Prism.languages['web-idl']\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}