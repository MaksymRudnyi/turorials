{"ast":null,"code":"import { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\n\nconst javaLanguage = /*@__PURE__*/LRLanguage.define({\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch|finally)\\b/\n      }),\n      LabeledStatement: flatIndent,\n      SwitchBlock: context => {\n        let after = context.textAfter,\n            closed = /^\\s*\\}/.test(after),\n            isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      Block: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      BlockComment: () => -1,\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^{/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      [\"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" + \"ConstructorBody InterfaceBody ArrayInitializer\"]: foldInside,\n\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n  }\n});\n/**\nJava language support.\n*/\n\nfunction java() {\n  return new LanguageSupport(javaLanguage);\n}\n\nexport { java, javaLanguage };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","flatIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","javaLanguage","define","configure","props","add","IfStatement","except","TryStatement","LabeledStatement","SwitchBlock","context","after","textAfter","closed","test","isCase","baseIndent","unit","Block","closing","BlockComment","Statement","tree","from","to","languageData","commentTokens","line","block","open","close","indentOnInput","java"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/@codemirror/lang-java/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\nconst javaLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch|finally)\\b/ }),\n                LabeledStatement: flatIndent,\n                SwitchBlock: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                BlockComment: () => -1,\n                Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                [\"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" +\n                    \"ConstructorBody InterfaceBody ArrayInitializer\"]: foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n    }\n});\n/**\nJava language support.\n*/\nfunction java() {\n    return new LanguageSupport(javaLanguage);\n}\n\nexport { java, javaLanguage };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,eAArC,EAAsDC,UAAtD,EAAkEC,eAAlE,EAAmFC,YAAnF,EAAiGC,UAAjG,EAA6GC,eAA7G,QAAoI,sBAApI;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,aAAaR,UAAU,CAACS,MAAX,CAAkB;EAChDV,MAAM,EAAE,aAAaA,MAAM,CAACW,SAAP,CAAiB;IAClCC,KAAK,EAAE,CACH,aAAaV,cAAc,CAACW,GAAf,CAAmB;MAC5BC,WAAW,EAAE,aAAaX,eAAe,CAAC;QAAEY,MAAM,EAAE;MAAV,CAAD,CADb;MAE5BC,YAAY,EAAE,aAAab,eAAe,CAAC;QAAEY,MAAM,EAAE;MAAV,CAAD,CAFd;MAG5BE,gBAAgB,EAAEb,UAHU;MAI5Bc,WAAW,EAAEC,OAAO,IAAI;QACpB,IAAIC,KAAK,GAAGD,OAAO,CAACE,SAApB;QAAA,IAA+BC,MAAM,GAAG,SAASC,IAAT,CAAcH,KAAd,CAAxC;QAAA,IAA8DI,MAAM,GAAG,uBAAuBD,IAAvB,CAA4BH,KAA5B,CAAvE;QACA,OAAOD,OAAO,CAACM,UAAR,GAAqB,CAACH,MAAM,GAAG,CAAH,GAAOE,MAAM,GAAG,CAAH,GAAO,CAA3B,IAAgCL,OAAO,CAACO,IAApE;MACH,CAP2B;MAQ5BC,KAAK,EAAE,aAAatB,eAAe,CAAC;QAAEuB,OAAO,EAAE;MAAX,CAAD,CARP;MAS5BC,YAAY,EAAE,MAAM,CAAC,CATO;MAU5BC,SAAS,EAAE,aAAa3B,eAAe,CAAC;QAAEY,MAAM,EAAE;MAAV,CAAD;IAVX,CAAnB,CADV,EAaH,aAAaT,YAAY,CAACO,GAAb,CAAiB;MAC1B,CAAC,kFACG,gDADJ,GACuDN,UAF7B;;MAG1BsB,YAAY,CAACE,IAAD,EAAO;QAAE,OAAO;UAAEC,IAAI,EAAED,IAAI,CAACC,IAAL,GAAY,CAApB;UAAuBC,EAAE,EAAEF,IAAI,CAACE,EAAL,GAAU;QAArC,CAAP;MAAkD;;IAH7C,CAAjB,CAbV;EAD2B,CAAjB,CAD2B;EAsBhDC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAR;QAAcC,KAAK,EAAE;MAArB;IAArB,CADL;IAEVC,aAAa,EAAE;EAFL;AAtBkC,CAAlB,CAAlC;AA2BA;AACA;AACA;;AACA,SAASC,IAAT,GAAgB;EACZ,OAAO,IAAIjC,eAAJ,CAAoBC,YAApB,CAAP;AACH;;AAED,SAASgC,IAAT,EAAehC,YAAf"},"metadata":{},"sourceType":"module"}