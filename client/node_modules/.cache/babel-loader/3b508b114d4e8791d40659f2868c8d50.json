{"ast":null,"code":"/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Quote} Quote\n */\nimport { html, svg } from 'property-information';\nimport { htmlVoidElements } from 'html-void-elements';\nimport { omission } from './omission/index.js';\nimport { one } from './tree.js';\n/**\n * @param {Node|Array.<Node>} node\n * @param {Options} [options]\n * @returns {string}\n */\n\nexport function toHtml(node) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const quote = options.quote || '\"';\n  /** @type {Quote} */\n\n  const alternative = quote === '\"' ? \"'\" : '\"';\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`');\n  }\n  /** @type {Context} */\n\n\n  const context = {\n    valid: options.allowParseErrors ? 0 : 1,\n    safe: options.allowDangerousCharacters ? 0 : 1,\n    schema: options.space === 'svg' ? svg : html,\n    omit: options.omitOptionalTags ? omission : undefined,\n    quote,\n    alternative,\n    smart: options.quoteSmart,\n    unquoted: options.preferUnquoted,\n    tight: options.tightAttributes,\n    upperDoctype: options.upperDoctype,\n    tightDoctype: options.tightDoctype,\n    bogusComments: options.bogusComments,\n    tightLists: options.tightCommaSeparatedLists,\n    tightClose: options.tightSelfClosing,\n    collapseEmpty: options.collapseEmptyAttributes,\n    dangerous: options.allowDangerousHtml,\n    voids: options.voids || htmlVoidElements.concat(),\n    entities: options.entities || {},\n    close: options.closeSelfClosing,\n    closeEmpty: options.closeEmptyElements\n  };\n  return one(context, // @ts-ignore Assume `node` does not contain a root.\n  Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node, null, null);\n}","map":{"version":3,"names":["html","svg","htmlVoidElements","omission","one","toHtml","node","options","quote","alternative","Error","context","valid","allowParseErrors","safe","allowDangerousCharacters","schema","space","omit","omitOptionalTags","undefined","smart","quoteSmart","unquoted","preferUnquoted","tight","tightAttributes","upperDoctype","tightDoctype","bogusComments","tightLists","tightCommaSeparatedLists","tightClose","tightSelfClosing","collapseEmpty","collapseEmptyAttributes","dangerous","allowDangerousHtml","voids","concat","entities","close","closeSelfClosing","closeEmpty","closeEmptyElements","Array","isArray","type","children"],"sources":["C:/Users/apinto2/Desktop/teswordtomd/12 setembro/UPLOAD 9/turorials/client/node_modules/hast-util-to-html/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Quote} Quote\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {omission} from './omission/index.js'\nimport {one} from './tree.js'\n\n/**\n * @param {Node|Array.<Node>} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toHtml(node, options = {}) {\n  const quote = options.quote || '\"'\n  /** @type {Quote} */\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {Context} */\n  const context = {\n    valid: options.allowParseErrors ? 0 : 1,\n    safe: options.allowDangerousCharacters ? 0 : 1,\n    schema: options.space === 'svg' ? svg : html,\n    omit: options.omitOptionalTags ? omission : undefined,\n    quote,\n    alternative,\n    smart: options.quoteSmart,\n    unquoted: options.preferUnquoted,\n    tight: options.tightAttributes,\n    upperDoctype: options.upperDoctype,\n    tightDoctype: options.tightDoctype,\n    bogusComments: options.bogusComments,\n    tightLists: options.tightCommaSeparatedLists,\n    tightClose: options.tightSelfClosing,\n    collapseEmpty: options.collapseEmptyAttributes,\n    dangerous: options.allowDangerousHtml,\n    voids: options.voids || htmlVoidElements.concat(),\n    entities: options.entities || {},\n    close: options.closeSelfClosing,\n    closeEmpty: options.closeEmptyElements\n  }\n\n  return one(\n    context,\n    // @ts-ignore Assume `node` does not contain a root.\n    Array.isArray(node) ? {type: 'root', children: node} : node,\n    null,\n    null\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,IAAR,EAAcC,GAAd,QAAwB,sBAAxB;AACA,SAAQC,gBAAR,QAA+B,oBAA/B;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAAQC,GAAR,QAAkB,WAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAoC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACzC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAR,IAAiB,GAA/B;EACA;;EACA,MAAMC,WAAW,GAAGD,KAAK,KAAK,GAAV,GAAgB,GAAhB,GAAsB,GAA1C;;EAEA,IAAIA,KAAK,KAAK,GAAV,IAAiBA,KAAK,KAAK,GAA/B,EAAoC;IAClC,MAAM,IAAIE,KAAJ,CAAU,oBAAoBF,KAApB,GAA4B,yBAAtC,CAAN;EACD;EAED;;;EACA,MAAMG,OAAO,GAAG;IACdC,KAAK,EAAEL,OAAO,CAACM,gBAAR,GAA2B,CAA3B,GAA+B,CADxB;IAEdC,IAAI,EAAEP,OAAO,CAACQ,wBAAR,GAAmC,CAAnC,GAAuC,CAF/B;IAGdC,MAAM,EAAET,OAAO,CAACU,KAAR,KAAkB,KAAlB,GAA0BhB,GAA1B,GAAgCD,IAH1B;IAIdkB,IAAI,EAAEX,OAAO,CAACY,gBAAR,GAA2BhB,QAA3B,GAAsCiB,SAJ9B;IAKdZ,KALc;IAMdC,WANc;IAOdY,KAAK,EAAEd,OAAO,CAACe,UAPD;IAQdC,QAAQ,EAAEhB,OAAO,CAACiB,cARJ;IASdC,KAAK,EAAElB,OAAO,CAACmB,eATD;IAUdC,YAAY,EAAEpB,OAAO,CAACoB,YAVR;IAWdC,YAAY,EAAErB,OAAO,CAACqB,YAXR;IAYdC,aAAa,EAAEtB,OAAO,CAACsB,aAZT;IAadC,UAAU,EAAEvB,OAAO,CAACwB,wBAbN;IAcdC,UAAU,EAAEzB,OAAO,CAAC0B,gBAdN;IAedC,aAAa,EAAE3B,OAAO,CAAC4B,uBAfT;IAgBdC,SAAS,EAAE7B,OAAO,CAAC8B,kBAhBL;IAiBdC,KAAK,EAAE/B,OAAO,CAAC+B,KAAR,IAAiBpC,gBAAgB,CAACqC,MAAjB,EAjBV;IAkBdC,QAAQ,EAAEjC,OAAO,CAACiC,QAAR,IAAoB,EAlBhB;IAmBdC,KAAK,EAAElC,OAAO,CAACmC,gBAnBD;IAoBdC,UAAU,EAAEpC,OAAO,CAACqC;EApBN,CAAhB;EAuBA,OAAOxC,GAAG,CACRO,OADQ,EAER;EACAkC,KAAK,CAACC,OAAN,CAAcxC,IAAd,IAAsB;IAACyC,IAAI,EAAE,MAAP;IAAeC,QAAQ,EAAE1C;EAAzB,CAAtB,GAAuDA,IAH/C,EAIR,IAJQ,EAKR,IALQ,CAAV;AAOD"},"metadata":{},"sourceType":"module"}